Book Author,Book Name,Book URL,Chapter Name,Chapter Number,Page,Paragraph,Text,Topic
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,1,1,"The problem of searching for patterns in data is a fundamental one and has a long and successful history. For instance, the extensive astronomical observations of Tycho Brahe in the 16th century allowed Johannes Kepler to discover the empirical laws of planetary motion, which in turn provided a springboard for the development of clas- sical mechanics. Similarly, the discovery of regularities in atomic spectra played a key role in the development and veriﬁcation of quantum physics in the early twenti- eth century. The ﬁeld of pattern recognition is concerned with the automatic discov- ery of regularities in data through the use of computer algorithms and with the use of these regularities to take actions such as classifying the data into different categories.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,1,2,"Consider the example of recognizing handwritten digits, illustrated in Figure 1.1. Each digit corresponds to a 28×28 pixel image and so can be represented by a vector x comprising 784 real numbers. The goal is to build a machine that will take such a vector x as input and that will produce the identity of the digit 0, . . . , 9 as the output.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,2,3,Figure 1.1 Examples of hand-written dig- its taken from US zip codes.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,2,4,"This is a nontrivial problem due to the wide variability of handwriting. It could be \end{verbatim} egin{verbatim} tackled using handcrafted rules or heuristics for distinguishing the digits based on the shapes of the strokes, but in practice such an approach leads to a proliferation of rules and of exceptions to the rules and so on, and invariably gives poor results.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,2,5,"Far better results can be obtained by adopting a machine learning approach in which a large set of N digits {x1, . . . , xN} called a training set is used to tune the parameters of an adaptive model. The categories of the digits in the training set are known in advance, typically by inspecting them individually and hand-labelling them. We can express the category of a digit using target vector t, which represents the identity of the corresponding digit. Suitable techniques for representing cate- gories in terms of vectors will be discussed later. Note that there is one such target vector t for each digit image x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,2,6,"The result of running the machine learning algorithm can be expressed as a function y(x) which takes a new digit image x as input and that generates an output vector y, encoded in the same way as the target vectors. The precise form of the function y(x) is determined during the training phase, also known as the learning phase, on the basis of the training data. Once the model is trained it can then de- termine the identity of new digit images, which are said to comprise a test set. The ability to categorize correctly new examples that differ from those used for train- ing is known as generalization. In practical applications, the variability of the input vectors will be such that the training data can comprise only a tiny fraction of all possible input vectors, and so generalization is a central goal in pattern recognition.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,2,7,"For most practical applications, the original input variables are typically prepro- cessed to transform them into some new space of variables where, it is hoped, the pattern recognition problem will be easier to solve. For instance, in the digit recogni- tion problem, the images of the digits are typically translated and scaled so that each digit is contained within a box of a ﬁxed size. This greatly reduces the variability within each digit class, because the location and scale of all the digits are now the same, which makes it much easier for a subsequent pattern recognition algorithm to distinguish between the different classes. This pre-processing stage is sometimes also called feature extraction. Note that new test data must be pre-processed using the same steps as the training data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,3,8,"Pre-processing might also be performed in order to speed up computation. For example, if the goal is real-time face detection in a high-resolution video stream, the computer must handle huge numbers of pixels per second, and presenting these directly to a complex pattern recognition algorithm may be computationally infeasi- ble. Instead, the aim is to ﬁnd useful features that are fast to compute, and yet that \end{verbatim} egin{verbatim} also preserve useful discriminatory information enabling faces to be distinguished from non-faces. These features are then used as the inputs to the pattern recognition algorithm. For instance, the average value of the image intensity over a rectangular subregion can be evaluated extremely efﬁciently (Viola and Jones, 2004), and a set of such features can prove very effective in fast face detection. Because the number of such features is smaller than the number of pixels, this kind of pre-processing repre- sents a form of dimensionality reduction. Care must be taken during pre-processing because often information is discarded, and if this information is important to the solution of the problem then the overall accuracy of the system can suffer.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,3,9,"Applications in which the training data comprises examples of the input vectors along with their corresponding target vectors are known as supervised learning prob- lems. Cases such as the digit recognition example, in which the aim is to assign each input vector to one of a ﬁnite number of discrete categories, are called classiﬁcation problems. If the desired output consists of one or more continuous variables, then the task is called regression. An example of a regression problem would be the pre- diction of the yield in a chemical manufacturing process in which the inputs consist of the concentrations of reactants, the temperature, and the pressure.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,3,10,"In other pattern recognition problems, the training data consists of a set of input vectors x without any corresponding target values. The goal in such unsupervised learning problems may be to discover groups of similar examples within the data, where it is called clustering, or to determine the distribution of data within the input space, known as density estimation, or to project the data from a high-dimensional space down to two or three dimensions for the purpose of visualization.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,4,11,"Figure 1.2 Plot of a training data set of N = 10 points, shown as blue circles, each comprising an observation of the input variable x along with the corresponding target variable t.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,4,12,"Finally, the technique of reinforcement learning (Sutton and Barto, 1998) is con- cerned with the problem of ﬁnding suitable actions to take in a given situation in order to maximize a reward. Here the learning algorithm is not given examples of optimal outputs, in contrast to supervised learning, but must instead discover them by a process of trial and error. Typically there is a sequence of states and actions in which the learning algorithm is interacting with its environment. In many cases, the current action not only affects the immediate reward but also has an impact on the re- ward at all subsequent time steps. For example, by using appropriate reinforcement learning techniques a neural network can learn to play the game of backgammon to a high standard (Tesauro, 1994). Here the network must learn to take a board position as input, along with the result of a dice throw, and produce a strong move as the output. This is done by having the network play against a copy of itself for perhaps a million games. A major challenge is that a game of backgammon can involve dozens of moves, and yet it is only at the end of the game that the reward, in the form of victory, is achieved. The reward must then be attributed appropriately to all of the moves that led to it, even though some moves will have been good ones and others less so. This is an example of a credit assignment problem. A general feature of re- inforcement learning is the trade-off between exploration, in which the system tries out new kinds of actions to see how effective they are, and exploitation, in which the system makes use of actions that are known to yield a high reward. Too strong a focus on either exploration or exploitation will yield poor results. Reinforcement learning continues to be an active area of machine learning research. However, a \end{verbatim} egin{verbatim} The green curve shows the function sin(2πx) used to gener- ate the data. Our goal is to pre- dict the value of t for some new value of x, without knowledge of the green curve.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,4,13,"detailed treatment lies beyond the scope of this book. Although each of these tasks needs its own tools and techniques, many of the key ideas that underpin them are common to all such problems. One of the main goals of this chapter is to introduce, in a relatively informal way, several of the most important of these concepts and to illustrate them using simple examples. Later in the book we shall see these same ideas re-emerge in the context of more sophisti- cated models that are applicable to real-world pattern recognition applications. This chapter also provides a self-contained introduction to three important tools that will be used throughout the book, namely probability theory, decision theory, and infor- mation theory. Although these might sound like daunting topics, they are in fact straightforward, and a clear understanding of them is essential if machine learning techniques are to be used to best effect in practical applications.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,4,14,"We begin by introducing a simple regression problem, which we shall use as a run- ning example throughout this chapter to motivate a number of key concepts. Sup- pose we observe a real-valued input variable x and we wish to use this observation to predict the value of a real-valued target variable t. For the present purposes, it is in- structive to consider an artiﬁcial example using synthetically generated data because we then know the precise process that generated the data for comparison against any learned model. The data for this example is generated from the function sin(2πx) with random noise included in the target values, as described in detail in Appendix A.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,5,15,"Now suppose that we are given a training set comprising N observations of x, written x ≡(x1, . . . , xN)T, together with corresponding observations of the values of t, denoted t ≡(t1, . . . , tN)T. Figure 1.2 shows a plot of a training set comprising N = 10 data points. The input data set x in Figure 1.2 was generated by choos- ing values of xn, for n = 1, . . . , N, spaced uniformly in range [0, 1], and the target data set t was obtained by ﬁrst computing the corresponding values of the function \end{verbatim} egin{verbatim} sin(2πx) and then adding a small level of random noise having a Gaussian distri- bution (the Gaussian distribution is discussed in Section 1.2.4) to each such point in order to obtain the corresponding value tn. By generating data in this way, we are capturing a property of many real data sets, namely that they possess an underlying regularity, which we wish to learn, but that individual observations are corrupted by random noise. This noise might arise from intrinsically stochastic (i.e. random) pro- cesses such as radioactive decay but more typically is due to there being sources of variability that are themselves unobserved.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,5,16,"Our goal is to exploit this training set in order to make predictions of the value t of the target variable for some new value x of the input variable. As we shall see later, this involves implicitly trying to discover the underlying function sin(2πx).",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,5,17,"This is intrinsically a difﬁcult problem as we have to generalize from a ﬁnite data set. Furthermore the observed data are corrupted with noise, and so for a given x there is uncertainty as to the appropriate value for t. Probability theory, discussed in Section 1.2, provides a framework for expressing such uncertainty in a precise and quantitative manner, and decision theory, discussed in Section 1.5, allows us to exploit this probabilistic representation in order to make predictions that are optimal according to appropriate criteria.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,5,18,"For the moment, however, we shall proceed rather informally and consider a simple approach based on curve ﬁtting. In particular, we shall ﬁt the data using a polynomial function of the form y(x, w) = w0 + w1x + w2x2 + . . . + wMxM = M  j=0 wjxj (1.1) where M is the order of the polynomial, and xj denotes x raised to the power of j.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,5,19,"The polynomial coefﬁcients w0, . . . , wM are collectively denoted by the vector w. Note that, although the polynomial function y(x, w) is a nonlinear function of x, it is a linear function of the coefﬁcients w. Functions, such as the polynomial, which are linear in the unknown parameters have important properties and are called linear models and will be discussed extensively in Chapters 3 and 4.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,20,"Figure 1.3 The error function (1.2) corre- sponds to (one half of) the sum of the squares of the displacements (shown by the vertical green bars) of each data point from the function y(x, w).",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,21,"The values of the coefﬁcients will be determined by ﬁtting the polynomial to the training data. This can be done by minimizing an error function that measures the misﬁt between the function y(x, w), for any given value of w, and the training set data points. One simple choice of error function, which is widely used, is given by the sum of the squares of the errors between the predictions y(xn, w) for each data point xn and the corresponding target values tn, so that we minimize E(w) = 1 2 N  n=1 {y(xn, w) −tn}2 (1.2) where the factor of 1/2 is included for later convenience. We shall discuss the mo- tivation for this choice of error function later in this chapter. For the moment we simply note that it is a nonnegative quantity that would be zero if, and only if, the \end{verbatim} egin{verbatim} t x y(xn, w) tn xn function y(x, w) were to pass exactly through each training data point. The geomet- rical interpretation of the sum-of-squares error function is illustrated in Figure 1.3.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,22,"We can solve the curve ﬁtting problem by choosing the value of w for which E(w) is as small as possible. Because the error function is a quadratic function of the coefﬁcients w, its derivatives with respect to the coefﬁcients will be linear in the elements of w, and so the minimization of the error function has a unique solution, denoted by w⋆, which can be found in closed form. The resulting polynomial is given by the function y(x, w⋆).",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,23,"There remains the problem of choosing the order M of the polynomial, and as we shall see this will turn out to be an example of an important concept called model comparison or model selection. In Figure 1.4, we show four examples of the results of ﬁtting polynomials having orders M = 0, 1, 3, and 9 to the data set shown in Figure 1.2.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,24,"We notice that the constant (M = 0) and ﬁrst order (M = 1) polynomials give rather poor ﬁts to the data and consequently rather poor representations of the function sin(2πx). The third order (M = 3) polynomial seems to give the best ﬁt to the function sin(2πx) of the examples shown in Figure 1.4. When we go to a much higher order polynomial (M = 9), we obtain an excellent ﬁt to the training data. In fact, the polynomial passes exactly through each data point and E(w⋆) = 0.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,6,25,"However, the ﬁtted curve oscillates wildly and gives a very poor representation of the function sin(2πx). This latter behaviour is known as over-ﬁtting.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,7,26,"Figure 1.4 Plots of polynomials having various orders M, shown as red curves, ﬁtted to the data set shown in Figure 1.2.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,7,27,"As we have noted earlier, the goal is to achieve good generalization by making accurate predictions for new data. We can obtain some quantitative insight into the dependence of the generalization performance on M by considering a separate test set comprising 100 data points generated using exactly the same procedure used to generate the training set points but with new choices for the random noise values included in the target values. For each choice of M, we can then evaluate the residual value of E(w⋆) given by (1.2) for the training data, and we can also evaluate E(w⋆) for the test data set. It is sometimes more convenient to use the root-mean-square \end{verbatim} egin{verbatim} x t M = 0 0 1 −1 0 1 x t M = 1 0 1 −1 0 1 x t M = 3 0 1 −1 0 1 x t M = 9 0 1 −1 0 1 (RMS) error deﬁned by ERMS =  2E(w⋆)/N (1.3) in which the division by N allows us to compare different sizes of data sets on an equal footing, and the square root ensures that ERMS is measured on the same scale (and in the same units) as the target variable t. Graphs of the training and test set RMS errors are shown, for various values of M, in Figure 1.5. The test set error is a measure of how well we are doing in predicting the values of t for new data observations of x. We note from Figure 1.5 that small values of M give relatively large values of the test set error, and this can be attributed to the fact that the corresponding polynomials are rather inﬂexible and are incapable of capturing the oscillations in the function sin(2πx). Values of M in the range 3 ⩽M ⩽8 give small values for the test set error, and these also give reasonable representations of the generating function sin(2πx), as can be seen, for the case of M = 3, from Figure 1.4.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,28,"Figure 1.5 Graphs of the root-mean-square error, deﬁned by (1.3), evaluated on the training set and on an inde- pendent test set for various values of M.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,29,Table 1.1 Table of the coefﬁcients w⋆for polynomials of various order.,Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,30,"For M = 9, the training set error goes to zero, as we might expect because this polynomial contains 10 degrees of freedom corresponding to the 10 coefﬁcients w0, . . . , w9, and so can be tuned exactly to the 10 data points in the training set.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,31,"However, the test set error has become very large and, as we saw in Figure 1.4, the corresponding function y(x, w⋆) exhibits wild oscillations.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,32,"This may seem paradoxical because a polynomial of given order contains all lower order polynomials as special cases. The M = 9 polynomial is therefore capa- ble of generating results at least as good as the M = 3 polynomial. Furthermore, we might suppose that the best predictor of new data would be the function sin(2πx) from which the data was generated (and we shall see later that this is indeed the case). We know that a power series expansion of the function sin(2πx) contains terms of all orders, so we might expect that results should improve monotonically as we increase M.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,33,"We can gain some insight into the problem by examining the values of the co- efﬁcients w⋆obtained from polynomials of various order, as shown in Table 1.1.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,8,34,"We see that, as M increases, the magnitude of the coefﬁcients typically gets larger. In particular for the M = 9 polynomial, the coefﬁcients have become ﬁnely tuned to the data by developing large positive and negative values so that the correspond- Observe how the typical mag- nitude of the coefﬁcients in- creases dramatically as the or- der of the polynomial increases.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,9,35,Figure 1.6 Plots of the solutions obtained by minimizing the sum-of-squares error function using the M = 9 polynomial for N = 15 data points (left plot) and N = 100 data points (right plot). We see that increasing the size of the data set reduces the over-ﬁtting problem.,Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,9,36,"ing polynomial function matches each of the data points exactly, but between data points (particularly near the ends of the range) the function exhibits the large oscilla- tions observed in Figure 1.4. Intuitively, what is happening is that the more ﬂexible polynomials with larger values of M are becoming increasingly tuned to the random noise on the target values.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,9,37,"It is also interesting to examine the behaviour of a given model as the size of the data set is varied, as shown in Figure 1.6. We see that, for a given model complexity, the over-ﬁtting problem become less severe as the size of the data set increases.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,9,38,"Another way to say this is that the larger the data set, the more complex (in other words more ﬂexible) the model that we can afford to ﬁt to the data. One rough heuristic that is sometimes advocated is that the number of data points should be no less than some multiple (say 5 or 10) of the number of adaptive parameters in the model. However, as we shall see in Chapter 3, the number of parameters is not necessarily the most appropriate measure of model complexity.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,9,39,"Also, there is something rather unsatisfying about having to limit the number of parameters in a model according to the size of the available training set. It would seem more reasonable to choose the complexity of the model according to the com- plexity of the problem being solved. We shall see that the least squares approach to ﬁnding the model parameters represents a speciﬁc case of maximum likelihood (discussed in Section 1.2.5), and that the over-ﬁtting problem can be understood as a general property of maximum likelihood. By adopting a Bayesian approach, the over-ﬁtting problem can be avoided. We shall see that there is no difﬁculty from a Bayesian perspective in employing models for which the number of parameters greatly exceeds the number of data points. Indeed, in a Bayesian model the effective number of parameters adapts automatically to the size of the data set.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,10,40,"Figure 1.7 Plots of M = 9 polynomials ﬁtted to the data set shown in Figure 1.2 using the regularized error function (1.4) for two values of the regularization parameter λ corresponding to ln λ = −18 and ln λ = 0. The case of no regularizer, i.e., λ = 0, corresponding to ln λ = −∞, is shown at the bottom right of Figure 1.4.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,10,41,"For the moment, however, it is instructive to continue with the current approach and to consider how in practice we can apply it to data sets of limited size where we \end{verbatim} egin{verbatim} x t ln λ = −18 0 1 −1 0 1 x t ln λ = 0 0 1 −1 0 1 may wish to use relatively complex and ﬂexible models. One technique that is often used to control the over-ﬁtting phenomenon in such cases is that of regularization, which involves adding a penalty term to the error function (1.2) in order to discourage the coefﬁcients from reaching large values. The simplest such penalty term takes the form of a sum of squares of all of the coefﬁcients, leading to a modiﬁed error function of the form E(w) = 1 2 N  n=1 {y(xn, w) −tn}2 + λ 2 ∥w∥2 (1.4) where ∥w∥2 ≡wTw = w2 0 + w2 1 + . . . + w2 M, and the coefﬁcient λ governs the rel- ative importance of the regularization term compared with the sum-of-squares error term. Note that often the coefﬁcient w0 is omitted from the regularizer because its inclusion causes the results to depend on the choice of origin for the target variable (Hastie et al., 2001), or it may be included but with its own regularization coefﬁcient (we shall discuss this topic in more detail in Section 5.5.1). Again, the error function in (1.4) can be minimized exactly in closed form. Techniques such as this are known in the statistics literature as shrinkage methods because they reduce the value of the coefﬁcients. The particular case of a quadratic regularizer is called ridge regres- sion (Hoerl and Kennard, 1970). In the context of neural networks, this approach is known as weight decay.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,10,42,Figure 1.7 shows the results of ﬁtting the polynomial of order M = 9 to the same data set as before but now using the regularized error function given by (1.4).,Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,11,43,"Table 1.2 Table of the coefﬁcients w⋆for M = 9 polynomials with various values for the regularization parameter λ. Note that ln λ = −∞corresponds to a model with no regularization, i.e., to the graph at the bottom right in Fig- ure 1.4. We see that, as the value of λ increases, the typical magnitude of the coefﬁcients gets smaller.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,11,44,Figure 1.8 Graph of the root-mean-square er- ror (1.3) versus ln λ for the M = 9 polynomial.,Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,11,45,"We see that, for a value of ln λ = −18, the over-ﬁtting has been suppressed and we now obtain a much closer representation of the underlying function sin(2πx). If, however, we use too large a value for λ then we again obtain a poor ﬁt, as shown in Figure 1.7 for ln λ = 0. The corresponding coefﬁcients from the ﬁtted polynomials are given in Table 1.2, showing that regularization has the desired effect of reducing \end{verbatim} egin{verbatim} ln λ = −∞ ln λ = −18 ln λ = 0 w⋆ 0 0.35 0.35 0.13 w⋆ 1 232.37 4.74 -0.05 w⋆ 2 -5321.83 -0.77 -0.06 w⋆ 3 48568.31 -31.97 -0.05 w⋆ 4 -231639.30 -3.89 -0.03 w⋆ 5 640042.26 55.28 -0.02 w⋆ 6 -1061800.52 41.32 -0.01 w⋆ 7 1042400.18 -45.95 -0.00 w⋆ 8 -557682.99 -91.53 0.00 w⋆ 9 125201.43 72.68 0.01 the magnitude of the coefﬁcients.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,11,46,"The impact of the regularization term on the generalization error can be seen by plotting the value of the RMS error (1.3) for both training and test sets against ln λ, as shown in Figure 1.8. We see that in effect λ now controls the effective complexity of the model and hence determines the degree of over-ﬁtting.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,11,47,"The issue of model complexity is an important one and will be discussed at length in Section 1.3. Here we simply note that, if we were trying to solve a practical application using this approach of minimizing an error function, we would have to ﬁnd a way to determine a suitable value for the model complexity. The results above suggest a simple way of achieving this, namely by taking the available data and partitioning it into a training set, used to determine the coefﬁcients w, and a separate validation set, also called a hold-out set, used to optimize the model complexity (either M or λ). In many cases, however, this will prove to be too wasteful of valuable training data, and we have to seek more sophisticated approaches.",Example: Polynomial Curve Fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,48,Figure 1.9 We use a simple example of two coloured boxes each containing fruit (apples shown in green and or- anges shown in orange) to intro- duce the basic ideas of probability.,Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,49,"So far our discussion of polynomial curve ﬁtting has appealed largely to in- tuition. We now seek a more principled approach to solving problems in pattern recognition by turning to a discussion of probability theory. As well as providing the foundation for nearly all of the subsequent developments in this book, it will also ERMS ln λ −35 −30 −25 −20 0 0.5 1 Training Test \end{verbatim} egin{verbatim} give us some important insights into the concepts we have introduced in the con- text of polynomial curve ﬁtting and will allow us to extend these to more complex situations.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,50,"A key concept in the ﬁeld of pattern recognition is that of uncertainty. It arises both through noise on measurements, as well as through the ﬁnite size of data sets. Prob- ability theory provides a consistent framework for the quantiﬁcation and manipula- tion of uncertainty and forms one of the central foundations for pattern recognition.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,51,"When combined with decision theory, discussed in Section 1.5, it allows us to make optimal predictions given all the information available to us, even though that infor- mation may be incomplete or ambiguous.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,52,"We will introduce the basic concepts of probability theory by considering a sim- ple example. Imagine we have two boxes, one red and one blue, and in the red box we have 2 apples and 6 oranges, and in the blue box we have 3 apples and 1 orange.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,53,"This is illustrated in Figure 1.9. Now suppose we randomly pick one of the boxes and from that box we randomly select an item of fruit, and having observed which sort of fruit it is we replace it in the box from which it came. We could imagine repeating this process many times. Let us suppose that in so doing we pick the red box 40% of the time and we pick the blue box 60% of the time, and that when we remove an item of fruit from a box we are equally likely to select any of the pieces of fruit in the box.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,12,54,"In this example, the identity of the box that will be chosen is a random variable, which we shall denote by B. This random variable can take one of two possible values, namely r (corresponding to the red box) or b (corresponding to the blue box). Similarly, the identity of the fruit is also a random variable and will be denoted by F. It can take either of the values a (for apple) or o (for orange).",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,55,"Figure 1.10 We can derive the sum and product rules of probability by considering two random variables, X, which takes the values {xi} where i = 1, . . . , M, and Y , which takes the values {yj} where j = 1, . . . , L.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,56,"To begin with, we shall deﬁne the probability of an event to be the fraction of times that event occurs out of the total number of trials, in the limit that the total number of trials goes to inﬁnity. Thus the probability of selecting the red box is 4/10 \end{verbatim} egin{verbatim} In this illustration we have M = 5 and L = 3. If we consider a total number N of instances of these variables, then we denote the number of instances where X = xi and Y = yj by nij, which is the number of points in the corresponding cell of the array. The number of points in column i, corresponding to X = xi, is denoted by ci, and the number of points in row j, corresponding to Y = yj, is denoted by rj.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,57,"and the probability of selecting the blue box is 6/10. We write these probabilities as p(B = r) = 4/10 and p(B = b) = 6/10. Note that, by deﬁnition, probabilities must lie in the interval [0, 1]. Also, if the events are mutually exclusive and if they include all possible outcomes (for instance, in this example the box must be either red or blue), then we see that the probabilities for those events must sum to one.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,58,"We can now ask questions such as: “what is the overall probability that the se- lection procedure will pick an apple?”, or “given that we have chosen an orange, what is the probability that the box we chose was the blue one?”. We can answer questions such as these, and indeed much more complex questions associated with problems in pattern recognition, once we have equipped ourselves with the two el- ementary rules of probability, known as the sum rule and the product rule. Having obtained these rules, we shall then return to our boxes of fruit example.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,59,"In order to derive the rules of probability, consider the slightly more general ex- ample shown in Figure 1.10 involving two random variables X and Y (which could for instance be the Box and Fruit variables considered above). We shall suppose that X can take any of the values xi where i = 1, . . . , M, and Y can take the values yj where j = 1, . . . , L. Consider a total of N trials in which we sample both of the variables X and Y , and let the number of such trials in which X = xi and Y = yj be nij. Also, let the number of trials in which X takes the value xi (irrespective of the value that Y takes) be denoted by ci, and similarly let the number of trials in which Y takes the value yj be denoted by rj.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,60,"The probability that X will take the value xi and Y will take the value yj is written p(X = xi, Y = yj) and is called the joint probability of X = xi and Y = yj. It is given by the number of points falling in the cell i,j as a fraction of the total number of points, and hence p(X = xi, Y = yj) = nij N .",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,13,61,"Here we are implicitly considering the limit N →∞. Similarly, the probability that X takes the value xi irrespective of the value of Y is written as p(X = xi) and is given by the fraction of the total number of points that fall in column i, so that p(X = xi) = ci N .",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,14,62,"Because the number of instances in column i in Figure 1.10 is just the sum of the number of instances in each cell of that column, we have ci =  j nij and therefore, \end{verbatim} egin{verbatim} from (1.5) and (1.6), we have p(X = xi) = L  j=1 p(X = xi, Y = yj) (1.7) which is the sum rule of probability. Note that p(X = xi) is sometimes called the marginal probability, because it is obtained by marginalizing, or summing out, the other variables (in this case Y ).",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,14,63,"If we consider only those instances for which X = xi, then the fraction of such instances for which Y = yj is written p(Y = yj|X = xi) and is called the conditional probability of Y = yj given X = xi. It is obtained by ﬁnding the fraction of those points in column i that fall in cell i,j and hence is given by p(Y = yj|X = xi) = nij ci .",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,14,64,"From (1.5), (1.6), and (1.8), we can then derive the following relationship p(X = xi, Y = yj) = nij N = nij ci · ci N = p(Y = yj|X = xi)p(X = xi) (1.9) which is the product rule of probability.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,14,65,"So far we have been quite careful to make a distinction between a random vari- able, such as the box B in the fruit example, and the values that the random variable can take, for example r if the box were the red one. Thus the probability that B takes the value r is denoted p(B = r). Although this helps to avoid ambiguity, it leads to a rather cumbersome notation, and in many cases there will be no need for such pedantry. Instead, we may simply write p(B) to denote a distribution over the ran- dom variable B, or p(r) to denote the distribution evaluated for the particular value r, provided that the interpretation is clear from the context.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,14,66,"With this more compact notation, we can write the two fundamental rules of probability theory in the following form.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,67,"p(X, Y ) = p(Y |X)p(X). (1.11) Here p(X, Y ) is a joint probability and is verbalized as “the probability of X and Y ”. Similarly, the quantity p(Y |X) is a conditional probability and is verbalized as “the probability of Y given X”, whereas the quantity p(X) is a marginal probability \end{verbatim} egin{verbatim} and is simply “the probability of X”. These two simple rules form the basis for all of the probabilistic machinery that we use throughout this book.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,68,"From the product rule, together with the symmetry property p(X, Y ) = p(Y, X), we immediately obtain the following relationship between conditional probabilities p(Y |X) = p(X|Y )p(Y ) p(X) (1.12) which is called Bayes’ theorem and which plays a central role in pattern recognition and machine learning. Using the sum rule, the denominator in Bayes’ theorem can be expressed in terms of the quantities appearing in the numerator p(X) =  Y p(X|Y )p(Y ).",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,69,We can view the denominator in Bayes’ theorem as being the normalization constant required to ensure that the sum of the conditional probability on the left-hand side of (1.12) over all values of Y equals one.,Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,70,"In Figure 1.11, we show a simple example involving a joint distribution over two variables to illustrate the concept of marginal and conditional distributions.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,71,"a ﬁnite sample of N = 60 data points has been drawn from the joint distribution and is shown in the top left. In the top right is a histogram of the fractions of data points having each of the two values of Y . From the deﬁnition of probability, these fractions would equal the corresponding probabilities p(Y ) in the limit N →∞. We can view the histogram as a simple way to model a probability distribution given only a ﬁnite number of points drawn from that distribution. Modelling distributions from data lies at the heart of statistical pattern recognition and will be explored in great detail in this book. The remaining two plots in Figure 1.11 show the corresponding histogram estimates of p(X) and p(X|Y = 1).",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,72,"Let us now return to our example involving boxes of fruit. For the moment, we shall once again be explicit about distinguishing between the random variables and their instantiations. We have seen that the probabilities of selecting either the red or the blue boxes are given by p(B = r) = 4/10 (1.14) p(B = b) = 6/10 (1.15) respectively. Note that these satisfy p(B = r) + p(B = b) = 1.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,15,73,"Now suppose that we pick a box at random, and it turns out to be the blue box. Then the probability of selecting an apple is just the fraction of apples in the blue box which is 3/4, and so p(F = a|B = b) = 3/4. In fact, we can write out all four conditional probabilities for the type of fruit, given the selected box p(F = a|B = r) = 1/4 (1.16) p(F = o|B = r) = 3/4 (1.17) p(F = a|B = b) = 3/4 (1.18) p(F = o|B = b) = 1/4.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,16,74,"Figure 1.11 An illustration of a distribution over two variables, X, which takes 9 possible values, and Y , which takes two possible values. The top left ﬁgure shows a sample of 60 points drawn from a joint probability distri- bution over these variables. The remaining ﬁgures show histogram estimates of the marginal distributions p(X) and p(Y ), as well as the conditional distribution p(X|Y = 1) corresponding to the bottom row in the top left ﬁgure.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,16,75,"Again, note that these probabilities are normalized so that p(F = a|B = r) + p(F = o|B = r) = 1 (1.20) and similarly p(F = a|B = b) + p(F = o|B = b) = 1.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,16,76,"We can now use the sum and product rules of probability to evaluate the overall probability of choosing an apple p(F = a) = p(F = a|B = r)p(B = r) + p(F = a|B = b)p(B = b) = 1 4 × 4 10 + 3 4 × 6 10 = 11 20 (1.22) from which it follows, using the sum rule, that p(F = o) = 1 −11/20 = 9/20.",Probability Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,17,77,"Suppose instead we are told that a piece of fruit has been selected and it is an orange, and we would like to know which box it came from. This requires that we evaluate the probability distribution over boxes conditioned on the identity of the fruit, whereas the probabilities in (1.16)–(1.19) give the probability distribution over the fruit conditioned on the identity of the box. We can solve the problem of reversing the conditional probability by using Bayes’ theorem to give p(B = r|F = o) = p(F = o|B = r)p(B = r) p(F = o) = 3 4 × 4 10 × 20 9 = 2 3.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,17,78,"From the sum rule, it then follows that p(B = b|F = o) = 1 −2/3 = 1/3. We can provide an important interpretation of Bayes’ theorem as follows. If we had been asked which box had been chosen before being told the identity of the selected item of fruit, then the most complete information we have available is provided by the probability p(B). We call this the prior probability because it is the probability available before we observe the identity of the fruit. Once we are told that the fruit is an orange, we can then use Bayes’ theorem to compute the probability p(B|F), which we shall call the posterior probability because it is the probability obtained after we have observed F. Note that in this example, the prior probability of selecting the red box was 4/10, so that we were more likely to select the blue box than the red one. However, once we have observed that the piece of selected fruit is an orange, we ﬁnd that the posterior probability of the red box is now 2/3, so that it is now more likely that the box we selected was in fact the red one. This result accords with our intuition, as the proportion of oranges is much higher in the red box than it is in the blue box, and so the observation that the fruit was an orange provides signiﬁcant evidence favouring the red box. In fact, the evidence is sufﬁciently strong that it outweighs the prior and makes it more likely that the red box was chosen rather than the blue one.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,17,79,"Finally, we note that if the joint distribution of two variables factorizes into the product of the marginals, so that p(X, Y ) = p(X)p(Y ), then X and Y are said to be independent. From the product rule, we see that p(Y |X) = p(Y ), and so the conditional distribution of Y given X is indeed independent of the value of X. For instance, in our boxes of fruit example, if each box contained the same fraction of apples and oranges, then p(F|B) = P(F), so that the probability of selecting, say, an apple is independent of which box is chosen.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,17,80,"As well as considering probabilities deﬁned over discrete sets of events, we also wish to consider probabilities with respect to continuous variables. We shall limit ourselves to a relatively informal discussion. If the probability of a real-valued variable x falling in the interval (x, x + δx) is given by p(x)δx for δx →0, then p(x) is called the probability density over x. This is illustrated in Figure 1.12. The probability that x will lie in an interval (a, b) is then given by p(x ∈(a, b)) =  b a p(x) dx.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,81,"Figure 1.12 The concept of probability for discrete variables can be ex- tended to that of a probability density p(x) over a continuous variable x and is such that the probability of x lying in the inter- val (x, x+δx) is given by p(x)δx for δx →0.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,82,density can be expressed as the derivative of a cumulative distri- bution function P(x).,Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,83,"Because probabilities are nonnegative, and because the value of x must lie some- where on the real axis, the probability density p(x) must satisfy the two conditions p(x) ⩾ 0 (1.25)  ∞ −∞ p(x) dx = 1.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,84,"Under a nonlinear change of variable, a probability density transforms differently from a simple function, due to the Jacobian factor. For instance, if we consider a change of variables x = g(y), then a function f(x) becomes f(y) = f(g(y)).",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,85,"Now consider a probability density px(x) that corresponds to a density py(y) with respect to the new variable y, where the sufﬁces denote the fact that px(x) and py(y) are different densities. Observations falling in the range (x, x + δx) will, for small values of δx, be transformed into the range (y, y + δy) where px(x)δx ≃py(y)δy, and hence py(y) = px(x)  dx dy  = px(g(y)) |g′(y)| .",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,86,One consequence of this property is that the concept of the maximum of a probability density is dependent on the choice of variable.,Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,18,87,"The probability that x lies in the interval (−∞, z) is given by the cumulative distribution function deﬁned by P(z) =  z −∞ p(x) dx (1.28) which satisﬁes P ′(x) = p(x), as shown in Figure 1.12.",Probability densities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,19,88,"If we have several continuous variables x1, . . . , xD, denoted collectively by the vector x, then we can deﬁne a joint probability density p(x) = p(x1, . . . , xD) such \end{verbatim} egin{verbatim} that the probability of x falling in an inﬁnitesimal volume δx containing the point x is given by p(x)δx. This multivariate probability density must satisfy p(x) ⩾ 0 (1.29)  p(x) dx = 1 (1.30) in which the integral is taken over the whole of x space. We can also consider joint probability distributions over a combination of discrete and continuous variables.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,19,89,"Note that if x is a discrete variable, then p(x) is sometimes called a probability mass function because it can be regarded as a set of ‘probability masses’ concentrated at the allowed values of x.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,19,90,"The sum and product rules of probability, as well as Bayes’ theorem, apply equally to the case of probability densities, or to combinations of discrete and con- tinuous variables. For instance, if x and y are two real variables, then the sum and product rules take the form p(x) =  p(x, y) dy (1.31) p(x, y) = p(y|x)p(x).",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,19,91,"A formal justiﬁcation of the sum and product rules for continuous variables (Feller, 1966) requires a branch of mathematics called measure theory and lies outside the scope of this book. Its validity can be seen informally, however, by dividing each real variable into intervals of width ∆and considering the discrete probability dis- tribution over these intervals. Taking the limit ∆→0 then turns sums into integrals and gives the desired result.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,19,92,"One of the most important operations involving probabilities is that of ﬁnding weighted averages of functions. The average value of some function f(x) under a probability distribution p(x) is called the expectation of f(x) and will be denoted by E[f]. For a discrete distribution, it is given by E[f] =  x p(x)f(x) (1.33) so that the average is weighted by the relative probabilities of the different values of x. In the case of continuous variables, expectations are expressed in terms of an integration with respect to the corresponding probability density E[f] =  p(x)f(x) dx.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,93,"In either case, if we are given a ﬁnite number N of points drawn from the probability distribution or probability density, then the expectation can be approximated as a \end{verbatim} egin{verbatim} ﬁnite sum over these points E[f] ≃1 N N  n=1 f(xn).",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,94,We shall make extensive use of this result when we discuss sampling methods in Chapter 11. The approximation in (1.35) becomes exact in the limit N →∞.,Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,95,"Sometimes we will be considering expectations of functions of several variables, in which case we can use a subscript to indicate which variable is being averaged over, so that for instance Ex[f(x, y)] (1.36) denotes the average of the function f(x, y) with respect to the distribution of x. Note that Ex[f(x, y)] will be a function of y.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,96,"We can also consider a conditional expectation with respect to a conditional distribution, so that Ex[f|y] =  x p(x|y)f(x) (1.37) with an analogous deﬁnition for continuous variables.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,97,"The variance of f(x) is deﬁned by var[f] = E  (f(x) −E[f(x)])2 (1.38) and provides a measure of how much variability there is in f(x) around its mean value E[f(x)]. Expanding out the square, we see that the variance can also be written in terms of the expectations of f(x) and f(x)2 var[f] = E[f(x)2] −E[f(x)]2.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,98,"In particular, we can consider the variance of the variable x itself, which is given by var[x] = E[x2] −E[x]2.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,99,"For two random variables x and y, the covariance is deﬁned by cov[x, y] = Ex,y [{x −E[x]} {y −E[y]}] = Ex,y[xy] −E[x]E[y] (1.41) which expresses the extent to which x and y vary together. If x and y are indepen- dent, then their covariance vanishes.",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,100,"In the case of two vectors of random variables x and y, the covariance is a matrix cov[x, y] = Ex,y  {x −E[x]}{yT −E[yT]} = Ex,y[xyT] −E[x]E[yT].",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,20,101,"If we consider the covariance of the components of a vector x with each other, then we use a slightly simpler notation cov[x] ≡cov[x, x].",Expectations and covariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,102,"So far in this chapter, we have viewed probabilities in terms of the frequencies of random, repeatable events. We shall refer to this as the classical or frequentist interpretation of probability. Now we turn to the more general Bayesian view, in which probabilities provide a quantiﬁcation of uncertainty.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,103,"Consider an uncertain event, for example whether the moon was once in its own orbit around the sun, or whether the Arctic ice cap will have disappeared by the end of the century. These are not events that can be repeated numerous times in order to deﬁne a notion of probability as we did earlier in the context of boxes of fruit.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,104,"Nevertheless, we will generally have some idea, for example, of how quickly we think the polar ice is melting. If we now obtain fresh evidence, for instance from a new Earth observation satellite gathering novel forms of diagnostic information, we may revise our opinion on the rate of ice loss. Our assessment of such matters will affect the actions we take, for instance the extent to which we endeavour to reduce the emission of greenhouse gasses. In such circumstances, we would like to be able to quantify our expression of uncertainty and make precise revisions of uncertainty in the light of new evidence, as well as subsequently to be able to take optimal actions or decisions as a consequence. This can all be achieved through the elegant, and very general, Bayesian interpretation of probability.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,105,"The use of probability to represent uncertainty, however, is not an ad-hoc choice, but is inevitable if we are to respect common sense while making rational coherent inferences. For instance, Cox (1946) showed that if numerical values are used to represent degrees of belief, then a simple set of axioms encoding common sense properties of such beliefs leads uniquely to a set of rules for manipulating degrees of belief that are equivalent to the sum and product rules of probability. This provided the ﬁrst rigorous proof that probability theory could be regarded as an extension of Boolean logic to situations involving uncertainty (Jaynes, 2003). Numerous other authors have proposed different sets of properties or axioms that such measures of uncertainty should satisfy (Ramsey, 1931; Good, 1950; Savage, 1961; deFinetti, 1970; Lindley, 1982). In each case, the resulting numerical quantities behave pre- cisely according to the rules of probability. It is therefore natural to refer to these quantities as (Bayesian) probabilities.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,106,"In the ﬁeld of pattern recognition, too, it is helpful to have a more general no- Thomas Bayes 1701–1761 Thomas Bayes was born in Tun- bridge Wells and was a clergyman as well as an amateur scientist and a mathematician. He studied logic and theology at Edinburgh Univer- sity and was elected Fellow of the Royal Society in 1742. During the 18th century, is- sues regarding probability arose in connection with gambling and with the new concept of insurance. One particularly important problem concerned so-called in- verse probability. A solution was proposed by Thomas Bayes in his paper ‘Essay towards solving a problem in the doctrine of chances’, which was published in 1764, some three years after his death, in the Philo- sophical Transactions of the Royal Society.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,21,107,"Bayes only formulated his theory for the case of a uni- form prior, and it was Pierre-Simon Laplace who inde- pendently rediscovered the theory in general form and who demonstrated its broad applicability.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,22,108,"tion of probability. Consider the example of polynomial curve ﬁtting discussed in Section 1.1. It seems reasonable to apply the frequentist notion of probability to the random values of the observed variables tn. However, we would like to address and quantify the uncertainty that surrounds the appropriate choice for the model param- eters w. We shall see that, from a Bayesian perspective, we can use the machinery of probability theory to describe the uncertainty in model parameters such as w, or indeed in the choice of model itself.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,22,109,"Bayes’ theorem now acquires a new signiﬁcance. Recall that in the boxes of fruit example, the observation of the identity of the fruit provided relevant information that altered the probability that the chosen box was the red one. In that example, Bayes’ theorem was used to convert a prior probability into a posterior probability by incorporating the evidence provided by the observed data. As we shall see in detail later, we can adopt a similar approach when making inferences about quantities such as the parameters w in the polynomial curve ﬁtting example. We capture our assumptions about w, before observing the data, in the form of a prior probability distribution p(w). The effect of the observed data D = {t1, . . . , tN} is expressed through the conditional probability p(D|w), and we shall see later, in Section 1.2.5, how this can be represented explicitly. Bayes’ theorem, which takes the form p(w|D) = p(D|w)p(w) p(D) (1.43) then allows us to evaluate the uncertainty in w after we have observed D in the form of the posterior probability p(w|D).",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,22,110,"The quantity p(D|w) on the right-hand side of Bayes’ theorem is evaluated for the observed data set D and can be viewed as a function of the parameter vector w, in which case it is called the likelihood function. It expresses how probable the observed data set is for different settings of the parameter vector w. Note that the likelihood is not a probability distribution over w, and its integral with respect to w does not (necessarily) equal one.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,22,111,"Given this deﬁnition of likelihood, we can state Bayes’ theorem in words posterior ∝likelihood × prior (1.44) where all of these quantities are viewed as functions of w. The denominator in (1.43) is the normalization constant, which ensures that the posterior distribution on the left-hand side is a valid probability density and integrates to one. Indeed, integrating both sides of (1.43) with respect to w, we can express the denominator in Bayes’ theorem in terms of the prior distribution and the likelihood function p(D) =  p(D|w)p(w) dw.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,112,"In both the Bayesian and frequentist paradigms, the likelihood function p(D|w) plays a central role. However, the manner in which it is used is fundamentally dif- ferent in the two approaches. In a frequentist setting, w is considered to be a ﬁxed parameter, whose value is determined by some form of ‘estimator’, and error bars \end{verbatim} egin{verbatim} on this estimate are obtained by considering the distribution of possible data sets D.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,113,"By contrast, from the Bayesian viewpoint there is only a single data set D (namely the one that is actually observed), and the uncertainty in the parameters is expressed through a probability distribution over w.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,114,"A widely used frequentist estimator is maximum likelihood, in which w is set to the value that maximizes the likelihood function p(D|w). This corresponds to choosing the value of w for which the probability of the observed data set is maxi- mized. In the machine learning literature, the negative log of the likelihood function is called an error function. Because the negative logarithm is a monotonically de- creasing function, maximizing the likelihood is equivalent to minimizing the error.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,115,"One approach to determining frequentist error bars is the bootstrap (Efron, 1979; Hastie et al., 2001), in which multiple data sets are created as follows. Suppose our original data set consists of N data points X = {x1, . . . , xN}. We can create a new data set XB by drawing N points at random from X, with replacement, so that some points in X may be replicated in XB, whereas other points in X may be absent from XB. This process can be repeated L times to generate L data sets each of size N and each obtained by sampling from the original data set X. The statistical accuracy of parameter estimates can then be evaluated by looking at the variability of predictions between the different bootstrap data sets.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,116,"One advantage of the Bayesian viewpoint is that the inclusion of prior knowl- edge arises naturally. Suppose, for instance, that a fair-looking coin is tossed three times and lands heads each time. A classical maximum likelihood estimate of the probability of landing heads would give 1, implying that all future tosses will land heads! By contrast, a Bayesian approach with any reasonable prior will lead to a much less extreme conclusion.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,117,"There has been much controversy and debate associated with the relative mer- its of the frequentist and Bayesian paradigms, which have not been helped by the fact that there is no unique frequentist, or even Bayesian, viewpoint. For instance, one common criticism of the Bayesian approach is that the prior distribution is of- ten selected on the basis of mathematical convenience rather than as a reﬂection of any prior beliefs. Even the subjective nature of the conclusions through their de- pendence on the choice of prior is seen by some as a source of difﬁculty. Reducing the dependence on the prior is one motivation for so-called noninformative priors.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,118,"However, these lead to difﬁculties when comparing different models, and indeed Bayesian methods based on poor choices of prior can give poor results with high conﬁdence. Frequentist evaluation methods offer some protection from such prob- lems, and techniques such as cross-validation remain useful in areas such as model comparison.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,23,119,"This book places a strong emphasis on the Bayesian viewpoint, reﬂecting the huge growth in the practical importance of Bayesian methods in the past few years, while also discussing useful frequentist concepts as required.",Bayesian probabilities
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,120,"Although the Bayesian framework has its origins in the 18th century, the prac- tical application of Bayesian methods was for a long time severely limited by the difﬁculties in carrying through the full Bayesian procedure, particularly the need to marginalize (sum or integrate) over the whole of parameter space, which, as we shall \end{verbatim} egin{verbatim} see, is required in order to make predictions or to compare different models. The development of sampling methods, such as Markov chain Monte Carlo (discussed in Chapter 11) along with dramatic improvements in the speed and memory capacity of computers, opened the door to the practical use of Bayesian techniques in an im- pressive range of problem domains. Monte Carlo methods are very ﬂexible and can be applied to a wide range of models. However, they are computationally intensive and have mainly been used for small-scale problems.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,121,"More recently, highly efﬁcient deterministic approximation schemes such as variational Bayes and expectation propagation (discussed in Chapter 10) have been developed. These offer a complementary alternative to sampling methods and have allowed Bayesian techniques to be used in large-scale applications (Blei et al., 2003).",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,122,"We shall devote the whole of Chapter 2 to a study of various probability dis- tributions and their key properties. It is convenient, however, to introduce here one of the most important probability distributions for continuous variables, called the normal or Gaussian distribution. We shall make extensive use of this distribution in the remainder of this chapter and indeed throughout much of the book.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,123,"For the case of a single real-valued variable x, the Gaussian distribution is de- ﬁned by N x|µ, σ2 = 1 (2πσ2)1/2 exp −1 2σ2 (x −µ)2 (1.46) which is governed by two parameters: µ, called the mean, and σ2, called the vari- ance. The square root of the variance, given by σ, is called the standard deviation, and the reciprocal of the variance, written as β = 1/σ2, is called the precision. We shall see the motivation for these terms shortly. Figure 1.13 shows a plot of the Gaussian distribution.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,124,"From the form of (1.46) we see that the Gaussian distribution satisﬁes N(x|µ, σ2) > 0.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,125,"Also it is straightforward to show that the Gaussian is normalized, so that Pierre-Simon Laplace 1749–1827 It is said that Laplace was seri- ously lacking in modesty and at one point declared himself to be the best mathematician in France at the time, a claim that was arguably true.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,24,126,"As well as being proliﬁc in mathe- matics, he also made numerous contributions to as- tronomy, including the nebular hypothesis by which the earth is thought to have formed from the condensa- tion and cooling of a large rotating disk of gas and dust. In 1812 he published the ﬁrst edition of Th´eorie Analytique des Probabilit´es, in which Laplace states that “probability theory is nothing but common sense reduced to calculation”. This work included a discus- sion of the inverse probability calculation (later termed Bayes’ theorem by Poincar´e), which he used to solve problems in life expectancy, jurisprudence, planetary masses, triangulation, and error estimation.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,25,127,Figure 1.13 Plot of the univariate Gaussian showing the mean µ and the standard deviation σ.,The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,25,128,"Thus (1.46) satisﬁes the two requirements for a valid probability density. We can readily ﬁnd expectations of functions of x under the Gaussian distribu- tion. In particular, the average value of x is given by E[x] =  ∞ −∞ N x|µ, σ2 x dx = µ.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,25,129,"Because the parameter µ represents the average value of x under the distribution, it is referred to as the mean. Similarly, for the second order moment E[x2] =  ∞ −∞ N x|µ, σ2 x2 dx = µ2 + σ2.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,25,130,"From (1.49) and (1.50), it follows that the variance of x is given by var[x] = E[x2] −E[x]2 = σ2 (1.51) and hence σ2 is referred to as the variance parameter. The maximum of a distribution is known as its mode. For a Gaussian, the mode coincides with the mean.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,25,131,"We are also interested in the Gaussian distribution deﬁned over a D-dimensional vector x of continuous variables, which is given by N(x|µ, Σ) = 1 (2π)D/2 1 |Σ|1/2 exp −1 2(x −µ)TΣ−1(x −µ) (1.52) where the D-dimensional vector µ is called the mean, the D × D matrix Σ is called the covariance, and |Σ| denotes the determinant of Σ. We shall make use of the multivariate Gaussian distribution brieﬂy in this chapter, although its properties will be studied in detail in Section 2.3.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,26,132,"Figure 1.14 Illustration of the likelihood function for a Gaussian distribution, shown by the red curve. Here the black points de- note a data set of values {xn}, and the likelihood function given by (1.53) corresponds to the product of the blue values. Maximizing the likelihood in- volves adjusting the mean and vari- ance of the Gaussian so as to maxi- mize this product.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,26,133,"Now suppose that we have a data set of observations x = (x1, . . . , xN)T, rep- resenting N observations of the scalar variable x. Note that we are using the type- face x to distinguish this from a single observation of the vector-valued variable (x1, . . . , xD)T, which we denote by x. We shall suppose that the observations are drawn independently from a Gaussian distribution whose mean µ and variance σ2 are unknown, and we would like to determine these parameters from the data set.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,26,134,"Data points that are drawn independently from the same distribution are said to be independent and identically distributed, which is often abbreviated to i.i.d. We have seen that the joint probability of two independent events is given by the product of the marginal probabilities for each event separately. Because our data set x is i.i.d., we can therefore write the probability of the data set, given µ and σ2, in the form p(x|µ, σ2) = N  n=1 N xn|µ, σ2 .",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,26,135,"When viewed as a function of µ and σ2, this is the likelihood function for the Gaus- sian and is interpreted diagrammatically in Figure 1.14.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,26,136,"One common criterion for determining the parameters in a probability distribu- tion using an observed data set is to ﬁnd the parameter values that maximize the likelihood function. This might seem like a strange criterion because, from our fore- going discussion of probability theory, it would seem more natural to maximize the probability of the parameters given the data, not the probability of the data given the parameters. In fact, these two criteria are related, as we shall discuss in the context of curve ﬁtting.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,27,137,"For the moment, however, we shall determine values for the unknown parame- ters µ and σ2 in the Gaussian by maximizing the likelihood function (1.53). In prac- tice, it is more convenient to maximize the log of the likelihood function. Because the logarithm is a monotonically increasing function of its argument, maximization of the log of a function is equivalent to maximization of the function itself. Taking the log not only simpliﬁes the subsequent mathematical analysis, but it also helps numerically because the product of a large number of small probabilities can easily underﬂow the numerical precision of the computer, and this is resolved by computing instead the sum of the log probabilities. From (1.46) and (1.53), the log likelihood \end{verbatim} egin{verbatim} function can be written in the form ln p x|µ, σ2 = −1 2σ2 N  n=1 (xn −µ)2 −N 2 ln σ2 −N 2 ln(2π).",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,27,138,"Maximizing (1.54) with respect to µ, we obtain the maximum likelihood solution given by µML = 1 N N  n=1 xn (1.55) which is the sample mean, i.e., the mean of the observed values {xn}. Similarly, maximizing (1.54) with respect to σ2, we obtain the maximum likelihood solution for the variance in the form σ2 ML = 1 N N  n=1 (xn −µML)2 (1.56) which is the sample variance measured with respect to the sample mean µML. Note that we are performing a joint maximization of (1.54) with respect to µ and σ2, but in the case of the Gaussian distribution the solution for µ decouples from that for σ2 so that we can ﬁrst evaluate (1.55) and then subsequently use this result to evaluate (1.56).",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,27,139,"Later in this chapter, and also in subsequent chapters, we shall highlight the sig- niﬁcant limitations of the maximum likelihood approach. Here we give an indication of the problem in the context of our solutions for the maximum likelihood param- eter settings for the univariate Gaussian distribution. In particular, we shall show that the maximum likelihood approach systematically underestimates the variance of the distribution. This is an example of a phenomenon called bias and is related to the problem of over-ﬁtting encountered in the context of polynomial curve ﬁtting.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,27,140,"We ﬁrst note that the maximum likelihood solutions µML and σ2 ML are functions of the data set values x1, . . . , xN. Consider the expectations of these quantities with respect to the data set values, which themselves come from a Gaussian distribution with parameters µ and σ2. It is straightforward to show that E[µML] = µ (1.57) E[σ2 ML] = N −1 N  σ2 (1.58) so that on average the maximum likelihood estimate will obtain the correct mean but will underestimate the true variance by a factor (N −1)/N. The intuition behind this result is given by Figure 1.15.",The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,27,141,From (1.58) it follows that the following estimate for the variance parameter is unbiased σ2 = N N −1σ2 ML = 1 N −1 N  n=1 (xn −µML)2.,The Gaussian distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,142,Figure 1.15 Illustration of how bias arises in using max- imum likelihood to determine the variance of a Gaussian.,Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,143,"the true Gaussian distribution from which data is generated, and the three red curves show the Gaussian distributions obtained by ﬁtting to three data sets, each consist- ing of two data points shown in blue, us- ing the maximum likelihood results (1.55) and (1.56). Averaged across the three data sets, the mean is correct, but the variance is systematically under-estimated because it is measured relative to the sample mean and not relative to the true mean.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,144,"In Section 10.1.3, we shall see how this result arises automatically when we adopt a Bayesian approach.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,145,"Note that the bias of the maximum likelihood solution becomes less signiﬁcant as the number N of data points increases, and in the limit N →∞the maximum likelihood solution for the variance equals the true variance of the distribution that generated the data. In practice, for anything other than small N, this bias will not prove to be a serious problem. However, throughout this book we shall be interested in more complex models with many parameters, for which the bias problems asso- ciated with maximum likelihood will be much more severe. In fact, as we shall see, the issue of bias in maximum likelihood lies at the root of the over-ﬁtting problem that we encountered earlier in the context of polynomial curve ﬁtting.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,146,"We have seen how the problem of polynomial curve ﬁtting can be expressed in terms of error minimization. Here we return to the curve ﬁtting example and view it from a probabilistic perspective, thereby gaining some insights into error functions and regularization, as well as taking us towards a full Bayesian treatment.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,28,147,"The goal in the curve ﬁtting problem is to be able to make predictions for the target variable t given some new value of the input variable x on the basis of a set of training data comprising N input values x = (x1, . . . , xN)T and their corresponding target values t = (t1, . . . , tN)T. We can express our uncertainty over the value of the target variable using a probability distribution. For this purpose, we shall assume that, given the value of x, the corresponding value of t has a Gaussian distribution with a mean equal to the value y(x, w) of the polynomial curve given by (1.1). Thus we have p(t|x, w, β) = N t|y(x, w), β−1 (1.60) where, for consistency with the notation in later chapters, we have deﬁned a preci- sion parameter β corresponding to the inverse variance of the distribution. This is illustrated schematically in Figure 1.16.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,29,148,"Figure 1.16 Schematic illustration of a Gaus- sian conditional distribution for t given x given by (1.60), in which the mean is given by the polyno- mial function y(x, w), and the precision is given by the parameter β, which is related to the vari- ance by β−1 = σ2.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,29,149,"We now use the training data {x, t} to determine the values of the unknown parameters w and β by maximum likelihood. If the data are assumed to be drawn independently from the distribution (1.60), then the likelihood function is given by p(t|x, w, β) = N  n=1 N tn|y(xn, w), β−1 .",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,29,150,"As we did in the case of the simple Gaussian distribution earlier, it is convenient to maximize the logarithm of the likelihood function. Substituting for the form of the Gaussian distribution, given by (1.46), we obtain the log likelihood function in the form ln p(t|x, w, β) = −β 2 N  n=1 {y(xn, w) −tn}2 + N 2 ln β −N 2 ln(2π).",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,29,151,"Consider ﬁrst the determination of the maximum likelihood solution for the polyno- mial coefﬁcients, which will be denoted by wML. These are determined by maxi- mizing (1.62) with respect to w. For this purpose, we can omit the last two terms on the right-hand side of (1.62) because they do not depend on w. Also, we note that scaling the log likelihood by a positive constant coefﬁcient does not alter the location of the maximum with respect to w, and so we can replace the coefﬁcient β/2 with 1/2. Finally, instead of maximizing the log likelihood, we can equivalently minimize the negative log likelihood. We therefore see that maximizing likelihood is equivalent, so far as determining w is concerned, to minimizing the sum-of-squares error function deﬁned by (1.2). Thus the sum-of-squares error function has arisen as a consequence of maximizing likelihood under the assumption of a Gaussian noise distribution.",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,29,152,"We can also use maximum likelihood to determine the precision parameter β of the Gaussian conditional distribution. Maximizing (1.62) with respect to β gives 1 βML = 1 N N  n=1 {y(xn, wML) −tn}2 .",Curve fitting re-visited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,153,Again we can ﬁrst determine the parameter vector wML governing the mean and sub- sequently use this to ﬁnd the precision βML as was the case for the simple Gaussian distribution.,Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,154,"Having determined the parameters w and β, we can now make predictions for new values of x. Because we now have a probabilistic model, these are expressed in terms of the predictive distribution that gives the probability distribution over t, rather than simply a point estimate, and is obtained by substituting the maximum likelihood parameters into (1.60) to give p(t|x, wML, βML) = N t|y(x, wML), β−1 ML .",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,155,"Now let us take a step towards a more Bayesian approach and introduce a prior distribution over the polynomial coefﬁcients w. For simplicity, let us consider a Gaussian distribution of the form p(w|α) = N(w|0, α−1I) =  α 2π (M+1)/2 exp  −α 2 wTw  (1.65) where α is the precision of the distribution, and M +1 is the total number of elements in the vector w for an M th order polynomial. Variables such as α, which control the distribution of model parameters, are called hyperparameters. Using Bayes’ theorem, the posterior distribution for w is proportional to the product of the prior distribution and the likelihood function p(w|x, t, α, β) ∝p(t|x, w, β)p(w|α).",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,156,"We can now determine w by ﬁnding the most probable value of w given the data, in other words by maximizing the posterior distribution. This technique is called maximum posterior, or simply MAP. Taking the negative logarithm of (1.66) and combining with (1.62) and (1.65), we ﬁnd that the maximum of the posterior is given by the minimum of β 2 N  n=1 {y(xn, w) −tn}2 + α 2 wTw.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,157,"Thus we see that maximizing the posterior distribution is equivalent to minimizing the regularized sum-of-squares error function encountered earlier in the form (1.4), with a regularization parameter given by λ = α/β.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,30,158,"Although we have included a prior distribution p(w|α), we are so far still mak- ing a point estimate of w and so this does not yet amount to a Bayesian treatment. In a fully Bayesian approach, we should consistently apply the sum and product rules of probability, which requires, as we shall see shortly, that we integrate over all val- ues of w. Such marginalizations lie at the heart of Bayesian methods for pattern recognition.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,31,159,"In the curve ﬁtting problem, we are given the training data x and t, along with a new test point x, and our goal is to predict the value of t. We therefore wish to evaluate the predictive distribution p(t|x, x, t). Here we shall assume that the parameters α and β are ﬁxed and known in advance (in later chapters we shall discuss how such parameters can be inferred from data in a Bayesian setting).",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,31,160,"A Bayesian treatment simply corresponds to a consistent application of the sum and product rules of probability, which allow the predictive distribution to be written in the form p(t|x, x, t) =  p(t|x, w)p(w|x, t) dw.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,31,161,"Here p(t|x, w) is given by (1.60), and we have omitted the dependence on α and β to simplify the notation. Here p(w|x, t) is the posterior distribution over param- eters, and can be found by normalizing the right-hand side of (1.66). We shall see in Section 3.3 that, for problems such as the curve-ﬁtting example, this posterior distribution is a Gaussian and can be evaluated analytically. Similarly, the integra- tion in (1.68) can also be performed analytically with the result that the predictive distribution is given by a Gaussian of the form p(t|x, x, t) = N t|m(x), s2(x) (1.69) where the mean and variance are given by m(x) = βφ(x)TS N  n=1 φ(xn)tn (1.70) s2(x) = β−1 + φ(x)TSφ(x).",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,31,162,"Here the matrix S is given by S−1 = αI + β N  n=1 φ(xn)φ(x)T (1.72) where I is the unit matrix, and we have deﬁned the vector φ(x) with elements φi(x) = xi for i = 0, . . . , M.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,31,163,"We see that the variance, as well as the mean, of the predictive distribution in (1.69) is dependent on x. The ﬁrst term in (1.71) represents the uncertainty in the predicted value of t due to the noise on the target variables and was expressed already in the maximum likelihood predictive distribution (1.64) through β−1 ML. However, the second term arises from the uncertainty in the parameters w and is a consequence of the Bayesian treatment. The predictive distribution for the synthetic sinusoidal regression problem is illustrated in Figure 1.17.",Bayesian curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,32,164,"Figure 1.17 The predictive distribution result- ing from a Bayesian treatment of polynomial curve ﬁtting using an M = 9 polynomial, with the ﬁxed parameters α = 5 × 10−3 and β = 11.1 (corresponding to the known noise variance), in which the red curve denotes the mean of the predictive distribution and the red region corresponds to ±1 stan- dard deviation around the mean.",Model Selection
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,32,165,"In our example of polynomial curve ﬁtting using least squares, we saw that there was an optimal order of polynomial that gave the best generalization. The order of the polynomial controls the number of free parameters in the model and thereby governs the model complexity. With regularized least squares, the regularization coefﬁcient λ also controls the effective complexity of the model, whereas for more complex models, such as mixture distributions or neural networks there may be multiple pa- rameters governing complexity. In a practical application, we need to determine the values of such parameters, and the principal objective in doing so is usually to achieve the best predictive performance on new data. Furthermore, as well as ﬁnd- ing the appropriate values for complexity parameters within a given model, we may wish to consider a range of different types of model in order to ﬁnd the best one for our particular application.",Model Selection
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,32,166,"We have already seen that, in the maximum likelihood approach, the perfor- mance on the training set is not a good indicator of predictive performance on un- seen data due to the problem of over-ﬁtting. If data is plentiful, then one approach is simply to use some of the available data to train a range of models, or a given model with a range of values for its complexity parameters, and then to compare them on independent data, sometimes called a validation set, and select the one having the best predictive performance. If the model design is iterated many times using a lim- ited size data set, then some over-ﬁtting to the validation data can occur and so it may be necessary to keep aside a third test set on which the performance of the selected model is ﬁnally evaluated.",Model Selection
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,33,167,"Figure 1.18 The technique of S-fold cross-validation, illus- trated here for the case of S = 4, involves tak- ing the available data and partitioning it into S groups (in the simplest case these are of equal size). Then S −1 of the groups are used to train a set of models that are then evaluated on the re- maining group. This procedure is then repeated for all S possible choices for the held-out group, indicated here by the red blocks, and the perfor- mance scores from the S runs are then averaged.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,33,168,"In many applications, however, the supply of data for training and testing will be limited, and in order to build good models, we wish to use as much of the available data as possible for training. However, if the validation set is small, it will give a relatively noisy estimate of predictive performance. One solution to this dilemma is to use cross-validation, which is illustrated in Figure 1.18. This allows a proportion (S −1)/S of the available data to be used for training while making use of all of the \end{verbatim} egin{verbatim} run 1 run 2 run 3 run 4 data to assess performance. When data is particularly scarce, it may be appropriate to consider the case S = N, where N is the total number of data points, which gives the leave-one-out technique.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,33,169,"One major drawback of cross-validation is that the number of training runs that must be performed is increased by a factor of S, and this can prove problematic for models in which the training is itself computationally expensive. A further problem with techniques such as cross-validation that use separate data to assess performance is that we might have multiple complexity parameters for a single model (for in- stance, there might be several regularization parameters). Exploring combinations of settings for such parameters could, in the worst case, require a number of training runs that is exponential in the number of parameters. Clearly, we need a better ap- proach. Ideally, this should rely only on the training data and should allow multiple hyperparameters and model types to be compared in a single training run. We there- fore need to ﬁnd a measure of performance which depends only on the training data and which does not suffer from bias due to over-ﬁtting.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,33,170,"Historically various ‘information criteria’ have been proposed that attempt to correct for the bias of maximum likelihood by the addition of a penalty term to compensate for the over-ﬁtting of more complex models. For example, the Akaike information criterion, or AIC (Akaike, 1974), chooses the model for which the quan- tity ln p(D|wML) −M (1.73) is largest. Here p(D|wML) is the best-ﬁt log likelihood, and M is the number of adjustable parameters in the model. A variant of this quantity, called the Bayesian information criterion, or BIC, will be discussed in Section 4.4.1. Such criteria do not take account of the uncertainty in the model parameters, however, and in practice they tend to favour overly simple models. We therefore turn in Section 3.4 to a fully Bayesian approach where we shall see how complexity penalties arise in a natural and principled way.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,34,171,"Figure 1.19 Scatter plot of the oil ﬂow data for input variables x6 and x7, in which red denotes the ‘homoge- nous’ class, green denotes the ‘annular’ class, and blue denotes the ‘laminar’ class.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,34,172,"In the polynomial curve ﬁtting example we had just one input variable x. For prac- tical applications of pattern recognition, however, we will have to deal with spaces \end{verbatim} egin{verbatim} Our goal is to classify the new test point de- noted by ‘×’.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,34,173,"of high dimensionality comprising many input variables. As we now discuss, this poses some serious challenges and is an important factor inﬂuencing the design of pattern recognition techniques.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,34,174,"In order to illustrate the problem we consider a synthetically generated data set representing measurements taken from a pipeline containing a mixture of oil, wa- ter, and gas (Bishop and James, 1993). These three materials can be present in one of three different geometrical conﬁgurations known as ‘homogenous’, ‘annular’, and ‘laminar’, and the fractions of the three materials can also vary. Each data point com- prises a 12-dimensional input vector consisting of measurements taken with gamma ray densitometers that measure the attenuation of gamma rays passing along nar- row beams through the pipe. This data set is described in detail in Appendix A.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,34,175,"Figure 1.19 shows 100 points from this data set on a plot showing two of the mea- surements x6 and x7 (the remaining ten input values are ignored for the purposes of this illustration). Each data point is labelled according to which of the three geomet- rical classes it belongs to, and our goal is to use this data as a training set in order to be able to classify a new observation (x6, x7), such as the one denoted by the cross in Figure 1.19. We observe that the cross is surrounded by numerous red points, and so we might suppose that it belongs to the red class. However, there are also plenty of green points nearby, so we might think that it could instead belong to the green class. It seems unlikely that it belongs to the blue class. The intuition here is that the identity of the cross should be determined more strongly by nearby points from the training set and less strongly by more distant points. In fact, this intuition turns out to be reasonable and will be discussed more fully in later chapters.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,176,Figure 1.20 Illustration of a simple approach to the solution of a classiﬁcation problem in which the input space is divided into cells and any new test point is assigned to the class that has a majority number of rep- resentatives in the same cell as the test point.,The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,177,"Figure 1.21 Illustration of the curse of dimensionality, showing how the number of regions of a regular grid grows exponentially with the dimensionality D of the space. For clarity, only a subset of the cubical regions are shown for D = 3.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,178,"How can we turn this intuition into a learning algorithm? One very simple ap- proach would be to divide the input space into regular cells, as indicated in Fig- ure 1.20. When we are given a test point and we wish to predict its class, we ﬁrst decide which cell it belongs to, and we then ﬁnd all of the training data points that \end{verbatim} egin{verbatim} As we shall see shortly, this simplistic approach has some severe shortcomings.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,179,fall in the same cell. The identity of the test point is predicted as being the same as the class having the largest number of training points in the same cell as the test point (with ties being broken at random).,The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,180,"There are numerous problems with this naive approach, but one of the most se- vere becomes apparent when we consider its extension to problems having larger numbers of input variables, corresponding to input spaces of higher dimensionality.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,35,181,"The origin of the problem is illustrated in Figure 1.21, which shows that, if we divide a region of a space into regular cells, then the number of such cells grows exponen- tially with the dimensionality of the space. The problem with an exponentially large number of cells is that we would need an exponentially large quantity of training data in order to ensure that the cells are not empty. Clearly, we have no hope of applying such a technique in a space of more than a few variables, and so we need to ﬁnd a more sophisticated approach.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,36,182,"We can gain further insight into the problems of high-dimensional spaces by returning to the example of polynomial curve ﬁtting and considering how we would x1 D = 1 x1 x2 D = 2 x1 x2 x3 D = 3 \end{verbatim} egin{verbatim} extend this approach to deal with input spaces having several variables. If we have D input variables, then a general polynomial with coefﬁcients up to order 3 would take the form y(x, w) = w0 + D  i=1 wixi + D  i=1 D  j=1 wijxixj + D  i=1 D  j=1 D  k=1 wijkxixjxk. (1.74) As D increases, so the number of independent coefﬁcients (not all of the coefﬁcients are independent due to interchange symmetries amongst the x variables) grows pro- portionally to D3. In practice, to capture complex dependencies in the data, we may need to use a higher-order polynomial. For a polynomial of order M, the growth in the number of coefﬁcients is like DM. Although this is now a power law growth, rather than an exponential growth, it still points to the method becoming rapidly unwieldy and of limited practical utility.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,36,183,"Our geometrical intuitions, formed through a life spent in a space of three di- mensions, can fail badly when we consider spaces of higher dimensionality. As a simple example, consider a sphere of radius r = 1 in a space of D dimensions, and ask what is the fraction of the volume of the sphere that lies between radius r = 1−ϵ and r = 1. We can evaluate this fraction by noting that the volume of a sphere of radius r in D dimensions must scale as rD, and so we write VD(r) = KDrD (1.75) where the constant KD depends only on D. Thus the required fraction is given by VD(1) −VD(1 −ϵ) VD(1) = 1 −(1 −ϵ)D (1.76) which is plotted as a function of ϵ for various values of D in Figure 1.22. We see that, for large D, this fraction tends to 1 even for small values of ϵ. Thus, in spaces of high dimensionality, most of the volume of a sphere is concentrated in a thin shell near the surface! As a further example, of direct relevance to pattern recognition, consider the behaviour of a Gaussian distribution in a high-dimensional space. If we transform from Cartesian to polar coordinates, and then integrate out the directional variables, we obtain an expression for the density p(r) as a function of radius r from the origin.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,36,184,"Thus p(r)δr is the probability mass inside a thin shell of thickness δr located at radius r. This distribution is plotted, for various values of D, in Figure 1.23, and we see that for large D the probability mass of the Gaussian is concentrated in a thin shell.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,36,185,"The severe difﬁculty that can arise in spaces of many dimensions is sometimes called the curse of dimensionality (Bellman, 1961). In this book, we shall make ex- tensive use of illustrative examples involving input spaces of one or two dimensions, because this makes it particularly easy to illustrate the techniques graphically. The reader should be warned, however, that not all intuitions developed in spaces of low dimensionality will generalize to spaces of many dimensions.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,37,186,Figure 1.22 Plot of the fraction of the volume of a sphere lying in the range r = 1−ϵ to r = 1 for various values of the dimensionality D.,The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,37,187,Figure 1.23 Plot of the probability density with respect to radius r of a Gaus- sian distribution for various values of the dimensionality D.,The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,37,188,"Although the curse of dimensionality certainly raises important issues for pat- tern recognition applications, it does not prevent us from ﬁnding effective techniques applicable to high-dimensional spaces. The reasons for this are twofold. First, real data will often be conﬁned to a region of the space having lower effective dimension- ality, and in particular the directions over which important variations in the target variables occur may be so conﬁned. Second, real data will typically exhibit some smoothness properties (at least locally) so that for the most part small changes in the input variables will produce small changes in the target variables, and so we can ex- ploit local interpolation-like techniques to allow us to make predictions of the target variables for new values of the input variables. Successful pattern recognition tech- niques exploit one or both of these properties. Consider, for example, an application in manufacturing in which images are captured of identical planar objects on a con- veyor belt, in which the goal is to determine their orientation. Each image is a point In a high-dimensional space, most of the probability mass of a Gaussian is lo- cated within a thin shell at a speciﬁc radius.",The Curse of Dimensionality
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,38,189,"in a high-dimensional space whose dimensionality is determined by the number of pixels. Because the objects can occur at different positions within the image and in different orientations, there are three degrees of freedom of variability between images, and a set of images will live on a three dimensional manifold embedded within the high-dimensional space. Due to the complex relationships between the object position or orientation and the pixel intensities, this manifold will be highly nonlinear. If the goal is to learn a model that can take an input image and output the orientation of the object irrespective of its position, then there is only one degree of freedom of variability within the manifold that is signiﬁcant.",Decision Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,38,190,"We have seen in Section 1.2 how probability theory provides us with a consistent mathematical framework for quantifying and manipulating uncertainty. Here we turn to a discussion of decision theory that, when combined with probability theory, allows us to make optimal decisions in situations involving uncertainty such as those encountered in pattern recognition.",Decision Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,38,191,"Suppose we have an input vector x together with a corresponding vector t of target variables, and our goal is to predict t given a new value for x. For regression problems, t will comprise continuous variables, whereas for classiﬁcation problems t will represent class labels. The joint probability distribution p(x, t) provides a complete summary of the uncertainty associated with these variables. Determination of p(x, t) from a set of training data is an example of inference and is typically a very difﬁcult problem whose solution forms the subject of much of this book. In a practical application, however, we must often make a speciﬁc prediction for the value of t, or more generally take a speciﬁc action based on our understanding of the values t is likely to take, and this aspect is the subject of decision theory.",Decision Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,38,192,"Consider, for example, a medical diagnosis problem in which we have taken an X-ray image of a patient, and we wish to determine whether the patient has cancer or not. In this case, the input vector x is the set of pixel intensities in the image, and output variable t will represent the presence of cancer, which we denote by the class C1, or the absence of cancer, which we denote by the class C2. We might, for instance, choose t to be a binary variable such that t = 0 corresponds to class C1 and t = 1 corresponds to class C2. We shall see later that this choice of label values is particularly convenient for probabilistic models. The general inference problem then involves determining the joint distribution p(x, Ck), or equivalently p(x, t), which gives us the most complete probabilistic description of the situation. Although this can be a very useful and informative quantity, in the end we must decide either to give treatment to the patient or not, and we would like this choice to be optimal in some appropriate sense (Duda and Hart, 1973). This is the decision step, and it is the subject of decision theory to tell us how to make optimal decisions given the appropriate probabilities. We shall see that the decision stage is generally very simple, even trivial, once we have solved the inference problem.",Decision Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,39,193,"Here we give an introduction to the key ideas of decision theory as required for \end{verbatim} egin{verbatim} the rest of the book. Further background, as well as more detailed accounts, can be found in Berger (1985) and Bather (2000).",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,39,194,"Before giving a more detailed analysis, let us ﬁrst consider informally how we might expect probabilities to play a role in making decisions. When we obtain the X-ray image x for a new patient, our goal is to decide which of the two classes to assign to the image. We are interested in the probabilities of the two classes given the image, which are given by p(Ck|x). Using Bayes’ theorem, these probabilities can be expressed in the form p(Ck|x) = p(x|Ck)p(Ck) p(x) .",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,39,195,"Note that any of the quantities appearing in Bayes’ theorem can be obtained from the joint distribution p(x, Ck) by either marginalizing or conditioning with respect to the appropriate variables. We can now interpret p(Ck) as the prior probability for the class Ck, and p(Ck|x) as the corresponding posterior probability. Thus p(C1) repre- sents the probability that a person has cancer, before we take the X-ray measurement.",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,39,196,"Similarly, p(C1|x) is the corresponding probability, revised using Bayes’ theorem in light of the information contained in the X-ray. If our aim is to minimize the chance of assigning x to the wrong class, then intuitively we would choose the class having the higher posterior probability. We now show that this intuition is correct, and we also discuss more general criteria for making decisions.",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,39,197,"Suppose that our goal is simply to make as few misclassiﬁcations as possible. We need a rule that assigns each value of x to one of the available classes. Such a rule will divide the input space into regions Rk called decision regions, one for each class, such that all points in Rk are assigned to class Ck. The boundaries between decision regions are called decision boundaries or decision surfaces. Note that each decision region need not be contiguous but could comprise some number of disjoint regions. We shall encounter examples of decision boundaries and decision regions in later chapters. In order to ﬁnd the optimal decision rule, consider ﬁrst of all the case of two classes, as in the cancer problem for instance. A mistake occurs when an input vector belonging to class C1 is assigned to class C2 or vice versa. The probability of this occurring is given by p(mistake) = p(x ∈R1, C2) + p(x ∈R2, C1) =  R1 p(x, C2) dx +  R2 p(x, C1) dx.",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,40,198,"Figure 1.24 Schematic illustration of the joint probabilities p(x, Ck) for each of two classes plotted against x, together with the decision boundary x = bx. Values of x ⩾bx are classiﬁed as class C2 and hence belong to decision region R2, whereas points x < bx are classiﬁed as C1 and belong to R1. Errors arise from the blue, green, and red regions, so that for x < bx the errors are due to points from class C2 being misclassiﬁed as C1 (represented by the sum of the red and green regions), and conversely for points in the region x ⩾bx the errors are due to points from class C1 being misclassiﬁed as C2 (represented by the blue region). As we vary the location bx of the decision boundary, the combined areas of the blue and green regions remains constant, whereas the size of the red region varies. The optimal choice for bx is where the curves for p(x, C1) and p(x, C2) cross, corresponding to bx = x0, because in this case the red region disappears. This is equivalent to the minimum misclassiﬁcation rate decision rule, which assigns each value of x to the class having the higher posterior probability p(Ck|x).",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,40,199,"We are free to choose the decision rule that assigns each point x to one of the two classes. Clearly to minimize p(mistake) we should arrange that each x is assigned to whichever class has the smaller value of the integrand in (1.78). Thus, if p(x, C1) > p(x, C2) for a given value of x, then we should assign that x to class C1. From the product rule of probability we have p(x, Ck) = p(Ck|x)p(x). Because the factor p(x) is common to both terms, we can restate this result as saying that the minimum \end{verbatim} egin{verbatim} R1 R2 x0 x p(x, C1) p(x, C2) x probability of making a mistake is obtained if each value of x is assigned to the class for which the posterior probability p(Ck|x) is largest. This result is illustrated for two classes, and a single input variable x, in Figure 1.24.",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,40,200,"For the more general case of K classes, it is slightly easier to maximize the probability of being correct, which is given by p(correct) = K  k=1 p(x ∈Rk, Ck) = K  k=1  Rk p(x, Ck) dx (1.79) which is maximized when the regions Rk are chosen such that each x is assigned to the class for which p(x, Ck) is largest. Again, using the product rule p(x, Ck) = p(Ck|x)p(x), and noting that the factor of p(x) is common to all terms, we see that each x should be assigned to the class having the largest posterior probability p(Ck|x).",Minimizing the misclassification rate
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,41,201,"Figure 1.25 An example of a loss matrix with ele- ments Lkj for the cancer treatment problem. The rows correspond to the true class, whereas the columns cor- respond to the assignment of class made by our deci- sion criterion.",Minimizing the expected loss
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,41,202,"For many applications, our objective will be more complex than simply mini- mizing the number of misclassiﬁcations. Let us consider again the medical diagnosis problem. We note that, if a patient who does not have cancer is incorrectly diagnosed as having cancer, the consequences may be some patient distress plus the need for further investigations. Conversely, if a patient with cancer is diagnosed as healthy, the result may be premature death due to lack of treatment. Thus the consequences of these two types of mistake can be dramatically different. It would clearly be better to make fewer mistakes of the second kind, even if this was at the expense of making more mistakes of the ﬁrst kind.",Minimizing the expected loss
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,41,203,"We can formalize such issues through the introduction of a loss function, also called a cost function, which is a single, overall measure of loss incurred in taking any of the available decisions or actions. Our goal is then to minimize the total loss incurred. Note that some authors consider instead a utility function, whose value they aim to maximize. These are equivalent concepts if we take the utility to be simply the negative of the loss, and throughout this text we shall use the loss function convention. Suppose that, for a new value of x, the true class is Ck and that we assign x to class Cj (where j may or may not be equal to k). In so doing, we incur some level of loss that we denote by Lkj, which we can view as the k, j element of a loss matrix. For instance, in our cancer example, we might have a loss matrix of the form shown in Figure 1.25. This particular loss matrix says that there is no loss incurred if the correct decision is made, there is a loss of 1 if a healthy patient is diagnosed as having cancer, whereas there is a loss of 1000 if a patient having cancer is diagnosed as healthy.",Minimizing the expected loss
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,41,204,"The optimal solution is the one which minimizes the loss function. However, the loss function depends on the true class, which is unknown. For a given input vector x, our uncertainty in the true class is expressed through the joint probability distribution p(x, Ck) and so we seek instead to minimize the average loss, where the average is computed with respect to this distribution, which is given by E[L] =  k  j  Rj Lkjp(x, Ck) dx.",Minimizing the expected loss
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,41,205,"Each x can be assigned independently to one of the decision regions Rj. Our goal is to choose the regions Rj in order to minimize the expected loss (1.80), which implies that for each x we should minimize  k Lkjp(x, Ck). As before, we can use the product rule p(x, Ck) = p(Ck|x)p(x) to eliminate the common factor of p(x).",Minimizing the expected loss
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,42,206,Figure 1.26 Illustration of the reject option. Inputs x such that the larger of the two poste- rior probabilities is less than or equal to some threshold θ will be rejected.,The reject option
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,42,207,"Thus the decision rule that minimizes the expected loss is the one that assigns each \end{verbatim} egin{verbatim} x p(C1|x) p(C2|x) 0.0 1.0 θ reject region new x to the class j for which the quantity  k Lkjp(Ck|x) (1.81) is a minimum. This is clearly trivial to do, once we know the posterior class proba- bilities p(Ck|x).",The reject option
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,42,208,"We have seen that classiﬁcation errors arise from the regions of input space where the largest of the posterior probabilities p(Ck|x) is signiﬁcantly less than unity, or equivalently where the joint distributions p(x, Ck) have comparable values. These are the regions where we are relatively uncertain about class membership. In some applications, it will be appropriate to avoid making decisions on the difﬁcult cases in anticipation of a lower error rate on those examples for which a classiﬁcation de- cision is made. This is known as the reject option. For example, in our hypothetical medical illustration, it may be appropriate to use an automatic system to classify those X-ray images for which there is little doubt as to the correct class, while leav- ing a human expert to classify the more ambiguous cases. We can achieve this by introducing a threshold θ and rejecting those inputs x for which the largest of the posterior probabilities p(Ck|x) is less than or equal to θ. This is illustrated for the case of two classes, and a single continuous input variable x, in Figure 1.26. Note that setting θ = 1 will ensure that all examples are rejected, whereas if there are K classes then setting θ < 1/K will ensure that no examples are rejected. Thus the fraction of examples that get rejected is controlled by the value of θ.",The reject option
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,42,209,"We can easily extend the reject criterion to minimize the expected loss, when a loss matrix is given, taking account of the loss incurred when a reject decision is made.",The reject option
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,210,"We have broken the classiﬁcation problem down into two separate stages, the inference stage in which we use training data to learn a model for p(Ck|x), and the \end{verbatim} egin{verbatim} subsequent decision stage in which we use these posterior probabilities to make op- timal class assignments. An alternative possibility would be to solve both problems together and simply learn a function that maps inputs x directly into decisions. Such a function is called a discriminant function.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,211,"In fact, we can identify three distinct approaches to solving decision problems, all of which have been used in practical applications. These are given, in decreasing order of complexity, by: (a) First solve the inference problem of determining the class-conditional densities p(x|Ck) for each class Ck individually. Also separately infer the prior class probabilities p(Ck). Then use Bayes’ theorem in the form p(Ck|x) = p(x|Ck)p(Ck) p(x) (1.82) to ﬁnd the posterior class probabilities p(Ck|x). As usual, the denominator in Bayes’ theorem can be found in terms of the quantities appearing in the numerator, because p(x) =  k p(x|Ck)p(Ck).",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,212,"Equivalently, we can model the joint distribution p(x, Ck) directly and then normalize to obtain the posterior probabilities. Having found the posterior probabilities, we use decision theory to determine class membership for each new input x. Approaches that explicitly or implicitly model the distribution of inputs as well as outputs are known as generative models, because by sampling from them it is possible to generate synthetic data points in the input space.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,213,"(b) First solve the inference problem of determining the posterior class probabilities p(Ck|x), and then subsequently use decision theory to assign each new x to one of the classes. Approaches that model the posterior probabilities directly are called discriminative models.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,214,"(c) Find a function f(x), called a discriminant function, which maps each input x directly onto a class label. For instance, in the case of two-class problems, f(·) might be binary valued and such that f = 0 represents class C1 and f = 1 represents class C2. In this case, probabilities play no role.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,43,215,"Let us consider the relative merits of these three alternatives. Approach (a) is the most demanding because it involves ﬁnding the joint distribution over both x and Ck. For many applications, x will have high dimensionality, and consequently we may need a large training set in order to be able to determine the class-conditional densities to reasonable accuracy. Note that the class priors p(Ck) can often be esti- mated simply from the fractions of the training set data points in each of the classes.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,44,216,"Figure 1.27 Example of the class-conditional densities for two classes having a single input variable x (left plot) together with the corresponding posterior probabilities (right plot). Note that the left-hand mode of the class-conditional density p(x|C1), shown in blue on the left plot, has no effect on the posterior probabilities. The vertical green line in the right plot shows the decision boundary in x that gives the minimum misclassiﬁcation rate.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,44,217,"One advantage of approach (a), however, is that it also allows the marginal density of data p(x) to be determined from (1.83). This can be useful for detecting new data points that have low probability under the model and for which the predictions may \end{verbatim} egin{verbatim} p(x|C1) p(x|C2) x class densities 0 0.2 0.4 0.6 0.8 1 0 1 2 3 4 5 x p(C1|x) p(C2|x) 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1 1.2 be of low accuracy, which is known as outlier detection or novelty detection (Bishop, 1994; Tarassenko, 1995).",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,44,218,"However, if we only wish to make classiﬁcation decisions, then it can be waste- ful of computational resources, and excessively demanding of data, to ﬁnd the joint distribution p(x, Ck) when in fact we only really need the posterior probabilities p(Ck|x), which can be obtained directly through approach (b). Indeed, the class- conditional densities may contain a lot of structure that has little effect on the pos- terior probabilities, as illustrated in Figure 1.27. There has been much interest in exploring the relative merits of generative and discriminative approaches to machine learning, and in ﬁnding ways to combine them (Jebara, 2004; Lasserre et al., 2006).",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,44,219,"An even simpler approach is (c) in which we use the training data to ﬁnd a discriminant function f(x) that maps each x directly onto a class label, thereby combining the inference and decision stages into a single learning problem. In the example of Figure 1.27, this would correspond to ﬁnding the value of x shown by the vertical green line, because this is the decision boundary giving the minimum probability of misclassiﬁcation.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,45,220,"With option (c), however, we no longer have access to the posterior probabilities p(Ck|x). There are many powerful reasons for wanting to compute the posterior probabilities, even if we subsequently use them to make decisions. These include: Minimizing risk. Consider a problem in which the elements of the loss matrix are subjected to revision from time to time (such as might occur in a ﬁnancial \end{verbatim} egin{verbatim} application). If we know the posterior probabilities, we can trivially revise the minimum risk decision criterion by modifying (1.81) appropriately. If we have only a discriminant function, then any change to the loss matrix would require that we return to the training data and solve the classiﬁcation problem afresh.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,45,221,"Reject option. Posterior probabilities allow us to determine a rejection criterion that will minimize the misclassiﬁcation rate, or more generally the expected loss, for a given fraction of rejected data points.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,45,222,"Compensating for class priors. Consider our medical X-ray problem again, and suppose that we have collected a large number of X-ray images from the gen- eral population for use as training data in order to build an automated screening system. Because cancer is rare amongst the general population, we might ﬁnd that, say, only 1 in every 1,000 examples corresponds to the presence of can- cer. If we used such a data set to train an adaptive model, we could run into severe difﬁculties due to the small proportion of the cancer class. For instance, a classiﬁer that assigned every point to the normal class would already achieve 99.9% accuracy and it would be difﬁcult to avoid this trivial solution. Also, even a large data set will contain very few examples of X-ray images corre- sponding to cancer, and so the learning algorithm will not be exposed to a broad range of examples of such images and hence is not likely to generalize well. A balanced data set in which we have selected equal numbers of exam- ples from each of the classes would allow us to ﬁnd a more accurate model.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,45,223,"However, we then have to compensate for the effects of our modiﬁcations to the training data. Suppose we have used such a modiﬁed data set and found models for the posterior probabilities. From Bayes’ theorem (1.82), we see that the posterior probabilities are proportional to the prior probabilities, which we can interpret as the fractions of points in each class. We can therefore simply take the posterior probabilities obtained from our artiﬁcially balanced data set and ﬁrst divide by the class fractions in that data set and then multiply by the class fractions in the population to which we wish to apply the model. Finally, we need to normalize to ensure that the new posterior probabilities sum to one.",Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,45,224,Note that this procedure cannot be applied if we have learned a discriminant function directly instead of determining posterior probabilities.,Inference and decision
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,225,"Combining models. For complex applications, we may wish to break the problem into a number of smaller subproblems each of which can be tackled by a sep- arate module. For example, in our hypothetical medical diagnosis problem, we may have information available from, say, blood tests as well as X-ray im- ages. Rather than combine all of this heterogeneous information into one huge input space, it may be more effective to build one system to interpret the X- ray images and a different one to interpret the blood data. As long as each of the two models gives posterior probabilities for the classes, we can combine the outputs systematically using the rules of probability. One simple way to do this is to assume that, for each class separately, the distributions of inputs for the X-ray images, denoted by xI, and the blood data, denoted by xB, are \end{verbatim} egin{verbatim} independent, so that p(xI, xB|Ck) = p(xI|Ck)p(xB|Ck).",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,226,"This is an example of conditional independence property, because the indepen- dence holds when the distribution is conditioned on the class Ck. The posterior probability, given both the X-ray and blood data, is then given by p(Ck|xI, xB) ∝ p(xI, xB|Ck)p(Ck) ∝ p(xI|Ck)p(xB|Ck)p(Ck) ∝ p(Ck|xI)p(Ck|xB) p(Ck) (1.85) Thus we need the class prior probabilities p(Ck), which we can easily estimate from the fractions of data points in each class, and then we need to normalize the resulting posterior probabilities so they sum to one. The particular condi- tional independence assumption (1.84) is an example of the naive Bayes model.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,227,"Note that the joint marginal distribution p(xI, xB) will typically not factorize under this model. We shall see in later chapters how to construct models for combining data that do not require the conditional independence assumption (1.84).",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,228,"So far, we have discussed decision theory in the context of classiﬁcation prob- lems. We now turn to the case of regression problems, such as the curve ﬁtting example discussed earlier. The decision stage consists of choosing a speciﬁc esti- mate y(x) of the value of t for each input x. Suppose that in doing so, we incur a loss L(t, y(x)). The average, or expected, loss is then given by E[L] =  L(t, y(x))p(x, t) dx dt.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,229,"A common choice of loss function in regression problems is the squared loss given by L(t, y(x)) = {y(x) −t}2. In this case, the expected loss can be written E[L] =  {y(x) −t}2p(x, t) dx dt.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,46,230,"Our goal is to choose y(x) so as to minimize E[L]. If we assume a completely ﬂexible function y(x), we can do this formally using the calculus of variations to Appendix D give δE[L] δy(x) = 2  {y(x) −t}p(x, t) dt = 0.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,47,231,"Figure 1.28 The regression function y(x), which minimizes the expected squared loss, is given by the mean of the conditional distri- bution p(t|x).",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,47,232,"Solving for y(x), and using the sum and product rules of probability, we obtain y(x) =  tp(x, t) dt p(x) =  tp(t|x) dt = Et[t|x] (1.89) \end{verbatim} egin{verbatim} t x x0 y(x0) y(x) p(t|x0) which is the conditional average of t conditioned on x and is known as the regression function. This result is illustrated in Figure 1.28. It can readily be extended to mul- tiple target variables represented by the vector t, in which case the optimal solution is the conditional average y(x) = Et[t|x].",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,47,233,"We can also derive this result in a slightly different way, which will also shed light on the nature of the regression problem. Armed with the knowledge that the optimal solution is the conditional expectation, we can expand the square term as follows {y(x) −t}2 = {y(x) −E[t|x] + E[t|x] −t}2 = {y(x) −E[t|x]}2 + 2{y(x) −E[t|x]}{E[t|x] −t} + {E[t|x] −t}2 where, to keep the notation uncluttered, we use E[t|x] to denote Et[t|x]. Substituting into the loss function and performing the integral over t, we see that the cross-term vanishes and we obtain an expression for the loss function in the form E[L] =  {y(x) −E[t|x]}2 p(x) dx +  {E[t|x] −t}2p(x) dx.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,47,234,"The function y(x) we seek to determine enters only in the ﬁrst term, which will be minimized when y(x) is equal to E[t|x], in which case this term will vanish. This is simply the result that we derived previously and that shows that the optimal least squares predictor is given by the conditional mean. The second term is the variance of the distribution of t, averaged over x. It represents the intrinsic variability of the target data and can be regarded as noise. Because it is independent of y(x), it represents the irreducible minimum value of the loss function.",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,47,235,"As with the classiﬁcation problem, we can either determine the appropriate prob- abilities and then use these to make optimal decisions, or we can build models that make decisions directly. Indeed, we can identify three distinct approaches to solving regression problems given, in order of decreasing complexity, by: (a) First solve the inference problem of determining the joint density p(x, t). Then normalize to ﬁnd the conditional density p(t|x), and ﬁnally marginalize to ﬁnd the conditional mean given by (1.89).",Loss functions for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,48,236,"(b) First solve the inference problem of determining the conditional density p(t|x), and then subsequently marginalize to ﬁnd the conditional mean given by (1.89).",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,48,237,(c) Find a regression function y(x) directly from the training data. The relative merits of these three approaches follow the same lines as for classiﬁca- tion problems above.,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,48,238,"The squared loss is not the only possible choice of loss function for regression. Indeed, there are situations in which squared loss can lead to very poor results and where we need to develop more sophisticated approaches. An important example concerns situations in which the conditional distribution p(t|x) is multimodal, as often arises in the solution of inverse problems. Here we consider brieﬂy one simple generalization of the squared loss, called the Minkowski loss, whose expectation is given by E[Lq] =  |y(x) −t|qp(x, t) dx dt (1.91) which reduces to the expected squared loss for q = 2. The function |y −t|q is plotted against y −t for various values of q in Figure 1.29. The minimum of E[Lq] is given by the conditional mean for q = 2, the conditional median for q = 1, and the conditional mode for q →0.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,48,239,"In this chapter, we have discussed a variety of concepts from probability theory and decision theory that will form the foundations for much of the subsequent discussion in this book. We close this chapter by introducing some additional concepts from the ﬁeld of information theory, which will also prove useful in our development of pattern recognition and machine learning techniques. Again, we shall focus only on the key concepts, and we refer the reader elsewhere for more detailed discussions (Viterbi and Omura, 1979; Cover and Thomas, 1991; MacKay, 2003) .",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,49,240,Figure 1.29 Plots of the quantity Lq = |y −t|q for various values of q.,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,49,241,"We begin by considering a discrete random variable x and we ask how much information is received when we observe a speciﬁc value for this variable. The amount of information can be viewed as the ‘degree of surprise’ on learning the value of x. If we are told that a highly improbable event has just occurred, we will have received more information than if we were told that some very likely event has just occurred, and if we knew that the event was certain to happen we would receive no information. Our measure of information content will therefore depend on the probability distribution p(x), and we therefore look for a quantity h(x) that is a monotonic function of the probability p(x) and that expresses the information content. The form of h(·) can be found by noting that if we have two events x and y that are unrelated, then the information gain from observing both of them should be the sum of the information gained from each of them separately, so that h(x, y) = h(x) + h(y). Two unrelated events will be statistically independent and so p(x, y) = p(x)p(y). From these two relationships, it is easily shown that h(x) must be given by the logarithm of p(x) and so we have \end{verbatim} egin{verbatim} y −t |y −t|q q = 0.3 −2 −1 0 1 2 0 1 2 y −t |y −t|q q = 1 −2 −1 0 1 2 0 1 2 y −t |y −t|q q = 2 −2 −1 0 1 2 0 1 2 y −t |y −t|q q = 10 −2 −1 0 1 2 0 1 2 h(x) = −log2 p(x) (1.92) where the negative sign ensures that information is positive or zero. Note that low probability events x correspond to high information content. The choice of basis for the logarithm is arbitrary, and for the moment we shall adopt the convention prevalent in information theory of using logarithms to the base of 2. In this case, as we shall see shortly, the units of h(x) are bits (‘binary digits’).",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,49,242,Now suppose that a sender wishes to transmit the value of a random variable to a receiver. The average amount of information that they transmit in the process is obtained by taking the expectation of (1.92) with respect to the distribution p(x) and is given by H[x] = −  x p(x) log2 p(x).,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,49,243,This important quantity is called the entropy of the random variable x. Note that limp→0 p ln p = 0 and so we shall take p(x) ln p(x) = 0 whenever we encounter a value for x such that p(x) = 0.,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,244,"So far we have given a rather heuristic motivation for the deﬁnition of informa- \end{verbatim} egin{verbatim} tion (1.92) and the corresponding entropy (1.93). We now show that these deﬁnitions indeed possess useful properties. Consider a random variable x having 8 possible states, each of which is equally likely. In order to communicate the value of x to a receiver, we would need to transmit a message of length 3 bits. Notice that the entropy of this variable is given by H[x] = −8 × 1 8 log2 1 8 = 3 bits.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,245,"Now consider an example (Cover and Thomas, 1991) of a variable having 8 pos- sible states {a, b, c, d, e, f, g, h} for which the respective probabilities are given by ( 1 2, 1 4, 1 8, 1 16, 1 64, 1 64, 1 64, 1 64). The entropy in this case is given by H[x] = −1 2 log2 1 2 −1 4 log2 1 4 −1 8 log2 1 8 −1 16 log2 1 16 −4 64 log2 1 64 = 2 bits.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,246,"We see that the nonuniform distribution has a smaller entropy than the uniform one, and we shall gain some insight into this shortly when we discuss the interpretation of entropy in terms of disorder. For the moment, let us consider how we would transmit the identity of the variable’s state to a receiver. We could do this, as before, using a 3-bit number. However, we can take advantage of the nonuniform distribution by using shorter codes for the more probable events, at the expense of longer codes for the less probable events, in the hope of getting a shorter average code length. This can be done by representing the states {a, b, c, d, e, f, g, h} using, for instance, the following set of code strings: 0, 10, 110, 1110, 111100, 111101, 111110, 111111.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,247,"The average length of the code that has to be transmitted is then average code length = 1 2 × 1 + 1 4 × 2 + 1 8 × 3 + 1 16 × 4 + 4 × 1 64 × 6 = 2 bits which again is the same as the entropy of the random variable. Note that shorter code strings cannot be used because it must be possible to disambiguate a concatenation of such strings into its component parts. For instance, 11001110 decodes uniquely into the state sequence c, a, d.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,248,"This relation between entropy and shortest coding length is a general one. The noiseless coding theorem (Shannon, 1948) states that the entropy is a lower bound on the number of bits needed to transmit the state of a random variable.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,249,"From now on, we shall switch to the use of natural logarithms in deﬁning en- tropy, as this will provide a more convenient link with ideas elsewhere in this book.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,50,250,"In this case, the entropy is measured in units of ‘nats’ instead of bits, which differ simply by a factor of ln 2.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,51,251,"We have introduced the concept of entropy in terms of the average amount of information needed to specify the state of a random variable. In fact, the concept of entropy has much earlier origins in physics where it was introduced in the context of equilibrium thermodynamics and later given a deeper interpretation as a measure of disorder through developments in statistical mechanics. We can understand this alternative view of entropy by considering a set of N identical objects that are to be divided amongst a set of bins, such that there are ni objects in the ith bin. Consider \end{verbatim} egin{verbatim} the number of different ways of allocating the objects to the bins. There are N ways to choose the ﬁrst object, (N −1) ways to choose the second object, and so on, leading to a total of N! ways to allocate all N objects to the bins, where N! (pronounced ‘factorial N’) denotes the product N ×(N −1)×· · ·×2×1. However, we don’t wish to distinguish between rearrangements of objects within each bin. In the ith bin there are ni! ways of reordering the objects, and so the total number of ways of allocating the N objects to the bins is given by W = N!  i ni! (1.94) which is called the multiplicity. The entropy is then deﬁned as the logarithm of the multiplicity scaled by an appropriate constant H = 1 N ln W = 1 N ln N! −1 N  i ln ni!.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,51,252,"We now consider the limit N →∞, in which the fractions ni/N are held ﬁxed, and apply Stirling’s approximation ln N! ≃N ln N −N (1.96) which gives H = −lim N→∞  i ni N  ln ni N  = −  i pi ln pi (1.97) where we have used  i ni = N. Here pi = limN→∞(ni/N) is the probability of an object being assigned to the ith bin. In physics terminology, the speciﬁc ar- rangements of objects in the bins is called a microstate, and the overall distribution of occupation numbers, expressed through the ratios ni/N, is called a macrostate.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,51,253,"The multiplicity W is also known as the weight of the macrostate. We can interpret the bins as the states xi of a discrete random variable X, where p(X = xi) = pi. The entropy of the random variable X is then H[p] = −  i p(xi) ln p(xi).",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,52,254,Figure 1.30 Histograms of two probability distributions over 30 bins illustrating the higher value of the entropy H for the broader distribution. The largest entropy would arise from a uniform distribution that would give H = −ln(1/30) = 3.40.,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,52,255,"Distributions p(xi) that are sharply peaked around a few values will have a relatively low entropy, whereas those that are spread more evenly across many values will have higher entropy, as illustrated in Figure 1.30. Because 0 ⩽pi ⩽1, the entropy is nonnegative, and it will equal its minimum value of 0 when one of the pi = 1 and all other pj̸=i = 0. The maximum entropy conﬁguration can be found by maximizing H using a Lagrange multiplier to enforce the normalization constraint Appendix E on the probabilities. Thus we maximize H = −  i p(xi) ln p(xi) + λ  i p(xi) −1  (1.99) \end{verbatim} egin{verbatim} probabilities H = 1.77 0 0.25 0.5 probabilities H = 3.09 0 0.25 0.5 from which we ﬁnd that all of the p(xi) are equal and are given by p(xi) = 1/M where M is the total number of states xi. The corresponding value of the entropy is then H = ln M. This result can also be derived from Jensen’s inequality (to be discussed shortly). To verify that the stationary point is indeed a maximum, we can evaluate the second derivative of the entropy, which gives ∂H ∂p(xi)∂p(xj) = −Iij 1 pi (1.100) where Iij are the elements of the identity matrix.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,52,256,"We can extend the deﬁnition of entropy to include distributions p(x) over con- tinuous variables x as follows. First divide x into bins of width ∆. Then, assuming p(x) is continuous, the mean value theorem (Weisstein, 1999) tells us that, for each such bin, there must exist a value xi such that  (i+1)∆ i∆ p(x) dx = p(xi)∆.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,53,257,"We can now quantize the continuous variable x by assigning any value x to the value xi whenever x falls in the ith bin. The probability of observing the value xi is then p(xi)∆. This gives a discrete distribution for which the entropy takes the form H∆= −  i p(xi)∆ln (p(xi)∆) = −  i p(xi)∆ln p(xi) −ln ∆ (1.102) where we have used  i p(xi)∆= 1, which follows from (1.101). We now omit the second term −ln ∆on the right-hand side of (1.102) and then consider the limit \end{verbatim} egin{verbatim} ∆→0. The ﬁrst term on the right-hand side of (1.102) will approach the integral of p(x) ln p(x) in this limit so that lim ∆→0  i p(xi)∆ln p(xi)  = −  p(x) ln p(x) dx (1.103) where the quantity on the right-hand side is called the differential entropy. We see that the discrete and continuous forms of the entropy differ by a quantity ln ∆, which diverges in the limit ∆→0. This reﬂects the fact that to specify a continuous variable very precisely requires a large number of bits. For a density deﬁned over multiple continuous variables, denoted collectively by the vector x, the differential entropy is given by H[x] = −  p(x) ln p(x) dx.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,53,258,"In the case of discrete distributions, we saw that the maximum entropy con- ﬁguration corresponded to an equal distribution of probabilities across the possible states of the variable. Let us now consider the maximum entropy conﬁguration for a continuous variable. In order for this maximum to be well deﬁned, it will be nec- essary to constrain the ﬁrst and second moments of p(x) as well as preserving the normalization constraint. We therefore maximize the differential entropy with the Ludwig Boltzmann 1844–1906 Ludwig Eduard Boltzmann was an Austrian physicist who created the ﬁeld of statistical mechanics. Prior to Boltzmann, the concept of en- tropy was already known from classical thermodynamics where it quantiﬁes the fact that when we take energy from a system, not all of that energy is typically available to do useful work. Boltzmann showed that the ther- modynamic entropy S, a macroscopic quantity, could be related to the statistical properties at the micro- scopic level. This is expressed through the famous equation S = k ln W in which W represents the number of possible microstates in a macrostate, and k ≃1.38 × 10−23 (in units of Joules per Kelvin) is known as Boltzmann’s constant.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,53,259,"were disputed by many scientists of they day. One dif- ﬁculty they saw arose from the second law of thermo- dynamics, which states that the entropy of a closed system tends to increase with time. By contrast, at the microscopic level the classical Newtonian equa- tions of physics are reversible, and so they found it difﬁcult to see how the latter could explain the for- mer.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,53,260,"They didn’t fully appreciate Boltzmann’s argu- ments, which were statistical in nature and which con- cluded not that entropy could never decrease over time but simply that with overwhelming probability it would generally increase. Boltzmann even had a long- running dispute with the editor of the leading German physics journal who refused to let him refer to atoms and molecules as anything other than convenient the- oretical constructs. The continued attacks on his work lead to bouts of depression, and eventually he com- mitted suicide. Shortly after Boltzmann’s death, new experiments by Perrin on colloidal suspensions veri- ﬁed his theories and conﬁrmed the value of the Boltz- mann constant. The equation S = k ln W is carved on Boltzmann’s tombstone.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,54,261,The constrained maximization can be performed using Lagrange multipliers so that Appendix E we maximize the following functional with respect to p(x) −  ∞ −∞ p(x) ln p(x) dx + λ1  ∞ −∞ p(x) dx −1  +λ2  ∞ −∞ xp(x) dx −µ  + λ3  ∞ −∞ (x −µ)2p(x) dx −σ2  .,Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,54,262,"Using the calculus of variations, we set the derivative of this functional to zero giving Appendix D p(x) = exp  −1 + λ1 + λ2x + λ3(x −µ)2 .",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,54,263,"The Lagrange multipliers can be found by back substitution of this result into the three constraint equations, leading ﬁnally to the result p(x) = 1 (2πσ2)1/2 exp −(x −µ)2 2σ2 (1.109) and so the distribution that maximizes the differential entropy is the Gaussian. Note that we did not constrain the distribution to be nonnegative when we maximized the entropy. However, because the resulting distribution is indeed nonnegative, we see with hindsight that such a constraint is not necessary.",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,54,264,"If we evaluate the differential entropy of the Gaussian, we obtain H[x] = 1 2  1 + ln(2πσ2) .",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,54,265,"Thus we see again that the entropy increases as the distribution becomes broader, i.e., as σ2 increases. This result also shows that the differential entropy, unlike the discrete entropy, can be negative, because H(x) < 0 in (1.110) for σ2 < 1/(2πe).",Information Theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,55,266,"Suppose we have a joint distribution p(x, y) from which we draw pairs of values of x and y. If a value of x is already known, then the additional information needed to specify the corresponding value of y is given by −ln p(y|x). Thus the average additional information needed to specify y can be written as H[y|x] = −  p(y, x) ln p(y|x) dy dx (1.111) \end{verbatim} egin{verbatim} which is called the conditional entropy of y given x. It is easily seen, using the product rule, that the conditional entropy satisﬁes the relation H[x, y] = H[y|x] + H[x] (1.112) where H[x, y] is the differential entropy of p(x, y) and H[x] is the differential en- tropy of the marginal distribution p(x). Thus the information needed to describe x and y is given by the sum of the information needed to describe x alone plus the additional information required to specify y given x.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,55,267,"So far in this section, we have introduced a number of concepts from information theory, including the key notion of entropy. We now start to relate these ideas to pattern recognition. Consider some unknown distribution p(x), and suppose that we have modelled this using an approximating distribution q(x). If we use q(x) to construct a coding scheme for the purpose of transmitting values of x to a receiver, then the average additional amount of information (in nats) required to specify the value of x (assuming we choose an efﬁcient coding scheme) as a result of using q(x) instead of the true distribution p(x) is given by KL(p∥q) = −  p(x) ln q(x) dx −  −  p(x) ln p(x) dx  = −  p(x) ln q(x) p(x) dx.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,55,268,"This is known as the relative entropy or Kullback-Leibler divergence, or KL diver- gence (Kullback and Leibler, 1951), between the distributions p(x) and q(x). Note that it is not a symmetrical quantity, that is to say KL(p∥q) ̸≡KL(q∥p).",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,55,269,"We now show that the Kullback-Leibler divergence satisﬁes KL(p∥q) ⩾0 with equality if, and only if, p(x) = q(x). To do this we ﬁrst introduce the concept of convex functions. A function f(x) is said to be convex if it has the property that every chord lies on or above the function, as shown in Figure 1.31. Any value of x in the interval from x = a to x = b can be written in the form λa + (1 −λ)b where 0 ⩽λ ⩽1. The corresponding point on the chord is given by λf(a) + (1 −λ)f(b), Claude Shannon 1916–2001 After graduating from Michigan and MIT, Shannon joined the AT&T Bell Telephone laboratories in 1941. His paper ‘A Mathematical Theory of Communication’ published in the Bell System Technical Journal in 1948 laid the foundations for modern information the- ory. This paper introduced the word ‘bit’, and his con- cept that information could be sent as a stream of 1s and 0s paved the way for the communications revo- lution. It is said that von Neumann recommended to Shannon that he use the term entropy, not only be- cause of its similarity to the quantity used in physics, but also because “nobody knows what entropy really is, so in any discussion you will always have an advan- tage”.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,56,270,Figure 1.31 A convex function f(x) is one for which ev- ery chord (shown in blue) lies on or above the function (shown in red).,Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,56,271,and the corresponding value of the function is f (λa + (1 −λ)b). Convexity then implies f(λa + (1 −λ)b) ⩽λf(a) + (1 −λ)f(b).,Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,56,272,This is equivalent to the requirement that the second derivative of the function be everywhere positive. Examples of convex functions are x ln x (for x > 0) and x2. A function is called strictly convex if the equality is satisﬁed only for λ = 0 and λ = 1.,Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,56,273,"If a function has the opposite property, namely that every chord lies on or below the function, it is called concave, with a corresponding deﬁnition for strictly concave. If a function f(x) is convex, then −f(x) will be concave.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,56,274,"Using the technique of proof by induction, we can show from (1.114) that a convex function f(x) satisﬁes f  M  i=1 λixi  ⩽ M  i=1 λif(xi) (1.115) where λi ⩾0 and  i λi = 1, for any set of points {xi}. The result (1.115) is known as Jensen’s inequality. If we interpret the λi as the probability distribution over a discrete variable x taking the values {xi}, then (1.115) can be written f (E[x]) ⩽E[f(x)] (1.116) where E[·] denotes the expectation. For continuous variables, Jensen’s inequality takes the form f  xp(x) dx  ⩽  f(x)p(x) dx.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,57,275,"We can apply Jensen’s inequality in the form (1.117) to the Kullback-Leibler divergence (1.113) to give KL(p∥q) = −  p(x) ln q(x) p(x) dx ⩾−ln  q(x) dx = 0 (1.118) \end{verbatim} egin{verbatim} where we have used the fact that −ln x is a convex function, together with the nor- malization condition q(x) dx = 1. In fact, −ln x is a strictly convex function, so the equality will hold if, and only if, q(x) = p(x) for all x. Thus we can in- terpret the Kullback-Leibler divergence as a measure of the dissimilarity of the two distributions p(x) and q(x).",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,57,276,"We see that there is an intimate relationship between data compression and den- sity estimation (i.e., the problem of modelling an unknown probability distribution) because the most efﬁcient compression is achieved when we know the true distri- bution. If we use a distribution that is different from the true one, then we must necessarily have a less efﬁcient coding, and on average the additional information that must be transmitted is (at least) equal to the Kullback-Leibler divergence be- tween the two distributions.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,57,277,"Suppose that data is being generated from an unknown distribution p(x) that we wish to model. We can try to approximate this distribution using some parametric distribution q(x|θ), governed by a set of adjustable parameters θ, for example a multivariate Gaussian. One way to determine θ is to minimize the Kullback-Leibler divergence between p(x) and q(x|θ) with respect to θ. We cannot do this directly because we don’t know p(x). Suppose, however, that we have observed a ﬁnite set of training points xn, for n = 1, . . . , N, drawn from p(x). Then the expectation with respect to p(x) can be approximated by a ﬁnite sum over these points, using (1.35), so that KL(p∥q) ≃ N  n=1 {−ln q(xn|θ) + ln p(xn)} .",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,57,278,"The second term on the right-hand side of (1.119) is independent of θ, and the ﬁrst term is the negative log likelihood function for θ under the distribution q(x|θ) eval- uated using the training set. Thus we see that minimizing this Kullback-Leibler divergence is equivalent to maximizing the likelihood function.",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,57,279,"Now consider the joint distribution between two sets of variables x and y given by p(x, y). If the sets of variables are independent, then their joint distribution will factorize into the product of their marginals p(x, y) = p(x)p(y). If the variables are not independent, we can gain some idea of whether they are ‘close’ to being indepen- dent by considering the Kullback-Leibler divergence between the joint distribution and the product of the marginals, given by I[x, y] ≡ KL(p(x, y)∥p(x)p(y)) = −  p(x, y) ln p(x)p(y) p(x, y)  dx dy (1.120) which is called the mutual information between the variables x and y. From the properties of the Kullback-Leibler divergence, we see that I(x, y) ⩾0 with equal- ity if, and only if, x and y are independent. Using the sum and product rules of probability, we see that the mutual information is related to the conditional entropy through I[x, y] = H[x] −H[x|y] = H[y] −H[y|x].",Relative entropy and mutual information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,58,280,"Thus we can view the mutual information as the reduction in the uncertainty about x by virtue of being told the value of y (or vice versa). From a Bayesian perspective, we can view p(x) as the prior distribution for x and p(x|y) as the posterior distribu- tion after we have observed new data y. The mutual information therefore represents the reduction in uncertainty about x as a consequence of the new observation y.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,58,281,"Consider the sum-of-squares error function given by (1.2) in which the function y(x, w) is given by the polynomial (1.1). Show that the coefﬁcients w = {wi} that minimize this error function are given by the solution to the following set of linear equations M  j=0 Aijwj = Ti (1.122) where Aij = N  n=1 (xn)i+j, Ti = N  n=1 (xn)itn.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,58,282,"Here a sufﬁx i or j denotes the index of a component, whereas (x)i denotes x raised to the power of i.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,58,283,"Write down the set of coupled linear equations, analogous to (1.122), satisﬁed by the coefﬁcients wi which minimize the regularized sum-of-squares error function given by (1.4).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,58,284,"Suppose that we have three coloured boxes r (red), b (blue), and g (green). Box r contains 3 apples, 4 oranges, and 3 limes, box b contains 1 apple, 1 orange, and 0 limes, and box g contains 3 apples, 3 oranges, and 4 limes. If a box is chosen at random with probabilities p(r) = 0.2, p(b) = 0.2, p(g) = 0.6, and a piece of fruit is removed from the box (with equal probability of selecting any of the items in the box), then what is the probability of selecting an apple? If we observe that the selected fruit is in fact an orange, what is the probability that it came from the green box? 1.4 (⋆⋆) www Consider a probability density px(x) deﬁned over a continuous vari- able x, and suppose that we make a nonlinear change of variable using x = g(y), so that the density transforms according to (1.27). By differentiating (1.27), show that the location y of the maximum of the density in y is not in general related to the location x of the maximum of the density over x by the simple functional relation x = g(y) as a consequence of the Jacobian factor. This shows that the maximum of a probability density (in contrast to a simple function) is dependent on the choice of variable. Verify that, in the case of a linear transformation, the location of the maximum transforms in the same way as the variable itself.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,285,"(⋆) Using the deﬁnition (1.38) show that var[f(x)] satisﬁes (1.39). \end{verbatim} egin{verbatim} 1.6 (⋆) Show that if two variables x and y are independent, then their covariance is zero.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,286,"In this exercise, we prove the normalization condition (1.48) for the univariate Gaussian. To do this consider, the integral I =  ∞ −∞ exp  −1 2σ2 x2  dx (1.124) which we can evaluate by ﬁrst writing its square in the form I2 =  ∞ −∞  ∞ −∞ exp  −1 2σ2 x2 − 1 2σ2 y2  dx dy.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,287,"Now make the transformation from Cartesian coordinates (x, y) to polar coordinates (r, θ) and then substitute u = r2. Show that, by performing the integrals over θ and u, and then taking the square root of both sides, we obtain I = 2πσ21/2 .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,288,"Finally, use this result to show that the Gaussian distribution N(x|µ, σ2) is normal- ized.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,289,"By using a change of variables, verify that the univariate Gaussian distribution given by (1.46) satisﬁes (1.49). Next, by differentiating both sides of the normalization condition  ∞ −∞ N x|µ, σ2 dx = 1 (1.127) with respect to σ2, verify that the Gaussian satisﬁes (1.50). Finally, show that (1.51) holds.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,290,"Show that the mode (i.e. the maximum) of the Gaussian distribution (1.46) is given by µ. Similarly, show that the mode of the multivariate Gaussian (1.52) is given by µ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,291,Suppose that the two variables x and z are statistically independent. Show that the mean and variance of their sum satisﬁes E[x + z] = E[x] + E[z] (1.128) var[x + z] = var[x] + var[z].,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,59,292,"(⋆) By setting the derivatives of the log likelihood function (1.54) with respect to µ and σ2 equal to zero, verify the results (1.55) and (1.56).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,293,"Using the results (1.49) and (1.50), show that E[xnxm] = µ2 + Inmσ2 (1.130) where xn and xm denote data points sampled from a Gaussian distribution with mean µ and variance σ2, and Inm satisﬁes Inm = 1 if n = m and Inm = 0 otherwise.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,294,Hence prove the results (1.57) and (1.58). 1.13 (⋆) Suppose that the variance of a Gaussian is estimated using the result (1.56) but with the maximum likelihood estimate µML replaced with the true value µ of the mean. Show that this estimator has the property that its expectation is given by the true variance σ2.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,295,"Show that an arbitrary square matrix with elements wij can be written in the form wij = wS ij + wA ij where wS ij and wA ij are symmetric and anti-symmetric matrices, respectively, satisfying wS ij = wS ji and wA ij = −wA ji for all i and j. Now consider the second order term in a higher order polynomial in D dimensions, given by D  i=1 D  j=1 wijxixj.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,296,"so that the contribution from the anti-symmetric matrix vanishes. We therefore see that, without loss of generality, the matrix of coefﬁcients wij can be chosen to be symmetric, and so not all of the D2 elements of this matrix can be chosen indepen- dently. Show that the number of independent parameters in the matrix wS ij is given by D(D + 1)/2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,297,"In this exercise and the next, we explore how the number of indepen- dent parameters in a polynomial grows with the order M of the polynomial and with the dimensionality D of the input space. We start by writing down the M th order term for a polynomial in D dimensions in the form D  i1=1 D  i2=1 · · · D  iM =1 wi1i2···iMxi1xi2 · · · xiM.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,60,298,"The coefﬁcients wi1i2···iM comprise DM elements, but the number of independent parameters is signiﬁcantly fewer due to the many interchange symmetries of the factor xi1xi2 · · · xiM . Begin by showing that the redundancy in the coefﬁcients can be removed by rewriting this M th order term in the form D  i1=1 i1  i2=1 · · · iM−1  iM =1 wi1i2···iMxi1xi2 · · · xiM.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,61,299,"Note that the precise relationship between the w coefﬁcients and w coefﬁcients need not be made explicit. Use this result to show that the number of independent param- eters n(D, M), which appear at order M, satisﬁes the following recursion relation n(D, M) = D  i=1 n(i, M −1).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,61,300,"Next use proof by induction to show that the following result holds D  i=1 (i + M −2)! (i −1)! (M −1)! = (D + M −1)! (D −1)! M! (1.136) which can be done by ﬁrst proving the result for D = 1 and arbitrary M by making use of the result 0! = 1, then assuming it is correct for dimension D and verifying that it is correct for dimension D + 1. Finally, use the two previous results, together with proof by induction, to show n(D, M) = (D + M −1)! (D −1)! M! .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,61,301,"To do this, ﬁrst show that the result is true for M = 2, and any value of D ⩾1, by comparison with the result of Exercise 1.14. Then make use of (1.135), together with (1.136), to show that, if the result holds at order M −1, then it will also hold at order M 1.16 (⋆⋆⋆) In Exercise 1.15, we proved the result (1.135) for the number of independent parameters in the M th order term of a D-dimensional polynomial. We now ﬁnd an expression for the total number N(D, M) of independent parameters in all of the terms up to and including the M6th order. First show that N(D, M) satisﬁes N(D, M) = M  m=0 n(D, m) (1.138) where n(D, m) is the number of independent parameters in the term of order m.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,61,302,"Now make use of the result (1.137), together with proof by induction, to show that N(d, M) = (D + M)! D! M! .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,61,303,"This can be done by ﬁrst proving that the result holds for M = 0 and arbitrary D ⩾1, then assuming that it holds at order M, and hence showing that it holds at order M + 1. Finally, make use of Stirling’s approximation in the form n! ≃nne−n (1.140) for large n to show that, for D ≫M, the quantity N(D, M) grows like DM, and for M ≫D it grows like M D. Consider a cubic (M = 3) polynomial in D dimensions, and evaluate numerically the total number of independent parameters for (i) D = 10 and (ii) D = 100, which correspond to typical small-scale and medium-scale machine learning applications.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,304,The gamma function is deﬁned by Γ(x) ≡  ∞ 0 ux−1e−u du.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,305,"Using integration by parts, prove the relation Γ(x + 1) = xΓ(x). Show also that Γ(1) = 1 and hence that Γ(x + 1) = x! when x is an integer.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,306,"We can use the result (1.126) to derive an expression for the surface area SD, and the volume VD, of a sphere of unit radius in D dimensions. To do this, consider the following result, which is obtained by transforming from Cartesian to polar coordinates D  i=1  ∞ −∞ e−x2 i dxi = SD  ∞ 0 e−r2rD−1 dr.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,307,"Using the deﬁnition (1.141) of the Gamma function, together with (1.126), evaluate both sides of this equation, and hence show that SD = 2πD/2 Γ(D/2).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,308,"Next, by integrating with respect to radius from 0 to 1, show that the volume of the unit sphere in D dimensions is given by VD = SD D .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,309,"Finally, use the results Γ(1) = 1 and Γ(3/2) = √π/2 to show that (1.143) and (1.144) reduce to the usual expressions for D = 2 and D = 3.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,310,"Consider a sphere of radius a in D-dimensions together with the concentric hypercube of side 2a, so that the sphere touches the hypercube at the centres of each of its sides. By using the results of Exercise 1.18, show that the ratio of the volume of the sphere to the volume of the cube is given by volume of sphere volume of cube = πD/2 D2D−1Γ(D/2).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,62,311,"Now make use of Stirling’s formula in the form Γ(x + 1) ≃(2π)1/2e−xxx+1/2 (1.146) which is valid for x ≫1, to show that, as D →∞, the ratio (1.145) goes to zero.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,312,"Show also that the ratio of the distance from the centre of the hypercube to one of the corners, divided by the perpendicular distance to one of the sides, is √ D, which therefore goes to ∞as D →∞. From these results we see that, in a space of high dimensionality, most of the volume of a cube is concentrated in the large number of corners, which themselves become very long ‘spikes’! \end{verbatim} egin{verbatim} 1.20 (⋆⋆) www In this exercise, we explore the behaviour of the Gaussian distribution in high-dimensional spaces. Consider a Gaussian distribution in D dimensions given by p(x) = 1 (2πσ2)D/2 exp  −∥x∥2 2σ2  .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,313,"We wish to ﬁnd the density with respect to radius in polar coordinates in which the direction variables have been integrated out. To do this, show that the integral of the probability density over a thin shell of radius r and thickness ϵ, where ϵ ≪1, is given by p(r)ϵ where p(r) = SDrD−1 (2πσ2)D/2 exp  −r2 2σ2  (1.148) where SD is the surface area of a unit sphere in D dimensions. Show that the function p(r) has a single stationary point located, for large D, at r ≃ √ Dσ. By considering p(r + ϵ) where ϵ ≪r, show that for large D, p(r + ϵ) = p(r) exp  −3ϵ2 2σ2  (1.149) which shows that r is a maximum of the radial probability density and also that p(r) decays exponentially away from its maximum at r with length scale σ. We have already seen that σ ≪r for large D, and so we see that most of the probability mass is concentrated in a thin shell at large radius. Finally, show that the probability density p(x) is larger at the origin than at the radius r by a factor of exp(D/2).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,314,We therefore see that most of the probability mass in a high-dimensional Gaussian distribution is located at a different radius from the region of high probability density.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,315,This property of distributions in spaces of high dimensionality will have important consequences when we consider Bayesian inference of model parameters in later chapters.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,316,"Consider two nonnegative numbers a and b, and show that, if a ⩽b, then a ⩽(ab)1/2. Use this result to show that, if the decision regions of a two-class classiﬁcation problem are chosen to minimize the probability of misclassiﬁcation, this probability will satisfy p(mistake) ⩽  {p(x, C1)p(x, C2)}1/2 dx.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,63,317,"Given a loss matrix with elements Lkj, the expected risk is minimized if, for each x, we choose the class that minimizes (1.81). Verify that, when the loss matrix is given by Lkj = 1 −Ikj, where Ikj are the elements of the identity matrix, this reduces to the criterion of choosing the class having the largest posterior probability. What is the interpretation of this form of loss matrix? 1.23 (⋆) Derive the criterion for minimizing the expected loss when there is a general loss matrix and general prior probabilities for the classes.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,318,"Consider a classiﬁcation problem in which the loss incurred when an input vector from class Ck is classiﬁed as belonging to class Cj is given by the loss matrix Lkj, and for which the loss incurred in selecting the reject option is λ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,319,"Find the decision criterion that will give the minimum expected loss. Verify that this reduces to the reject criterion discussed in Section 1.5.3 when the loss matrix is given by Lkj = 1 −Ikj. What is the relationship between λ and the rejection threshold θ? 1.25 (⋆) www Consider the generalization of the squared loss function (1.87) for a single target variable t to the case of multiple target variables described by the vector t given by E[L(t, y(x))] =  ∥y(x) −t∥2p(x, t) dx dt.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,320,"Using the calculus of variations, show that the function y(x) for which this expected loss is minimized is given by y(x) = Et[t|x]. Show that this result reduces to (1.89) for the case of a single target variable t.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,321,"By expansion of the square in (1.151), derive a result analogous to (1.90) and hence show that the function y(x) that minimizes the expected squared loss for the case of a vector t of target variables is again given by the conditional expectation of t.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,322,"Consider the expected loss for regression problems under the Lq loss function given by (1.91). Write down the condition that y(x) must satisfy in order to minimize E[Lq]. Show that, for q = 1, this solution represents the conditional median, i.e., the function y(x) such that the probability mass for t < y(x) is the same as for t ⩾y(x). Also show that the minimum expected Lq loss for q →0 is given by the conditional mode, i.e., by the function y(x) equal to the value of t that maximizes p(t|x) for each x.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,323,"(⋆) In Section 1.6, we introduced the idea of entropy h(x) as the information gained on observing the value of a random variable x having distribution p(x). We saw that, for independent variables x and y for which p(x, y) = p(x)p(y), the entropy functions are additive, so that h(x, y) = h(x) + h(y). In this exercise, we derive the relation between h and p in the form of a function h(p). First show that h(p2) = 2h(p), and hence by induction that h(pn) = nh(p) where n is a positive integer.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,324,"Hence show that h(pn/m) = (n/m)h(p) where m is also a positive integer. This implies that h(px) = xh(p) where x is a positive rational number, and hence by continuity when it is a positive real number. Finally, show that this implies h(p) must take the form h(p) ∝ln p.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,325,"Consider an M-state discrete random variable x, and use Jensen’s in- equality in the form (1.115) to show that the entropy of its distribution p(x) satisﬁes H[x] ⩽ln M.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,64,326,"Evaluate the Kullback-Leibler divergence (1.113) between two Gaussians p(x) = N(x|µ, σ2) and q(x) = N(x|m, s2).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,327,"Table 1.3 The joint distribution p(x, y) for two binary variables x and y used in Exercise 1.39.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,328,"Consider two variables x and y having joint distribution p(x, y). Show that the differential entropy of this pair of variables satisﬁes H[x, y] ⩽H[x] + H[y] (1.152) with equality if, and only if, x and y are statistically independent.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,329,Consider a vector x of continuous variables with distribution p(x) and corre- sponding entropy H[x]. Suppose that we make a nonsingular linear transformation of x to obtain a new variable y = Ax. Show that the corresponding entropy is given by H[y] = H[x] + ln |A| where |A| denotes the determinant of A.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,330,"Suppose that the conditional entropy H[y|x] between two discrete random variables x and y is zero. Show that, for all values of x such that p(x) > 0, the variable y must be a function of x, in other words for each x there is only one value of y such that p(y|x) ̸= 0.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,331,"Use the calculus of variations to show that the stationary point of the functional (1.108) is given by (1.108). Then use the constraints (1.105), (1.106), and (1.107) to eliminate the Lagrange multipliers and hence show that the maximum entropy solution is given by the Gaussian (1.109).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,332,Use the results (1.106) and (1.107) to show that the entropy of the univariate Gaussian (1.109) is given by (1.110).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,333,A strictly convex function is deﬁned as one for which every chord lies above the function. Show that this is equivalent to the condition that the second derivative of the function be positive.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,334,"(⋆) Using the deﬁnition (1.111) together with the product rule of probability, prove the result (1.112).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,335,"Using proof by induction, show that the inequality (1.114) for convex functions implies the result (1.115).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,65,336,(⋆⋆⋆) Consider two binary variables x and y having the joint distribution given in Table 1.3.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,66,337,"Draw a diagram to show the relationship between these various quantities. \end{verbatim} egin{verbatim} 1.40 (⋆) By applying Jensen’s inequality (1.115) with f(x) = ln x, show that the arith- metic mean of a set of real numbers is never less than their geometrical mean.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Introduction,1,66,338,"Using the sum and product rules of probability, show that the mutual information I(x, y) satisﬁes the relation (1.121).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,67,339,"In Chapter 1, we emphasized the central role played by probability theory in the solution of pattern recognition problems. We turn now to an exploration of some particular examples of probability distributions and their properties. As well as be- ing of great interest in their own right, these distributions can form building blocks for more complex models and will be used extensively throughout the book. The distributions introduced in this chapter will also serve another important purpose, namely to provide us with the opportunity to discuss some key statistical concepts, such as Bayesian inference, in the context of simple models before we encounter them in more complex situations in later chapters.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,340,"One role for the distributions discussed in this chapter is to model the prob- ability distribution p(x) of a random variable x, given a ﬁnite set x1, . . . , xN of observations. This problem is known as density estimation. For the purposes of this chapter, we shall assume that the data points are independent and identically distributed. It should be emphasized that the problem of density estimation is fun- \end{verbatim} egin{verbatim} damentally ill-posed, because there are inﬁnitely many probability distributions that could have given rise to the observed ﬁnite data set. Indeed, any distribution p(x) that is nonzero at each of the data points x1, . . . , xN is a potential candidate. The issue of choosing an appropriate distribution relates to the problem of model selec- tion that has already been encountered in the context of polynomial curve ﬁtting in Chapter 1 and that is a central issue in pattern recognition.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,341,We begin by considering the binomial and multinomial distributions for discrete random variables and the Gaussian distribution for continuous random variables.,Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,342,"These are speciﬁc examples of parametric distributions, so-called because they are governed by a small number of adaptive parameters, such as the mean and variance in the case of a Gaussian for example. To apply such models to the problem of density estimation, we need a procedure for determining suitable values for the parameters, given an observed data set. In a frequentist treatment, we choose speciﬁc values for the parameters by optimizing some criterion, such as the likelihood function. By contrast, in a Bayesian treatment we introduce prior distributions over the parameters and then use Bayes’ theorem to compute the corresponding posterior distribution given the observed data.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,343,"We shall see that an important role is played by conjugate priors, that lead to posterior distributions having the same functional form as the prior, and that there- fore lead to a greatly simpliﬁed Bayesian analysis. For example, the conjugate prior for the parameters of the multinomial distribution is called the Dirichlet distribution, while the conjugate prior for the mean of a Gaussian is another Gaussian. All of these distributions are examples of the exponential family of distributions, which possess a number of important properties, and which will be discussed in some detail.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,344,"One limitation of the parametric approach is that it assumes a speciﬁc functional form for the distribution, which may turn out to be inappropriate for a particular application. An alternative approach is given by nonparametric density estimation methods in which the form of the distribution typically depends on the size of the data set. Such models still contain parameters, but these control the model complexity rather than the form of the distribution. We end this chapter by considering three nonparametric methods based respectively on histograms, nearest-neighbours, and kernels.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,68,345,"We begin by considering a single binary random variable x ∈{0, 1}. For example, x might describe the outcome of ﬂipping a coin, with x = 1 representing ‘heads’, and x = 0 representing ‘tails’. We can imagine that this is a damaged coin so that the probability of landing heads is not necessarily the same as that of landing tails.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,346,"The probability of x = 1 will be denoted by the parameter µ so that p(x = 1|µ) = µ (2.1) \end{verbatim} egin{verbatim} where 0 ⩽µ ⩽1, from which it follows that p(x = 0|µ) = 1 −µ. The probability distribution over x can therefore be written in the form Bern(x|µ) = µx(1 −µ)1−x (2.2) which is known as the Bernoulli distribution. It is easily veriﬁed that this distribution is normalized and that it has mean and variance given by E[x] = µ (2.3) var[x] = µ(1 −µ).",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,347,"Now suppose we have a data set D = {x1, . . . , xN} of observed values of x. We can construct the likelihood function, which is a function of µ, on the assumption that the observations are drawn independently from p(x|µ), so that p(D|µ) = N  n=1 p(xn|µ) = N  n=1 µxn(1 −µ)1−xn.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,348,"In a frequentist setting, we can estimate a value for µ by maximizing the likelihood function, or equivalently by maximizing the logarithm of the likelihood. In the case of the Bernoulli distribution, the log likelihood function is given by ln p(D|µ) = N  n=1 ln p(xn|µ) = N  n=1 {xn ln µ + (1 −xn) ln(1 −µ)} .",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,349,"At this point, it is worth noting that the log likelihood function depends on the N observations xn only through their sum  n xn. This sum provides an example of a sufﬁcient statistic for the data under this distribution, and we shall study the impor- tant role of sufﬁcient statistics in some detail. If we set the derivative of ln p(D|µ) with respect to µ equal to zero, we obtain the maximum likelihood estimator µML = 1 N N  n=1 xn (2.7) Jacob Bernoulli 1654–1705 Jacob Bernoulli, also known as Jacques or James Bernoulli, was a Swiss mathematician and was the ﬁrst of many in the Bernoulli family to pursue a career in science and mathematics.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,350,"to study philosophy and theology against his will by his parents, he travelled extensively after graduating in order to meet with many of the leading scientists of his time, including Boyle and Hooke in England. When he returned to Switzerland, he taught mechanics and became Professor of Mathematics at Basel in 1687.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,69,351,"Unfortunately, rivalry between Jacob and his younger brother Johann turned an initially productive collabora- tion into a bitter and public dispute. Jacob’s most sig- niﬁcant contributions to mathematics appeared in The Art of Conjecture published in 1713, eight years after his death, which deals with topics in probability the- ory including what has become known as the Bernoulli distribution.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,70,352,Figure 2.1 Histogram plot of the binomial dis- tribution (2.9) as a function of m for N = 10 and µ = 0.25.,Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,70,353,"which is also known as the sample mean. If we denote the number of observations of x = 1 (heads) within this data set by m, then we can write (2.7) in the form µML = m N (2.8) so that the probability of landing heads is given, in this maximum likelihood frame- work, by the fraction of observations of heads in the data set.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,70,354,"Now suppose we ﬂip a coin, say, 3 times and happen to observe 3 heads. Then N = m = 3 and µML = 1. In this case, the maximum likelihood result would predict that all future observations should give heads. Common sense tells us that this is unreasonable, and in fact this is an extreme example of the over-ﬁtting associ- ated with maximum likelihood. We shall see shortly how to arrive at more sensible conclusions through the introduction of a prior distribution over µ.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,70,355,"We can also work out the distribution of the number m of observations of x = 1, given that the data set has size N. This is called the binomial distribution, and from (2.5) we see that it is proportional to µm(1 −µ)N−m. In order to obtain the normalization coefﬁcient we note that out of N coin ﬂips, we have to add up all of the possible ways of obtaining m heads, so that the binomial distribution can be written Bin(m|N, µ) = N m  µm(1 −µ)N−m (2.9) where N m  ≡ N! (N −m)!m! (2.10) is the number of ways of choosing m objects out of a total of N identical objects.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,70,356,"Figure 2.1 shows a plot of the binomial distribution for N = 10 and µ = 0.25. The mean and variance of the binomial distribution can be found by using the result of Exercise 1.10, which shows that for independent events the mean of the sum is the sum of the means, and the variance of the sum is the sum of the variances.",Binary Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,71,357,"Because m = x1 + . . . + xN, and for each observation the mean and variance are \end{verbatim} egin{verbatim} given by (2.3) and (2.4), respectively, we have E[m] ≡ N  m=0 mBin(m|N, µ) = Nµ (2.11) var[m] ≡ N  m=0 (m −E[m])2 Bin(m|N, µ) = Nµ(1 −µ).",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,71,358,"These results can also be proved directly using calculus. 2.1.1 We have seen in (2.8) that the maximum likelihood setting for the parameter µ in the Bernoulli distribution, and hence in the binomial distribution, is given by the fraction of the observations in the data set having x = 1. As we have already noted, this can give severely over-ﬁtted results for small data sets. In order to develop a Bayesian treatment for this problem, we need to introduce a prior distribution p(µ) over the parameter µ. Here we consider a form of prior distribution that has a simple interpretation as well as some useful analytical properties. To motivate this prior, we note that the likelihood function takes the form of the product of factors of the form µx(1 −µ)1−x. If we choose a prior to be proportional to powers of µ and (1 −µ), then the posterior distribution, which is proportional to the product of the prior and the likelihood function, will have the same functional form as the prior.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,71,359,"This property is called conjugacy and we will see several examples of it later in this chapter. We therefore choose a prior, called the beta distribution, given by Beta(µ|a, b) = Γ(a + b) Γ(a)Γ(b)µa−1(1 −µ)b−1 (2.13) where Γ(x) is the gamma function deﬁned by (1.141), and the coefﬁcient in (2.13) ensures that the beta distribution is normalized, so that  1 0 Beta(µ|a, b) dµ = 1.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,71,360,The mean and variance of the beta distribution are given by E[µ] = a a + b (2.15) var[µ] = ab (a + b)2(a + b + 1).,The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,71,361,The parameters a and b are often called hyperparameters because they control the distribution of the parameter µ. Figure 2.2 shows plots of the beta distribution for various values of the hyperparameters.,The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,72,362,"Figure 2.2 Plots of the beta distribution Beta(µ|a, b) given by (2.13) as a function of µ for various values of the hyperparameters a and b.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,72,363,"The posterior distribution of µ is now obtained by multiplying the beta prior (2.13) by the binomial likelihood function (2.9) and normalizing. Keeping only the factors that depend on µ, we see that this posterior distribution has the form p(µ|m, l, a, b) ∝µm+a−1(1 −µ)l+b−1 (2.17) \end{verbatim} egin{verbatim} µ a = 0.1 b = 0.1 0 0.5 1 0 1 2 3 µ a = 1 b = 1 0 0.5 1 0 1 2 3 µ a = 2 b = 3 0 0.5 1 0 1 2 3 µ a = 8 b = 4 0 0.5 1 0 1 2 3 where l = N −m, and therefore corresponds to the number of ‘tails’ in the coin example. We see that (2.17) has the same functional dependence on µ as the prior distribution, reﬂecting the conjugacy properties of the prior with respect to the like- lihood function. Indeed, it is simply another beta distribution, and its normalization coefﬁcient can therefore be obtained by comparison with (2.13) to give p(µ|m, l, a, b) = Γ(m + a + l + b) Γ(m + a)Γ(l + b)µm+a−1(1 −µ)l+b−1.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,73,364,"Figure 2.3 Illustration of one step of sequential Bayesian inference. The prior is given by a beta distribution with parameters a = 2, b = 2, and the likelihood function, given by (2.9) with N = m = 1, corresponds to a single observation of x = 1, so that the posterior is given by a beta distribution with parameters a = 3, b = 2.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,73,365,"We see that the effect of observing a data set of m observations of x = 1 and l observations of x = 0 has been to increase the value of a by m, and the value of b by l, in going from the prior distribution to the posterior distribution. This allows us to provide a simple interpretation of the hyperparameters a and b in the prior as an effective number of observations of x = 1 and x = 0, respectively. Note that a and b need not be integers. Furthermore, the posterior distribution can act as the prior if we subsequently observe additional data. To see this, we can imagine taking observations one at a time and after each observation updating the current posterior \end{verbatim} egin{verbatim} µ prior 0 0.5 1 0 1 2 µ likelihood function 0 0.5 1 0 1 2 µ posterior 0 0.5 1 0 1 2 distribution by multiplying by the likelihood function for the new observation and then normalizing to obtain the new, revised posterior distribution. At each stage, the posterior is a beta distribution with some total number of (prior and actual) observed values for x = 1 and x = 0 given by the parameters a and b. Incorporation of an additional observation of x = 1 simply corresponds to incrementing the value of a by 1, whereas for an observation of x = 0 we increment b by 1. Figure 2.3 illustrates one step in this process.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,73,366,"We see that this sequential approach to learning arises naturally when we adopt a Bayesian viewpoint. It is independent of the choice of prior and of the likelihood function and depends only on the assumption of i.i.d. data. Sequential methods make use of observations one at a time, or in small batches, and then discard them before the next observations are used. They can be used, for example, in real-time learning scenarios where a steady stream of data is arriving, and predictions must be made before all of the data is seen. Because they do not require the whole data set to be stored or loaded into memory, sequential methods are also useful for large data sets.",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,73,367,"Maximum likelihood methods can also be cast into a sequential framework. If our goal is to predict, as best we can, the outcome of the next trial, then we must evaluate the predictive distribution of x, given the observed data set D. From the sum and product rules of probability, this takes the form p(x = 1|D) =  1 0 p(x = 1|µ)p(µ|D) dµ =  1 0 µp(µ|D) dµ = E[µ|D].",The beta distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,74,368,"Using the result (2.18) for the posterior distribution p(µ|D), together with the result (2.15) for the mean of the beta distribution, we obtain p(x = 1|D) = m + a m + a + l + b (2.20) which has a simple interpretation as the total fraction of observations (both real ob- servations and ﬁctitious prior observations) that correspond to x = 1. Note that in the limit of an inﬁnitely large data set m, l →∞the result (2.20) reduces to the maximum likelihood result (2.8). As we shall see, it is a very general property that the Bayesian and maximum likelihood results will agree in the limit of an inﬁnitely \end{verbatim} egin{verbatim} large data set. For a ﬁnite data set, the posterior mean for µ always lies between the prior mean and the maximum likelihood estimate for µ corresponding to the relative frequencies of events given by (2.7).",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,74,369,"From Figure 2.2, we see that as the number of observations increases, so the posterior distribution becomes more sharply peaked. This can also be seen from the result (2.16) for the variance of the beta distribution, in which we see that the variance goes to zero for a →∞or b →∞. In fact, we might wonder whether it is a general property of Bayesian learning that, as we observe more and more data, the uncertainty represented by the posterior distribution will steadily decrease.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,74,370,"To address this, we can take a frequentist view of Bayesian learning and show that, on average, such a property does indeed hold. Consider a general Bayesian inference problem for a parameter θ for which we have observed a data set D, de- scribed by the joint distribution p(θ, D). The following result Eθ[θ] = ED [Eθ[θ|D]] (2.21) where Eθ[θ] ≡  p(θ)θ dθ (2.22) ED[Eθ[θ|D]] ≡   θp(θ|D) dθ p(D) dD (2.23) says that the posterior mean of θ, averaged over the distribution generating the data, is equal to the prior mean of θ. Similarly, we can show that varθ[θ] = ED [varθ[θ|D]] + varD [Eθ[θ|D]] .",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,74,371,"The term on the left-hand side of (2.24) is the prior variance of θ. On the right- hand side, the ﬁrst term is the average posterior variance of θ, and the second term measures the variance in the posterior mean of θ. Because this variance is a positive quantity, this result shows that, on average, the posterior variance of θ is smaller than the prior variance. The reduction in variance is greater if the variance in the posterior mean is greater. Note, however, that this result only holds on average, and that for a particular observed data set it is possible for the posterior variance to be larger than the prior variance.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,372,"Binary variables can be used to describe quantities that can take one of two possible values. Often, however, we encounter discrete variables that can take on one of K possible mutually exclusive states. Although there are various alternative ways to express such variables, we shall see shortly that a particularly convenient represen- tation is the 1-of-K scheme in which the variable is represented by a K-dimensional vector x in which one of the elements xk equals 1, and all remaining elements equal \end{verbatim} egin{verbatim} 0. So, for instance if we have a variable that can take K = 6 states and a particular observation of the variable happens to correspond to the state where x3 = 1, then x will be represented by x = (0, 0, 1, 0, 0, 0)T.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,373,"Note that such vectors satisfy K k=1 xk = 1. If we denote the probability of xk = 1 by the parameter µk, then the distribution of x is given p(x|µ) = K  k=1 µxk k (2.26) where µ = (µ1, . . . , µK)T, and the parameters µk are constrained to satisfy µk ⩾0 and  k µk = 1, because they represent probabilities. The distribution (2.26) can be regarded as a generalization of the Bernoulli distribution to more than two outcomes.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,374,"It is easily seen that the distribution is normalized  x p(x|µ) = K  k=1 µk = 1 (2.27) and that E[x|µ] =  x p(x|µ)x = (µ1, . . . , µM)T = µ.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,375,"Now consider a data set D of N independent observations x1, . . . , xN. The corresponding likelihood function takes the form p(D|µ) = N  n=1 K  k=1 µxnk k = K  k=1 µ( P n xnk) k = K  k=1 µmk k .",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,376,We see that the likelihood function depends on the N data points only through the K quantities mk =  n xnk (2.30) which represent the number of observations of xk = 1. These are called the sufﬁcient statistics for this distribution.,Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,377,"In order to ﬁnd the maximum likelihood solution for µ, we need to maximize ln p(D|µ) with respect to µk taking account of the constraint that the µk must sum to one. This can be achieved using a Lagrange multiplier λ and maximizing Appendix E K  k=1 mk ln µk + λ  K  k=1 µk −1  .",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,75,378,"Setting the derivative of (2.31) with respect to µk to zero, we obtain µk = −mk/λ.",Multinomial Variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,76,379,We can solve for the Lagrange multiplier λ by substituting (2.32) into the constraint  k µk = 1 to give λ = −N. Thus we obtain the maximum likelihood solution in the form µML k = mk N (2.33) which is the fraction of the N observations for which xk = 1.,The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,76,380,"We can consider the joint distribution of the quantities m1, . . . , mK, conditioned on the parameters µ and on the total number N of observations. From (2.29) this takes the form Mult(m1, m2, . . . , mK|µ, N) =  N m1m2 . . . mK  K  k=1 µmk k (2.34) which is known as the multinomial distribution. The normalization coefﬁcient is the number of ways of partitioning N objects into K groups of size m1, . . . , mK and is given by  N m1m2 . . . mK  = N! m1!m2! . . . mK!.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,76,381,Note that the variables mk are subject to the constraint K  k=1 mk = N.,The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,76,382,"We now introduce a family of prior distributions for the parameters {µk} of the multinomial distribution (2.34). By inspection of the form of the multinomial distribution, we see that the conjugate prior is given by p(µ|α) ∝ K  k=1 µαk−1 k (2.37) where 0 ⩽µk ⩽1 and  k µk = 1. Here α1, . . . , αK are the parameters of the distribution, and α denotes (α1, . . . , αK)T. Note that, because of the summation constraint, the distribution over the space of the {µk} is conﬁned to a simplex of dimensionality K −1, as illustrated for K = 3 in Figure 2.4.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,76,383,The normalized form for this distribution is by Dir(µ|α) = Γ(α0) Γ(α1) · · · Γ(αK) K  k=1 µαk−1 k (2.38) which is called the Dirichlet distribution. Here Γ(x) is the gamma function deﬁned by (1.141) while α0 = K  k=1 αk.,The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,384,"Figure 2.4 The Dirichlet distribution over three variables µ1, µ2, µ3 is conﬁned to a simplex (a bounded linear manifold) of the form shown, as a consequence of the constraints 0 ⩽µk ⩽1 and P k µk = 1.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,385,"Plots of the Dirichlet distribution over the simplex, for various settings of the param- eters αk, are shown in Figure 2.5.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,386,"Multiplying the prior (2.38) by the likelihood function (2.34), we obtain the posterior distribution for the parameters {µk} in the form p(µ|D, α) ∝p(D|µ)p(µ|α) ∝ K  k=1 µαk+mk−1 k .",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,387,"We see that the posterior distribution again takes the form of a Dirichlet distribution, conﬁrming that the Dirichlet is indeed a conjugate prior for the multinomial. This allows us to determine the normalization coefﬁcient by comparison with (2.38) so that p(µ|D, α) = Dir(µ|α + m) = Γ(α0 + N) Γ(α1 + m1) · · · Γ(αK + mK) K  k=1 µαk+mk−1 k (2.41) where we have denoted m = (m1, . . . , mK)T. As for the case of the binomial distribution with its beta prior, we can interpret the parameters αk of the Dirichlet prior as an effective number of observations of xk = 1.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,388,"Note that two-state quantities can either be represented as binary variables and Lejeune Dirichlet 1805–1859 Johann Peter Gustav Lejeune Dirichlet was a modest and re- served mathematician who made contributions in number theory, me- chanics, and astronomy, and who gave the ﬁrst rigorous analysis of Fourier series.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,389,"His family originated from Richelet in Belgium, and the name Lejeune Dirichlet comes from ‘le jeune de Richelet’ (the young person from Richelet). Dirichlet’s ﬁrst paper, which was published in 1825, brought him instant fame. It concerned Fer- mat’s last theorem, which claims that there are no positive integer solutions to xn + yn = zn for n > 2.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,77,390,"Dirichlet gave a partial proof for the case n = 5, which was sent to Legendre for review and who in turn com- pleted the proof. Later, Dirichlet gave a complete proof for n = 14, although a full proof of Fermat’s last theo- rem for arbitrary n had to wait until the work of Andrew Wiles in the closing years of the 20th century.",The Dirichlet distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,78,391,"Figure 2.5 Plots of the Dirichlet distribution over three variables, where the two horizontal axes are coordinates in the plane of the simplex and the vertical axis corresponds to the value of the density. Here {αk} = 0.1 on the left plot, {αk} = 1 in the centre plot, and {αk} = 10 in the right plot.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,78,392,modelled using the binomial distribution (2.9) or as 1-of-2 variables and modelled using the multinomial distribution (2.34) with K = 2.,The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,78,393,"The Gaussian, also known as the normal distribution, is a widely used model for the distribution of continuous variables. In the case of a single variable x, the Gaussian distribution can be written in the form N (x|µ, σ2) = 1 (2πσ2)1/2 exp  −1 2σ2(x −µ)2  (2.42) where µ is the mean and σ2 is the variance. For a D-dimensional vector x, the multivariate Gaussian distribution takes the form N (x|µ, Σ) = 1 (2π)D/2 1 |Σ|1/2 exp  −1 2(x −µ)TΣ−1(x −µ)  (2.43) where µ is a D-dimensional mean vector, Σ is a D × D covariance matrix, and |Σ| denotes the determinant of Σ.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,78,394,"The Gaussian distribution arises in many different contexts and can be motivated from a variety of different perspectives. For example, we have already seen that for a single real variable, the distribution that maximizes the entropy is the Gaussian.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,395,Figure 2.6 Histogram plots of the mean of N uniformly distributed numbers for various values of N.,The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,396,"This property applies also to the multivariate Gaussian. Another situation in which the Gaussian distribution arises is when we consider the sum of multiple random variables. The central limit theorem (due to Laplace) tells us that, subject to certain mild conditions, the sum of a set of random variables, which is of course itself a random variable, has a distribution that becomes increas- ingly Gaussian as the number of terms in the sum increases (Walker, 1969). We can \end{verbatim} egin{verbatim} N = 1 0 0.5 1 0 1 2 3 N = 2 0 0.5 1 0 1 2 3 N = 10 0 0.5 1 0 1 2 3 We observe that as N increases, the distribution tends towards a Gaussian.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,397,"illustrate this by considering N variables x1, . . . , xN each of which has a uniform distribution over the interval [0, 1] and then considering the distribution of the mean (x1 + · · · + xN)/N. For large N, this distribution tends to a Gaussian, as illustrated in Figure 2.6.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,398,"In practice, the convergence to a Gaussian as N increases can be very rapid. One consequence of this result is that the binomial distribution (2.9), which is a distribution over m deﬁned by the sum of N observations of the random binary variable x, will tend to a Gaussian as N →∞(see Figure 2.1 for the case of N = 10).",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,399,"The Gaussian distribution has many important analytical properties, and we shall consider several of these in detail. As a result, this section will be rather more tech- nically involved than some of the earlier sections, and will require familiarity with various matrix identities. However, we strongly encourage the reader to become pro- Appendix C ﬁcient in manipulating Gaussian distributions using the techniques presented here as this will prove invaluable in understanding the more complex models presented in later chapters.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,400,"We begin by considering the geometrical form of the Gaussian distribution. The Carl Friedrich Gauss 1777–1855 It is said that when Gauss went to elementary school at age 7, his teacher B¨uttner, trying to keep the class occupied, asked the pupils to sum the integers from 1 to 100. To the teacher’s amazement, Gauss arrived at the answer in a matter of moments by noting that the sum can be represented as 50 pairs (1 + 100, 2+99, etc.) each of which added to 101, giving the an- swer 5,050. It is now believed that the problem which was actually set was of the same form but somewhat harder in that the sequence had a larger starting value and a larger increment. Gauss was a German math- ematician and scientist with a reputation for being a hard-working perfectionist. One of his many contribu- tions was to show that least squares can be derived under the assumption of normally distributed errors.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,401,He also created an early formulation of non-Euclidean geometry (a self-consistent geometrical theory that vi- olates the axioms of Euclid) but was reluctant to dis- cuss it openly for fear that his reputation might suffer if it were seen that he believed in such a geometry.,The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,79,402,"At one point, Gauss was asked to conduct a geodetic survey of the state of Hanover, which led to his for- mulation of the normal distribution, now also known as the Gaussian. After his death, a study of his di- aries revealed that he had discovered several impor- tant mathematical results years or even decades be- fore they were published by others.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,80,403,functional dependence of the Gaussian on x is through the quadratic form ∆2 = (x −µ)TΣ−1(x −µ) (2.44) which appears in the exponent. The quantity ∆is called the Mahalanobis distance from µ to x and reduces to the Euclidean distance when Σ is the identity matrix. The Gaussian distribution will be constant on surfaces in x-space for which this quadratic form is constant.,The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,80,404,"First of all, we note that the matrix Σ can be taken to be symmetric, without loss of generality, because any antisymmetric component would disappear from the exponent. Now consider the eigenvector equation for the covariance matrix Σui = λiui (2.45) where i = 1, . . . , D. Because Σ is a real, symmetric matrix its eigenvalues will be real, and its eigenvectors can be chosen to form an orthonormal set, so that uT i uj = Iij (2.46) where Iij is the i, j element of the identity matrix and satisﬁes Iij = 1, if i = j 0, otherwise.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,80,405,The covariance matrix Σ can be expressed as an expansion in terms of its eigenvec- tors in the form Σ = D  i=1 λiuiuT i (2.48) and similarly the inverse covariance matrix Σ−1 can be expressed as Σ−1 = D  i=1 1 λi uiuT i .,The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,80,406,"Substituting (2.49) into (2.44), the quadratic form becomes ∆2 = D  i=1 y2 i λi (2.50) where we have deﬁned yi = uT i (x −µ).",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,81,407,"Figure 2.7 The red curve shows the ellip- tical surface of constant proba- bility density for a Gaussian in a two-dimensional space x = (x1, x2) on which the density is exp(−1/2) of its value at x = µ.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,81,408,"We can interpret {yi} as a new coordinate system deﬁned by the orthonormal vectors ui that are shifted and rotated with respect to the original xi coordinates. Forming the vector y = (y1, . . . , yD)T, we have y = U(x −µ) (2.52) \end{verbatim} egin{verbatim} The major axes of the ellipse are deﬁned by the eigenvectors ui of the covari- ance matrix, with correspond- ing eigenvalues λi.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,81,409,"where U is a matrix whose rows are given by uT i . From (2.46) it follows that U is an orthogonal matrix, i.e., it satisﬁes UUT = I, and hence also UTU = I, where I Appendix C is the identity matrix.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,81,410,"The quadratic form, and hence the Gaussian density, will be constant on surfaces for which (2.51) is constant. If all of the eigenvalues λi are positive, then these surfaces represent ellipsoids, with their centres at µ and their axes oriented along ui, and with scaling factors in the directions of the axes given by λ1/2 i , as illustrated in Figure 2.7.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,81,411,"For the Gaussian distribution to be well deﬁned, it is necessary for all of the eigenvalues λi of the covariance matrix to be strictly positive, otherwise the dis- tribution cannot be properly normalized. A matrix whose eigenvalues are strictly positive is said to be positive deﬁnite. In Chapter 12, we will encounter Gaussian distributions for which one or more of the eigenvalues are zero, in which case the distribution is singular and is conﬁned to a subspace of lower dimensionality. If all of the eigenvalues are nonnegative, then the covariance matrix is said to be positive semideﬁnite.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,82,412,"Now consider the form of the Gaussian distribution in the new coordinate system deﬁned by the yi. In going from the x to the y coordinate system, we have a Jacobian matrix J with elements given by Jij = ∂xi ∂yj = Uji (2.53) where Uji are the elements of the matrix UT. Using the orthonormality property of the matrix U, we see that the square of the determinant of the Jacobian matrix is |J|2 = UT2 = UT |U| = UTU  = |I| = 1 (2.54) and hence |J| = 1. Also, the determinant |Σ| of the covariance matrix can be written \end{verbatim} egin{verbatim} as the product of its eigenvalues, and hence |Σ|1/2 = D  j=1 λ1/2 j .",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,82,413,"Thus in the yj coordinate system, the Gaussian distribution takes the form p(y) = p(x)|J| = D  j=1 1 (2πλj)1/2 exp −y2 j 2λj (2.56) which is the product of D independent univariate Gaussian distributions. The eigen- vectors therefore deﬁne a new set of shifted and rotated coordinates with respect to which the joint probability distribution factorizes into a product of independent distributions. The integral of the distribution in the y coordinate system is then  p(y) dy = D  j=1  ∞ −∞ 1 (2πλj)1/2 exp −y2 j 2λj dyj = 1 (2.57) where we have used the result (1.48) for the normalization of the univariate Gaussian.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,82,414,"This conﬁrms that the multivariate Gaussian (2.43) is indeed normalized. We now look at the moments of the Gaussian distribution and thereby provide an interpretation of the parameters µ and Σ. The expectation of x under the Gaussian distribution is given by E[x] = 1 (2π)D/2 1 |Σ|1/2  exp −1 2(x −µ)TΣ−1(x −µ) x dx = 1 (2π)D/2 1 |Σ|1/2  exp −1 2zTΣ−1z (z + µ) dz (2.58) where we have changed variables using z = x −µ. We now note that the exponent is an even function of the components of z and, because the integrals over these are taken over the range (−∞, ∞), the term in z in the factor (z + µ) will vanish by symmetry. Thus E[x] = µ (2.59) and so we refer to µ as the mean of the Gaussian distribution.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,83,415,"We now consider second order moments of the Gaussian. In the univariate case, we considered the second order moment given by E[x2]. For the multivariate Gaus- sian, there are D2 second order moments given by E[xixj], which we can group together to form the matrix E[xxT]. This matrix can be written as E[xxT] = 1 (2π)D/2 1 |Σ|1/2  exp −1 2(x −µ)TΣ−1(x −µ) xxT dx = 1 (2π)D/2 1 |Σ|1/2  exp −1 2zTΣ−1z (z + µ)(z + µ)T dz \end{verbatim} egin{verbatim} where again we have changed variables using z = x −µ. Note that the cross-terms involving µzT and µTz will again vanish by symmetry. The term µµT is constant and can be taken outside the integral, which itself is unity because the Gaussian distribution is normalized. Consider the term involving zzT. Again, we can make use of the eigenvector expansion of the covariance matrix given by (2.45), together with the completeness of the set of eigenvectors, to write z = D  j=1 yjuj (2.60) where yj = uT j z, which gives 1 (2π)D/2 1 |Σ|1/2  exp −1 2zTΣ−1z zzT dz = 1 (2π)D/2 1 |Σ|1/2 D  i=1 D  j=1 uiuT j  exp  − D  k=1 y2 k 2λk  yiyj dy = D  i=1 uiuT i λi = Σ (2.61) where we have made use of the eigenvector equation (2.45), together with the fact that the integral on the right-hand side of the middle line vanishes by symmetry unless i = j, and in the ﬁnal line we have made use of the results (1.50) and (2.55), together with (2.48). Thus we have E[xxT] = µµT + Σ.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,83,416,"For single random variables, we subtracted the mean before taking second mo- ments in order to deﬁne a variance. Similarly, in the multivariate case it is again convenient to subtract off the mean, giving rise to the covariance of a random vector x deﬁned by cov[x] = E  (x −E[x])(x −E[x])T .",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,83,417,"For the speciﬁc case of a Gaussian distribution, we can make use of E[x] = µ, together with the result (2.62), to give cov[x] = Σ.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,83,418,"Because the parameter matrix Σ governs the covariance of x under the Gaussian distribution, it is called the covariance matrix.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,84,419,"Figure 2.8 Contours of constant probability density for a Gaussian distribution in two dimensions in which the covariance matrix is (a) of general form, (b) diagonal, in which the elliptical contours are aligned with the coordinate axes, and (c) proportional to the identity matrix, in which the contours are concentric circles.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,84,420,"Although the Gaussian distribution (2.43) is widely used as a density model, it suffers from some signiﬁcant limitations. Consider the number of free parameters in the distribution. A general symmetric covariance matrix Σ will have D(D + 1)/2 independent parameters, and there are another D independent parameters in µ, giv- ing D(D + 3)/2 parameters in total. For large D, the total number of parameters \end{verbatim} egin{verbatim} x1 x2 (a) x1 x2 (b) x1 x2 (c) therefore grows quadratically with D, and the computational task of manipulating and inverting large matrices can become prohibitive. One way to address this prob- lem is to use restricted forms of the covariance matrix. If we consider covariance matrices that are diagonal, so that Σ = diag(σ2 i ), we then have a total of 2D inde- pendent parameters in the density model. The corresponding contours of constant density are given by axis-aligned ellipsoids. We could further restrict the covariance matrix to be proportional to the identity matrix, Σ = σ2I, known as an isotropic co- variance, giving D + 1 independent parameters in the model and spherical surfaces of constant density. The three possibilities of general, diagonal, and isotropic covari- ance matrices are illustrated in Figure 2.8. Unfortunately, whereas such approaches limit the number of degrees of freedom in the distribution and make inversion of the covariance matrix a much faster operation, they also greatly restrict the form of the probability density and limit its ability to capture interesting correlations in the data.",The Gaussian Distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,421,"A further limitation of the Gaussian distribution is that it is intrinsically uni- modal (i.e., has a single maximum) and so is unable to provide a good approximation to multimodal distributions. Thus the Gaussian distribution can be both too ﬂexible, in the sense of having too many parameters, while also being too limited in the range of distributions that it can adequately represent. We will see later that the introduc- tion of latent variables, also called hidden variables or unobserved variables, allows both of these problems to be addressed. In particular, a rich family of multimodal distributions is obtained by introducing discrete latent variables leading to mixtures of Gaussians, as discussed in Section 2.3.9. Similarly, the introduction of continuous latent variables, as described in Chapter 12, leads to models in which the number of free parameters can be controlled independently of the dimensionality D of the data space while still allowing the model to capture the dominant correlations in the data set. Indeed, these two approaches can be combined and further extended to derive a very rich set of hierarchical models that can be adapted to a broad range of prac- tical applications. For instance, the Gaussian version of the Markov random ﬁeld, which is widely used as a probabilistic model of images, is a Gaussian distribution over the joint space of pixel intensities but rendered tractable through the imposition of considerable structure reﬂecting the spatial organization of the pixels. Similarly, the linear dynamical system, used to model time series data for applications such as tracking, is also a joint Gaussian distribution over a potentially large number of observed and latent variables and again is tractable due to the structure imposed on the distribution. A powerful framework for expressing the form and properties of \end{verbatim} egin{verbatim} such complex distributions is that of probabilistic graphical models, which will form the subject of Chapter 8.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,422,"An important property of the multivariate Gaussian distribution is that if two sets of variables are jointly Gaussian, then the conditional distribution of one set conditioned on the other is again Gaussian. Similarly, the marginal distribution of either set is also Gaussian.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,423,"Consider ﬁrst the case of conditional distributions. Suppose x is a D-dimensional vector with Gaussian distribution N(x|µ, Σ) and that we partition x into two dis- joint subsets xa and xb. Without loss of generality, we can take xa to form the ﬁrst M components of x, with xb comprising the remaining D −M components, so that x =  xa xb  .",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,424,We also deﬁne corresponding partitions of the mean vector µ given by µ =  µa µb  (2.66) and of the covariance matrix Σ given by Σ =  Σaa Σab Σba Σbb  .,Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,425,"Note that the symmetry ΣT = Σ of the covariance matrix implies that Σaa and Σbb are symmetric, while Σba = ΣT ab.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,85,426,"In many situations, it will be convenient to work with the inverse of the covari- ance matrix Λ ≡Σ−1 (2.68) which is known as the precision matrix. In fact, we shall see that some properties of Gaussian distributions are most naturally expressed in terms of the covariance, whereas others take a simpler form when viewed in terms of the precision. We therefore also introduce the partitioned form of the precision matrix Λ =  Λaa Λab Λba Λbb  (2.69) corresponding to the partitioning (2.65) of the vector x. Because the inverse of a symmetric matrix is also symmetric, we see that Λaa and Λbb are symmetric, while ΛT ab = Λba. It should be stressed at this point that, for instance, Λaa is not simply given by the inverse of Σaa. In fact, we shall shortly examine the relation between the inverse of a partitioned matrix and the inverses of its partitions.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,86,427,"Let us begin by ﬁnding an expression for the conditional distribution p(xa|xb). From the product rule of probability, we see that this conditional distribution can be \end{verbatim} egin{verbatim} evaluated from the joint distribution p(x) = p(xa, xb) simply by ﬁxing xb to the observed value and normalizing the resulting expression to obtain a valid probability distribution over xa. Instead of performing this normalization explicitly, we can obtain the solution more efﬁciently by considering the quadratic form in the exponent of the Gaussian distribution given by (2.44) and then reinstating the normalization coefﬁcient at the end of the calculation. If we make use of the partitioning (2.65), (2.66), and (2.69), we obtain −1 2(x −µ)TΣ−1(x −µ) = −1 2(xa −µa)TΛaa(xa −µa) −1 2(xa −µa)TΛab(xb −µb) −1 2(xb −µb)TΛba(xa −µa) −1 2(xb −µb)TΛbb(xb −µb).",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,86,428,"We see that as a function of xa, this is again a quadratic form, and hence the cor- responding conditional distribution p(xa|xb) will be Gaussian. Because this distri- bution is completely characterized by its mean and its covariance, our goal will be to identify expressions for the mean and covariance of p(xa|xb) by inspection of (2.70).",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,86,429,"This is an example of a rather common operation associated with Gaussian distributions, sometimes called ‘completing the square’, in which we are given a quadratic form deﬁning the exponent terms in a Gaussian distribution, and we need to determine the corresponding mean and covariance. Such problems can be solved straightforwardly by noting that the exponent in a general Gaussian distribution N(x|µ, Σ) can be written −1 2(x −µ)TΣ−1(x −µ) = −1 2xTΣ−1x + xTΣ−1µ + const (2.71) where ‘const’ denotes terms which are independent of x, and we have made use of the symmetry of Σ. Thus if we take our general quadratic form and express it in the form given by the right-hand side of (2.71), then we can immediately equate the matrix of coefﬁcients entering the second order term in x to the inverse covariance matrix Σ−1 and the coefﬁcient of the linear term in x to Σ−1µ, from which we can obtain µ.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,86,430,"Now let us apply this procedure to the conditional Gaussian distribution p(xa|xb) for which the quadratic form in the exponent is given by (2.70). We will denote the mean and covariance of this distribution by µa|b and Σa|b, respectively. Consider the functional dependence of (2.70) on xa in which xb is regarded as a constant. If we pick out all terms that are second order in xa, we have −1 2xT a Λaaxa (2.72) from which we can immediately conclude that the covariance (inverse precision) of p(xa|xb) is given by Σa|b = Λ−1 aa .",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,87,431,"Now consider all of the terms in (2.70) that are linear in xa xT a {Λaaµa −Λab(xb −µb)} (2.74) where we have used ΛT ba = Λab. From our discussion of the general form (2.71), the coefﬁcient of xa in this expression must equal Σ−1 a|bµa|b and hence µa|b = Σa|b {Λaaµa −Λab(xb −µb)} = µa −Λ−1 aa Λab(xb −µb) (2.75) where we have made use of (2.73).",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,87,432,"The results (2.73) and (2.75) are expressed in terms of the partitioned precision matrix of the original joint distribution p(xa, xb). We can also express these results in terms of the corresponding partitioned covariance matrix. To do this, we make use of the following identity for the inverse of a partitioned matrix  A B C D −1 =  M −MBD−1 −D−1CM D−1 + D−1CMBD−1  (2.76) where we have deﬁned M = (A −BD−1C)−1.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,87,433,"The quantity M−1 is known as the Schur complement of the matrix on the left-hand side of (2.76) with respect to the submatrix D. Using the deﬁnition  Σaa Σab Σba Σbb −1 =  Λaa Λab Λba Λbb  (2.78) and making use of (2.76), we have Λaa = (Σaa −ΣabΣ−1 bb Σba)−1 (2.79) Λab = −(Σaa −ΣabΣ−1 bb Σba)−1ΣabΣ−1 bb .",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,87,434,From these we obtain the following expressions for the mean and covariance of the conditional distribution p(xa|xb) µa|b = µa + ΣabΣ−1 bb (xb −µb) (2.81) Σa|b = Σaa −ΣabΣ−1 bb Σba.,Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,87,435,"Comparing (2.73) and (2.82), we see that the conditional distribution p(xa|xb) takes a simpler form when expressed in terms of the partitioned precision matrix than when it is expressed in terms of the partitioned covariance matrix. Note that the mean of the conditional distribution p(xa|xb), given by (2.81), is a linear function of xb and that the covariance, given by (2.82), is independent of xa. This represents an example of a linear-Gaussian model.",Conditional Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,88,436,"We have seen that if a joint distribution p(xa, xb) is Gaussian, then the condi- tional distribution p(xa|xb) will again be Gaussian. Now we turn to a discussion of the marginal distribution given by p(xa) =  p(xa, xb) dxb (2.83) which, as we shall see, is also Gaussian. Once again, our strategy for evaluating this distribution efﬁciently will be to focus on the quadratic form in the exponent of the joint distribution and thereby to identify the mean and covariance of the marginal distribution p(xa).",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,88,437,"The quadratic form for the joint distribution can be expressed, using the par- titioned precision matrix, in the form (2.70). Because our goal is to integrate out xb, this is most easily achieved by ﬁrst considering the terms involving xb and then completing the square in order to facilitate integration. Picking out just those terms that involve xb, we have −1 2xT b Λbbxb+xT b m = −1 2(xb−Λ−1 bb m)TΛbb(xb−Λ−1 bb m)+ 1 2mTΛ−1 bb m (2.84) where we have deﬁned m = Λbbµb −Λba(xa −µa).",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,88,438,"We see that the dependence on xb has been cast into the standard quadratic form of a Gaussian distribution corresponding to the ﬁrst term on the right-hand side of (2.84), plus a term that does not depend on xb (but that does depend on xa). Thus, when we take the exponential of this quadratic form, we see that the integration over xb required by (2.83) will take the form  exp −1 2(xb −Λ−1 bb m)TΛbb(xb −Λ−1 bb m) dxb.",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,89,439,"This integration is easily performed by noting that it is the integral over an unnor- malized Gaussian, and so the result will be the reciprocal of the normalization co- efﬁcient. We know from the form of the normalized Gaussian given by (2.43), that this coefﬁcient is independent of the mean and depends only on the determinant of the covariance matrix. Thus, by completing the square with respect to xb, we can integrate out xb and the only term remaining from the contributions on the left-hand side of (2.84) that depends on xa is the last term on the right-hand side of (2.84) in which m is given by (2.85). Combining this term with the remaining terms from \end{verbatim} egin{verbatim} (2.70) that depend on xa, we obtain 1 2 [Λbbµb −Λba(xa −µa)]T Λ−1 bb [Λbbµb −Λba(xa −µa)] −1 2xT a Λaaxa + xT a (Λaaµa + Λabµb) + const = −1 2xT a (Λaa −ΛabΛ−1 bb Λba)xa +xT a (Λaa −ΛabΛ−1 bb Λba)−1µa + const (2.87) where ‘const’ denotes quantities independent of xa. Again, by comparison with (2.71), we see that the covariance of the marginal distribution of p(xa) is given by Σa = (Λaa −ΛabΛ−1 bb Λba)−1.",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,89,440,"Similarly, the mean is given by Σa(Λaa −ΛabΛ−1 bb Λba)µa = µa (2.89) where we have used (2.88). The covariance in (2.88) is expressed in terms of the partitioned precision matrix given by (2.69). We can rewrite this in terms of the corresponding partitioning of the covariance matrix given by (2.67), as we did for the conditional distribution. These partitioned matrices are related by  Λaa Λab Λba Λbb −1 =  Σaa Σab Σba Σbb  (2.90) Making use of (2.76), we then have Λaa −ΛabΛ−1 bb Λba −1 = Σaa.",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,89,441,Thus we obtain the intuitively satisfying result that the marginal distribution p(xa) has mean and covariance given by E[xa] = µa (2.92) cov[xa] = Σaa.,Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,89,442,"We see that for a marginal distribution, the mean and covariance are most simply ex- pressed in terms of the partitioned covariance matrix, in contrast to the conditional distribution for which the partitioned precision matrix gives rise to simpler expres- sions.",Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,89,443,Our results for the marginal and conditional distributions of a partitioned Gaus- sian are summarized below.,Marginal Gaussian distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,90,444,"Figure 2.9 The plot on the left shows the contours of a Gaussian distribution p(xa, xb) over two variables, and the plot on the right shows the marginal distribution p(xa) (blue curve) and the conditional distribution p(xa|xb) for xb = 0.7 (red curve).",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,90,445,"Given a joint Gaussian distribution N(x|µ, Σ) with Λ ≡Σ−1 and x =  xa xb  , µ =  µa µb  (2.94) \end{verbatim} egin{verbatim} xa xb = 0.7 xb p(xa,xb) 0 0.5 1 0 0.5 1 xa p(xa) p(xa|xb = 0.7) 0 0.5 1 0 5 10 Σ =  Σaa Σab Σba Σbb  , Λ =  Λaa Λab Λba Λbb  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,90,446,We illustrate the idea of conditional and marginal distributions associated with a multivariate Gaussian using an example involving two variables in Figure 2.9.,Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,90,447,"In Sections 2.3.1 and 2.3.2, we considered a Gaussian p(x) in which we parti- tioned the vector x into two subvectors x = (xa, xb) and then found expressions for the conditional distribution p(xa|xb) and the marginal distribution p(xa). We noted that the mean of the conditional distribution p(xa|xb) was a linear function of xb.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,91,448,"Here we shall suppose that we are given a Gaussian marginal distribution p(x) and a Gaussian conditional distribution p(y|x) in which p(y|x) has a mean that is a linear function of x, and a covariance which is independent of x. This is an example of \end{verbatim} egin{verbatim} a linear Gaussian model (Roweis and Ghahramani, 1999), which we shall study in greater generality in Section 8.1.4. We wish to ﬁnd the marginal distribution p(y) and the conditional distribution p(x|y). This is a problem that will arise frequently in subsequent chapters, and it will prove convenient to derive the general results here.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,91,449,"We shall take the marginal and conditional distributions to be p(x) = N x|µ, Λ−1 (2.99) p(y|x) = N y|Ax + b, L−1 (2.100) where µ, A, and b are parameters governing the means, and Λ and L are precision matrices. If x has dimensionality M and y has dimensionality D, then the matrix A has size D × M.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,91,450,"First we ﬁnd an expression for the joint distribution over x and y. To do this, we deﬁne z =  x y  (2.101) and then consider the log of the joint distribution ln p(z) = ln p(x) + ln p(y|x) = −1 2(x −µ)TΛ(x −µ) −1 2(y −Ax −b)TL(y −Ax −b) + const (2.102) where ‘const’ denotes terms independent of x and y. As before, we see that this is a quadratic function of the components of z, and hence p(z) is Gaussian distribution.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,91,451,"To ﬁnd the precision of this Gaussian, we consider the second order terms in (2.102), which can be written as −1 2xT(Λ + ATLA)x −1 2yTLy + 1 2yTLAx + 1 2xTATLy = −1 2  x y T  Λ + ATLA −ATL −LA L   x y  = −1 2zTRz (2.103) and so the Gaussian distribution over z has precision (inverse covariance) matrix given by R =  Λ + ATLA −ATL −LA L  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,91,452,"The covariance matrix is found by taking the inverse of the precision, which can be done using the matrix inversion formula (2.76) to give cov[z] = R−1 =  Λ−1 Λ−1AT AΛ−1 L−1 + AΛ−1AT  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,453,"Similarly, we can ﬁnd the mean of the Gaussian distribution over z by identify- ing the linear terms in (2.102), which are given by xTΛµ −xTATLb + yTLb =  x y T  Λµ −ATLb Lb  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,454,"Using our earlier result (2.71) obtained by completing the square over the quadratic form of a multivariate Gaussian, we ﬁnd that the mean of z is given by E[z] = R−1  Λµ −ATLb Lb  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,455,"Making use of (2.105), we then obtain E[z] =  µ Aµ + b  .",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,456,"Next we ﬁnd an expression for the marginal distribution p(y) in which we have marginalized over x. Recall that the marginal distribution over a subset of the com- ponents of a Gaussian random vector takes a particularly simple form when ex- pressed in terms of the partitioned covariance matrix. Speciﬁcally, its mean and covariance are given by (2.92) and (2.93), respectively. Making use of (2.105) and (2.108) we see that the mean and covariance of the marginal distribution p(y) are given by E[y] = Aµ + b (2.109) cov[y] = L−1 + AΛ−1AT.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,457,"A special case of this result is when A = I, in which case it reduces to the convolu- tion of two Gaussians, for which we see that the mean of the convolution is the sum of the mean of the two Gaussians, and the covariance of the convolution is the sum of their covariances.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,458,"Finally, we seek an expression for the conditional p(x|y). Recall that the results for the conditional distribution are most easily expressed in terms of the partitioned precision matrix, using (2.73) and (2.75). Applying these results to (2.105) and (2.108) we see that the conditional distribution p(x|y) has mean and covariance given by E[x|y] = (Λ + ATLA)−1  ATL(y −b) + Λµ  (2.111) cov[x|y] = (Λ + ATLA)−1.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,92,459,"The evaluation of this conditional can be seen as an example of Bayes’ theorem. We can interpret the distribution p(x) as a prior distribution over x. If the variable y is observed, then the conditional distribution p(x|y) represents the corresponding posterior distribution over x. Having found the marginal and conditional distribu- tions, we effectively expressed the joint distribution p(z) = p(x)p(y|x) in the form p(x|y)p(y). These results are summarized below.",Bayes’ theorem for Gaussian variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,93,460,"Given a marginal Gaussian distribution for x and a conditional Gaussian distri- bution for y given x in the form p(x) = N(x|µ, Λ−1) (2.113) p(y|x) = N(y|Ax + b, L−1) (2.114) the marginal distribution of y and the conditional distribution of x given y are given by p(y) = N(y|Aµ + b, L−1 + AΛ−1AT) (2.115) p(x|y) = N(x|Σ{ATL(y −b) + Λµ}, Σ) (2.116) where Σ = (Λ + ATLA)−1.",Maximum likelihood for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,93,461,"Given a data set X = (x1, . . . , xN)T in which the observations {xn} are as- sumed to be drawn independently from a multivariate Gaussian distribution, we can estimate the parameters of the distribution by maximum likelihood. The log likeli- hood function is given by ln p(X|µ, Σ) = −ND 2 ln(2π)−N 2 ln |Σ|−1 2 N  n=1 (xn−µ)TΣ−1(xn−µ). (2.118) By simple rearrangement, we see that the likelihood function depends on the data set only through the two quantities N  n=1 xn, N  n=1 xnxT n.",Maximum likelihood for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,94,462,"These are known as the sufﬁcient statistics for the Gaussian distribution. Using (C.19), the derivative of the log likelihood with respect to µ is given by Appendix C ∂ ∂µ ln p(X|µ, Σ) = N  n=1 Σ−1(xn −µ) (2.120) and setting this derivative to zero, we obtain the solution for the maximum likelihood estimate of the mean given by µML = 1 N N  n=1 xn (2.121) \end{verbatim} egin{verbatim} which is the mean of the observed set of data points. The maximization of (2.118) with respect to Σ is rather more involved. The simplest approach is to ignore the symmetry constraint and show that the resulting solution is symmetric as required.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,94,463,"Alternative derivations of this result, which impose the symmetry and positive deﬁ- niteness constraints explicitly, can be found in Magnus and Neudecker (1999). The result is as expected and takes the form ΣML = 1 N N  n=1 (xn −µML)(xn −µML)T (2.122) which involves µML because this is the result of a joint maximization with respect to µ and Σ. Note that the solution (2.121) for µML does not depend on ΣML, and so we can ﬁrst evaluate µML and then use this to evaluate ΣML.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,94,464,"If we evaluate the expectations of the maximum likelihood solutions under the true distribution, we obtain the following results E[µML] = µ (2.123) E[ΣML] = N −1 N Σ.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,94,465,"We see that the expectation of the maximum likelihood estimate for the mean is equal to the true mean. However, the maximum likelihood estimate for the covariance has an expectation that is less than the true value, and hence it is biased. We can correct this bias by deﬁning a different estimator Σ given by Σ = 1 N −1 N  n=1 (xn −µML)(xn −µML)T.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,94,466,"Clearly from (2.122) and (2.124), the expectation of Σ is equal to Σ. 2.3.5 Our discussion of the maximum likelihood solution for the parameters of a Gaus- sian distribution provides a convenient opportunity to give a more general discussion of the topic of sequential estimation for maximum likelihood. Sequential methods allow data points to be processed one at a time and then discarded and are important for on-line applications, and also where large data sets are involved so that batch processing of all data points at once is infeasible.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,95,467,"Figure 2.10 A schematic illustration of two correlated ran- dom variables z and θ, together with the regression function f(θ) given by the con- ditional expectation E[z|θ].",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,95,468,"Consider the result (2.121) for the maximum likelihood estimator of the mean µML, which we will denote by µ(N) ML when it is based on N observations. If we \end{verbatim} egin{verbatim} The Robbins- Monro algorithm provides a general sequen- tial procedure for ﬁnding the root θ⋆of such functions.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,95,469,"dissect out the contribution from the ﬁnal data point xN, we obtain µ(N) ML = 1 N N  n=1 xn = 1 N xN + 1 N N−1  n=1 xn = 1 N xN + N −1 N µ(N−1) ML = µ(N−1) ML + 1 N (xN −µ(N−1) ML ).",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,95,470,"This result has a nice interpretation, as follows. After observing N −1 data points we have estimated µ by µ(N−1) ML . We now observe data point xN, and we obtain our revised estimate µ(N) ML by moving the old estimate a small amount, proportional to 1/N, in the direction of the ‘error signal’ (xN −µ(N−1) ML ). Note that, as N increases, so the contribution from successive data points gets smaller.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,95,471,"The result (2.126) will clearly give the same answer as the batch result (2.121) because the two formulae are equivalent. However, we will not always be able to de- rive a sequential algorithm by this route, and so we seek a more general formulation of sequential learning, which leads us to the Robbins-Monro algorithm. Consider a pair of random variables θ and z governed by a joint distribution p(z, θ). The con- ditional expectation of z given θ deﬁnes a deterministic function f(θ) that is given by f(θ) ≡E[z|θ] =  zp(z|θ) dz (2.127) and is illustrated schematically in Figure 2.10. Functions deﬁned in this way are called regression functions.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,96,472,"Our goal is to ﬁnd the root θ⋆at which f(θ⋆) = 0. If we had a large data set of observations of z and θ, then we could model the regression function directly and then obtain an estimate of its root. Suppose, however, that we observe values of z one at a time and we wish to ﬁnd a corresponding sequential estimation scheme for θ⋆. The following general procedure for solving such problems was given by \end{verbatim} egin{verbatim} Robbins and Monro (1951). We shall assume that the conditional variance of z is ﬁnite so that E  (z −f)2 | θ < ∞ (2.128) and we shall also, without loss of generality, consider the case where f(θ) > 0 for θ > θ⋆and f(θ) < 0 for θ < θ⋆, as is the case in Figure 2.10. The Robbins-Monro procedure then deﬁnes a sequence of successive estimates of the root θ⋆given by θ(N) = θ(N−1) + aN−1z(θ(N−1)) (2.129) where z(θ(N)) is an observed value of z when θ takes the value θ(N). The coefﬁcients {aN} represent a sequence of positive numbers that satisfy the conditions lim N→∞aN = 0 (2.130) ∞  N=1 aN = ∞ (2.131) ∞  N=1 a2 N < ∞.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,96,473,"It can then be shown (Robbins and Monro, 1951; Fukunaga, 1990) that the sequence of estimates given by (2.129) does indeed converge to the root with probability one.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,96,474,"Note that the ﬁrst condition (2.130) ensures that the successive corrections decrease in magnitude so that the process can converge to a limiting value. The second con- dition (2.131) is required to ensure that the algorithm does not converge short of the root, and the third condition (2.132) is needed to ensure that the accumulated noise has ﬁnite variance and hence does not spoil convergence.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,96,475,"Now let us consider how a general maximum likelihood problem can be solved sequentially using the Robbins-Monro algorithm. By deﬁnition, the maximum like- lihood solution θML is a stationary point of the log likelihood function and hence satisﬁes ∂ ∂θ  1 N N  n=1 ln p(xn|θ)  θML = 0.",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,96,476,"Exchanging the derivative and the summation, and taking the limit N →∞we have lim N→∞ 1 N N  n=1 ∂ ∂θ ln p(xn|θ) = Ex ∂ ∂θ ln p(x|θ) (2.134) and so we see that ﬁnding the maximum likelihood solution corresponds to ﬁnd- ing the root of a regression function. We can therefore apply the Robbins-Monro procedure, which now takes the form θ(N) = θ(N−1) + aN−1 ∂ ∂θ(N−1) ln p(xN|θ(N−1)).",Sequential estimation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,477,"Figure 2.11 In the case of a Gaussian distribution, with θ corresponding to the mean µ, the regression function illustrated in Figure 2.10 takes the form of a straight line, as shown in red.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,478,"case, the random variable z corresponds to the derivative of the log likelihood function and is given by (x −µML)/σ2, and its expectation that deﬁnes the regression function is a straight line given by (µ −µML)/σ2. The root of the regres- sion function corresponds to the maximum like- lihood estimator µML.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,479,"As a speciﬁc example, we consider once again the sequential estimation of the mean of a Gaussian distribution, in which case the parameter θ(N) is the estimate µ(N) ML of the mean of the Gaussian, and the random variable z is given by z = ∂ ∂µML ln p(x|µML, σ2) = 1 σ2 (x −µML).",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,480,"Thus the distribution of z is Gaussian with mean µ −µML, as illustrated in Fig- ure 2.11. Substituting (2.136) into (2.135), we obtain the univariate form of (2.126), provided we choose the coefﬁcients aN to have the form aN = σ2/N. Note that although we have focussed on the case of a single variable, the same technique, together with the same restrictions (2.130)–(2.132) on the coefﬁcients aN, apply equally to the multivariate case (Blum, 1965).",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,481,"The maximum likelihood framework gave point estimates for the parameters µ and Σ. Now we develop a Bayesian treatment by introducing prior distributions over these parameters. Let us begin with a simple example in which we consider a single Gaussian random variable x. We shall suppose that the variance σ2 is known, and we consider the task of inferring the mean µ given a set of N observations X = {x1, . . . , xN}. The likelihood function, that is the probability of the observed data given µ, viewed as a function of µ, is given by p(X|µ) = N  n=1 p(xn|µ) = 1 (2πσ2)N/2 exp  −1 2σ2 N  n=1 (xn −µ)2  .",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,97,482,Again we emphasize that the likelihood function p(X|µ) is not a probability distri- bution over µ and is not normalized.,Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,98,483,"We see that the likelihood function takes the form of the exponential of a quad- ratic form in µ. Thus if we choose a prior p(µ) given by a Gaussian, it will be a \end{verbatim} egin{verbatim} conjugate distribution for this likelihood function because the corresponding poste- rior will be a product of two exponentials of quadratic functions of µ and hence will also be Gaussian. We therefore take our prior distribution to be p(µ) = N µ|µ0, σ2 0 (2.138) and the posterior distribution is given by p(µ|X) ∝p(X|µ)p(µ).",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,98,484,"Simple manipulation involving completing the square in the exponent shows that the posterior distribution is given by p(µ|X) = N µ|µN, σ2 N (2.140) where µN = σ2 Nσ2 0 + σ2 µ0 + Nσ2 0 Nσ2 0 + σ2 µML (2.141) 1 σ2 N = 1 σ2 0 + N σ2 (2.142) in which µML is the maximum likelihood solution for µ given by the sample mean µML = 1 N N  n=1 xn.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,98,485,"It is worth spending a moment studying the form of the posterior mean and variance. First of all, we note that the mean of the posterior distribution given by (2.141) is a compromise between the prior mean µ0 and the maximum likelihood solution µML. If the number of observed data points N = 0, then (2.141) reduces to the prior mean as expected. For N →∞, the posterior mean is given by the maximum likelihood solution. Similarly, consider the result (2.142) for the variance of the posterior distribution. We see that this is most naturally expressed in terms of the inverse variance, which is called the precision. Furthermore, the precisions are additive, so that the precision of the posterior is given by the precision of the prior plus one contribution of the data precision from each of the observed data points. As we increase the number of observed data points, the precision steadily increases, corresponding to a posterior distribution with steadily decreasing variance.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,98,486,"With no observed data points, we have the prior variance, whereas if the number of data points N →∞, the variance σ2 N goes to zero and the posterior distribution becomes inﬁnitely peaked around the maximum likelihood solution. We therefore see that the maximum likelihood result of a point estimate for µ given by (2.143) is recovered precisely from the Bayesian formalism in the limit of an inﬁnite number of observations. Note also that for ﬁnite N, if we take the limit σ2 0 →∞in which the prior has inﬁnite variance then the posterior mean (2.141) reduces to the maximum likelihood result, while from (2.142) the posterior variance is given by σ2 N = σ2/N.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,487,"Figure 2.12 Illustration of Bayesian inference for the mean µ of a Gaussian distri- bution, in which the variance is as- sumed to be known.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,488,"show the prior distribution over µ (the curve labelled N = 0), which in this case is itself Gaussian, along with the posterior distribution given by (2.140) for increasing numbers N of data points. The data points are generated from a Gaussian of mean 0.8 and variance 0.1, and the prior is chosen to have mean 0. In both the prior and the likelihood function, the variance is set to the true value.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,489,We illustrate our analysis of Bayesian inference for the mean of a Gaussian distribution in Figure 2.12. The generalization of this result to the case of a D- dimensional Gaussian random variable x with known covariance and unknown mean is straightforward.,Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,490,"We have already seen how the maximum likelihood expression for the mean of a Gaussian can be re-cast as a sequential update formula in which the mean after observing N data points was expressed in terms of the mean after observing N −1 data points together with the contribution from data point xN. In fact, the Bayesian paradigm leads very naturally to a sequential view of the inference problem. To see this in the context of the inference of the mean of a Gaussian, we write the posterior distribution with the contribution from the ﬁnal data point xN separated out so that p(µ|D) ∝ p(µ) N−1  n=1 p(xn|µ) p(xN|µ).",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,491,"The term in square brackets is (up to a normalization coefﬁcient) just the posterior distribution after observing N −1 data points. We see that this can be viewed as a prior distribution, which is combined using Bayes’ theorem with the likelihood function associated with data point xN to arrive at the posterior distribution after observing N data points. This sequential view of Bayesian inference is very general and applies to any problem in which the observed data are assumed to be independent and identically distributed.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,99,492,"So far, we have assumed that the variance of the Gaussian distribution over the data is known and our goal is to infer the mean. Now let us suppose that the mean is known and we wish to infer the variance. Again, our calculations will be greatly simpliﬁed if we choose a conjugate form for the prior distribution. It turns out to be most convenient to work with the precision λ ≡1/σ2. The likelihood function for λ takes the form p(X|λ) = N  n=1 N(xn|µ, λ−1) ∝λN/2 exp  −λ 2 N  n=1 (xn −µ)2  .",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,100,493,"Figure 2.13 Plot of the gamma distribution Gam(λ|a, b) deﬁned by (2.146) for various values of the parameters a and b.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,100,494,"The corresponding conjugate prior should therefore be proportional to the product of a power of λ and the exponential of a linear function of λ. This corresponds to the gamma distribution which is deﬁned by Gam(λ|a, b) = 1 Γ(a)baλa−1 exp(−bλ).",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,100,495,"Here Γ(a) is the gamma function that is deﬁned by (1.141) and that ensures that (2.146) is correctly normalized. The gamma distribution has a ﬁnite integral if a > 0, and the distribution itself is ﬁnite if a ⩾1. It is plotted, for various values of a and b, in Figure 2.13. The mean and variance of the gamma distribution are given by E[λ] = a b (2.147) var[λ] = a b2 .",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,100,496,"Consider a prior distribution Gam(λ|a0, b0). If we multiply by the likelihood function (2.145), then we obtain a posterior distribution p(λ|X) ∝λa0−1λN/2 exp  −b0λ −λ 2 N  n=1 (xn −µ)2  (2.149) which we recognize as a gamma distribution of the form Gam(λ|aN, bN) where aN = a0 + N 2 (2.150) bN = b0 + 1 2 N  n=1 (xn −µ)2 = b0 + N 2 σ2 ML (2.151) where σ2 ML is the maximum likelihood estimator of the variance. Note that in (2.149) there is no need to keep track of the normalization constants in the prior and the likelihood function because, if required, the correct coefﬁcient can be found at the end using the normalized form (2.146) for the gamma distribution.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,101,497,"From (2.150), we see that the effect of observing N data points is to increase the value of the coefﬁcient a by N/2. Thus we can interpret the parameter a0 in the prior in terms of 2a0 ‘effective’ prior observations. Similarly, from (2.151) we see that the N data points contribute Nσ2 ML/2 to the parameter b, where σ2 ML is the variance, and so we can interpret the parameter b0 in the prior as arising from the 2a0 ‘effective’ prior observations having variance 2b0/(2a0) = b0/a0. Recall that we made an analogous interpretation for the Dirichlet prior. These distributions are examples of the exponential family, and we shall see that the interpretation of a conjugate prior in terms of effective ﬁctitious data points is a general one for the exponential family of distributions.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,101,498,"Instead of working with the precision, we can consider the variance itself. The conjugate prior in this case is called the inverse gamma distribution, although we shall not discuss this further because we will ﬁnd it more convenient to work with the precision.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,101,499,"Now suppose that both the mean and the precision are unknown. To ﬁnd a conjugate prior, we consider the dependence of the likelihood function on µ and λ p(X|µ, λ) = N  n=1  λ 2π 1/2 exp −λ 2 (xn −µ)2 ∝ λ1/2 exp  −λµ2 2 N exp  λµ N  n=1 xn −λ 2 N  n=1 x2 n  .",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,101,500,"We now wish to identify a prior distribution p(µ, λ) that has the same functional dependence on µ and λ as the likelihood function and that should therefore take the form p(µ, λ) ∝ λ1/2 exp  −λµ2 2 β exp {cλµ −dλ} = exp −βλ 2 (µ −c/β)2 λβ/2 exp −  d −c2 2β  λ (2.153) where c, d, and β are constants. Since we can always write p(µ, λ) = p(µ|λ)p(λ), we can ﬁnd p(µ|λ) and p(λ) by inspection. In particular, we see that p(µ|λ) is a Gaussian whose precision is a linear function of λ and that p(λ) is a gamma distri- bution, so that the normalized prior takes the form p(µ, λ) = N(µ|µ0, (βλ)−1)Gam(λ|a, b) (2.154) where we have deﬁned new constants given by µ0 = c/β, a = 1 + β/2, b = d−c2/2β. The distribution (2.154) is called the normal-gamma or Gaussian-gamma distribution and is plotted in Figure 2.14. Note that this is not simply the product of an independent Gaussian prior over µ and a gamma prior over λ, because the precision of µ is a linear function of λ. Even if we chose a prior in which µ and λ were independent, the posterior distribution would exhibit a coupling between the precision of µ and the value of λ.",Bayesian inference for the Gaussian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,102,501,"Figure 2.14 Contour plot of the normal-gamma distribution (2.154) for parameter values µ0 = 0, β = 2, a = 5 and b = 6.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,102,502,"In the case of the multivariate Gaussian distribution N x|µ, Λ−1 for a D- dimensional variable x, the conjugate prior distribution for the mean µ, assuming the precision is known, is again a Gaussian. For known mean and unknown precision matrix Λ, the conjugate prior is the Wishart distribution given by W(Λ|W, ν) = B|Λ|(ν−D−1)/2 exp  −1 2Tr(W−1Λ)  (2.155) where ν is called the number of degrees of freedom of the distribution, W is a D×D scale matrix, and Tr(·) denotes the trace. The normalization constant B is given by B(W, ν) = |W|−ν/2  2νD/2 πD(D−1)/4 D  i=1 Γ ν + 1 −i 2 −1 .",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,102,503,"Again, it is also possible to deﬁne a conjugate prior over the covariance matrix itself, rather than over the precision matrix, which leads to the inverse Wishart distribu- tion, although we shall not discuss this further. If both the mean and the precision are unknown, then, following a similar line of reasoning to the univariate case, the conjugate prior is given by p(µ, Λ|µ0, β, W, ν) = N(µ|µ0, (βΛ)−1) W(Λ|W, ν) (2.157) which is known as the normal-Wishart or Gaussian-Wishart distribution.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,103,504,Figure 2.15 Plot of Student’s t-distribution (2.159) for µ = 0 and λ = 1 for various values of ν. The limit ν →∞corresponds to a Gaussian distribution with mean µ and precision λ.,Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,103,505,"We have seen that the conjugate prior for the precision of a Gaussian is given by a gamma distribution. If we have a univariate Gaussian N(x|µ, τ −1) together with a Gamma prior Gam(τ|a, b) and we integrate out the precision, we obtain the marginal distribution of x in the form \end{verbatim} egin{verbatim} ν →∞ ν = 1.0 ν = 0.1 −5 0 5 0 0.1 0.2 0.3 0.4 0.5 p(x|µ, a, b) =  ∞ 0 N(x|µ, τ −1)Gam(τ|a, b) dτ (2.158) =  ∞ 0 bae(−bτ)τ a−1 Γ(a)  τ 2π 1/2 exp  −τ 2(x −µ)2 dτ = ba Γ(a)  1 2π 1/2 b + (x −µ)2 2 −a−1/2 Γ(a + 1/2) where we have made the change of variable z = τ[b + (x −µ)2/2]. By convention we deﬁne new parameters given by ν = 2a and λ = a/b, in terms of which the distribution p(x|µ, a, b) takes the form St(x|µ, λ, ν) = Γ(ν/2 + 1/2) Γ(ν/2)  λ πν 1/2 1 + λ(x −µ)2 ν −ν/2−1/2 (2.159) which is known as Student’s t-distribution. The parameter λ is sometimes called the precision of the t-distribution, even though it is not in general equal to the inverse of the variance. The parameter ν is called the degrees of freedom, and its effect is illustrated in Figure 2.15. For the particular case of ν = 1, the t-distribution reduces to the Cauchy distribution, while in the limit ν →∞the t-distribution St(x|µ, λ, ν) becomes a Gaussian N(x|µ, λ−1) with mean µ and precision λ.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,103,506,"From (2.158), we see that Student’s t-distribution is obtained by adding up an inﬁnite number of Gaussian distributions having the same mean but different preci- sions. This can be interpreted as an inﬁnite mixture of Gaussians (Gaussian mixtures will be discussed in detail in Section 2.3.9. The result is a distribution that in gen- eral has longer ‘tails’ than a Gaussian, as was seen in Figure 2.15. This gives the t- distribution an important property called robustness, which means that it is much less sensitive than the Gaussian to the presence of a few data points which are outliers.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,507,"Figure 2.16 Illustration of the robustness of Student’s t-distribution compared to a Gaussian. (a) Histogram distribution of 30 data points drawn from a Gaussian distribution, together with the maximum likelihood ﬁt ob- tained from a t-distribution (red curve) and a Gaussian (green curve, largely hidden by the red curve). Because the t-distribution contains the Gaussian as a special case it gives almost the same solution as the Gaussian.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,508,"The robustness of the t-distribution is illustrated in Figure 2.16, which compares the maximum likelihood solutions for a Gaussian and a t-distribution. Note that the max- imum likelihood solution for the t-distribution can be found using the expectation- maximization (EM) algorithm. Here we see that the effect of a small number of \end{verbatim} egin{verbatim} (a) −5 0 5 10 0 0.1 0.2 0.3 0.4 0.5 (b) −5 0 5 10 0 0.1 0.2 0.3 0.4 0.5 (b) The same data set but with three additional outlying data points showing how the Gaussian (green curve) is strongly distorted by the outliers, whereas the t-distribution (red curve) is relatively unaffected.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,509,outliers is much less signiﬁcant for the t-distribution than for the Gaussian. Outliers can arise in practical applications either because the process that generates the data corresponds to a distribution having a heavy tail or simply through mislabelled data.,Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,510,"Robustness is also an important property for regression problems. Unsurprisingly, the least squares approach to regression does not exhibit robustness, because it cor- responds to maximum likelihood under a (conditional) Gaussian distribution. By basing a regression model on a heavy-tailed distribution such as a t-distribution, we obtain a more robust model.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,511,"If we go back to (2.158) and substitute the alternative parameters ν = 2a, λ = a/b, and η = τb/a, we see that the t-distribution can be written in the form St(x|µ, λ, ν) =  ∞ 0 N x|µ, (ηλ)−1 Gam(η|ν/2, ν/2) dη.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,104,512,"We can then generalize this to a multivariate Gaussian N(x|µ, Λ) to obtain the cor- responding multivariate Student’s t-distribution in the form St(x|µ, Λ, ν) =  ∞ 0 N(x|µ, (ηΛ)−1)Gam(η|ν/2, ν/2) dη.",Student’s t-distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,513,"Using the same technique as for the univariate case, we can evaluate this integral to give \end{verbatim} egin{verbatim} St(x|µ, Λ, ν) = Γ(D/2 + ν/2) Γ(ν/2) |Λ|1/2 (πν)D/2 1 + ∆2 ν −D/2−ν/2 (2.162) where D is the dimensionality of x, and ∆2 is the squared Mahalanobis distance deﬁned by ∆2 = (x −µ)TΛ(x −µ).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,514,"This is the multivariate form of Student’s t-distribution and satisﬁes the following properties E[x] = µ, if ν > 1 (2.164) cov[x] = ν (ν −2)Λ−1, if ν > 2 (2.165) mode[x] = µ (2.166) with corresponding results for the univariate case.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,515,"Although Gaussian distributions are of great practical signiﬁcance, both in their own right and as building blocks for more complex probabilistic models, there are situations in which they are inappropriate as density models for continuous vari- ables. One important case, which arises in practical applications, is that of periodic variables.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,516,"An example of a periodic variable would be the wind direction at a particular geographical location. We might, for instance, measure values of wind direction on a number of days and wish to summarize this using a parametric distribution. Another example is calendar time, where we may be interested in modelling quantities that are believed to be periodic over 24 hours or over an annual cycle. Such quantities can conveniently be represented using an angular (polar) coordinate 0 ⩽θ < 2π.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,517,We might be tempted to treat periodic variables by choosing some direction as the origin and then applying a conventional distribution such as the Gaussian.,Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,105,518,"Such an approach, however, would give results that were strongly dependent on the arbitrary choice of origin. Suppose, for instance, that we have two observations at θ1 = 1◦and θ2 = 359◦, and we model them using a standard univariate Gaussian distribution. If we choose the origin at 0◦, then the sample mean of this data set will be 180◦with standard deviation 179◦, whereas if we choose the origin at 180◦, then the mean will be 0◦and the standard deviation will be 1◦. We clearly need to develop a special approach for the treatment of periodic variables.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,106,519,Figure 2.17 Illustration of the representation of val- ues θn of a periodic variable as two- dimensional vectors xn living on the unit circle. Also shown is the average x of those vectors.,Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,106,520,"Let us consider the problem of evaluating the mean of a set of observations D = {θ1, . . . , θN} of a periodic variable. From now on, we shall assume that θ is measured in radians. We have already seen that the simple average (θ1+· · ·+θN)/N will be strongly coordinate dependent. To ﬁnd an invariant measure of the mean, we note that the observations can be viewed as points on the unit circle and can therefore be described instead by two-dimensional unit vectors x1, . . . , xN where ∥xn∥= 1 for n = 1, . . . , N, as illustrated in Figure 2.17. We can average the vectors {xn} \end{verbatim} egin{verbatim} x1 x2 x1 x2 x3 x4 ¯x ¯r ¯θ instead to give x = 1 N N  n=1 xn (2.167) and then ﬁnd the corresponding angle θ of this average. Clearly, this deﬁnition will ensure that the location of the mean is independent of the origin of the angular coor- dinate. Note that x will typically lie inside the unit circle. The Cartesian coordinates of the observations are given by xn = (cos θn, sin θn), and we can write the Carte- sian coordinates of the sample mean in the form x = (r cos θ, r sin θ). Substituting into (2.167) and equating the x1 and x2 components then gives r cos θ = 1 N N  n=1 cos θn, r sin θ = 1 N N  n=1 sin θn.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,106,521,"Taking the ratio, and using the identity tan θ = sin θ/ cos θ, we can solve for θ to give θ = tan−1  n sin θn  n cos θn .",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,106,522,"Shortly, we shall see how this result arises naturally as the maximum likelihood estimator for an appropriately deﬁned distribution over a periodic variable.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,106,523,"We now consider a periodic generalization of the Gaussian called the von Mises distribution. Here we shall limit our attention to univariate distributions, although periodic distributions can also be found over hyperspheres of arbitrary dimension.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,107,524,"Figure 2.18 The von Mises distribution can be derived by considering a two-dimensional Gaussian of the form (2.173), whose density contours are shown in blue and conditioning on the unit circle shown in red.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,107,525,"For an extensive discussion of periodic distributions, see Mardia and Jupp (2000). By convention, we will consider distributions p(θ) that have period 2π. Any probability density p(θ) deﬁned over θ must not only be nonnegative and integrate \end{verbatim} egin{verbatim} x1 x2 p(x) r = 1 to one, but it must also be periodic. Thus p(θ) must satisfy the three conditions p(θ) ⩾ 0 (2.170)  2π 0 p(θ) dθ = 1 (2.171) p(θ + 2π) = p(θ).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,107,526,"From (2.172), it follows that p(θ + M2π) = p(θ) for any integer M. We can easily obtain a Gaussian-like distribution that satisﬁes these three prop- erties as follows. Consider a Gaussian distribution over two variables x = (x1, x2) having mean µ = (µ1, µ2) and a covariance matrix Σ = σ2I where I is the 2 × 2 identity matrix, so that p(x1, x2) = 1 2πσ2 exp −(x1 −µ1)2 + (x2 −µ2)2 2σ2 .",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,107,527,"The contours of constant p(x) are circles, as illustrated in Figure 2.18. Now suppose we consider the value of this distribution along a circle of ﬁxed radius. Then by con- struction this distribution will be periodic, although it will not be normalized. We can determine the form of this distribution by transforming from Cartesian coordinates (x1, x2) to polar coordinates (r, θ) so that x1 = r cos θ, x2 = r sin θ.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,107,528,"We also map the mean µ into polar coordinates by writing µ1 = r0 cos θ0, µ2 = r0 sin θ0.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,108,529,"Figure 2.19 The von Mises distribution plotted for two different parameter values, shown as a Cartesian plot on the left and as the corresponding polar plot on the right.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,108,530,"Next we substitute these transformations into the two-dimensional Gaussian distribu- tion (2.173), and then condition on the unit circle r = 1, noting that we are interested only in the dependence on θ. Focussing on the exponent in the Gaussian distribution we have −1 2σ2  (r cos θ −r0 cos θ0)2 + (r sin θ −r0 sin θ0)2 = −1 2σ2  1 + r2 0 −2r0 cos θ cos θ0 −2r0 sin θ sin θ0  = r0 σ2 cos(θ −θ0) + const (2.176) \end{verbatim} egin{verbatim} m = 5, θ0 = π/4 m = 1, θ0 = 3π/4 2π 0 π/4 3π/4 m = 5, θ0 = π/4 m = 1, θ0 = 3π/4 where ‘const’ denotes terms independent of θ, and we have made use of the following trigonometrical identities cos2 A + sin2 A = 1 (2.177) cos A cos B + sin A sin B = cos(A −B).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,108,531,"If we now deﬁne m = r0/σ2, we obtain our ﬁnal expression for the distribution of p(θ) along the unit circle r = 1 in the form p(θ|θ0, m) = 1 2πI0(m) exp {m cos(θ −θ0)} (2.179) which is called the von Mises distribution, or the circular normal. Here the param- eter θ0 corresponds to the mean of the distribution, while m, which is known as the concentration parameter, is analogous to the inverse variance (precision) for the Gaussian. The normalization coefﬁcient in (2.179) is expressed in terms of I0(m), which is the zeroth-order Bessel function of the ﬁrst kind (Abramowitz and Stegun, 1965) and is deﬁned by I0(m) = 1 2π  2π 0 exp {m cos θ} dθ.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,108,532,"For large m, the distribution becomes approximately Gaussian. The von Mises dis- tribution is plotted in Figure 2.19, and the function I0(m) is plotted in Figure 2.20.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,108,533,"Now consider the maximum likelihood estimators for the parameters θ0 and m for the von Mises distribution. The log likelihood function is given by ln p(D|θ0, m) = −N ln(2π) −N ln I0(m) + m N  n=1 cos(θn −θ0).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,109,534,"Figure 2.20 Plot of the Bessel function I0(m) deﬁned by (2.180), together with the function A(m) deﬁned by (2.186).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,109,535,Setting the derivative with respect to θ0 equal to zero gives N  n=1 sin(θn −θ0) = 0.,Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,109,536,"To solve for θ0, we make use of the trigonometric identity sin(A −B) = cos B sin A −cos A sin B (2.183) from which we obtain θML 0 = tan−1  n sin θn  n cos θn (2.184) which we recognize as the result (2.169) obtained earlier for the mean of the obser- vations viewed in a two-dimensional Cartesian space.",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,109,537,"Similarly, maximizing (2.181) with respect to m, and making use of I′ 0(m) = I1(m) (Abramowitz and Stegun, 1965), we have A(m) = 1 N N  n=1 cos(θn −θML 0 ) (2.185) where we have substituted for the maximum likelihood solution for θML 0 (recalling that we are performing a joint optimization over θ and m), and we have deﬁned A(m) = I1(m) I0(m).",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,109,538,"The function A(m) is plotted in Figure 2.20. Making use of the trigonometric iden- tity (2.178), we can write (2.185) in the form A(mML) =  1 N N  n=1 cos θn  cos θML 0 −  1 N N  n=1 sin θn  sin θML 0 .",Periodic variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,110,539,Figure 2.21 Plots of the ‘old faith- ful’ data in which the blue curves show contours of constant proba- bility density.,Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,110,540,"On the left is a single Gaussian distribution which has been ﬁtted to the data us- ing maximum likelihood. Note that this distribution fails to capture the two clumps in the data and indeed places much of its probability mass in the central region between the clumps where the data are relatively sparse. On the right the distribution is given by a linear combination of two Gaussians which has been ﬁtted to the data by maximum likelihood using techniques discussed Chap- ter 9, and which gives a better rep- resentation of the data.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,110,541,"The right-hand side of (2.187) is easily evaluated, and the function A(m) can be inverted numerically.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,110,542,"For completeness, we mention brieﬂy some alternative techniques for the con- struction of periodic distributions. The simplest approach is to use a histogram of observations in which the angular coordinate is divided into ﬁxed bins. This has the virtue of simplicity and ﬂexibility but also suffers from signiﬁcant limitations, as we shall see when we discuss histogram methods in more detail in Section 2.5. Another approach starts, like the von Mises distribution, from a Gaussian distribution over a Euclidean space but now marginalizes onto the unit circle rather than conditioning (Mardia and Jupp, 2000). However, this leads to more complex forms of distribution and will not be discussed further. Finally, any valid distribution over the real axis (such as a Gaussian) can be turned into a periodic distribution by mapping succes- sive intervals of width 2π onto the periodic variable (0, 2π), which corresponds to ‘wrapping’ the real axis around unit circle. Again, the resulting distribution is more complex to handle than the von Mises distribution.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,110,543,"One limitation of the von Mises distribution is that it is unimodal. By forming mixtures of von Mises distributions, we obtain a ﬂexible framework for modelling periodic variables that can handle multimodality. For an example of a machine learn- ing application that makes use of von Mises distributions, see Lawrence et al. (2002), and for extensions to modelling conditional densities for regression problems, see Bishop and Nabney (1996).",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,544,Figure 2.22 Example of a Gaussian mixture distribution in one dimension showing three Gaussians (each scaled by a coefﬁcient) in blue and their sum in red.,Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,545,"While the Gaussian distribution has some important analytical properties, it suf- fers from signiﬁcant limitations when it comes to modelling real data sets. Consider the example shown in Figure 2.21. This is known as the ‘Old Faithful’ data set, and comprises 272 measurements of the eruption of the Old Faithful geyser at Yel- lowstone National Park in the USA. Each measurement comprises the duration of Appendix A \end{verbatim} egin{verbatim} x p(x) the eruption in minutes (horizontal axis) and the time in minutes to the next erup- tion (vertical axis). We see that the data set forms two dominant clumps, and that a simple Gaussian distribution is unable to capture this structure, whereas a linear superposition of two Gaussians gives a better characterization of the data set.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,546,"Such superpositions, formed by taking linear combinations of more basic dis- tributions such as Gaussians, can be formulated as probabilistic models known as mixture distributions (McLachlan and Basford, 1988; McLachlan and Peel, 2000).",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,547,"In Figure 2.22 we see that a linear combination of Gaussians can give rise to very complex densities. By using a sufﬁcient number of Gaussians, and by adjusting their means and covariances as well as the coefﬁcients in the linear combination, almost any continuous density can be approximated to arbitrary accuracy.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,548,"We therefore consider a superposition of K Gaussian densities of the form p(x) = K  k=1 πkN(x|µk, Σk) (2.188) which is called a mixture of Gaussians. Each Gaussian density N(x|µk, Σk) is called a component of the mixture and has its own mean µk and covariance Σk.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,549,Contour and surface plots for a Gaussian mixture having 3 components are shown in Figure 2.23.,Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,550,"In this section we shall consider Gaussian components to illustrate the frame- work of mixture models. More generally, mixture models can comprise linear com- binations of other distributions. For instance, in Section 9.3.3 we shall consider mixtures of Bernoulli distributions as an example of a mixture model for discrete variables.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,551,"The parameters πk in (2.188) are called mixing coefﬁcients. If we integrate both sides of (2.188) with respect to x, and note that both p(x) and the individual Gaussian components are normalized, we obtain K  k=1 πk = 1.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,111,552,"Also, the requirement that p(x) ⩾0, together with N(x|µk, Σk) ⩾0, implies πk ⩾0 for all k. Combining this with the condition (2.189) we obtain 0 ⩽πk ⩽1.",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,112,553,"Figure 2.23 Illustration of a mixture of 3 Gaussians in a two-dimensional space. (a) Contours of constant density for each of the mixture components, in which the 3 components are denoted red, blue and green, and the values of the mixing coefﬁcients are shown below each component. (b) Contours of the marginal probability density p(x) of the mixture distribution. (c) A surface plot of the distribution p(x).",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,112,554,We therefore see that the mixing coefﬁcients satisfy the requirements to be probabil- ities.,Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,112,555,"From the sum and product rules, the marginal density is given by p(x) = K  k=1 p(k)p(x|k) (2.191) which is equivalent to (2.188) in which we can view πk = p(k) as the prior prob- ability of picking the kth component, and the density N(x|µk, Σk) = p(x|k) as the probability of x conditioned on k. As we shall see in later chapters, an impor- tant role is played by the posterior probabilities p(k|x), which are also known as responsibilities. From Bayes’ theorem these are given by γk(x) ≡ p(k|x) = p(k)p(x|k)  l p(l)p(x|l) = πkN(x|µk, Σk)  l πlN(x|µl, Σl).",Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,112,556,We shall discuss the probabilistic interpretation of the mixture distribution in greater detail in Chapter 9.,Mixtures of Gaussians
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,557,"The form of the Gaussian mixture distribution is governed by the parameters π, µ and Σ, where we have used the notation π ≡{π1, . . . , πK}, µ ≡{µ1, . . . , µK} and Σ ≡{Σ1, . . . ΣK}. One way to set the values of these parameters is to use maximum likelihood. From (2.188) the log of the likelihood function is given by ln p(X|π, µ, Σ) = N  n=1 ln  K  k=1 πkN(xn|µk, Σk)  (2.193) \end{verbatim} egin{verbatim} where X = {x1, . . . , xN}. We immediately see that the situation is now much more complex than with a single Gaussian, due to the presence of the summation over k inside the logarithm. As a result, the maximum likelihood solution for the parameters no longer has a closed-form analytical solution. One approach to maxi- mizing the likelihood function is to use iterative numerical optimization techniques (Fletcher, 1987; Nocedal and Wright, 1999; Bishop and Nabney, 2008). Alterna- tively we can employ a powerful framework called expectation maximization, which will be discussed at length in Chapter 9.",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,558,"The probability distributions that we have studied so far in this chapter (with the exception of the Gaussian mixture) are speciﬁc examples of a broad class of distri- butions called the exponential family (Duda and Hart, 1973; Bernardo and Smith, 1994). Members of the exponential family have many important properties in com- mon, and it is illuminating to discuss these properties in some generality.",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,559,"The exponential family of distributions over x, given parameters η, is deﬁned to be the set of distributions of the form p(x|η) = h(x)g(η) exp  ηTu(x) (2.194) where x may be scalar or vector, and may be discrete or continuous. Here η are called the natural parameters of the distribution, and u(x) is some function of x.",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,560,The function g(η) can be interpreted as the coefﬁcient that ensures that the distribu- tion is normalized and therefore satisﬁes g(η)  h(x) exp  ηTu(x) dx = 1 (2.195) where the integration is replaced by summation if x is a discrete variable.,The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,561,We begin by taking some examples of the distributions introduced earlier in the chapter and showing that they are indeed members of the exponential family.,The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,562,Consider ﬁrst the Bernoulli distribution p(x|µ) = Bern(x|µ) = µx(1 −µ)1−x.,The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,113,563,"Expressing the right-hand side as the exponential of the logarithm, we have p(x|µ) = exp {x ln µ + (1 −x) ln(1 −µ)} = (1 −µ) exp ln  µ 1 −µ  x .",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,114,564,"Comparison with (2.194) allows us to identify η = ln  µ 1 −µ  (2.198) \end{verbatim} egin{verbatim} which we can solve for µ to give µ = σ(η), where σ(η) = 1 1 + exp(−η) (2.199) is called the logistic sigmoid function. Thus we can write the Bernoulli distribution using the standard representation (2.194) in the form p(x|η) = σ(−η) exp(ηx) (2.200) where we have used 1 −σ(η) = σ(−η), which is easily proved from (2.199). Com- parison with (2.194) shows that u(x) = x (2.201) h(x) = 1 (2.202) g(η) = σ(−η).",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,114,565,"Next consider the multinomial distribution that, for a single observation x, takes the form p(x|µ) = M  k=1 µxk k = exp  M  k=1 xk ln µk  (2.204) where x = (x1, . . . , xN)T. Again, we can write this in the standard representation (2.194) so that p(x|η) = exp(ηTx) (2.205) where ηk = ln µk, and we have deﬁned η = (η1, . . . , ηM)T. Again, comparing with (2.194) we have u(x) = x (2.206) h(x) = 1 (2.207) g(η) = 1.",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,114,566,"Note that the parameters ηk are not independent because the parameters µk are sub- ject to the constraint M  k=1 µk = 1 (2.209) so that, given any M −1 of the parameters µk, the value of the remaining parameter is ﬁxed. In some circumstances, it will be convenient to remove this constraint by expressing the distribution in terms of only M −1 parameters. This can be achieved by using the relationship (2.209) to eliminate µM by expressing it in terms of the remaining {µk} where k = 1, . . . , M −1, thereby leaving M −1 parameters. Note that these remaining parameters are still subject to the constraints 0 ⩽µk ⩽1, M−1  k=1 µk ⩽1.",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,115,567,"Making use of the constraint (2.209), the multinomial distribution in this representa- tion then becomes exp  M  k=1 xk ln µk  = exp M−1  k=1 xk ln µk +  1 − M−1  k=1 xk  ln  1 − M−1  k=1 µk  = exp M−1  k=1 xk ln  µk 1 −M−1 j=1 µj  + ln  1 − M−1  k=1 µk  .",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,115,568,which we can solve for µk by ﬁrst summing both sides over k and then rearranging and back-substituting to give µk = exp(ηk) 1 +  j exp(ηj).,The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,115,569,"This is called the softmax function, or the normalized exponential. In this represen- tation, the multinomial distribution therefore takes the form p(x|η) =  1 + M−1  k=1 exp(ηk) −1 exp(ηTx).",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,115,570,"This is the standard form of the exponential family, with parameter vector η = (η1, . . . , ηM−1)T in which u(x) = x (2.215) h(x) = 1 (2.216) g(η) =  1 + M−1  k=1 exp(ηk) −1 .",The Exponential Family
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,116,571,"Finally, let us consider the Gaussian distribution. For the univariate Gaussian, we have p(x|µ, σ2) = 1 (2πσ2)1/2 exp −1 2σ2 (x −µ)2 (2.218) = 1 (2πσ2)1/2 exp −1 2σ2 x2 + µ σ2 x − 1 2σ2 µ2 (2.219) \end{verbatim} egin{verbatim} which, after some simple rearrangement, can be cast in the standard exponential family form (2.194) with η =  µ/σ2 −1/2σ2  (2.220) u(x) =  x x2  (2.221) h(x) = (2π)−1/2 (2.222) g(η) = (−2η2)1/2 exp  η2 1 4η2  .",Maximum likelihood and sufficient statistics
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,116,572,"Let us now consider the problem of estimating the parameter vector η in the gen- eral exponential family distribution (2.194) using the technique of maximum likeli- hood. Taking the gradient of both sides of (2.195) with respect to η, we have ∇g(η)  h(x) exp  ηTu(x) dx + g(η)  h(x) exp  ηTu(x)  u(x) dx = 0.",Maximum likelihood and sufficient statistics
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,116,573,"Rearranging, and making use again of (2.195) then gives − 1 g(η)∇g(η) = g(η)  h(x) exp  ηTu(x)  u(x) dx = E[u(x)] (2.225) where we have used (2.194). We therefore obtain the result −∇ln g(η) = E[u(x)].",Maximum likelihood and sufficient statistics
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,116,574,"Note that the covariance of u(x) can be expressed in terms of the second derivatives of g(η), and similarly for higher order moments. Thus, provided we can normalize a distribution from the exponential family, we can always ﬁnd its moments by simple differentiation.",Maximum likelihood and sufficient statistics
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,116,575,"Now consider a set of independent identically distributed data denoted by X = {x1, . . . , xn}, for which the likelihood function is given by p(X|η) =  N  n=1 h(xn)  g(η)N exp  ηT N  n=1 u(xn)  .",Maximum likelihood and sufficient statistics
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,117,576,"Setting the gradient of ln p(X|η) with respect to η to zero, we get the following condition to be satisﬁed by the maximum likelihood estimator ηML −∇ln g(ηML) = 1 N N  n=1 u(xn) (2.228) \end{verbatim} egin{verbatim} which can in principle be solved to obtain ηML. We see that the solution for the maximum likelihood estimator depends on the data only through  n u(xn), which is therefore called the sufﬁcient statistic of the distribution (2.194). We do not need to store the entire data set itself but only the value of the sufﬁcient statistic. For the Bernoulli distribution, for example, the function u(x) is given just by x and so we need only keep the sum of the data points {xn}, whereas for the Gaussian u(x) = (x, x2)T, and so we should keep both the sum of {xn} and the sum of {x2 n}.",Conjugate priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,117,577,"If we consider the limit N →∞, then the right-hand side of (2.228) becomes E[u(x)], and so by comparing with (2.226) we see that in this limit ηML will equal the true value η.",Conjugate priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,117,578,"In fact, this sufﬁciency property holds also for Bayesian inference, although we shall defer discussion of this until Chapter 8 when we have equipped ourselves with the tools of graphical models and can thereby gain a deeper insight into these important concepts.",Conjugate priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,117,579,"We have already encountered the concept of a conjugate prior several times, for example in the context of the Bernoulli distribution (for which the conjugate prior is the beta distribution) or the Gaussian (where the conjugate prior for the mean is a Gaussian, and the conjugate prior for the precision is the Wishart distribution). In general, for a given probability distribution p(x|η), we can seek a prior p(η) that is conjugate to the likelihood function, so that the posterior distribution has the same functional form as the prior. For any member of the exponential family (2.194), there exists a conjugate prior that can be written in the form p(η|χ, ν) = f(χ, ν)g(η)ν exp  νηTχ  (2.229) where f(χ, ν) is a normalization coefﬁcient, and g(η) is the same function as ap- pears in (2.194). To see that this is indeed conjugate, let us multiply the prior (2.229) by the likelihood function (2.227) to obtain the posterior distribution, up to a nor- malization coefﬁcient, in the form p(η|X, χ, ν) ∝g(η)ν+N exp  ηT  N  n=1 u(xn) + νχ  .",Conjugate priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,117,580,"This again takes the same functional form as the prior (2.229), conﬁrming conjugacy. Furthermore, we see that the parameter ν can be interpreted as a effective number of pseudo-observations in the prior, each of which has a value for the sufﬁcient statistic u(x) given by χ.",Conjugate priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,118,581,"In some applications of probabilistic inference, we may have prior knowledge that can be conveniently expressed through the prior distribution. For example, if the prior assigns zero probability to some value of variable, then the posterior dis- tribution will necessarily also assign zero probability to that value, irrespective of \end{verbatim} egin{verbatim} any subsequent observations of data. In many cases, however, we may have little idea of what form the distribution should take. We may then seek a form of prior distribution, called a noninformative prior, which is intended to have as little inﬂu- ence on the posterior distribution as possible (Jeffries, 1946; Box and Tao, 1973; Bernardo and Smith, 1994). This is sometimes referred to as ‘letting the data speak for themselves’.",Noninformative priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,118,582,"If we have a distribution p(x|λ) governed by a parameter λ, we might be tempted to propose a prior distribution p(λ) = const as a suitable prior. If λ is a discrete variable with K states, this simply amounts to setting the prior probability of each state to 1/K. In the case of continuous parameters, however, there are two potential difﬁculties with this approach. The ﬁrst is that, if the domain of λ is unbounded, this prior distribution cannot be correctly normalized because the integral over λ diverges. Such priors are called improper. In practice, improper priors can often be used provided the corresponding posterior distribution is proper, i.e., that it can be correctly normalized. For instance, if we put a uniform prior distribution over the mean of a Gaussian, then the posterior distribution for the mean, once we have observed at least one data point, will be proper.",Noninformative priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,118,583,"A second difﬁculty arises from the transformation behaviour of a probability density under a nonlinear change of variables, given by (1.27). If a function h(λ) is constant, and we change variables to λ = η2, then h(η) = h(η2) will also be constant. However, if we choose the density pλ(λ) to be constant, then the density of η will be given, from (1.27), by pη(η) = pλ(λ)  dλ dη  = pλ(η2)2η ∝η (2.231) and so the density over η will not be constant. This issue does not arise when we use maximum likelihood, because the likelihood function p(x|λ) is a simple function of λ and so we are free to use any convenient parameterization. If, however, we are to choose a prior distribution that is constant, we must take care to use an appropriate representation for the parameters.",Noninformative priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,119,584,"Here we consider two simple examples of noninformative priors (Berger, 1985). First of all, if a density takes the form p(x|µ) = f(x −µ) (2.232) then the parameter µ is known as a location parameter. This family of densities exhibits translation invariance because if we shift x by a constant to give x = x + c, then p(x|µ) = f(x −µ) (2.233) where we have deﬁned µ = µ + c. Thus the density takes the same form in the new variable as in the original one, and so the density is independent of the choice of origin. We would like to choose a prior distribution that reﬂects this translation invariance property, and so we choose a prior that assigns equal probability mass to \end{verbatim} egin{verbatim} an interval A ⩽µ ⩽B as to the shifted interval A −c ⩽µ ⩽B −c. This implies  B A p(µ) dµ =  B−c A−c p(µ) dµ =  B A p(µ −c) dµ (2.234) and because this must hold for all choices of A and B, we have p(µ −c) = p(µ) (2.235) which implies that p(µ) is constant. An example of a location parameter would be the mean µ of a Gaussian distribution. As we have seen, the conjugate prior distri- bution for µ in this case is a Gaussian p(µ|µ0, σ2 0) = N(µ|µ0, σ2 0), and we obtain a noninformative prior by taking the limit σ2 0 →∞. Indeed, from (2.141) and (2.142) we see that this gives a posterior distribution over µ in which the contributions from the prior vanish.",Noninformative priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,119,585,"As a second example, consider a density of the form p(x|σ) = 1 σ f x σ  (2.236) where σ > 0. Note that this will be a normalized density provided f(x) is correctly normalized. The parameter σ is known as a scale parameter, and the density exhibits scale invariance because if we scale x by a constant to give x = cx, then p(x|σ) = 1 σ f x σ  (2.237) where we have deﬁned σ = cσ. This transformation corresponds to a change of scale, for example from meters to kilometers if x is a length, and we would like to choose a prior distribution that reﬂects this scale invariance. If we consider an interval A ⩽σ ⩽B, and a scaled interval A/c ⩽σ ⩽B/c, then the prior should assign equal probability mass to these two intervals. Thus we have  B A p(σ) dσ =  B/c A/c p(σ) dσ =  B A p 1 cσ  1 c dσ (2.238) and because this must hold for choices of A and B, we have p(σ) = p 1 cσ  1 c (2.239) and hence p(σ) ∝1/σ. Note that again this is an improper prior because the integral of the distribution over 0 ⩽σ ⩽∞is divergent. It is sometimes also convenient to think of the prior distribution for a scale parameter in terms of the density of the log of the parameter. Using the transformation rule (1.27) for densities we see that p(ln σ) = const. Thus, for this prior there is the same probability mass in the range 1 ⩽σ ⩽10 as in the range 10 ⩽σ ⩽100 and in 100 ⩽σ ⩽1000.",Noninformative priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,120,586,"An example of a scale parameter would be the standard deviation σ of a Gaussian distribution, after we have taken account of the location parameter µ, because N(x|µ, σ2) ∝σ−1 exp  −(x/σ)2 (2.240) where x = x −µ. As discussed earlier, it is often more convenient to work in terms of the precision λ = 1/σ2 rather than σ itself. Using the transformation rule for densities, we see that a distribution p(σ) ∝1/σ corresponds to a distribution over λ of the form p(λ) ∝1/λ. We have seen that the conjugate prior for λ was the gamma distribution Gam(λ|a0, b0) given by (2.146). The noninformative prior is obtained as the special case a0 = b0 = 0. Again, if we examine the results (2.150) and (2.151) for the posterior distribution of λ, we see that for a0 = b0 = 0, the posterior depends only on terms arising from the data and not from the prior.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,120,587,"Throughout this chapter, we have focussed on the use of probability distributions having speciﬁc functional forms governed by a small number of parameters whose values are to be determined from a data set. This is called the parametric approach to density modelling. An important limitation of this approach is that the chosen density might be a poor model of the distribution that generates the data, which can result in poor predictive performance. For instance, if the process that generates the data is multimodal, then this aspect of the distribution can never be captured by a Gaussian, which is necessarily unimodal.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,120,588,"In this ﬁnal section, we consider some nonparametric approaches to density es- timation that make few assumptions about the form of the distribution. Here we shall focus mainly on simple frequentist methods. The reader should be aware, however, that nonparametric Bayesian methods are attracting increasing interest (Walker et al., 1999; Neal, 2000; M¨uller and Quintana, 2004; Teh et al., 2006).",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,120,589,"Let us start with a discussion of histogram methods for density estimation, which we have already encountered in the context of marginal and conditional distributions in Figure 1.11 and in the context of the central limit theorem in Figure 2.6. Here we explore the properties of histogram density models in more detail, focussing on the case of a single continuous variable x. Standard histograms simply partition x into distinct bins of width ∆i and then count the number ni of observations of x falling in bin i. In order to turn this count into a normalized probability density, we simply divide by the total number N of observations and by the width ∆i of the bins to obtain probability values for each bin given by pi = ni N∆i (2.241) for which it is easily seen that p(x) dx = 1. This gives a model for the density p(x) that is constant over the width of each bin, and often the bins are chosen to have the same width ∆i = ∆.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,121,590,"Figure 2.24 An illustration of the histogram approach to density estimation, in which a data set of 50 data points is generated from the distribution shown by the green curve.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,121,591,"Histogram density estimates, based on (2.241), with a common bin width ∆are shown for various values of ∆.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,121,592,"In Figure 2.24, we show an example of histogram density estimation. Here the data is drawn from the distribution, corresponding to the green curve, which is formed from a mixture of two Gaussians. Also shown are three examples of his- togram density estimates corresponding to three different choices for the bin width ∆. We see that when ∆is very small (top ﬁgure), the resulting density model is very spiky, with a lot of structure that is not present in the underlying distribution that generated the data set. Conversely, if ∆is too large (bottom ﬁgure) then the result is a model that is too smooth and that consequently fails to capture the bimodal prop- erty of the green curve. The best results are obtained for some intermediate value of ∆(middle ﬁgure). In principle, a histogram density model is also dependent on the choice of edge location for the bins, though this is typically much less signiﬁcant than the value of ∆.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,121,593,"Note that the histogram method has the property (unlike the methods to be dis- cussed shortly) that, once the histogram has been computed, the data set itself can be discarded, which can be advantageous if the data set is large. Also, the histogram approach is easily applied if the data points are arriving sequentially.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,121,594,"In practice, the histogram technique can be useful for obtaining a quick visual- ization of data in one or two dimensions but is unsuited to most density estimation applications. One obvious problem is that the estimated density has discontinuities that are due to the bin edges rather than any property of the underlying distribution that generated the data. Another major limitation of the histogram approach is its scaling with dimensionality. If we divide each variable in a D-dimensional space into M bins, then the total number of bins will be M D. This exponential scaling with D is an example of the curse of dimensionality. In a space of high dimensional- ity, the quantity of data needed to provide meaningful estimates of local probability density would be prohibitive.",Nonparametric Methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,595,"The histogram approach to density estimation does, however, teach us two im- portant lessons. First, to estimate the probability density at a particular location, we should consider the data points that lie within some local neighbourhood of that point. Note that the concept of locality requires that we assume some form of dis- tance measure, and here we have been assuming Euclidean distance. For histograms, \end{verbatim} egin{verbatim} this neighbourhood property was deﬁned by the bins, and there is a natural ‘smooth- ing’ parameter describing the spatial extent of the local region, in this case the bin width. Second, the value of the smoothing parameter should be neither too large nor too small in order to obtain good results. This is reminiscent of the choice of model complexity in polynomial curve ﬁtting discussed in Chapter 1 where the degree M of the polynomial, or alternatively the value α of the regularization parameter, was optimal for some intermediate value, neither too large nor too small. Armed with these insights, we turn now to a discussion of two widely used nonparametric tech- niques for density estimation, kernel estimators and nearest neighbours, which have better scaling with dimensionality than the simple histogram model.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,596,"Let us suppose that observations are being drawn from some unknown probabil- ity density p(x) in some D-dimensional space, which we shall take to be Euclidean, and we wish to estimate the value of p(x). From our earlier discussion of locality, let us consider some small region R containing x. The probability mass associated with this region is given by P =  R p(x) dx.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,597,"Now suppose that we have collected a data set comprising N observations drawn from p(x). Because each data point has a probability P of falling within R, the total number K of points that lie inside R will be distributed according to the binomial distribution Bin(K|N, P) = N! K!(N −K)!P K(1 −P)1−K.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,598,"Using (2.11), we see that the mean fraction of points falling inside the region is E[K/N] = P, and similarly using (2.12) we see that the variance around this mean is var[K/N] = P(1 −P)/N. For large N, this distribution will be sharply peaked around the mean and so K ≃NP.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,599,"If, however, we also assume that the region R is sufﬁciently small that the probability density p(x) is roughly constant over the region, then we have P ≃p(x)V (2.245) where V is the volume of R. Combining (2.244) and (2.245), we obtain our density estimate in the form p(x) = K NV .",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,122,600,"Note that the validity of (2.246) depends on two contradictory assumptions, namely that the region R be sufﬁciently small that the density is approximately constant over the region and yet sufﬁciently large (in relation to the value of that density) that the number K of points falling inside the region is sufﬁcient for the binomial distribution to be sharply peaked.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,123,601,"We can exploit the result (2.246) in two different ways. Either we can ﬁx K and determine the value of V from the data, which gives rise to the K-nearest-neighbour technique discussed shortly, or we can ﬁx V and determine K from the data, giv- ing rise to the kernel approach. It can be shown that both the K-nearest-neighbour density estimator and the kernel density estimator converge to the true probability density in the limit N →∞provided V shrinks suitably with N, and K grows with N (Duda and Hart, 1973).",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,123,602,"We begin by discussing the kernel method in detail, and to start with we take the region R to be a small hypercube centred on the point x at which we wish to determine the probability density. In order to count the number K of points falling within this region, it is convenient to deﬁne the following function k(u) = 1, |ui| ⩽1/2, i = 1, . . . , D, 0, otherwise (2.247) which represents a unit cube centred on the origin. The function k(u) is an example of a kernel function, and in this context is also called a Parzen window. From (2.247), the quantity k((x −xn)/h) will be one if the data point xn lies inside a cube of side h centred on x, and zero otherwise. The total number of data points lying inside this cube will therefore be K = N  n=1 k x −xn h  .",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,123,603,"Substituting this expression into (2.246) then gives the following result for the esti- mated density at x p(x) = 1 N N  n=1 1 hD k x −xn h  (2.249) where we have used V = hD for the volume of a hypercube of side h in D di- mensions. Using the symmetry of the function k(u), we can now re-interpret this equation, not as a single cube centred on x but as the sum over N cubes centred on the N data points xn.",Kernel density estimators
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,124,604,Figure 2.25 Illustration of the kernel density model (2.250) applied to the same data set used to demonstrate the histogram approach in Figure 2.24.,Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,124,605,"As it stands, the kernel density estimator (2.249) will suffer from one of the same problems that the histogram method suffered from, namely the presence of artiﬁcial discontinuities, in this case at the boundaries of the cubes. We can obtain a smoother density model if we choose a smoother kernel function, and a common choice is the Gaussian, which gives rise to the following kernel density model p(x) = 1 N N  n=1 1 (2πh2)1/2 exp −∥x −xn∥2 2h2 (2.250) where h represents the standard deviation of the Gaussian components. Thus our density model is obtained by placing a Gaussian over each data point and then adding up the contributions over the whole data set, and then dividing by N so that the den- sity is correctly normalized. In Figure 2.25, we apply the model (2.250) to the data \end{verbatim} egin{verbatim} We see that h acts as a smoothing parameter and that if it is set too small (top panel), the result is a very noisy density model, whereas if it is set too large (bottom panel), then the bimodal nature of the underlying distribution from which the data is generated (shown by the green curve) is washed out. The best den- sity model is obtained for some intermedi- ate value of h (middle panel).",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,124,606,"set used earlier to demonstrate the histogram technique. We see that, as expected, the parameter h plays the role of a smoothing parameter, and there is a trade-off between sensitivity to noise at small h and over-smoothing at large h. Again, the optimization of h is a problem in model complexity, analogous to the choice of bin width in histogram density estimation, or the degree of the polynomial used in curve ﬁtting.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,124,607,"We can choose any other kernel function k(u) in (2.249) subject to the condi- tions k(u) ⩾ 0, (2.251)  k(u) du = 1 (2.252) which ensure that the resulting probability distribution is nonnegative everywhere and integrates to one. The class of density model given by (2.249) is called a kernel density estimator, or Parzen estimator. It has a great merit that there is no compu- tation involved in the ‘training’ phase because this simply requires storage of the training set. However, this is also one of its great weaknesses because the computa- tional cost of evaluating the density grows linearly with the size of the data set.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,124,608,"One of the difﬁculties with the kernel approach to density estimation is that the parameter h governing the kernel width is ﬁxed for all kernels. In regions of high data density, a large value of h may lead to over-smoothing and a washing out of structure that might otherwise be extracted from the data. However, reducing h may lead to noisy estimates elsewhere in data space where the density is smaller. Thus the optimal choice for h may be dependent on location within the data space. This issue is addressed by nearest-neighbour methods for density estimation.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,609,Figure 2.26 Illustration of K-nearest-neighbour den- sity estimation using the same data set as in Figures 2.25 and 2.24.,Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,610,"We therefore return to our general result (2.246) for local density estimation, and instead of ﬁxing V and determining the value of K from the data, we consider a ﬁxed value of K and use the data to ﬁnd an appropriate value for V . To do this, we consider a small sphere centred on the point x at which we wish to estimate the \end{verbatim} egin{verbatim} We see that the parameter K governs the degree of smoothing, so that a small value of K leads to a very noisy density model (top panel), whereas a large value (bot- tom panel) smoothes out the bimodal na- ture of the true distribution (shown by the green curve) from which the data set was generated.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,611,"density p(x), and we allow the radius of the sphere to grow until it contains precisely K data points. The estimate of the density p(x) is then given by (2.246) with V set to the volume of the resulting sphere. This technique is known as K nearest neighbours and is illustrated in Figure 2.26, for various choices of the parameter K, using the same data set as used in Figure 2.24 and Figure 2.25. We see that the value of K now governs the degree of smoothing and that again there is an optimum choice for K that is neither too large nor too small. Note that the model produced by K nearest neighbours is not a true density model because the integral over all space diverges.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,612,"We close this chapter by showing how the K-nearest-neighbour technique for density estimation can be extended to the problem of classiﬁcation. To do this, we apply the K-nearest-neighbour density estimation technique to each class separately and then make use of Bayes’ theorem. Let us suppose that we have a data set com- prising Nk points in class Ck with N points in total, so that  k Nk = N. If we wish to classify a new point x, we draw a sphere centred on x containing precisely K points irrespective of their class. Suppose this sphere has volume V and contains Kk points from class Ck. Then (2.246) provides an estimate of the density associated with each class p(x|Ck) = Kk NkV .",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,613,"Similarly, the unconditional density is given by p(x) = K NV (2.254) while the class priors are given by p(Ck) = Nk N .",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,125,614,"We can now combine (2.253), (2.254), and (2.255) using Bayes’ theorem to obtain the posterior probability of class membership p(Ck|x) = p(x|Ck)p(Ck) p(x) = Kk K .",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,615,"Figure 2.27 (a) In the K-nearest- neighbour classiﬁer, a new point, shown by the black diamond, is clas- siﬁed according to the majority class membership of the K closest train- ing data points, in this case K = 3.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,616,"Figure 2.28 Plot of 200 data points from the oil data set showing values of x6 plotted against x7, where the red, green, and blue points correspond to the ‘laminar’, ‘annular’, and ‘homogeneous’ classes, respectively. Also shown are the classiﬁcations of the input space given by the K-nearest-neighbour algorithm for various values of K.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,617,"(K = 1) approach to classiﬁcation, the resulting decision boundary is composed of hyperplanes that form perpendicular bisectors of pairs of points from different classes.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,618,"If we wish to minimize the probability of misclassiﬁcation, this is done by assigning the test point x to the class having the largest posterior probability, corresponding to the largest value of Kk/K. Thus to classify a new point, we identify the K nearest points from the training data set and then assign the new point to the class having the largest number of representatives amongst this set. Ties can be broken at random.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,619,"The particular case of K = 1 is called the nearest-neighbour rule, because a test point is simply assigned to the same class as the nearest point from the training set.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,126,620,"These concepts are illustrated in Figure 2.27. In Figure 2.28, we show the results of applying the K-nearest-neighbour algo- rithm to the oil ﬂow data, introduced in Chapter 1, for various values of K. As expected, we see that K controls the degree of smoothing, so that small K produces many small regions of each class, whereas large K leads to fewer larger regions.",Nearest-neighbour methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,621,"An interesting property of the nearest-neighbour (K = 1) classiﬁer is that, in the limit N →∞, the error rate is never more than twice the minimum achievable error rate of an optimal classiﬁer, i.e., one that uses the true class distributions (Cover and Hart, 1967) .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,622,"As discussed so far, both the K-nearest-neighbour method, and the kernel den- sity estimator, require the entire training data set to be stored, leading to expensive computation if the data set is large. This effect can be offset, at the expense of some additional one-off computation, by constructing tree-based search structures to allow (approximate) near neighbours to be found efﬁciently without doing an exhaustive search of the data set. Nevertheless, these nonparametric methods are still severely limited. On the other hand, we have seen that simple parametric models are very restricted in terms of the forms of distribution that they can represent. We therefore need to ﬁnd density models that are very ﬂexible and yet for which the complexity of the models can be controlled independently of the size of the training set, and we shall see in subsequent chapters how to achieve this.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,623,Verify that the Bernoulli distribution (2.2) satisﬁes the following prop- erties 1  x=0 p(x|µ) = 1 (2.257) E[x] = µ (2.258) var[x] = µ(1 −µ).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,624,Show that the entropy H[x] of a Bernoulli distributed random binary variable x is given by H[x] = −µ ln µ −(1 −µ) ln(1 −µ).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,625,"The form of the Bernoulli distribution given by (2.2) is not symmetric be- tween the two values of x. In some situations, it will be more convenient to use an equivalent formulation for which x ∈{−1, 1}, in which case the distribution can be written p(x|µ) = 1 −µ 2 (1−x)/2 1 + µ 2 (1+x)/2 (2.261) where µ ∈[−1, 1]. Show that the distribution (2.261) is normalized, and evaluate its mean, variance, and entropy.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,127,626,"In this exercise, we prove that the binomial distribution (2.9) is nor- malized. First use the deﬁnition (2.10) of the number of combinations of m identical objects chosen from a total of N to show that N m  +  N m −1  = N + 1 m  .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,627,"Use this result to prove by induction the following result (1 + x)N = N  m=0 N m  xm (2.263) which is known as the binomial theorem, and which is valid for all real values of x.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,628,"Finally, show that the binomial distribution is normalized, so that N  m=0 N m  µm(1 −µ)N−m = 1 (2.264) which can be done by ﬁrst pulling out a factor (1 −µ)N out of the summation and then making use of the binomial theorem.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,629,"(⋆⋆) Show that the mean of the binomial distribution is given by (2.11). To do this, differentiate both sides of the normalization condition (2.264) with respect to µ and then rearrange to obtain an expression for the mean of n. Similarly, by differentiating (2.264) twice with respect to µ and making use of the result (2.11) for the mean of the binomial distribution prove the result (2.12) for the variance of the binomial.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,630,"In this exercise, we prove that the beta distribution, given by (2.13), is correctly normalized, so that (2.14) holds. This is equivalent to showing that  1 0 µa−1(1 −µ)b−1 dµ = Γ(a)Γ(b) Γ(a + b) .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,631,"From the deﬁnition (1.141) of the gamma function, we have Γ(a)Γ(b) =  ∞ 0 exp(−x)xa−1 dx  ∞ 0 exp(−y)yb−1 dy.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,632,"Use this expression to prove (2.265) as follows. First bring the integral over y inside the integrand of the integral over x, next make the change of variable t = y + x where x is ﬁxed, then interchange the order of the x and t integrations, and ﬁnally make the change of variable x = tµ where t is ﬁxed.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,128,633,"(⋆) Make use of the result (2.265) to show that the mean, variance, and mode of the beta distribution (2.13) are given respectively by E[µ] = a a + b (2.267) var[µ] = ab (a + b)2(a + b + 1) (2.268) mode[µ] = a −1 a + b −2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,634,"(⋆⋆) Consider a binomial random variable x given by (2.9), with prior distribution for µ given by the beta distribution (2.13), and suppose we have observed m occur- rences of x = 1 and l occurrences of x = 0. Show that the posterior mean value of x lies between the prior mean and the maximum likelihood estimate for µ. To do this, show that the posterior mean can be written as λ times the prior mean plus (1 −λ) times the maximum likelihood estimate, where 0 ⩽λ ⩽1. This illustrates the con- cept of the posterior distribution being a compromise between the prior distribution and the maximum likelihood solution.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,635,"(⋆) Consider two variables x and y with joint distribution p(x, y). Prove the follow- ing two results E[x] = Ey [Ex[x|y]] (2.270) var[x] = Ey [varx[x|y]] + vary [Ex[x|y]] .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,636,"Here Ex[x|y] denotes the expectation of x under the conditional distribution p(x|y), with a similar notation for the conditional variance.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,637,". In this exercise, we prove the normalization of the Dirichlet dis- tribution (2.38) using induction. We have already shown in Exercise 2.5 that the beta distribution, which is a special case of the Dirichlet for M = 2, is normalized.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,638,"We now assume that the Dirichlet distribution is normalized for M −1 variables and prove that it is normalized for M variables. To do this, consider the Dirichlet distribution over M variables, and take account of the constraint M k=1 µk = 1 by eliminating µM, so that the Dirichlet is written pM(µ1, . . . , µM−1) = CM M−1  k=1 µαk−1 k  1 − M−1  j=1 µj αM−1 (2.272) and our goal is to ﬁnd an expression for CM. To do this, integrate over µM−1, taking care over the limits of integration, and then make a change of variable so that this integral has limits 0 and 1. By assuming the correct result for CM−1 and making use of (2.265), derive the expression for CM.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,129,639,"Using the property Γ(x + 1) = xΓ(x) of the gamma function, derive the following results for the mean, variance, and covariance of the Dirichlet distribution given by (2.38) E[µj] = αj α0 (2.273) var[µj] = αj(α0 −αj) α2 0(α0 + 1) (2.274) cov[µjµl] = − αjαl α2 0(α0 + 1), j ̸= l (2.275) where α0 is deﬁned by (2.39).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,640,"By expressing the expectation of ln µj under the Dirichlet distribution (2.38) as a derivative with respect to αj, show that E[ln µj] = ψ(αj) −ψ(α0) (2.276) where α0 is given by (2.39) and ψ(a) ≡d da ln Γ(a) (2.277) is the digamma function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,641,"(⋆) The uniform distribution for a continuous variable x is deﬁned by U(x|a, b) = 1 b −a, a ⩽x ⩽b.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,642,"Verify that this distribution is normalized, and ﬁnd expressions for its mean and variance.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,643,"Evaluate the Kullback-Leibler divergence (1.113) between two Gaussians p(x) = N(x|µ, Σ) and q(x) = N(x|m, L).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,644,"This exercise demonstrates that the multivariate distribution with max- imum entropy, for a given covariance, is a Gaussian. The entropy of a distribution p(x) is given by H[x] = −  p(x) ln p(x) dx.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,645,"We wish to maximize H[x] over all distributions p(x) subject to the constraints that p(x) be normalized and that it have a speciﬁc mean and covariance, so that  p(x) dx = 1 (2.280)  p(x)x dx = µ (2.281)  p(x)(x −µ)(x −µ)T dx = Σ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,646,"By performing a variational maximization of (2.279) and using Lagrange multipliers to enforce the constraints (2.280), (2.281), and (2.282), show that the maximum likelihood distribution is given by the Gaussian (2.43).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,130,647,"(⋆⋆) Show that the entropy of the multivariate Gaussian N(x|µ, Σ) is given by H[x] = 1 2 ln |Σ| + D 2 (1 + ln(2π)) (2.283) where D is the dimensionality of x.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,648,"Consider two random variables x1 and x2 having Gaussian distri- butions with means µ1, µ2 and precisions τ1, τ2 respectively. Derive an expression for the differential entropy of the variable x = x1 + x2. To do this, ﬁrst ﬁnd the distribution of x by using the relation p(x) =  ∞ −∞ p(x|x2)p(x2) dx2 (2.284) and completing the square in the exponent. Then observe that this represents the convolution of two Gaussian distributions, which itself will be Gaussian, and ﬁnally make use of the result (1.110) for the entropy of the univariate Gaussian.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,649,"Consider the multivariate Gaussian distribution given by (2.43). By writing the precision matrix (inverse covariance matrix) Σ−1 as the sum of a sym- metric and an anti-symmetric matrix, show that the anti-symmetric term does not appear in the exponent of the Gaussian, and hence that the precision matrix may be taken to be symmetric without loss of generality. Because the inverse of a symmetric matrix is also symmetric (see Exercise 2.22), it follows that the covariance matrix may also be chosen to be symmetric without loss of generality.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,650,"Consider a real, symmetric matrix Σ whose eigenvalue equation is given by (2.45). By taking the complex conjugate of this equation and subtracting the original equation, and then forming the inner product with eigenvector ui, show that the eigenvalues λi are real. Similarly, use the symmetry property of Σ to show that two eigenvectors ui and uj will be orthogonal provided λj ̸= λi. Finally, show that without loss of generality, the set of eigenvectors can be chosen to be orthonormal, so that they satisfy (2.46), even if some of the eigenvalues are zero.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,651,"(⋆⋆) Show that a real, symmetric matrix Σ having the eigenvector equation (2.45) can be expressed as an expansion in the eigenvectors, with coefﬁcients given by the eigenvalues, of the form (2.48). Similarly, show that the inverse matrix Σ−1 has a representation of the form (2.49).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,652,"A positive deﬁnite matrix Σ can be deﬁned as one for which the quadratic form aTΣa (2.285) is positive for any real value of the vector a. Show that a necessary and sufﬁcient condition for Σ to be positive deﬁnite is that all of the eigenvalues λi of Σ, deﬁned by (2.45), are positive.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,131,653,"(⋆) Show that a real, symmetric matrix of size D ×D has D(D +1)/2 independent parameters.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,654,"Show that the inverse of a symmetric matrix is itself symmetric. 2.23 (⋆⋆) By diagonalizing the coordinate system using the eigenvector expansion (2.45), show that the volume contained within the hyperellipsoid corresponding to a constant \end{verbatim} egin{verbatim} Mahalanobis distance ∆is given by VD|Σ|1/2∆D (2.286) where VD is the volume of the unit sphere in D dimensions, and the Mahalanobis distance is deﬁned by (2.44).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,655,Prove the identity (2.76) by multiplying both sides by the matrix  A B C D  (2.287) and making use of the deﬁnition (2.77).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,656,"(⋆⋆) In Sections 2.3.1 and 2.3.2, we considered the conditional and marginal distri- butions for a multivariate Gaussian. More generally, we can consider a partitioning of the components of x into three groups xa, xb, and xc, with a corresponding par- titioning of the mean vector µ and of the covariance matrix Σ in the form µ = µa µb µc  , Σ = Σaa Σab Σac Σba Σbb Σbc Σca Σcb Σcc  .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,657,"By making use of the results of Section 2.3, ﬁnd an expression for the conditional distribution p(xa|xb) in which xc has been marginalized out.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,658,A very useful result from linear algebra is the Woodbury matrix inversion formula given by (A + BCD)−1 = A−1 −A−1B(C−1 + DA−1B)−1DA−1.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,659,"By multiplying both sides by (A + BCD) prove the correctness of this result. 2.27 (⋆) Let x and z be two independent random vectors, so that p(x, z) = p(x)p(z).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,660,"Show that the mean of their sum y = x + z is given by the sum of the means of each of the variable separately. Similarly, show that the covariance matrix of y is given by the sum of the covariance matrices of x and z. Conﬁrm that this result agrees with that of Exercise 1.10.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,132,661,"Consider a joint distribution over the variable z =  x y  (2.290) whose mean and covariance are given by (2.108) and (2.105) respectively. By mak- ing use of the results (2.92) and (2.93) show that the marginal distribution p(x) is given (2.99). Similarly, by making use of the results (2.81) and (2.82) show that the conditional distribution p(y|x) is given by (2.100).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,662,"(⋆⋆) Using the partitioned matrix inversion formula (2.76), show that the inverse of the precision matrix (2.104) is given by the covariance matrix (2.105).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,663,"By starting from (2.107) and making use of the result (2.105), verify the result (2.108).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,664,"Consider two multidimensional random vectors x and z having Gaussian distributions p(x) = N(x|µx, Σx) and p(z) = N(z|µz, Σz) respectively, together with their sum y = x+z. Use the results (2.109) and (2.110) to ﬁnd an expression for the marginal distribution p(y) by considering the linear-Gaussian model comprising the product of the marginal distribution p(x) and the conditional distribution p(y|x).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,665,"This exercise and the next provide practice at manipulating the quadratic forms that arise in linear-Gaussian models, as well as giving an indepen- dent check of results derived in the main text. Consider a joint distribution p(x, y) deﬁned by the marginal and conditional distributions given by (2.99) and (2.100).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,666,"By examining the quadratic form in the exponent of the joint distribution, and using the technique of ‘completing the square’ discussed in Section 2.3, ﬁnd expressions for the mean and covariance of the marginal distribution p(y) in which the variable x has been integrated out. To do this, make use of the Woodbury matrix inversion formula (2.289). Verify that these results agree with (2.109) and (2.110) obtained using the results of Chapter 2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,667,"Consider the same joint distribution as in Exercise 2.32, but now use the technique of completing the square to ﬁnd expressions for the mean and covariance of the conditional distribution p(x|y). Again, verify that these agree with the corre- sponding expressions (2.111) and (2.112).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,668,"To ﬁnd the maximum likelihood solution for the covariance matrix of a multivariate Gaussian, we need to maximize the log likelihood function (2.118) with respect to Σ, noting that the covariance matrix must be symmetric and positive deﬁnite. Here we proceed by ignoring these constraints and doing a straightforward maximization. Using the results (C.21), (C.26), and (C.28) from Appendix C, show that the covariance matrix Σ that maximizes the log likelihood function (2.118) is given by the sample covariance (2.122). We note that the ﬁnal result is necessarily symmetric and positive deﬁnite (provided the sample covariance is nonsingular).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,133,669,"(⋆⋆) Use the result (2.59) to prove (2.62). Now, using the results (2.59), and (2.62), show that E[xnxm] = µµT + InmΣ (2.291) where xn denotes a data point sampled from a Gaussian distribution with mean µ and covariance Σ, and Inm denotes the (n, m) element of the identity matrix. Hence prove the result (2.124).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,670,"Using an analogous procedure to that used to obtain (2.126), derive an expression for the sequential estimation of the variance of a univariate Gaussian \end{verbatim} egin{verbatim} distribution, by starting with the maximum likelihood expression σ2 ML = 1 N N  n=1 (xn −µ)2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,671,"Verify that substituting the expression for a Gaussian distribution into the Robbins- Monro sequential estimation formula (2.135) gives a result of the same form, and hence obtain an expression for the corresponding coefﬁcients aN.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,672,"Using an analogous procedure to that used to obtain (2.126), derive an ex- pression for the sequential estimation of the covariance of a multivariate Gaussian distribution, by starting with the maximum likelihood expression (2.122). Verify that substituting the expression for a Gaussian distribution into the Robbins-Monro se- quential estimation formula (2.135) gives a result of the same form, and hence obtain an expression for the corresponding coefﬁcients aN.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,673,(⋆) Use the technique of completing the square for the quadratic form in the expo- nent to derive the results (2.141) and (2.142).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,674,"Starting from the results (2.141) and (2.142) for the posterior distribution of the mean of a Gaussian random variable, dissect out the contributions from the ﬁrst N −1 data points and hence obtain expressions for the sequential update of µN and σ2 N. Now derive the same results starting from the posterior distribution p(µ|x1, . . . , xN−1) = N(µ|µN−1, σ2 N−1) and multiplying by the likelihood func- tion p(xN|µ) = N(xN|µ, σ2) and then completing the square and normalizing to obtain the posterior distribution after N observations.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,675,"Consider a D-dimensional Gaussian random variable x with distribu- tion N(x|µ, Σ) in which the covariance Σ is known and for which we wish to infer the mean µ from a set of observations X = {x1, . . . , xN}. Given a prior distribution p(µ) = N(µ|µ0, Σ0), ﬁnd the corresponding posterior distribution p(µ|X).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,134,676,Use the deﬁnition of the gamma function (1.141) to show that the gamma dis- tribution (2.146) is normalized.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,677,"(⋆⋆) Evaluate the mean, variance, and mode of the gamma distribution (2.146). 2.43 (⋆) The following distribution p(x|σ2, q) = q 2(2σ2)1/qΓ(1/q) exp  −|x|q 2σ2  (2.293) is a generalization of the univariate Gaussian distribution. Show that this distribution is normalized so that  ∞ −∞ p(x|σ2, q) dx = 1 (2.294) and that it reduces to the Gaussian when q = 2. Consider a regression model in which the target variable is given by t = y(x, w) + ϵ and ϵ is a random noise \end{verbatim} egin{verbatim} variable drawn from the distribution (2.293). Show that the log likelihood function over w and σ2, for an observed data set of input vectors X = {x1, . . . , xN} and corresponding target variables t = (t1, . . . , tN)T, is given by ln p(t|X, w, σ2) = −1 2σ2 N  n=1 |y(xn, w) −tn|q −N q ln(2σ2) + const (2.295) where ‘const’ denotes terms independent of both w and σ2. Note that, as a function of w, this is the Lq error function considered in Section 1.5.5.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,678,"Consider a univariate Gaussian distribution N(x|µ, τ −1) having conjugate Gaussian-gamma prior given by (2.154), and a data set x = {x1, . . . , xN} of i.i.d.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,679,"observations. Show that the posterior distribution is also a Gaussian-gamma distri- bution of the same functional form as the prior, and write down expressions for the parameters of this posterior distribution.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,680,Verify that the Wishart distribution deﬁned by (2.155) is indeed a conjugate prior for the precision matrix of a multivariate Gaussian.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,681,"Verify that evaluating the integral in (2.158) leads to the result (2.159). 2.47 (⋆) www Show that in the limit ν →∞, the t-distribution (2.159) becomes a Gaussian. Hint: ignore the normalization coefﬁcient, and simply look at the depen- dence on x.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,682,"By following analogous steps to those used to derive the univariate Student’s t-distribution (2.159), verify the result (2.162) for the multivariate form of the Stu- dent’s t-distribution, by marginalizing over the variable η in (2.161). Using the deﬁnition (2.161), show by exchanging integration variables that the multivariate t-distribution is correctly normalized.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,683,"(⋆⋆) By using the deﬁnition (2.161) of the multivariate Student’s t-distribution as a convolution of a Gaussian with a gamma distribution, verify the properties (2.164), (2.165), and (2.166) for the multivariate t-distribution deﬁned by (2.162).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,135,684,"(⋆) Show that in the limit ν →∞, the multivariate Student’s t-distribution (2.162) reduces to a Gaussian with mean µ and precision Λ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,685,"The various trigonometric identities used in the discussion of periodic variables in this chapter can be proven easily from the relation exp(iA) = cos A + i sin A (2.296) in which i is the square root of minus one. By considering the identity exp(iA) exp(−iA) = 1 (2.297) prove the result (2.177). Similarly, using the identity cos(A −B) = ℜexp{i(A −B)} (2.298) \end{verbatim} egin{verbatim} where ℜdenotes the real part, prove (2.178). Finally, by using sin(A −B) = ℑexp{i(A −B)}, where ℑdenotes the imaginary part, prove the result (2.183).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,686,"For large m, the von Mises distribution (2.179) becomes sharply peaked around the mode θ0. By deﬁning ξ = m1/2(θ −θ0) and making the Taylor ex- pansion of the cosine function given by cos α = 1 −α2 2 + O(α4) (2.299) show that as m →∞, the von Mises distribution tends to a Gaussian.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,687,"(⋆) Using the trigonometric identity (2.183), show that solution of (2.182) for θ0 is given by (2.184).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,688,"(⋆) By computing ﬁrst and second derivatives of the von Mises distribution (2.179), and using I0(m) > 0 for m > 0, show that the maximum of the distribution occurs when θ = θ0 and that the minimum occurs when θ = θ0 + π (mod 2π).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,689,"(⋆) By making use of the result (2.168), together with (2.184) and the trigonometric identity (2.178), show that the maximum likelihood solution mML for the concentra- tion of the von Mises distribution satisﬁes A(mML) = r where r is the radius of the mean of the observations viewed as unit vectors in the two-dimensional Euclidean plane, as illustrated in Figure 2.17.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,690,"Express the beta distribution (2.13), the gamma distribution (2.146), and the von Mises distribution (2.179) as members of the exponential family (2.194) and thereby identify their natural parameters.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,691,"Verify that the multivariate Gaussian distribution can be cast in exponential family form (2.194) and derive expressions for η, u(x), h(x) and g(η) analogous to (2.220)–(2.223).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,692,"(⋆) The result (2.226) showed that the negative gradient of ln g(η) for the exponen- tial family is given by the expectation of u(x). By taking the second derivatives of (2.195), show that −∇∇ln g(η) = E[u(x)u(x)T] −E[u(x)]E[u(x)T] = cov[u(x)].",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,693,"By changing variables using y = x/σ, show that the density (2.236) will be correctly normalized, provided f(x) is correctly normalized.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,694,"Consider a histogram-like density model in which the space x is di- vided into ﬁxed regions for which the density p(x) takes the constant value hi over the ith region, and that the volume of region i is denoted ∆i. Suppose we have a set of N observations of x such that ni of these observations fall in region i. Using a Lagrange multiplier to enforce the normalization constraint on the density, derive an expression for the maximum likelihood estimator for the {hi}.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,2,136,695,(⋆) Show that the K-nearest-neighbour density model deﬁnes an improper distribu- tion whose integral over all space is divergent.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,137,696,"The focus so far in this book has been on unsupervised learning, including topics such as density estimation and data clustering. We turn now to a discussion of super- vised learning, starting with regression. The goal of regression is to predict the value of one or more continuous target variables t given the value of a D-dimensional vec- tor x of input variables. We have already encountered an example of a regression problem when we considered polynomial curve ﬁtting in Chapter 1. The polynomial is a speciﬁc example of a broad class of functions called linear regression models, which share the property of being linear functions of the adjustable parameters, and which will form the focus of this chapter. The simplest form of linear regression models are also linear functions of the input variables. However, we can obtain a much more useful class of functions by taking linear combinations of a ﬁxed set of nonlinear functions of the input variables, known as basis functions. Such models are linear functions of the parameters, which gives them simple analytical properties, and yet can be nonlinear with respect to the input variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,138,697,"Given a training data set comprising N observations {xn}, where n = 1, . . . , N, together with corresponding target values {tn}, the goal is to predict the value of t for a new value of x. In the simplest approach, this can be done by directly con- structing an appropriate function y(x) whose values for new inputs x constitute the predictions for the corresponding values of t. More generally, from a probabilistic perspective, we aim to model the predictive distribution p(t|x) because this expresses our uncertainty about the value of t for each value of x. From this conditional dis- tribution we can make predictions of t, for any new value of x, in such a way as to minimize the expected value of a suitably chosen loss function. As discussed in Sec- tion 1.5.5, a common choice of loss function for real-valued variables is the squared loss, for which the optimal solution is given by the conditional expectation of t.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,138,698,"Although linear models have signiﬁcant limitations as practical techniques for pattern recognition, particularly for problems involving input spaces of high dimen- sionality, they have nice analytical properties and form the foundation for more so- phisticated models to be discussed in later chapters.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,138,699,"The simplest linear model for regression is one that involves a linear combination of the input variables y(x, w) = w0 + w1x1 + . . . + wDxD (3.1) where x = (x1, . . . , xD)T. This is often simply known as linear regression. The key property of this model is that it is a linear function of the parameters w0, . . . , wD. It is also, however, a linear function of the input variables xi, and this imposes signiﬁcant limitations on the model. We therefore extend the class of models by considering linear combinations of ﬁxed nonlinear functions of the input variables, of the form y(x, w) = w0 + M−1  j=1 wjφj(x) (3.2) where φj(x) are known as basis functions. By denoting the maximum value of the index j by M −1, the total number of parameters in this model will be M.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,700,"The parameter w0 allows for any ﬁxed offset in the data and is sometimes called a bias parameter (not to be confused with ‘bias’ in a statistical sense). It is often convenient to deﬁne an additional dummy ‘basis function’ φ0(x) = 1 so that y(x, w) = M−1  j=0 wjφj(x) = wTφ(x) (3.3) where w = (w0, . . . , wM−1)T and φ = (φ0, . . . , φM−1)T. In many practical ap- plications of pattern recognition, we will apply some form of ﬁxed pre-processing, \end{verbatim} egin{verbatim} or feature extraction, to the original data variables. If the original variables com- prise the vector x, then the features can be expressed in terms of the basis functions {φj(x)}.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,701,"By using nonlinear basis functions, we allow the function y(x, w) to be a non- linear function of the input vector x. Functions of the form (3.2) are called linear models, however, because this function is linear in w. It is this linearity in the pa- rameters that will greatly simplify the analysis of this class of models. However, it also leads to some signiﬁcant limitations, as we discuss in Section 3.6.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,702,"The example of polynomial regression considered in Chapter 1 is a particular example of this model in which there is a single input variable x, and the basis func- tions take the form of powers of x so that φj(x) = xj. One limitation of polynomial basis functions is that they are global functions of the input variable, so that changes in one region of input space affect all other regions. This can be resolved by dividing the input space up into regions and ﬁt a different polynomial in each region, leading to spline functions (Hastie et al., 2001).",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,703,"There are many other possible choices for the basis functions, for example φj(x) = exp −(x −µj)2 2s2 (3.4) where the µj govern the locations of the basis functions in input space, and the pa- rameter s governs their spatial scale. These are usually referred to as ‘Gaussian’ basis functions, although it should be noted that they are not required to have a prob- abilistic interpretation, and in particular the normalization coefﬁcient is unimportant because these basis functions will be multiplied by adaptive parameters wj.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,704,Another possibility is the sigmoidal basis function of the form φj(x) = σ x −µj s  (3.5) where σ(a) is the logistic sigmoid function deﬁned by σ(a) = 1 1 + exp(−a).,Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,139,705,"Equivalently, we can use the ‘tanh’ function because this is related to the logistic sigmoid by tanh(a) = 2σ(a) −1, and so a general linear combination of logistic sigmoid functions is equivalent to a general linear combination of ‘tanh’ functions.",Linear Basis Function Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,140,706,"Figure 3.1 Examples of basis functions, showing polynomials on the left, Gaussians of the form (3.4) in the centre, and sigmoidal of the form (3.5) on the right.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,140,707,"These various choices of basis function are illustrated in Figure 3.1. Yet another possible choice of basis function is the Fourier basis, which leads to an expansion in sinusoidal functions. Each basis function represents a speciﬁc fre- quency and has inﬁnite spatial extent. By contrast, basis functions that are localized to ﬁnite regions of input space necessarily comprise a spectrum of different spatial frequencies. In many signal processing applications, it is of interest to consider ba- sis functions that are localized in both space and frequency, leading to a class of functions known as wavelets. These are also deﬁned to be mutually orthogonal, to simplify their application. Wavelets are most applicable when the input values live \end{verbatim} egin{verbatim} −1 0 1 −1 −0.5 0 0.5 1 −1 0 1 0 0.25 0.5 0.75 1 −1 0 1 0 0.25 0.5 0.75 1 on a regular lattice, such as the successive time points in a temporal sequence, or the pixels in an image. Useful texts on wavelets include Ogden (1997), Mallat (1999), and Vidakovic (1999).",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,140,708,"Most of the discussion in this chapter, however, is independent of the particular choice of basis function set, and so for most of our discussion we shall not specify the particular form of the basis functions, except for the purposes of numerical il- lustration. Indeed, much of our discussion will be equally applicable to the situation in which the vector φ(x) of basis functions is simply the identity φ(x) = x. Fur- thermore, in order to keep the notation simple, we shall focus on the case of a single target variable t. However, in Section 3.1.5, we consider brieﬂy the modiﬁcations needed to deal with multiple target variables.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,140,709,"In Chapter 1, we ﬁtted polynomial functions to data sets by minimizing a sum- of-squares error function. We also showed that this error function could be motivated as the maximum likelihood solution under an assumed Gaussian noise model. Let us return to this discussion and consider the least squares approach, and its relation to maximum likelihood, in more detail.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,140,710,"As before, we assume that the target variable t is given by a deterministic func- tion y(x, w) with additive Gaussian noise so that t = y(x, w) + ϵ (3.7) where ϵ is a zero mean Gaussian random variable with precision (inverse variance) β. Thus we can write p(t|x, w, β) = N(t|y(x, w), β−1).",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,141,711,"Recall that, if we assume a squared loss function, then the optimal prediction, for a new value of x, will be given by the conditional mean of the target variable. In the case of a Gaussian conditional distribution of the form (3.8), the conditional mean \end{verbatim} egin{verbatim} will be simply E[t|x] =  tp(t|x) dt = y(x, w).",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,141,712,"Note that the Gaussian noise assumption implies that the conditional distribution of t given x is unimodal, which may be inappropriate for some applications. An ex- tension to mixtures of conditional Gaussian distributions, which permit multimodal conditional distributions, will be discussed in Section 14.5.1.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,141,713,"Now consider a data set of inputs X = {x1, . . . , xN} with corresponding target values t1, . . . , tN. We group the target variables {tn} into a column vector that we denote by t where the typeface is chosen to distinguish it from a single observation of a multivariate target, which would be denoted t. Making the assumption that these data points are drawn independently from the distribution (3.8), we obtain the following expression for the likelihood function, which is a function of the adjustable parameters w and β, in the form p(t|X, w, β) = N  n=1 N(tn|wTφ(xn), β−1) (3.10) where we have used (3.3). Note that in supervised learning problems such as regres- sion (and classiﬁcation), we are not seeking to model the distribution of the input variables. Thus x will always appear in the set of conditioning variables, and so from now on we will drop the explicit x from expressions such as p(t|x, w, β) in or- der to keep the notation uncluttered. Taking the logarithm of the likelihood function, and making use of the standard form (1.46) for the univariate Gaussian, we have ln p(t|w, β) = N  n=1 ln N(tn|wTφ(xn), β−1) = N 2 ln β −N 2 ln(2π) −βED(w) (3.11) where the sum-of-squares error function is deﬁned by ED(w) = 1 2 N  n=1 {tn −wTφ(xn)}2.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,141,714,"Having written down the likelihood function, we can use maximum likelihood to determine w and β. Consider ﬁrst the maximization with respect to w. As observed already in Section 1.2.5, we see that maximization of the likelihood function under a conditional Gaussian noise distribution for a linear model is equivalent to minimizing a sum-of-squares error function given by ED(w). The gradient of the log likelihood function (3.11) takes the form ∇ln p(t|w, β) = N  n=1  tn −wTφ(xn)  φ(xn)T.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,715,Setting this gradient to zero gives 0 = N  n=1 tnφ(xn)T −wT  N  n=1 φ(xn)φ(xn)T  .,Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,716,"Solving for w we obtain wML = ΦTΦ−1 ΦTt (3.15) which are known as the normal equations for the least squares problem. Here Φ is an N×M matrix, called the design matrix, whose elements are given by Φnj = φj(xn), so that Φ = ⎛ ⎜ ⎜ ⎝ φ0(x1) φ1(x1) · · · φM−1(x1) φ0(x2) φ1(x2) · · · φM−1(x2) ...",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,717,"is known as the Moore-Penrose pseudo-inverse of the matrix Φ (Rao and Mitra, 1971; Golub and Van Loan, 1996). It can be regarded as a generalization of the notion of matrix inverse to nonsquare matrices. Indeed, if Φ is square and invertible, then using the property (AB)−1 = B−1A−1 we see that Φ† ≡Φ−1.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,718,"At this point, we can gain some insight into the role of the bias parameter w0. If we make the bias parameter explicit, then the error function (3.12) becomes ED(w) = 1 2 N  n=1 {tn −w0 − M−1  j=1 wjφj(xn)}2.",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,719,"Setting the derivative with respect to w0 equal to zero, and solving for w0, we obtain w0 = t − M−1  j=1 wjφj (3.19) where we have deﬁned t = 1 N N  n=1 tn, φj = 1 N N  n=1 φj(xn).",Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,142,720,Thus the bias w0 compensates for the difference between the averages (over the training set) of the target values and the weighted sum of the averages of the basis function values.,Maximum likelihood and least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,143,721,"Figure 3.2 Geometrical interpretation of the least-squares solution, in an N-dimensional space whose axes are the values of t1, . . . , tN. The least-squares regression function is obtained by ﬁnding the or- thogonal projection of the data vector t onto the subspace spanned by the basis functions φj(x) in which each basis function is viewed as a vec- tor ϕj of length N with elements φj(xn).",Geometry of least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,143,722,"We can also maximize the log likelihood function (3.11) with respect to the noise precision parameter β, giving 1 βML = 1 N N  n=1 {tn −wT MLφ(xn)}2 (3.21) \end{verbatim} egin{verbatim} S t y ϕ1 ϕ2 and so we see that the inverse of the noise precision is given by the residual variance of the target values around the regression function.",Geometry of least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,143,723,"At this point, it is instructive to consider the geometrical interpretation of the least-squares solution. To do this we consider an N-dimensional space whose axes are given by the tn, so that t = (t1, . . . , tN)T is a vector in this space. Each basis function φj(xn), evaluated at the N data points, can also be represented as a vector in the same space, denoted by ϕj, as illustrated in Figure 3.2. Note that ϕj corresponds to the jth column of Φ, whereas φ(xn) corresponds to the nth row of Φ. If the number M of basis functions is smaller than the number N of data points, then the M vectors φj(xn) will span a linear subspace S of dimensionality M. We deﬁne y to be an N-dimensional vector whose nth element is given by y(xn, w), where n = 1, . . . , N. Because y is an arbitrary linear combination of the vectors ϕj, it can live anywhere in the M-dimensional subspace. The sum-of-squares error (3.12) is then equal (up to a factor of 1/2) to the squared Euclidean distance between y and t. Thus the least-squares solution for w corresponds to that choice of y that lies in subspace S and that is closest to t. Intuitively, from Figure 3.2, we anticipate that this solution corresponds to the orthogonal projection of t onto the subspace S. This is indeed the case, as can easily be veriﬁed by noting that the solution for y is given by ΦwML, and then conﬁrming that this takes the form of an orthogonal projection.",Geometry of least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,143,724,"In practice, a direct solution of the normal equations can lead to numerical difﬁ- culties when ΦTΦ is close to singular. In particular, when two or more of the basis vectors ϕj are co-linear, or nearly so, the resulting parameter values can have large magnitudes. Such near degeneracies will not be uncommon when dealing with real data sets. The resulting numerical difﬁculties can be addressed using the technique of singular value decomposition, or SVD (Press et al., 1992; Bishop and Nabney, 2008). Note that the addition of a regularization term ensures that the matrix is non- singular, even in the presence of degeneracies.",Geometry of least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,144,725,"Batch techniques, such as the maximum likelihood solution (3.15), which in- volve processing the entire training set in one go, can be computationally costly for large data sets. As we have discussed in Chapter 1, if the data set is sufﬁciently large, it may be worthwhile to use sequential algorithms, also known as on-line algorithms, \end{verbatim} egin{verbatim} in which the data points are considered one at a time, and the model parameters up- dated after each such presentation. Sequential learning is also appropriate for real- time applications in which the data observations are arriving in a continuous stream, and predictions must be made before all of the data points are seen.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,144,726,"We can obtain a sequential learning algorithm by applying the technique of stochastic gradient descent, also known as sequential gradient descent, as follows. If the error function comprises a sum over data points E =  n En, then after presen- tation of pattern n, the stochastic gradient descent algorithm updates the parameter vector w using w(τ+1) = w(τ) −η∇En (3.22) where τ denotes the iteration number, and η is a learning rate parameter. We shall discuss the choice of value for η shortly. The value of w is initialized to some starting vector w(0). For the case of the sum-of-squares error function (3.12), this gives w(τ+1) = w(τ) + η(tn −w(τ)Tφn)φn (3.23) where φn = φ(xn). This is known as least-mean-squares or the LMS algorithm.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,144,727,"The value of η needs to be chosen with care to ensure that the algorithm converges (Bishop and Nabney, 2008).",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,144,728,"In Section 1.1, we introduced the idea of adding a regularization term to an error function in order to control over-ﬁtting, so that the total error function to be minimized takes the form ED(w) + λEW (w) (3.24) where λ is the regularization coefﬁcient that controls the relative importance of the data-dependent error ED(w) and the regularization term EW (w). One of the sim- plest forms of regularizer is given by the sum-of-squares of the weight vector ele- ments EW (w) = 1 2wTw.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,144,729,If we also consider the sum-of-squares error function given by E(w) = 1 2 N  n=1 {tn −wTφ(xn)}2 (3.26) then the total error function becomes 1 2 N  n=1 {tn −wTφ(xn)}2 + λ 2 wTw.,Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,730,Figure 3.3 Contours of the regularization term in (3.29) for various values of the parameter q.,Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,731,"This particular choice of regularizer is known in the machine learning literature as weight decay because in sequential learning algorithms, it encourages weight values to decay towards zero, unless supported by the data. In statistics, it provides an ex- ample of a parameter shrinkage method because it shrinks parameter values towards \end{verbatim} egin{verbatim} q = 0.5 q = 1 q = 2 q = 4 zero. It has the advantage that the error function remains a quadratic function of w, and so its exact minimizer can be found in closed form. Speciﬁcally, setting the gradient of (3.27) with respect to w to zero, and solving for w as before, we obtain w = λI + ΦTΦ −1 ΦTt.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,732,"This represents a simple extension of the least-squares solution (3.15). A more general regularizer is sometimes used, for which the regularized error takes the form 1 2 N  n=1 {tn −wTφ(xn)}2 + λ 2 M  j=1 |wj|q (3.29) where q = 2 corresponds to the quadratic regularizer (3.27). Figure 3.3 shows con- tours of the regularization function for different values of q.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,733,"The case of q = 1 is know as the lasso in the statistics literature (Tibshirani, 1996). It has the property that if λ is sufﬁciently large, some of the coefﬁcients wj are driven to zero, leading to a sparse model in which the corresponding basis functions play no role. To see this, we ﬁrst note that minimizing (3.29) is equivalent to minimizing the unregularized sum-of-squares error (3.12) subject to the constraint M  j=1 |wj|q ⩽η (3.30) for an appropriate value of the parameter η, where the two approaches can be related using Lagrange multipliers. The origin of the sparsity can be seen from Figure 3.4, Appendix E which shows that the minimum of the error function, subject to the constraint (3.30).",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,734,"As λ is increased, so an increasing number of parameters are driven to zero. Regularization allows complex models to be trained on data sets of limited size without severe over-ﬁtting, essentially by limiting the effective model complexity.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,145,735,"However, the problem of determining the optimal model complexity is then shifted from one of ﬁnding the appropriate number of basis functions to one of determining a suitable value of the regularization coefﬁcient λ. We shall return to the issue of model complexity later in this chapter.",Regularized least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,146,736,"Figure 3.4 Plot of the contours of the unregularized error function (blue) along with the constraint re- gion (3.30) for the quadratic regular- izer q = 2 on the left and the lasso regularizer q = 1 on the right, in which the optimum value for the pa- rameter vector w is denoted by w⋆.",Multiple outputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,146,737,The lasso gives a sparse solution in which w⋆ 1 = 0.,Multiple outputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,146,738,For the remainder of this chapter we shall focus on the quadratic regularizer (3.27) both for its practical importance and its analytical tractability.,Multiple outputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,146,739,"So far, we have considered the case of a single target variable t. In some applica- tions, we may wish to predict K > 1 target variables, which we denote collectively by the target vector t. This could be done by introducing a different set of basis func- tions for each component of t, leading to multiple, independent regression problems.",Multiple outputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,146,740,"However, a more interesting, and more common, approach is to use the same set of basis functions to model all of the components of the target vector so that y(x, w) = WTφ(x) (3.31) where y is a K-dimensional column vector, W is an M × K matrix of parameters, and φ(x) is an M-dimensional column vector with elements φj(x), with φ0(x) = 1 as before. Suppose we take the conditional distribution of the target vector to be an isotropic Gaussian of the form p(t|x, W, β) = N(t|WTφ(x), β−1I).",Multiple outputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,741,"If we have a set of observations t1, . . . , tN, we can combine these into a matrix T of size N × K such that the nth row is given by tT n. Similarly, we can combine the input vectors x1, . . . , xN into a matrix X. The log likelihood function is then given by ln p(T|X, W, β) = N  n=1 ln N(tn|WTφ(xn), β−1I) = NK 2 ln  β 2π  −β 2 N  n=1 tn −WTφ(xn) 2 . (3.33) \end{verbatim} egin{verbatim} As before, we can maximize this function with respect to W, giving WML = ΦTΦ−1 ΦTT.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,742,"If we examine this result for each target variable tk, we have wk = ΦTΦ−1 ΦTtk = Φ†tk (3.35) where tk is an N-dimensional column vector with components tnk for n = 1, . . . N.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,743,"Thus the solution to the regression problem decouples between the different target variables, and we need only compute a single pseudo-inverse matrix Φ†, which is shared by all of the vectors wk.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,744,"The extension to general Gaussian noise distributions having arbitrary covari- ance matrices is straightforward. Again, this leads to a decoupling into K inde- pendent regression problems. This result is unsurprising because the parameters W deﬁne only the mean of the Gaussian noise distribution, and we know from Sec- tion 2.3.4 that the maximum likelihood solution for the mean of a multivariate Gaus- sian is independent of the covariance. From now on, we shall therefore consider a single target variable t for simplicity.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,745,"So far in our discussion of linear models for regression, we have assumed that the form and number of basis functions are both ﬁxed. As we have seen in Chapter 1, the use of maximum likelihood, or equivalently least squares, can lead to severe over-ﬁtting if complex models are trained using data sets of limited size. However, limiting the number of basis functions in order to avoid over-ﬁtting has the side effect of limiting the ﬂexibility of the model to capture interesting and important trends in the data. Although the introduction of regularization terms can control over-ﬁtting for models with many parameters, this raises the question of how to determine a suitable value for the regularization coefﬁcient λ. Seeking the solution that minimizes the regularized error function with respect to both the weight vector w and the regularization coefﬁcient λ is clearly not the right approach since this leads to the unregularized solution with λ = 0.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,147,746,"As we have seen in earlier chapters, the phenomenon of over-ﬁtting is really an unfortunate property of maximum likelihood and does not arise when we marginalize over parameters in a Bayesian setting. In this chapter, we shall consider the Bayesian view of model complexity in some depth. Before doing so, however, it is instructive to consider a frequentist viewpoint of the model complexity issue, known as the bias- variance trade-off. Although we shall introduce this concept in the context of linear basis function models, where it is easy to illustrate the ideas using simple examples, the discussion has more general applicability.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,747,"In Section 1.5.5, when we discussed decision theory for regression problems, we considered various loss functions each of which leads to a corresponding optimal prediction once we are given the conditional distribution p(t|x). A popular choice is \end{verbatim} egin{verbatim} the squared loss function, for which the optimal prediction is given by the conditional expectation, which we denote by h(x) and which is given by h(x) = E[t|x] =  tp(t|x) dt.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,748,"At this point, it is worth distinguishing between the squared loss function arising from decision theory and the sum-of-squares error function that arose in the maxi- mum likelihood estimation of model parameters. We might use more sophisticated techniques than least squares, for example regularization or a fully Bayesian ap- proach, to determine the conditional distribution p(t|x). These can all be combined with the squared loss function for the purpose of making predictions.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,749,"We showed in Section 1.5.5 that the expected squared loss can be written in the form E[L] =  {y(x) −h(x)}2 p(x) dx +  {h(x) −t}2p(x, t) dx dt.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,750,"Recall that the second term, which is independent of y(x), arises from the intrinsic noise on the data and represents the minimum achievable value of the expected loss.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,751,"The ﬁrst term depends on our choice for the function y(x), and we will seek a so- lution for y(x) which makes this term a minimum. Because it is nonnegative, the smallest that we can hope to make this term is zero. If we had an unlimited supply of data (and unlimited computational resources), we could in principle ﬁnd the regres- sion function h(x) to any desired degree of accuracy, and this would represent the optimal choice for y(x). However, in practice we have a data set D containing only a ﬁnite number N of data points, and consequently we do not know the regression function h(x) exactly.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,752,"If we model the h(x) using a parametric function y(x, w) governed by a pa- rameter vector w, then from a Bayesian perspective the uncertainty in our model is expressed through a posterior distribution over w. A frequentist treatment, however, involves making a point estimate of w based on the data set D, and tries instead to interpret the uncertainty of this estimate through the following thought experi- ment. Suppose we had a large number of data sets each of size N and each drawn independently from the distribution p(t, x). For any given data set D, we can run our learning algorithm and obtain a prediction function y(x; D). Different data sets from the ensemble will give different functions and consequently different values of the squared loss. The performance of a particular learning algorithm is then assessed by taking the average over this ensemble of data sets.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,148,753,"Consider the integrand of the ﬁrst term in (3.37), which for a particular data set D takes the form {y(x; D) −h(x)}2.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,149,754,"Because this quantity will be dependent on the particular data set D, we take its aver- age over the ensemble of data sets. If we add and subtract the quantity ED[y(x; D)] \end{verbatim} egin{verbatim} inside the braces, and then expand, we obtain {y(x; D) −ED[y(x; D)] + ED[y(x; D)] −h(x)}2 = {y(x; D) −ED[y(x; D)]}2 + {ED[y(x; D)] −h(x)}2 +2{y(x; D) −ED[y(x; D)]}{ED[y(x; D)] −h(x)}.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,149,755,"We now take the expectation of this expression with respect to D and note that the ﬁnal term will vanish, giving ED  {y(x; D) −h(x)}2 = {ED[y(x; D)] −h(x)}2 ( )* + (bias)2 + ED  {y(x; D) −ED[y(x; D)]}2 ( )* + variance . (3.40) We see that the expected squared difference between y(x; D) and the regression function h(x) can be expressed as the sum of two terms. The ﬁrst term, called the squared bias, represents the extent to which the average prediction over all data sets differs from the desired regression function. The second term, called the variance, measures the extent to which the solutions for individual data sets vary around their average, and hence this measures the extent to which the function y(x; D) is sensitive to the particular choice of data set. We shall provide some intuition to support these deﬁnitions shortly when we consider a simple example.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,149,756,"So far, we have considered a single input value x. If we substitute this expansion back into (3.37), we obtain the following decomposition of the expected squared loss expected loss = (bias)2 + variance + noise (3.41) where (bias)2 =  {ED[y(x; D)] −h(x)}2p(x) dx (3.42) variance =  ED  {y(x; D) −ED[y(x; D)]}2 p(x) dx (3.43) noise =  {h(x) −t}2p(x, t) dx dt (3.44) and the bias and variance terms now refer to integrated quantities.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,149,757,"Our goal is to minimize the expected loss, which we have decomposed into the sum of a (squared) bias, a variance, and a constant noise term. As we shall see, there is a trade-off between bias and variance, with very ﬂexible models having low bias and high variance, and relatively rigid models having high bias and low variance.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,150,758,"Figure 3.5 Illustration of the dependence of bias and variance on model complexity, governed by a regulariza- tion parameter λ, using the sinusoidal data set from Chapter 1. There are L = 100 data sets, each having N = 25 data points, and there are 24 Gaussian basis functions in the model so that the total number of parameters is M = 25 including the bias parameter. The left column shows the result of ﬁtting the model to the data sets for various values of ln λ (for clarity, only 20 of the 100 ﬁts are shown). The right column shows the corresponding average of the 100 ﬁts (red) along with the sinusoidal function from which the data sets were generated (green).",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,151,759,"Figure 3.6 Plot of squared bias and variance, together with their sum, correspond- ing to the results shown in Fig- ure 3.5. Also shown is the average test set error for a test data set size of 1000 points. The minimum value of (bias)2 + variance occurs around ln λ = −0.31, which is close to the value that gives the minimum error on the test data.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,151,760,"The model with the optimal predictive capability is the one that leads to the best balance between bias and variance. This is illustrated by considering the sinusoidal data set from Chapter 1. Here we generate 100 data sets, each containing N = 25 Appendix A data points, independently from the sinusoidal curve h(x) = sin(2πx). The data sets are indexed by l = 1, . . . , L, where L = 100, and for each data set D(l) we \end{verbatim} egin{verbatim} x t ln λ = 2.6 0 1 −1 0 1 x t 0 1 −1 0 1 x t ln λ = −0.31 0 1 −1 0 1 x t 0 1 −1 0 1 x t ln λ = −2.4 0 1 −1 0 1 x t 0 1 −1 0 1 \end{verbatim} egin{verbatim} ln λ −3 −2 −1 0 1 2 0 0.03 0.06 0.09 0.12 0.15 (bias)2 variance (bias)2 + variance test error ﬁt a model with 24 Gaussian basis functions by minimizing the regularized error function (3.27) to give a prediction function y(l)(x) as shown in Figure 3.5.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,151,761,"top row corresponds to a large value of the regularization coefﬁcient λ that gives low variance (because the red curves in the left plot look similar) but high bias (because the two curves in the right plot are very different). Conversely on the bottom row, for which λ is small, there is large variance (shown by the high variability between the red curves in the left plot) but low bias (shown by the good ﬁt between the average model ﬁt and the original sinusoidal function). Note that the result of averaging many solutions for the complex model with M = 25 is a very good ﬁt to the regression function, which suggests that averaging may be a beneﬁcial procedure. Indeed, a weighted averaging of multiple solutions lies at the heart of a Bayesian approach, although the averaging is with respect to the posterior distribution of parameters, not with respect to multiple data sets.",The Bias-Variance Decomposition
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,762,"We can also examine the bias-variance trade-off quantitatively for this example. The average prediction is estimated from y(x) = 1 L L  l=1 y(l)(x) (3.45) and the integrated squared bias and integrated variance are then given by (bias)2 = 1 N N  n=1 {y(xn) −h(xn)}2 (3.46) variance = 1 N N  n=1 1 L L  l=1  y(l)(xn) −y(xn)2 (3.47) where the integral over x weighted by the distribution p(x) is approximated by a ﬁnite sum over data points drawn from that distribution. These quantities, along with their sum, are plotted as a function of ln λ in Figure 3.6. We see that small values of λ allow the model to become ﬁnely tuned to the noise on each individual \end{verbatim} egin{verbatim} data set leading to large variance. Conversely, a large value of λ pulls the weight parameters towards zero leading to large bias.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,763,"Although the bias-variance decomposition may provide some interesting in- sights into the model complexity issue from a frequentist perspective, it is of lim- ited practical value, because the bias-variance decomposition is based on averages with respect to ensembles of data sets, whereas in practice we have only the single observed data set. If we had a large number of independent training sets of a given size, we would be better off combining them into a single large training set, which of course would reduce the level of over-ﬁtting for a given model complexity.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,764,"Given these limitations, we turn in the next section to a Bayesian treatment of linear basis function models, which not only provides powerful insights into the issues of over-ﬁtting but which also leads to practical techniques for addressing the question model complexity.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,765,"In our discussion of maximum likelihood for setting the parameters of a linear re- gression model, we have seen that the effective model complexity, governed by the number of basis functions, needs to be controlled according to the size of the data set. Adding a regularization term to the log likelihood function means the effective model complexity can then be controlled by the value of the regularization coefﬁ- cient, although the choice of the number and form of the basis functions is of course still important in determining the overall behaviour of the model.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,766,"This leaves the issue of deciding the appropriate model complexity for the par- ticular problem, which cannot be decided simply by maximizing the likelihood func- tion, because this always leads to excessively complex models and over-ﬁtting. In- dependent hold-out data can be used to determine model complexity, as discussed in Section 1.3, but this can be both computationally expensive and wasteful of valu- able data. We therefore turn to a Bayesian treatment of linear regression, which will avoid the over-ﬁtting problem of maximum likelihood, and which will also lead to automatic methods of determining model complexity using the training data alone.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,152,767,"Again, for simplicity we will focus on the case of a single target variable t. Ex- tension to multiple target variables is straightforward and follows the discussion of 3.3.1 We begin our discussion of the Bayesian treatment of linear regression by in- troducing a prior probability distribution over the model parameters w. For the mo- ment, we shall treat the noise precision parameter β as a known constant. First note that the likelihood function p(t|w) deﬁned by (3.10) is the exponential of a quadratic function of w. The corresponding conjugate prior is therefore given by a Gaussian distribution of the form p(w) = N(w|m0, S0) (3.48) having mean m0 and covariance S0.",Bayesian Linear Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,768,"Next we compute the posterior distribution, which is proportional to the product of the likelihood function and the prior. Due to the choice of a conjugate Gaus- sian prior distribution, the posterior will also be Gaussian. We can evaluate this distribution by the usual procedure of completing the square in the exponential, and then ﬁnding the normalization coefﬁcient using the standard result for a normalized Gaussian. However, we have already done the necessary work in deriving the gen- eral result (2.116), which allows us to write down the posterior distribution directly in the form p(w|t) = N(w|mN, SN) (3.49) where mN = SN S−1 0 m0 + βΦTt (3.50) S−1 N = S−1 0 + βΦTΦ.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,769,"Note that because the posterior distribution is Gaussian, its mode coincides with its mean. Thus the maximum posterior weight vector is simply given by wMAP = mN.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,770,"If we consider an inﬁnitely broad prior S0 = α−1I with α →0, the mean mN of the posterior distribution reduces to the maximum likelihood value wML given by (3.15). Similarly, if N = 0, then the posterior distribution reverts to the prior.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,771,"Furthermore, if data points arrive sequentially, then the posterior distribution at any stage acts as the prior distribution for the subsequent data point, such that the new posterior distribution is again given by (3.49).",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,772,"For the remainder of this chapter, we shall consider a particular form of Gaus- sian prior in order to simplify the treatment. Speciﬁcally, we consider a zero-mean isotropic Gaussian governed by a single precision parameter α so that p(w|α) = N(w|0, α−1I) (3.52) and the corresponding posterior distribution over w is then given by (3.49) with mN = βSNΦTt (3.53) S−1 N = αI + βΦTΦ.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,773,"The log of the posterior distribution is given by the sum of the log likelihood and the log of the prior and, as a function of w, takes the form ln p(w|t) = −β 2 N  n=1 {tn −wTφ(xn)}2 −α 2 wTw + const.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,153,774,"Maximization of this posterior distribution with respect to w is therefore equiva- lent to the minimization of the sum-of-squares error function with the addition of a quadratic regularization term, corresponding to (3.27) with λ = α/β.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,155,775,"Figure 3.7 Illustration of sequential Bayesian learning for a simple linear model of the form y(x, w) = w0 + w1x. A detailed description of this ﬁgure is given in the text.",Parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,156,776,"We can illustrate Bayesian learning in a linear basis function model, as well as the sequential update of a posterior distribution, using a simple example involving straight-line ﬁtting. Consider a single input variable x, a single target variable t and \end{verbatim} egin{verbatim} a linear model of the form y(x, w) = w0 + w1x. Because this has just two adap- tive parameters, we can plot the prior and posterior distributions directly in parameter space. We generate synthetic data from the function f(x, a) = a0+a1x with param- eter values a0 = −0.3 and a1 = 0.5 by ﬁrst choosing values of xn from the uniform distribution U(x|−1, 1), then evaluating f(xn, a), and ﬁnally adding Gaussian noise with standard deviation of 0.2 to obtain the target values tn. Our goal is to recover the values of a0 and a1 from such data, and we will explore the dependence on the size of the data set. We assume here that the noise variance is known and hence we set the precision parameter to its true value β = (1/0.2)2 = 25. Similarly, we ﬁx the parameter α to 2.0. We shall shortly discuss strategies for determining α and β from the training data. Figure 3.7 shows the results of Bayesian learning in this model as the size of the data set is increased and demonstrates the sequential nature of Bayesian learning in which the current posterior distribution forms the prior when a new data point is observed. It is worth taking time to study this ﬁgure in detail as it illustrates several important aspects of Bayesian inference. The ﬁrst row of this ﬁgure corresponds to the situation before any data points are observed and shows a plot of the prior distribution in w space together with six samples of the function y(x, w) in which the values of w are drawn from the prior. In the second row, we see the situation after observing a single data point. The location (x, t) of the data point is shown by a blue circle in the right-hand column. In the left-hand column is a plot of the likelihood function p(t|x, w) for this data point as a function of w. Note that the likelihood function provides a soft constraint that the line must pass close to the data point, where close is determined by the noise precision β. For comparison, the true parameter values a0 = −0.3 and a1 = 0.5 used to generate the data set are shown by a white cross in the plots in the left column of Figure 3.7. When we multiply this likelihood function by the prior from the top row, and normalize, we obtain the posterior distribution shown in the middle plot on the second row. Sam- ples of the regression function y(x, w) obtained by drawing samples of w from this posterior distribution are shown in the right-hand plot. Note that these sample lines all pass close to the data point. The third row of this ﬁgure shows the effect of ob- serving a second data point, again shown by a blue circle in the plot in the right-hand column. The corresponding likelihood function for this second data point alone is shown in the left plot. When we multiply this likelihood function by the posterior distribution from the second row, we obtain the posterior distribution shown in the middle plot of the third row. Note that this is exactly the same posterior distribution as would be obtained by combining the original prior with the likelihood function for the two data points. This posterior has now been inﬂuenced by two data points, and because two points are sufﬁcient to deﬁne a line this already gives a relatively compact posterior distribution. Samples from this posterior distribution give rise to the functions shown in red in the third column, and we see that these functions pass close to both of the data points. The fourth row shows the effect of observing a total of 20 data points. The left-hand plot shows the likelihood function for the 20th data point alone, and the middle plot shows the resulting posterior distribution that has now absorbed information from all 20 observations. Note how the posterior is much sharper than in the third row. In the limit of an inﬁnite number of data points, the \end{verbatim} egin{verbatim} \end{verbatim} egin{verbatim} posterior distribution would become a delta function centred on the true parameter values, shown by the white cross.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,156,777,"Other forms of prior over the parameters can be considered. For instance, we can generalize the Gaussian prior to give p(w|α) = q 2 α 2 1/q 1 Γ(1/q) M exp  −α 2 M  j=1 |wj|q  (3.56) in which q = 2 corresponds to the Gaussian distribution, and only in this case is the prior conjugate to the likelihood function (3.10). Finding the maximum of the poste- rior distribution over w corresponds to minimization of the regularized error function (3.29). In the case of the Gaussian prior, the mode of the posterior distribution was equal to the mean, although this will no longer hold if q ̸= 2.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,156,778,"In practice, we are not usually interested in the value of w itself but rather in making predictions of t for new values of x. This requires that we evaluate the predictive distribution deﬁned by p(t|t, α, β) =  p(t|w, β)p(w|t, α, β) dw (3.57) in which t is the vector of target values from the training set, and we have omitted the corresponding input vectors from the right-hand side of the conditioning statements to simplify the notation. The conditional distribution p(t|x, w, β) of the target vari- able is given by (3.8), and the posterior weight distribution is given by (3.49). We see that (3.57) involves the convolution of two Gaussian distributions, and so making use of the result (2.115) from Section 8.1.4, we see that the predictive distribution takes the form p(t|x, t, α, β) = N(t|mT Nφ(x), σ2 N(x)) (3.58) where the variance σ2 N(x) of the predictive distribution is given by σ2 N(x) = 1 β + φ(x)TSNφ(x).",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,156,779,"The ﬁrst term in (3.59) represents the noise on the data whereas the second term reﬂects the uncertainty associated with the parameters w. Because the noise process and the distribution of w are independent Gaussians, their variances are additive.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,156,780,"Note that, as additional data points are observed, the posterior distribution becomes narrower. As a consequence it can be shown (Qazaz et al., 1997) that σ2 N+1(x) ⩽ σ2 N(x). In the limit N →∞, the second term in (3.59) goes to zero, and the variance of the predictive distribution arises solely from the additive noise governed by the parameter β.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,157,781,Figure 3.8 Examples of the predictive distribution (3.58) for a model consisting of 9 Gaussian basis functions of the form (3.4) using the synthetic sinusoidal data set of Section 1.1. See the text for a detailed discussion.,Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,157,782,"As an illustration of the predictive distribution for Bayesian linear regression models, let us return to the synthetic sinusoidal data set of Section 1.1. In Figure 3.8, \end{verbatim} egin{verbatim} x t 0 1 −1 0 1 x t 0 1 −1 0 1 x t 0 1 −1 0 1 x t 0 1 −1 0 1 we ﬁt a model comprising a linear combination of Gaussian basis functions to data sets of various sizes and then look at the corresponding posterior distributions. Here the green curves correspond to the function sin(2πx) from which the data points were generated (with the addition of Gaussian noise). Data sets of size N = 1, N = 2, N = 4, and N = 25 are shown in the four plots by the blue circles. For each plot, the red curve shows the mean of the corresponding Gaussian predictive distribution, and the red shaded region spans one standard deviation either side of the mean. Note that the predictive uncertainty depends on x and is smallest in the neighbourhood of the data points. Also note that the level of uncertainty decreases as more data points are observed.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,157,783,"The plots in Figure 3.8 only show the point-wise predictive variance as a func- tion of x. In order to gain insight into the covariance between the predictions at different values of x, we can draw samples from the posterior distribution over w, and then plot the corresponding functions y(x, w), as shown in Figure 3.9.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,158,784,"Figure 3.9 Plots of the function y(x, w) using samples from the posterior distributions over w corresponding to the plots in Figure 3.8.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,158,785,"If we used localized basis functions such as Gaussians, then in regions away from the basis function centres, the contribution from the second term in the predic- tive variance (3.59) will go to zero, leaving only the noise contribution β−1. Thus, the model becomes very conﬁdent in its predictions when extrapolating outside the region occupied by the basis functions, which is generally an undesirable behaviour.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,158,786,This problem can be avoided by adopting an alternative Bayesian approach to re- gression known as a Gaussian process.,Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,158,787,"Note that, if both w and β are treated as unknown, then we can introduce a conjugate prior distribution p(w, β) that, from the discussion in Section 2.3.6, will be given by a Gaussian-gamma distribution (Denison et al., 2002). In this case, the predictive distribution is a Student’s t-distribution.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,159,788,"Figure 3.10 The equivalent ker- nel k(x, x′) for the Gaussian basis functions in Figure 3.1, shown as a plot of x versus x′, together with three slices through this matrix cor- responding to three different values of x. The data set used to generate this kernel comprised 200 values of x equally spaced over the interval (−1, 1).",Equivalent kernel
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,159,789,"The posterior mean solution (3.53) for the linear basis function model has an in- teresting interpretation that will set the stage for kernel methods, including Gaussian processes. If we substitute (3.53) into the expression (3.3), we see that the predictive Chapter 6 mean can be written in the form y(x, mN) = mT Nφ(x) = βφ(x)TSNΦTt = N  n=1 βφ(x)TSNφ(xn)tn (3.60) where SN is deﬁned by (3.51). Thus the mean of the predictive distribution at a point x is given by a linear combination of the training set target variables tn, so that we can write y(x, mN) = N  n=1 k(x, xn)tn (3.61) where the function k(x, x′) = βφ(x)TSNφ(x′) (3.62) is known as the smoother matrix or the equivalent kernel. Regression functions, such as this, which make predictions by taking linear combinations of the training set target values are known as linear smoothers. Note that the equivalent kernel depends on the input values xn from the data set because these appear in the deﬁnition of SN. The equivalent kernel is illustrated for the case of Gaussian basis functions in Figure 3.10 in which the kernel functions k(x, x′) have been plotted as a function of x′ for three different values of x. We see that they are localized around x, and so the mean of the predictive distribution at x, given by y(x, mN), is obtained by forming a weighted combination of the target values in which data points close to x are given higher weight than points further removed from x. Intuitively, it seems reasonable that we should weight local evidence more strongly than distant evidence. Note that this localization property holds not only for the localized Gaussian basis functions but also for the nonlocal polynomial and sigmoidal basis functions, as illustrated in Figure 3.11.",Equivalent kernel
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,160,790,"Figure 3.11 Examples of equiva- lent kernels k(x, x′) for x = 0 plotted as a function of x′, corre- sponding (left) to the polynomial ba- sis functions and (right) to the sig- moidal basis functions shown in Fig- ure 3.1. Note that these are local- ized functions of x′ even though the corresponding basis functions are nonlocal.",Equivalent kernel
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,160,791,"Further insight into the role of the equivalent kernel can be obtained by consid- ering the covariance between y(x) and y(x′), which is given by cov[y(x), y(x′)] = cov[φ(x)Tw, wTφ(x′)] = φ(x)TSNφ(x′) = β−1k(x, x′) (3.63) where we have made use of (3.49) and (3.62). From the form of the equivalent kernel, we see that the predictive mean at nearby points will be highly correlated, whereas for more distant pairs of points the correlation will be smaller.",Equivalent kernel
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,160,792,"The predictive distribution shown in Figure 3.8 allows us to visualize the point- wise uncertainty in the predictions, governed by (3.59). However, by drawing sam- ples from the posterior distribution over w, and plotting the corresponding model functions y(x, w) as in Figure 3.9, we are visualizing the joint uncertainty in the posterior distribution between the y values at two (or more) x values, as governed by the equivalent kernel.",Equivalent kernel
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,161,793,"The formulation of linear regression in terms of a kernel function suggests an alternative approach to regression as follows. Instead of introducing a set of basis functions, which implicitly determines an equivalent kernel, we can instead deﬁne a localized kernel directly and use this to make predictions for new input vectors x, given the observed training set. This leads to a practical framework for regression (and classiﬁcation) called Gaussian processes, which will be discussed in detail in We have seen that the effective kernel deﬁnes the weights by which the training set target values are combined in order to make a prediction at a new value of x, and it can be shown that these weights sum to one, in other words N  n=1 k(x, xn) = 1 (3.64) for all values of x. This intuitively pleasing result can easily be proven informally by noting that the summation is equivalent to considering the predictive mean y(x) for a set of target data in which tn = 1 for all n. Provided the basis functions are linearly independent, that there are more data points than basis functions, and that one of the basis functions is constant (corresponding to the bias parameter), then it is clear that we can ﬁt the training data exactly and hence that the predictive mean will \end{verbatim} egin{verbatim} be simply y(x) = 1, from which we obtain (3.64). Note that the kernel function can be negative as well as positive, so although it satisﬁes a summation constraint, the corresponding predictions are not necessarily convex combinations of the training set target variables.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,161,794,"Finally, we note that the equivalent kernel (3.62) satisﬁes an important property shared by kernel functions in general, namely that it can be expressed in the form an Chapter 6 inner product with respect to a vector ψ(x) of nonlinear functions, so that k(x, z) = ψ(x)Tψ(z) (3.65) where ψ(x) = β1/2S1/2 N φ(x).",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,161,795,"In Chapter 1, we highlighted the problem of over-ﬁtting as well as the use of cross- validation as a technique for setting the values of regularization parameters or for choosing between alternative models. Here we consider the problem of model se- lection from a Bayesian perspective. In this section, our discussion will be very general, and then in Section 3.5 we shall see how these ideas can be applied to the determination of regularization parameters in linear regression.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,161,796,"As we shall see, the over-ﬁtting associated with maximum likelihood can be avoided by marginalizing (summing or integrating) over the model parameters in- stead of making point estimates of their values. Models can then be compared di- rectly on the training data, without the need for a validation set. This allows all available data to be used for training and avoids the multiple training runs for each model associated with cross-validation. It also allows multiple complexity parame- ters to be determined simultaneously as part of the training process. For example, in Chapter 7 we shall introduce the relevance vector machine, which is a Bayesian model having one complexity parameter for every training data point.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,161,797,"The Bayesian view of model comparison simply involves the use of probabilities to represent uncertainty in the choice of model, along with a consistent application of the sum and product rules of probability. Suppose we wish to compare a set of L models {Mi} where i = 1, . . . , L. Here a model refers to a probability distribution over the observed data D. In the case of the polynomial curve-ﬁtting problem, the distribution is deﬁned over the set of target values t, while the set of input values X is assumed to be known. Other types of model deﬁne a joint distributions over X and t. We shall suppose that the data is generated from one of these models but we are uncertain which one. Our uncertainty is expressed through a prior probability distribution p(Mi). Given a training set D, we then wish to evaluate the posterior distribution p(Mi|D) ∝p(Mi)p(D|Mi).",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,798,"The prior allows us to express a preference for different models. Let us simply assume that all models are given equal prior probability. The interesting term is the model evidence p(D|Mi) which expresses the preference shown by the data for \end{verbatim} egin{verbatim} different models, and we shall examine this term in more detail shortly. The model evidence is sometimes also called the marginal likelihood because it can be viewed as a likelihood function over the space of models, in which the parameters have been marginalized out. The ratio of model evidences p(D|Mi)/p(D|Mj) for two models is known as a Bayes factor (Kass and Raftery, 1995).",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,799,"Once we know the posterior distribution over models, the predictive distribution is given, from the sum and product rules, by p(t|x, D) = L  i=1 p(t|x, Mi, D)p(Mi|D).",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,800,"This is an example of a mixture distribution in which the overall predictive distribu- tion is obtained by averaging the predictive distributions p(t|x, Mi, D) of individual models, weighted by the posterior probabilities p(Mi|D) of those models. For in- stance, if we have two models that are a-posteriori equally likely and one predicts a narrow distribution around t = a while the other predicts a narrow distribution around t = b, the overall predictive distribution will be a bimodal distribution with modes at t = a and t = b, not a single model at t = (a + b)/2.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,801,A simple approximation to model averaging is to use the single most probable model alone to make predictions. This is known as model selection.,Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,802,"For a model governed by a set of parameters w, the model evidence is given, from the sum and product rules of probability, by p(D|Mi) =  p(D|w, Mi)p(w|Mi) dw.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,162,803,"From a sampling perspective, the marginal likelihood can be viewed as the proba- Chapter 11 bility of generating the data set D from a model whose parameters are sampled at random from the prior. It is also interesting to note that the evidence is precisely the normalizing term that appears in the denominator in Bayes’ theorem when evaluating the posterior distribution over parameters because p(w|D, Mi) = p(D|w, Mi)p(w|Mi) p(D|Mi) .",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,163,804,Figure 3.12 We can obtain a rough approximation to the model evidence if we assume that the posterior distribution over parame- ters is sharply peaked around its mode wMAP.,Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,163,805,"We can obtain some insight into the model evidence by making a simple approx- imation to the integral over parameters. Consider ﬁrst the case of a model having a single parameter w. The posterior distribution over parameters is proportional to p(D|w)p(w), where we omit the dependence on the model Mi to keep the notation uncluttered. If we assume that the posterior distribution is sharply peaked around the most probable value wMAP, with width ∆wposterior, then we can approximate the in- tegral by the value of the integrand at its maximum times the width of the peak. If we further assume that the prior is ﬂat with width ∆wprior so that p(w) = 1/∆wprior, then we have p(D) =  p(D|w)p(w) dw ≃p(D|wMAP)∆wposterior ∆wprior (3.70) \end{verbatim} egin{verbatim} ∆wposterior ∆wprior wMAP w and so taking logs we obtain ln p(D) ≃ln p(D|wMAP) + ln ∆wposterior ∆wprior  .",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,163,806,"This approximation is illustrated in Figure 3.12. The ﬁrst term represents the ﬁt to the data given by the most probable parameter values, and for a ﬂat prior this would correspond to the log likelihood. The second term penalizes the model according to its complexity. Because ∆wposterior < ∆wprior this term is negative, and it increases in magnitude as the ratio ∆wposterior/∆wprior gets smaller. Thus, if parameters are ﬁnely tuned to the data in the posterior distribution, then the penalty term is large.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,163,807,"For a model having a set of M parameters, we can make a similar approximation for each parameter in turn. Assuming that all parameters have the same ratio of ∆wposterior/∆wprior, we obtain ln p(D) ≃ln p(D|wMAP) + M ln ∆wposterior ∆wprior  .",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,163,808,"Thus, in this very simple approximation, the size of the complexity penalty increases linearly with the number M of adaptive parameters in the model. As we increase the complexity of the model, the ﬁrst term will typically decrease, because a more complex model is better able to ﬁt the data, whereas the second term will increase due to the dependence on M. The optimal model complexity, as determined by the maximum evidence, will be given by a trade-off between these two competing terms. We shall later develop a more reﬁned version of this approximation, based on a Gaussian approximation to the posterior distribution.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,809,"Figure 3.13 Schematic illustration of the distribution of data sets for three models of different com- plexity, in which M1 is the simplest and M3 is the most complex.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,810,"We can gain further insight into Bayesian model comparison and understand how the marginal likelihood can favour models of intermediate complexity by con- sidering Figure 3.13. Here the horizontal axis is a one-dimensional representation of the space of possible data sets, so that each point on this axis corresponds to a speciﬁc data set. We now consider three models M1, M2 and M3 of successively increasing complexity. Imagine running these models generatively to produce exam- ple data sets, and then looking at the distribution of data sets that result. Any given \end{verbatim} egin{verbatim} Note that the dis- tributions are normalized.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,811,"this example, for the partic- ular observed data set D0, the model M2 with intermedi- ate complexity has the largest evidence.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,812,"model can generate a variety of different data sets since the parameters are governed by a prior probability distribution, and for any choice of the parameters there may be random noise on the target variables. To generate a particular data set from a spe- ciﬁc model, we ﬁrst choose the values of the parameters from their prior distribution p(w), and then for these parameter values we sample the data from p(D|w). A sim- ple model (for example, based on a ﬁrst order polynomial) has little variability and so will generate data sets that are fairly similar to each other. Its distribution p(D) is therefore conﬁned to a relatively small region of the horizontal axis. By contrast, a complex model (such as a ninth order polynomial) can generate a great variety of different data sets, and so its distribution p(D) is spread over a large region of the space of data sets. Because the distributions p(D|Mi) are normalized, we see that the particular data set D0 can have the highest value of the evidence for the model of intermediate complexity. Essentially, the simpler model cannot ﬁt the data well, whereas the more complex model spreads its predictive probability over too broad a range of data sets and so assigns relatively small probability to any one of them.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,813,"Implicit in the Bayesian model comparison framework is the assumption that the true distribution from which the data are generated is contained within the set of models under consideration. Provided this is so, we can show that Bayesian model comparison will on average favour the correct model. To see this, consider two models M1 and M2 in which the truth corresponds to M1. For a given ﬁnite data set, it is possible for the Bayes factor to be larger for the incorrect model. However, if we average the Bayes factor over the distribution of data sets, we obtain the expected Bayes factor in the form  p(D|M1) ln p(D|M1) p(D|M2) dD (3.73) where the average has been taken with respect to the true distribution of the data.",Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,164,814,This quantity is an example of the Kullback-Leibler divergence and satisﬁes the prop- erty of always being positive unless the two distributions are equal in which case it is zero. Thus on average the Bayes factor will always favour the correct model.,Bayesian Model Comparison
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,165,815,"We have seen that the Bayesian framework avoids the problem of over-ﬁtting and allows models to be compared on the basis of the training data alone. However, \end{verbatim} egin{verbatim} a Bayesian approach, like any approach to pattern recognition, needs to make as- sumptions about the form of the model, and if these are invalid then the results can be misleading. In particular, we see from Figure 3.12 that the model evidence can be sensitive to many aspects of the prior, such as the behaviour in the tails. Indeed, the evidence is not deﬁned if the prior is improper, as can be seen by noting that an improper prior has an arbitrary scaling factor (in other words, the normalization coefﬁcient is not deﬁned because the distribution cannot be normalized). If we con- sider a proper prior and then take a suitable limit in order to obtain an improper prior (for example, a Gaussian prior in which we take the limit of inﬁnite variance) then the evidence will go to zero, as can be seen from (3.70) and Figure 3.12. It may, however, be possible to consider the evidence ratio between two models ﬁrst and then take a limit to obtain a meaningful answer.",The Evidence Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,165,816,"In a practical application, therefore, it will be wise to keep aside an independent test set of data on which to evaluate the overall performance of the ﬁnal system.",The Evidence Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,165,817,"In a fully Bayesian treatment of the linear basis function model, we would intro- duce prior distributions over the hyperparameters α and β and make predictions by marginalizing with respect to these hyperparameters as well as with respect to the parameters w. However, although we can integrate analytically over either w or over the hyperparameters, the complete marginalization over all of these variables is analytically intractable. Here we discuss an approximation in which we set the hyperparameters to speciﬁc values determined by maximizing the marginal likeli- hood function obtained by ﬁrst integrating over the parameters w. This framework is known in the statistics literature as empirical Bayes (Bernardo and Smith, 1994; Gelman et al., 2004), or type 2 maximum likelihood (Berger, 1985), or generalized maximum likelihood (Wahba, 1975), and in the machine learning literature is also called the evidence approximation (Gull, 1989; MacKay, 1992a).",The Evidence Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,165,818,"If we introduce hyperpriors over α and β, the predictive distribution is obtained by marginalizing over w, α and β so that p(t|t) =  p(t|w, β)p(w|t, α, β)p(α, β|t) dw dα dβ (3.74) where p(t|w, β) is given by (3.8) and p(w|t, α, β) is given by (3.49) with mN and SN deﬁned by (3.53) and (3.54) respectively. Here we have omitted the dependence on the input variable x to keep the notation uncluttered. If the posterior distribution p(α, β|t) is sharply peaked around values α and β, then the predictive distribution is obtained simply by marginalizing over w in which α and β are ﬁxed to the values α and β, so that p(t|t) ≃p(t|t, α, β) =  p(t|w, β)p(w|t, α, β) dw.",The Evidence Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,819,"From Bayes’ theorem, the posterior distribution for α and β is given by p(α, β|t) ∝p(t|α, β)p(α, β).",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,820,"If the prior is relatively ﬂat, then in the evidence framework the values of α and β are obtained by maximizing the marginal likelihood function p(t|α, β). We shall proceed by evaluating the marginal likelihood for the linear basis function model and then ﬁnding its maxima. This will allow us to determine values for these hyperpa- rameters from the training data alone, without recourse to cross-validation. Recall that the ratio α/β is analogous to a regularization parameter.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,821,"As an aside it is worth noting that, if we deﬁne conjugate (Gamma) prior distri- butions over α and β, then the marginalization over these hyperparameters in (3.74) can be performed analytically to give a Student’s t-distribution over w (see Sec- tion 2.3.7). Although the resulting integral over w is no longer analytically tractable, it might be thought that approximating this integral, for example using the Laplace approximation discussed (Section 4.4) which is based on a local Gaussian approxi- mation centred on the mode of the posterior distribution, might provide a practical alternative to the evidence framework (Buntine and Weigend, 1991). However, the integrand as a function of w typically has a strongly skewed mode so that the Laplace approximation fails to capture the bulk of the probability mass, leading to poorer re- sults than those obtained by maximizing the evidence (MacKay, 1999).",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,822,"Returning to the evidence framework, we note that there are two approaches that we can take to the maximization of the log evidence. We can evaluate the evidence function analytically and then set its derivative equal to zero to obtain re-estimation equations for α and β, which we shall do in Section 3.5.2. Alternatively we use a technique called the expectation maximization (EM) algorithm, which will be dis- cussed in Section 9.3.4 where we shall also show that these two approaches converge to the same solution.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,823,"The marginal likelihood function p(t|α, β) is obtained by integrating over the weight parameters w, so that p(t|α, β) =  p(t|w, β)p(w|α) dw.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,166,824,One way to evaluate this integral is to make use once again of the result (2.115) for the conditional distribution in a linear-Gaussian model. Here we shall evaluate the integral instead by completing the square in the exponent and making use of the standard form for the normalization coefﬁcient of a Gaussian.,Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,825,"From (3.11), (3.12), and (3.52), we can write the evidence function in the form p(t|α, β) =  β 2π N/2  α 2π M/2  exp {−E(w)} dw (3.78) \end{verbatim} egin{verbatim} where M is the dimensionality of w, and we have deﬁned E(w) = βED(w) + αEW (w) = β 2 ∥t −Φw∥2 + α 2 wTw.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,826,"We recognize (3.79) as being equal, up to a constant of proportionality, to the reg- ularized sum-of-squares error function (3.27). We now complete the square over w giving E(w) = E(mN) + 1 2(w −mN)TA(w −mN) (3.80) where we have introduced A = αI + βΦTΦ (3.81) together with E(mN) = β 2 ∥t −ΦmN∥2 + α 2 mT NmN.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,827,Note that A corresponds to the matrix of second derivatives of the error function A = ∇∇E(w) (3.83) and is known as the Hessian matrix. Here we have also deﬁned mN given by mN = βA−1ΦTt.,Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,828,"Using (3.54), we see that A = S−1 N , and hence (3.84) is equivalent to the previous deﬁnition (3.53), and therefore represents the mean of the posterior distribution.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,829,"The integral over w can now be evaluated simply by appealing to the standard result for the normalization coefﬁcient of a multivariate Gaussian, giving  exp {−E(w)} dw = exp{−E(mN)}  exp −1 2(w −mN)TA(w −mN) dw = exp{−E(mN)}(2π)M/2|A|−1/2.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,167,830,"Using (3.78) we can then write the log of the marginal likelihood in the form ln p(t|α, β) = M 2 ln α + N 2 ln β −E(mN) −1 2 ln |A| −N 2 ln(2π) (3.86) which is the required expression for the evidence function.",Evaluation of the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,168,831,"Figure 3.14 Plot of the model evidence versus the order M, for the polynomial re- gression model, showing that the evidence favours the model with M = 3.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,168,832,"Returning to the polynomial regression problem, we can plot the model evidence against the order of the polynomial, as shown in Figure 3.14. Here we have assumed a prior of the form (1.65) with the parameter α ﬁxed at α = 5 × 10−3. The form of this plot is very instructive. Referring back to Figure 1.4, we see that the M = 0 polynomial has very poor ﬁt to the data and consequently gives a relatively low value \end{verbatim} egin{verbatim} M 0 2 4 6 8 −26 −24 −22 −20 −18 for the evidence. Going to the M = 1 polynomial greatly improves the data ﬁt, and hence the evidence is signiﬁcantly higher. However, in going to M = 2, the data ﬁt is improved only very marginally, due to the fact that the underlying sinusoidal function from which the data is generated is an odd function and so has no even terms in a polynomial expansion. Indeed, Figure 1.5 shows that the residual data error is reduced only slightly in going from M = 1 to M = 2. Because this richer model suffers a greater complexity penalty, the evidence actually falls in going from M = 1 to M = 2. When we go to M = 3 we obtain a signiﬁcant further improvement in data ﬁt, as seen in Figure 1.4, and so the evidence is increased again, giving the highest overall evidence for any of the polynomials. Further increases in the value of M produce only small improvements in the ﬁt to the data but suffer increasing complexity penalty, leading overall to a decrease in the evidence values. Looking again at Figure 1.5, we see that the generalization error is roughly constant between M = 3 and M = 8, and it would be difﬁcult to choose between these models on the basis of this plot alone. The evidence values, however, show a clear preference for M = 3, since this is the simplest model which gives a good explanation for the observed data.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,168,833,"Let us ﬁrst consider the maximization of p(t|α, β) with respect to α. This can be done by ﬁrst deﬁning the following eigenvector equation βΦTΦ ui = λiui.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,168,834,"From (3.81), it then follows that A has eigenvalues α+λi. Now consider the deriva- tive of the term involving ln |A| in (3.86) with respect to α. We have d dα ln |A| = d dα ln  i (λi + α) = d dα  i ln(λi + α) =  i 1 λi + α.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,168,835,Thus the stationary points of (3.86) with respect to α satisfy 0 = M 2α −1 2mT NmN −1 2  i 1 λi + α.,Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,836,"Multiplying through by 2α and rearranging, we obtain αmT NmN = M −α  i 1 λi + α = γ.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,837,"Since there are M terms in the sum over i, the quantity γ can be written γ =  i λi α + λi .",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,838,The interpretation of the quantity γ will be discussed shortly. From (3.90) we see that the value of α that maximizes the marginal likelihood satisﬁes α = γ mT NmN .,Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,839,"Note that this is an implicit solution for α not only because γ depends on α, but also because the mode mN of the posterior distribution itself depends on the choice of α. We therefore adopt an iterative procedure in which we make an initial choice for α and use this to ﬁnd mN, which is given by (3.53), and also to evaluate γ, which is given by (3.91). These values are then used to re-estimate α using (3.92), and the process repeated until convergence. Note that because the matrix ΦTΦ is ﬁxed, we can compute its eigenvalues once at the start and then simply multiply these by β to obtain the λi.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,840,"It should be emphasized that the value of α has been determined purely by look- ing at the training data. In contrast to maximum likelihood methods, no independent data set is required in order to optimize the model complexity.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,841,"We can similarly maximize the log marginal likelihood (3.86) with respect to β. To do this, we note that the eigenvalues λi deﬁned by (3.87) are proportional to β, and hence dλi/dβ = λi/β giving d dβ ln |A| = d dβ  i ln(λi + α) = 1 β  i λi λi + α = γ β .",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,842,The stationary point of the marginal likelihood therefore satisﬁes 0 = N 2β −1 2 N  n=1  tn −mT Nφ(xn)2 −γ 2β (3.94) and rearranging we obtain 1 β = 1 N −γ N  n=1  tn −mT Nφ(xn)2 .,Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,169,843,"Again, this is an implicit solution for β and can be solved by choosing an initial value for β and then using this to calculate mN and γ and then re-estimate β using (3.95), repeating until convergence. If both α and β are to be determined from the data, then their values can be re-estimated together after each update of γ.",Maximizing the evidence function
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,170,844,"Figure 3.15 Contours of the likelihood function (red) and the prior (green) in which the axes in parameter space have been rotated to align with the eigenvectors ui of the Hessian. For α = 0, the mode of the poste- rior is given by the maximum likelihood solution wML, whereas for nonzero α the mode is at wMAP = mN. In the direction w1 the eigenvalue λ1, deﬁned by (3.87), is small compared with α and so the quantity λ1/(λ1 + α) is close to zero, and the corresponding MAP value of w1 is also close to zero. By contrast, in the direction w2 the eigenvalue λ2 is large compared with α and so the quantity λ2/(λ2 +α) is close to unity, and the MAP value of w2 is close to its maximum likelihood value.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,170,845,"The result (3.92) has an elegant interpretation (MacKay, 1992a), which provides insight into the Bayesian solution for α. To see this, consider the contours of the like- lihood function and the prior as illustrated in Figure 3.15. Here we have implicitly transformed to a rotated set of axes in parameter space aligned with the eigenvec- tors ui deﬁned in (3.87). Contours of the likelihood function are then axis-aligned ellipses. The eigenvalues λi measure the curvature of the likelihood function, and so in Figure 3.15 the eigenvalue λ1 is small compared with λ2 (because a smaller curvature corresponds to a greater elongation of the contours of the likelihood func- tion). Because βΦTΦ is a positive deﬁnite matrix, it will have positive eigenvalues, and so the ratio λi/(λi + α) will lie between 0 and 1. Consequently, the quantity γ deﬁned by (3.91) will lie in the range 0 ⩽γ ⩽M. For directions in which λi ≫α, the corresponding parameter wi will be close to its maximum likelihood value, and the ratio λi/(λi + α) will be close to 1. Such parameters are called well determined because their values are tightly constrained by the data. Conversely, for directions in which λi ≪α, the corresponding parameters wi will be close to zero, as will the ratios λi/(λi +α). These are directions in which the likelihood function is relatively insensitive to the parameter value and so the parameter has been set to a small value by the prior. The quantity γ deﬁned by (3.91) therefore measures the effective total number of well determined parameters.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,171,846,"We can obtain some insight into the result (3.95) for re-estimating β by com- paring it with the corresponding maximum likelihood result given by (3.21). Both of these formulae express the variance (the inverse precision) as an average of the squared differences between the targets and the model predictions. However, they differ in that the number of data points N in the denominator of the maximum like- lihood result is replaced by N −γ in the Bayesian result. We recall from (1.56) that the maximum likelihood estimate of the variance for a Gaussian distribution over a \end{verbatim} egin{verbatim} single variable x is given by σ2 ML = 1 N N  n=1 (xn −µML)2 (3.96) and that this estimate is biased because the maximum likelihood solution µML for the mean has ﬁtted some of the noise on the data. In effect, this has used up one degree of freedom in the model. The corresponding unbiased estimate is given by (1.59) and takes the form σ2 MAP = 1 N −1 N  n=1 (xn −µML)2.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,171,847,We shall see in Section 10.1.3 that this result can be obtained from a Bayesian treat- ment in which we marginalize over the unknown mean. The factor of N −1 in the denominator of the Bayesian result takes account of the fact that one degree of free- dom has been used in ﬁtting the mean and removes the bias of maximum likelihood.,Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,171,848,"Now consider the corresponding results for the linear regression model. The mean of the target distribution is now given by the function wTφ(x), which contains M parameters. However, not all of these parameters are tuned to the data. The effective number of parameters that are determined by the data is γ, with the remaining M −γ parameters set to small values by the prior. This is reﬂected in the Bayesian result for the variance that has a factor N −γ in the denominator, thereby correcting for the bias of the maximum likelihood result.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,171,849,"We can illustrate the evidence framework for setting hyperparameters using the sinusoidal synthetic data set from Section 1.1, together with the Gaussian basis func- tion model comprising 9 basis functions, so that the total number of parameters in the model is given by M = 10 including the bias. Here, for simplicity of illustra- tion, we have set β to its true value of 11.1 and then used the evidence framework to determine α, as shown in Figure 3.16.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,171,850,"We can also see how the parameter α controls the magnitude of the parameters {wi}, by plotting the individual parameters versus the effective number γ of param- eters, as shown in Figure 3.17.",Effective number of parameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,172,851,"Figure 3.16 The left plot shows γ (red curve) and 2αEW (mN) (blue curve) versus ln α for the sinusoidal synthetic data set. It is the intersection of these two curves that deﬁnes the optimum value for α given by the evidence procedure. The right plot shows the corresponding graph of log evidence ln p(t|α, β) versus ln α (red curve) showing that the peak coincides with the crossing point of the curves in the left plot. Also shown is the test set error (blue curve) showing that the evidence maximum occurs close to the point of best generalization.",Limitations of Fixed Basis Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,172,852,"Figure 3.17 Plot of the 10 parameters wi from the Gaussian basis function model versus the effective num- ber of parameters γ, in which the hyperparameter α is varied in the range 0 ⩽α ⩽∞causing γ to vary in the range 0 ⩽γ ⩽M.",Limitations of Fixed Basis Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,172,853,"If we consider the limit N ≫M in which the number of data points is large in relation to the number of parameters, then from (3.87) all of the parameters will be well determined by the data because ΦTΦ involves an implicit sum over data points, and so the eigenvalues λi increase with the size of the data set. In this case, γ = M, and the re-estimation equations for α and β become α = M 2EW (mN) (3.98) β = N 2ED(mN) (3.99) where EW and ED are deﬁned by (3.25) and (3.26), respectively. These results can be used as an easy-to-compute approximation to the full evidence re-estimation \end{verbatim} egin{verbatim} ln α −5 0 5 ln α −5 0 5 formulae, because they do not require evaluation of the eigenvalue spectrum of the Hessian.",Limitations of Fixed Basis Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,854,"Throughout this chapter, we have focussed on models comprising a linear combina- tion of ﬁxed, nonlinear basis functions. We have seen that the assumption of linearity in the parameters led to a range of useful properties including closed-form solutions to the least-squares problem, as well as a tractable Bayesian treatment. Furthermore, for a suitable choice of basis functions, we can model arbitrary nonlinearities in the \end{verbatim} egin{verbatim} mapping from input variables to targets. In the next chapter, we shall study an anal- ogous class of models for classiﬁcation.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,855,"It might appear, therefore, that such linear models constitute a general purpose framework for solving problems in pattern recognition. Unfortunately, there are some signiﬁcant shortcomings with linear models, which will cause us to turn in later chapters to more complex models such as support vector machines and neural networks.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,856,"The difﬁculty stems from the assumption that the basis functions φj(x) are ﬁxed before the training data set is observed and is a manifestation of the curse of dimen- sionality discussed in Section 1.4. As a consequence, the number of basis functions needs to grow rapidly, often exponentially, with the dimensionality D of the input space.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,857,"Fortunately, there are two properties of real data sets that we can exploit to help alleviate this problem. First of all, the data vectors {xn} typically lie close to a non- linear manifold whose intrinsic dimensionality is smaller than that of the input space as a result of strong correlations between the input variables. We will see an example of this when we consider images of handwritten digits in Chapter 12. If we are using localized basis functions, we can arrange that they are scattered in input space only in regions containing data. This approach is used in radial basis function networks and also in support vector and relevance vector machines. Neural network models, which use adaptive basis functions having sigmoidal nonlinearities, can adapt the parameters so that the regions of input space over which the basis functions vary corresponds to the data manifold. The second property is that target variables may have signiﬁcant dependence on only a small number of possible directions within the data manifold. Neural networks can exploit this property by choosing the directions in input space to which the basis functions respond.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,858,Show that the ‘tanh’ function and the logistic sigmoid function (3.6) are related by tanh(a) = 2σ(2a) −1.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,173,859,"Hence show that a general linear combination of logistic sigmoid functions of the form y(x, w) = w0 + M  j=1 wjσ x −µj s  (3.101) is equivalent to a linear combination of ‘tanh’ functions of the form y(x, u) = u0 + M  j=1 uj tanh x −µj s  (3.102) and ﬁnd expressions to relate the new parameters {u1, . . . , uM} to the original pa- rameters {w1, . . . , wM}.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,860,(⋆⋆) Show that the matrix Φ(ΦTΦ)−1ΦT (3.103) takes any vector v and projects it onto the space spanned by the columns of Φ. Use this result to show that the least-squares solution (3.15) corresponds to an orthogonal projection of the vector t onto the manifold S as shown in Figure 3.2.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,861,"Consider a data set in which each data point tn is associated with a weighting factor rn > 0, so that the sum-of-squares error function becomes ED(w) = 1 2 N  n=1 rn  tn −wTφ(xn) 2 .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,862,Find an expression for the solution w⋆that minimizes this error function. Give two alternative interpretations of the weighted sum-of-squares error function in terms of (i) data dependent noise variance and (ii) replicated data points.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,863,"Consider a linear model of the form y(x, w) = w0 + D  i=1 wixi (3.105) together with a sum-of-squares error function of the form ED(w) = 1 2 N  n=1 {y(xn, w) −tn}2 .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,864,"Now suppose that Gaussian noise ϵi with zero mean and variance σ2 is added in- dependently to each of the input variables xi. By making use of E[ϵi] = 0 and E[ϵiϵj] = δijσ2, show that minimizing ED averaged over the noise distribution is equivalent to minimizing the sum-of-squares error for noise-free input variables with the addition of a weight-decay regularization term, in which the bias parameter w0 is omitted from the regularizer.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,174,865,"Using the technique of Lagrange multipliers, discussed in Appendix E, show that minimization of the regularized error function (3.29) is equivalent to mini- mizing the unregularized sum-of-squares error (3.12) subject to the constraint (3.30).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,866,"Discuss the relationship between the parameters η and λ. 3.6 (⋆) www Consider a linear basis function regression model for a multivariate target variable t having a Gaussian distribution of the form p(t|W, Σ) = N(t|y(x, W), Σ) (3.107) where y(x, W) = WTφ(x) (3.108) \end{verbatim} egin{verbatim} together with a training data set comprising input basis vectors φ(xn) and corre- sponding target vectors tn, with n = 1, . . . , N. Show that the maximum likelihood solution WML for the parameter matrix W has the property that each column is given by an expression of the form (3.15), which was the solution for an isotropic noise distribution. Note that this is independent of the covariance matrix Σ. Show that the maximum likelihood solution for Σ is given by Σ = 1 N N  n=1 tn −WT MLφ(xn) tn −WT MLφ(xn) T .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,867,"(⋆) By using the technique of completing the square, verify the result (3.49) for the posterior distribution of the parameters w in the linear basis function model in which mN and SN are deﬁned by (3.50) and (3.51) respectively.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,868,"Consider the linear basis function model in Section 3.1, and suppose that we have already observed N data points, so that the posterior distribution over w is given by (3.49). This posterior can be regarded as the prior for the next obser- vation. By considering an additional data point (xN+1, tN+1), and by completing the square in the exponential, show that the resulting posterior distribution is again given by (3.49) but with SN replaced by SN+1 and mN replaced by mN+1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,869,"Repeat the previous exercise but instead of completing the square by hand, make use of the general result for linear-Gaussian models given by (2.116).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,870,"By making use of the result (2.115) to evaluate the integral in (3.57), verify that the predictive distribution for the Bayesian linear regression model is given by (3.58) in which the input-dependent variance is given by (3.59).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,871,"(⋆⋆) We have seen that, as the size of a data set increases, the uncertainty associated with the posterior distribution over model parameters decreases. Make use of the matrix identity (Appendix C) M + vvT−1 = M−1 −(M−1v) vTM−1 1 + vTM−1v (3.110) to show that the uncertainty σ2 N(x) associated with the linear regression function given by (3.59) satisﬁes σ2 N+1(x) ⩽σ2 N(x).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,175,872,"We saw in Section 2.3.6 that the conjugate prior for a Gaussian distribution with unknown mean and unknown precision (inverse variance) is a normal-gamma distribution. This property also holds for the case of the conditional Gaussian dis- tribution p(t|x, w, β) of the linear regression model. If we consider the likelihood function (3.10), then the conjugate prior for w and β is given by p(w, β) = N(w|m0, β−1S0)Gam(β|a0, b0).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,873,"Show that the corresponding posterior distribution takes the same functional form, so that p(w, β|t) = N(w|mN, β−1SN)Gam(β|aN, bN) (3.113) and ﬁnd expressions for the posterior parameters mN, SN, aN, and bN.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,874,"Show that the predictive distribution p(t|x, t) for the model discussed in Ex- ercise 3.12 is given by a Student’s t-distribution of the form p(t|x, t) = St(t|µ, λ, ν) (3.114) and obtain expressions for µ, λ and ν.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,875,"In this exercise, we explore in more detail the properties of the equivalent kernel deﬁned by (3.62), where SN is deﬁned by (3.54). Suppose that the basis functions φj(x) are linearly independent and that the number N of data points is greater than the number M of basis functions. Furthermore, let one of the basis functions be constant, say φ0(x) = 1. By taking suitable linear combinations of these basis functions, we can construct a new basis set ψj(x) spanning the same space but that are orthonormal, so that N  n=1 ψj(xn)ψk(xn) = Ijk (3.115) where Ijk is deﬁned to be 1 if j = k and 0 otherwise, and we take ψ0(x) = 1. Show that for α = 0, the equivalent kernel can be written as k(x, x′) = ψ(x)Tψ(x′) where ψ = (ψ1, . . . , ψM)T. Use this result to show that the kernel satisﬁes the summation constraint N  n=1 k(x, xn) = 1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,876,Consider a linear basis function model for regression in which the pa- rameters α and β are set using the evidence framework. Show that the function E(mN) deﬁned by (3.82) satisﬁes the relation 2E(mN) = N.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,877,"Derive the result (3.86) for the log evidence function p(t|α, β) of the linear regression model by making use of (2.115) to evaluate the integral (3.77) directly.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,878,Show that the evidence function for the Bayesian linear regression model can be written in the form (3.78) in which E(w) is deﬁned by (3.79).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,879,"By completing the square over w, show that the error function (3.79) in Bayesian linear regression can be written in the form (3.80).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,176,880,(⋆⋆) Show that the integration over w in the Bayesian linear regression model gives the result (3.85). Hence show that the log marginal likelihood is given by (3.86).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,881,Starting from (3.86) verify all of the steps needed to show that maxi- mization of the log marginal likelihood function (3.86) with respect to α leads to the re-estimation equation (3.92).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,882,(⋆⋆) An alternative way to derive the result (3.92) for the optimal value of α in the evidence framework is to make use of the identity d dα ln |A| = Tr  A−1 d dαA  .,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,883,"Prove this identity by considering the eigenvalue expansion of a real, symmetric matrix A, and making use of the standard results for the determinant and trace of A expressed in terms of its eigenvalues (Appendix C). Then make use of (3.117) to derive (3.92) starting from (3.86).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,884,Starting from (3.86) verify all of the steps needed to show that maximiza- tion of the log marginal likelihood function (3.86) with respect to β leads to the re-estimation equation (3.95).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,885,"Show that the marginal probability of the data, in other words the model evidence, for the model described in Exercise 3.12 is given by p(t) = 1 (2π)N/2 ba0 0 baN N Γ(aN) Γ(a0) |SN|1/2 |S0|1/2 (3.118) by ﬁrst marginalizing with respect to w and then with respect to β.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Regression,3,177,886,"(⋆⋆) Repeat the previous exercise but now use Bayes’ theorem in the form p(t) = p(t|w, β)p(w, β) p(w, β|t) (3.119) and then substitute for the prior and posterior distributions and the likelihood func- tion in order to derive the result (3.118).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,179,887,"In the previous chapter, we explored a class of regression models having particularly simple analytical and computational properties. We now discuss an analogous class of models for solving classiﬁcation problems. The goal in classiﬁcation is to take an input vector x and to assign it to one of K discrete classes Ck where k = 1, . . . , K.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,179,888,"In the most common scenario, the classes are taken to be disjoint, so that each input is assigned to one and only one class. The input space is thereby divided into decision regions whose boundaries are called decision boundaries or decision surfaces. In this chapter, we consider linear models for classiﬁcation, by which we mean that the decision surfaces are linear functions of the input vector x and hence are deﬁned by (D −1)-dimensional hyperplanes within the D-dimensional input space. Data sets whose classes can be separated exactly by linear decision surfaces are said to be linearly separable.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,180,889,"For regression problems, the target variable t was simply the vector of real num- bers whose values we wish to predict. In the case of classiﬁcation, there are various \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION ways of using target values to represent class labels. For probabilistic models, the most convenient, in the case of two-class problems, is the binary representation in which there is a single target variable t ∈{0, 1} such that t = 1 represents class C1 and t = 0 represents class C2. We can interpret the value of t as the probability that the class is C1, with the values of probability taking only the extreme values of 0 and 1. For K > 2 classes, it is convenient to use a 1-of-K coding scheme in which t is a vector of length K such that if the class is Cj, then all elements tk of t are zero except element tj, which takes the value 1. For instance, if we have K = 5 classes, then a pattern from class 2 would be given the target vector t = (0, 1, 0, 0, 0)T.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,180,890,"Again, we can interpret the value of tk as the probability that the class is Ck. For nonprobabilistic models, alternative choices of target variable representation will sometimes prove convenient.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,180,891,"In Chapter 1, we identiﬁed three distinct approaches to the classiﬁcation prob- lem. The simplest involves constructing a discriminant function that directly assigns each vector x to a speciﬁc class. A more powerful approach, however, models the conditional probability distribution p(Ck|x) in an inference stage, and then subse- quently uses this distribution to make optimal decisions. By separating inference and decision, we gain numerous beneﬁts, as discussed in Section 1.5.4. There are two different approaches to determining the conditional probabilities p(Ck|x). One technique is to model them directly, for example by representing them as parametric models and then optimizing the parameters using a training set. Alternatively, we can adopt a generative approach in which we model the class-conditional densities given by p(x|Ck), together with the prior probabilities p(Ck) for the classes, and then we compute the required posterior probabilities using Bayes’ theorem p(Ck|x) = p(x|Ck)p(Ck) p(x) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,180,892,"We shall discuss examples of all three approaches in this chapter. In the linear regression models considered in Chapter 3, the model prediction y(x, w) was given by a linear function of the parameters w. In the simplest case, the model is also linear in the input variables and therefore takes the form y(x) = wTx+w0, so that y is a real number. For classiﬁcation problems, however, we wish to predict discrete class labels, or more generally posterior probabilities that lie in the range (0, 1). To achieve this, we consider a generalization of this model in which we transform the linear function of w using a nonlinear function f( · ) so that y(x) = f wTx + w0 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,893,"In the machine learning literature f( · ) is known as an activation function, whereas its inverse is called a link function in the statistics literature. The decision surfaces correspond to y(x) = constant, so that wTx + w0 = constant and hence the deci- sion surfaces are linear functions of x, even if the function f(·) is nonlinear. For this reason, the class of models described by (4.3) are called generalized linear models \end{verbatim} egin{verbatim} (McCullagh and Nelder, 1989). Note, however, that in contrast to the models used for regression, they are no longer linear in the parameters due to the presence of the nonlinear function f(·). This will lead to more complex analytical and computa- tional properties than for linear regression models. Nevertheless, these models are still relatively simple compared to the more general nonlinear models that will be studied in subsequent chapters.",Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,894,"The algorithms discussed in this chapter will be equally applicable if we ﬁrst make a ﬁxed nonlinear transformation of the input variables using a vector of basis functions φ(x) as we did for regression models in Chapter 3. We begin by consider- ing classiﬁcation directly in the original input space x, while in Section 4.3 we shall ﬁnd it convenient to switch to a notation involving basis functions for consistency with later chapters.",Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,895,"A discriminant is a function that takes an input vector x and assigns it to one of K classes, denoted Ck. In this chapter, we shall restrict attention to linear discriminants, namely those for which the decision surfaces are hyperplanes. To simplify the dis- cussion, we consider ﬁrst the case of two classes and then investigate the extension to K > 2 classes.",Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,896,"The simplest representation of a linear discriminant function is obtained by tak- ing a linear function of the input vector so that y(x) = wTx + w0 (4.4) where w is called a weight vector, and w0 is a bias (not to be confused with bias in the statistical sense). The negative of the bias is sometimes called a threshold. An input vector x is assigned to class C1 if y(x) ⩾0 and to class C2 otherwise. The cor- responding decision boundary is therefore deﬁned by the relation y(x) = 0, which corresponds to a (D −1)-dimensional hyperplane within the D-dimensional input space. Consider two points xA and xB both of which lie on the decision surface.",Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,897,"Because y(xA) = y(xB) = 0, we have wT(xA −xB) = 0 and hence the vector w is orthogonal to every vector lying within the decision surface, and so w determines the orientation of the decision surface. Similarly, if x is a point on the decision surface, then y(x) = 0, and so the normal distance from the origin to the decision surface is given by wTx ∥w∥= −w0 ∥w∥.",Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,181,898,We therefore see that the bias parameter w0 determines the location of the decision surface. These properties are illustrated for the case of D = 2 in Figure 4.1.,Discriminant Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,899,Figure 4.1 Illustration of the geometry of a linear discriminant function in two dimensions.,Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,900,"Furthermore, we note that the value of y(x) gives a signed measure of the per- pendicular distance r of the point x from the decision surface. To see this, consider \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION The decision surface, shown in red, is perpen- dicular to w, and its displacement from the origin is controlled by the bias parameter w0.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,901,"Also, the signed orthogonal distance of a gen- eral point x from the decision surface is given by y(x)/∥w∥.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,902,"an arbitrary point x and let x⊥be its orthogonal projection onto the decision surface, so that x = x⊥+ r w ∥w∥.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,903,"Multiplying both sides of this result by wT and adding w0, and making use of y(x) = wTx + w0 and y(x⊥) = wTx⊥+ w0 = 0, we have r = y(x) ∥w∥.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,904,"This result is illustrated in Figure 4.1. As with the linear regression models in Chapter 3, it is sometimes convenient to use a more compact notation in which we introduce an additional dummy ‘input’ value x0 = 1 and then deﬁne w = (w0, w) and x = (x0, x) so that y(x) = wTx.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,905,"In this case, the decision surfaces are D-dimensional hyperplanes passing through the origin of the D + 1-dimensional expanded input space.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,182,906,"Now consider the extension of linear discriminants to K > 2 classes. We might be tempted be to build a K-class discriminant by combining a number of two-class discriminant functions. However, this leads to some serious difﬁculties (Duda and Hart, 1973) as we now show.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,183,907,"Figure 4.2 Attempting to construct a K class discriminant from a set of two class discriminants leads to am- biguous regions, shown in green. On the left is an example involving the use of two discriminants designed to distinguish points in class Ck from points not in class Ck. On the right is an example involving three discriminant functions each of which is used to separate a pair of classes Ck and Cj.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,183,908,Consider the use of K−1 classiﬁers each of which solves a two-class problem of separating points in a particular class Ck from points not in that class. This is known as a one-versus-the-rest classiﬁer. The left-hand example in Figure 4.2 shows an \end{verbatim} egin{verbatim} R1 R2 R3 ? C1 not C1 C2 not C2 R1 R2 R3 ? C1 C2 C1 C3 C2 C3 example involving three classes where this approach leads to regions of input space that are ambiguously classiﬁed.,Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,183,909,"An alternative is to introduce K(K −1)/2 binary discriminant functions, one for every possible pair of classes. This is known as a one-versus-one classiﬁer. Each point is then classiﬁed according to a majority vote amongst the discriminant func- tions. However, this too runs into the problem of ambiguous regions, as illustrated in the right-hand diagram of Figure 4.2.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,183,910,We can avoid these difﬁculties by considering a single K-class discriminant comprising K linear functions of the form yk(x) = wT k x + wk0 (4.9) and then assigning a point x to class Ck if yk(x) > yj(x) for all j ̸= k. The decision boundary between class Ck and class Cj is therefore given by yk(x) = yj(x) and hence corresponds to a (D −1)-dimensional hyperplane deﬁned by (wk −wj)Tx + (wk0 −wj0) = 0.,Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,183,911,"This has the same form as the decision boundary for the two-class case discussed in Section 4.1.1, and so analogous geometrical properties apply.",Multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,912,"Figure 4.3 Illustration of the decision regions for a mul- ticlass linear discriminant, with the decision boundaries shown in red.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,913,"The decision regions of such a discriminant are always singly connected and convex. To see this, consider two points xA and xB both of which lie inside decision region Rk, as illustrated in Figure 4.3. Any point x that lies on the line connecting xA and xB can be expressed in the form x = λxA + (1 −λ)xB (4.11) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION If two points xA and xB both lie inside the same decision re- gion Rk, then any point bx that lies on the line connecting these two points must also lie in Rk, and hence the decision region must be singly connected and convex.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,914,"where 0 ⩽λ ⩽1. From the linearity of the discriminant functions, it follows that yk(x) = λyk(xA) + (1 −λ)yk(xB).",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,915,"Because both xA and xB lie inside Rk, it follows that yk(xA) > yj(xA), and yk(xB) > yj(xB), for all j ̸= k, and hence yk(x) > yj(x), and so x also lies inside Rk. Thus Rk is singly connected and convex.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,916,"Note that for two classes, we can either employ the formalism discussed here, based on two discriminant functions y1(x) and y2(x), or else use the simpler but equivalent formulation described in Section 4.1.1 based on a single discriminant function y(x).",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,917,"We now explore three approaches to learning the parameters of linear discrimi- nant functions, based on least squares, Fisher’s linear discriminant, and the percep- tron algorithm.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,184,918,"In Chapter 3, we considered models that were linear functions of the parame- ters, and we saw that the minimization of a sum-of-squares error function led to a simple closed-form solution for the parameter values. It is therefore tempting to see if we can apply the same formalism to classiﬁcation problems. Consider a general classiﬁcation problem with K classes, with a 1-of-K binary coding scheme for the target vector t. One justiﬁcation for using least squares in such a context is that it approximates the conditional expectation E[t|x] of the target values given the input vector. For the binary coding scheme, this conditional expectation is given by the vector of posterior class probabilities. Unfortunately, however, these probabilities are typically approximated rather poorly, indeed the approximations can have values outside the range (0, 1), due to the limited ﬂexibility of a linear model as we shall see shortly.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,185,919,"Each class Ck is described by its own linear model so that yk(x) = wT k x + wk0 (4.13) where k = 1, . . . , K. We can conveniently group these together using vector nota- tion so that y(x) = , WTx (4.14) \end{verbatim} egin{verbatim} where , W is a matrix whose kth column comprises the D + 1-dimensional vector wk = (wk0, wT k )T and x is the corresponding augmented input vector (1, xT)T with a dummy input x0 = 1. This representation was discussed in detail in Section 3.1. A new input x is then assigned to the class for which the output yk = wT k x is largest.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,185,920,"We now determine the parameter matrix , W by minimizing a sum-of-squares error function, as we did for regression in Chapter 3. Consider a training data set {xn, tn} where n = 1, . . . , N, and deﬁne a matrix T whose nth row is the vector tT n, together with a matrix X whose nth row is xT n. The sum-of-squares error function can then be written as ED(, W) = 1 2Tr  (X, W −T)T(X, W −T)  .",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,185,921,"Setting the derivative with respect to , W to zero, and rearranging, we then obtain the solution for , W in the form , W = (XT X)−1 XTT = X†T (4.16) where X† is the pseudo-inverse of the matrix X, as discussed in Section 3.1.1. We then obtain the discriminant function in the form y(x) = , WTx = TT  X†T x.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,185,922,"An interesting property of least-squares solutions with multiple target variables is that if every target vector in the training set satisﬁes some linear constraint aTtn + b = 0 (4.18) for some constants a and b, then the model prediction for any value of x will satisfy the same constraint so that aTy(x) + b = 0.",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,185,923,"Thus if we use a 1-of-K coding scheme for K classes, then the predictions made by the model will have the property that the elements of y(x) will sum to 1 for any value of x. However, this summation constraint alone is not sufﬁcient to allow the model outputs to be interpreted as probabilities because they are not constrained to lie within the interval (0, 1).",Least squares for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,186,924,"Figure 4.4 The left plot shows data from two classes, denoted by red crosses and blue circles, together with the decision boundary found by least squares (magenta curve) and also by the logistic regression model (green curve), which is discussed later in Section 4.3.2. The right-hand plot shows the corresponding results obtained when extra data points are added at the bottom left of the diagram, showing that least squares is highly sensitive to outliers, unlike logistic regression.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,186,925,"The least-squares approach gives an exact closed-form solution for the discrimi- nant function parameters. However, even as a discriminant function (where we use it to make decisions directly and dispense with any probabilistic interpretation) it suf- fers from some severe problems. We have already seen that least-squares solutions lack robustness to outliers, and this applies equally to the classiﬁcation application, as illustrated in Figure 4.4. Here we see that the additional data points in the right- hand ﬁgure produce a signiﬁcant change in the location of the decision boundary, even though these point would be correctly classiﬁed by the original decision bound- ary in the left-hand ﬁgure. The sum-of-squares error function penalizes predictions that are ‘too correct’ in that they lie a long way on the correct side of the decision \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION −4 −2 0 2 4 6 8 −8 −6 −4 −2 0 2 4 −4 −2 0 2 4 6 8 −8 −6 −4 −2 0 2 4 boundary. In Section 7.1.2, we shall consider several alternative error functions for classiﬁcation and we shall see that they do not suffer from this difﬁculty.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,186,926,"However, problems with least squares can be more severe than simply lack of robustness, as illustrated in Figure 4.5. This shows a synthetic data set drawn from three classes in a two-dimensional input space (x1, x2), having the property that lin- ear decision boundaries can give excellent separation between the classes. Indeed, the technique of logistic regression, described later in this chapter, gives a satisfac- tory solution as seen in the right-hand plot. However, the least-squares solution gives poor results, with only a small region of the input space assigned to the green class.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,186,927,"The failure of least squares should not surprise us when we recall that it cor- responds to maximum likelihood under the assumption of a Gaussian conditional distribution, whereas binary target vectors clearly have a distribution that is far from Gaussian. By adopting more appropriate probabilistic models, we shall obtain clas- siﬁcation techniques with much better properties than least squares. For the moment, however, we continue to explore alternative nonprobabilistic methods for setting the parameters in the linear classiﬁcation models.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,186,928,One way to view a linear classiﬁcation model is in terms of dimensionality reduction.,Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,187,929,"Figure 4.5 Example of a synthetic data set comprising three classes, with training data points denoted in red (×), green (+), and blue (◦). Lines denote the decision boundaries, and the background colours denote the respective classes of the decision regions. On the left is the result of using a least-squares discriminant. We see that the region of input space assigned to the green class is too small and so most of the points from this class are misclassiﬁed. On the right is the result of using logistic regressions as described in Section 4.3.2 showing correct classiﬁcation of the training data.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,187,930,"Consider ﬁrst the case of two classes, and suppose we take the D- \end{verbatim} egin{verbatim} −6 −4 −2 0 2 4 6 −6 −4 −2 0 2 4 6 −6 −4 −2 0 2 4 6 −6 −4 −2 0 2 4 6 dimensional input vector x and project it down to one dimension using y = wTx.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,187,931,"If we place a threshold on y and classify y ⩾−w0 as class C1, and otherwise class C2, then we obtain our standard linear classiﬁer discussed in the previous section.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,187,932,"In general, the projection onto one dimension leads to a considerable loss of infor- mation, and classes that are well separated in the original D-dimensional space may become strongly overlapping in one dimension. However, by adjusting the com- ponents of the weight vector w, we can select a projection that maximizes the class separation. To begin with, consider a two-class problem in which there are N1 points of class C1 and N2 points of class C2, so that the mean vectors of the two classes are given by m1 = 1 N1  n ∈C1 xn, m2 = 1 N2  n ∈C2 xn.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,188,933,"Figure 4.6 The left plot shows samples from two classes (depicted in red and blue) along with the histograms resulting from projection onto the line joining the class means. Note that there is considerable class overlap in the projected space. The right plot shows the corresponding projection based on the Fisher linear discriminant, showing the greatly improved class separation.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,188,934,"The simplest measure of the separation of the classes, when projected onto w, is the separation of the projected class means. This suggests that we might choose w so as to maximize m2 −m1 = wT(m2 −m1) (4.22) where mk = wTmk (4.23) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION −2 2 6 −2 0 2 4 −2 2 6 −2 0 2 4 is the mean of the projected data from class Ck. However, this expression can be made arbitrarily large simply by increasing the magnitude of w.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,188,935,"problem, we could constrain w to have unit length, so that  i w2 i = 1. Using a Lagrange multiplier to perform the constrained maximization, we then ﬁnd that Appendix E w ∝(m2 −m1). There is still a problem with this approach, however, as illustrated in Figure 4.6. This shows two classes that are well separated in the original two- dimensional space (x1, x2) but that have considerable overlap when projected onto the line joining their means. This difﬁculty arises from the strongly nondiagonal covariances of the class distributions. The idea proposed by Fisher is to maximize a function that will give a large separation between the projected class means while also giving a small variance within each class, thereby minimizing the class overlap.",Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,188,936,The projection formula (4.20) transforms the set of labelled data points in x into a labelled set in the one-dimensional space y. The within-class variance of the transformed data from class Ck is therefore given by s2 k =  n∈Ck (yn −mk)2 (4.24) where yn = wTxn. We can deﬁne the total within-class variance for the whole data set to be simply s2 1 + s2 2. The Fisher criterion is deﬁned to be the ratio of the between-class variance to the within-class variance and is given by J(w) = (m2 −m1)2 s2 1 + s2 2 .,Fisher’s linear discriminant
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,937,"We can make the dependence on w explicit by using (4.20), (4.23), and (4.24) to rewrite the Fisher criterion in the form \end{verbatim} egin{verbatim} J(w) = wTSBw wTSWw (4.26) where SB is the between-class covariance matrix and is given by SB = (m2 −m1)(m2 −m1)T (4.27) and SW is the total within-class covariance matrix, given by SW =  n∈C1 (xn −m1)(xn −m1)T +  n∈C2 (xn −m2)(xn −m2)T.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,938,"Differentiating (4.26) with respect to w, we ﬁnd that J(w) is maximized when (wTSBw)SWw = (wTSWw)SBw.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,939,"From (4.27), we see that SBw is always in the direction of (m2−m1). Furthermore, we do not care about the magnitude of w, only its direction, and so we can drop the scalar factors (wTSBw) and (wTSWw). Multiplying both sides of (4.29) by S−1 W we then obtain w ∝S−1 W (m2 −m1).",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,940,"Note that if the within-class covariance is isotropic, so that SW is proportional to the unit matrix, we ﬁnd that w is proportional to the difference of the class means, as discussed above.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,941,"The result (4.30) is known as Fisher’s linear discriminant, although strictly it is not a discriminant but rather a speciﬁc choice of direction for projection of the data down to one dimension. However, the projected data can subsequently be used to construct a discriminant, by choosing a threshold y0 so that we classify a new point as belonging to C1 if y(x) ⩾y0 and classify it as belonging to C2 otherwise.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,942,"For example, we can model the class-conditional densities p(y|Ck) using Gaussian distributions and then use the techniques of Section 1.2.4 to ﬁnd the parameters of the Gaussian distributions by maximum likelihood. Having found Gaussian ap- proximations to the projected classes, the formalism of Section 1.5.1 then gives an expression for the optimal threshold. Some justiﬁcation for the Gaussian assumption comes from the central limit theorem by noting that y = wTx is the sum of a set of random variables.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,189,943,"The least-squares approach to the determination of a linear discriminant was based on the goal of making the model predictions as close as possible to a set of target values. By contrast, the Fisher criterion was derived by requiring maximum class separation in the output space. It is interesting to see the relationship between these two approaches. In particular, we shall show that, for the two-class problem, the Fisher criterion can be obtained as a special case of least squares.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,190,944,"So far we have considered 1-of-K coding for the target values. If, however, we adopt a slightly different target coding scheme, then the least-squares solution for \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION the weights becomes equivalent to the Fisher solution (Duda and Hart, 1973). In particular, we shall take the targets for class C1 to be N/N1, where N1 is the number of patterns in class C1, and N is the total number of patterns. This target value approximates the reciprocal of the prior probability for class C1. For class C2, we shall take the targets to be −N/N2, where N2 is the number of patterns in class C2.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,190,945,The sum-of-squares error function can be written E = 1 2 N  n=1 wTxn + w0 −tn 2 .,Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,190,946,"Setting the derivatives of E with respect to w0 and w to zero, we obtain respectively N  n=1 wTxn + w0 −tn = 0 (4.32) N  n=1 wTxn + w0 −tn xn = 0.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,190,947,"From (4.32), and making use of our choice of target coding scheme for the tn, we obtain an expression for the bias in the form w0 = −wTm (4.34) where we have used N  n=1 tn = N1 N N1 −N2 N N2 = 0 (4.35) and where m is the mean of the total data set and is given by m = 1 N N  n=1 xn = 1 N (N1m1 + N2m2).",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,190,948,"After some straightforward algebra, and again making use of the choice of tn, the second equation (4.33) becomes  SW + N1N2 N SB  w = N(m1 −m2) (4.37) where SW is deﬁned by (4.28), SB is deﬁned by (4.27), and we have substituted for the bias using (4.34). Using (4.27), we note that SBw is always in the direction of (m2 −m1). Thus we can write w ∝S−1 W (m2 −m1) (4.38) where we have ignored irrelevant scale factors. Thus the weight vector coincides with that found from the Fisher criterion. In addition, we have also found an expres- sion for the bias value w0 given by (4.34). This tells us that a new vector x should be classiﬁed as belonging to class C1 if y(x) = wT(x−m) > 0 and class C2 otherwise.",Relation to least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,191,949,"We now consider the generalization of the Fisher discriminant to K > 2 classes, and we shall assume that the dimensionality D of the input space is greater than the number K of classes. Next, we introduce D′ > 1 linear ‘features’ yk = wT k x, where k = 1, . . . , D′. These feature values can conveniently be grouped together to form a vector y. Similarly, the weight vectors {wk} can be considered to be the columns of a matrix W, so that y = WTx.",Fisher’s discriminant for multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,191,950,"Note that again we are not including any bias parameters in the deﬁnition of y. The generalization of the within-class covariance matrix to the case of K classes follows from (4.28) to give SW = K  k=1 Sk (4.40) where Sk =  n∈Ck (xn −mk)(xn −mk)T (4.41) mk = 1 Nk  n∈Ck xn (4.42) and Nk is the number of patterns in class Ck. In order to ﬁnd a generalization of the between-class covariance matrix, we follow Duda and Hart (1973) and consider ﬁrst the total covariance matrix ST = N  n=1 (xn −m)(xn −m)T (4.43) where m is the mean of the total data set m = 1 N N  n=1 xn = 1 N K  k=1 Nkmk (4.44) and N =  k Nk is the total number of data points. The total covariance matrix can be decomposed into the sum of the within-class covariance matrix, given by (4.40) and (4.41), plus an additional matrix SB, which we identify as a measure of the between-class covariance ST = SW + SB (4.45) where SB = K  k=1 Nk(mk −m)(mk −m)T.",Fisher’s discriminant for multiple classes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,192,951,"4. LINEAR MODELS FOR CLASSIFICATION These covariance matrices have been deﬁned in the original x-space. We can now deﬁne similar matrices in the projected D′-dimensional y-space sW = K  k=1  n∈Ck (yn −µk)(yn −µk)T (4.47) and sB = K  k=1 Nk(µk −µ)(µk −µ)T (4.48) where µk = 1 Nk  n∈Ck yn, µ = 1 N K  k=1 Nkµk.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,192,952,"Again we wish to construct a scalar that is large when the between-class covariance is large and when the within-class covariance is small. There are now many possible choices of criterion (Fukunaga, 1990). One example is given by J(W) = Tr  s−1 W sB  .",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,192,953,This criterion can then be rewritten as an explicit function of the projection matrix W in the form J(w) = Tr  (WSWWT)−1(WSBWT) .,The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,192,954,"Maximization of such criteria is straightforward, though somewhat involved, and is discussed at length in Fukunaga (1990). The weight values are determined by those eigenvectors of S−1 W SB that correspond to the D′ largest eigenvalues.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,192,955,"There is one important result that is common to all such criteria, which is worth emphasizing. We ﬁrst note from (4.46) that SB is composed of the sum of K ma- trices, each of which is an outer product of two vectors and therefore of rank 1. In addition, only (K −1) of these matrices are independent as a result of the constraint (4.44). Thus, SB has rank at most equal to (K −1) and so there are at most (K −1) nonzero eigenvalues. This shows that the projection onto the (K −1)-dimensional subspace spanned by the eigenvectors of SB does not alter the value of J(w), and so we are therefore unable to ﬁnd more than (K −1) linear ‘features’ by this means (Fukunaga, 1990).",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,956,"Another example of a linear discriminant model is the perceptron of Rosenblatt (1962), which occupies an important place in the history of pattern recognition al- gorithms. It corresponds to a two-class model in which the input vector x is ﬁrst transformed using a ﬁxed nonlinear transformation to give a feature vector φ(x), and this is then used to construct a generalized linear model of the form y(x) = f wTφ(x) (4.52) \end{verbatim} egin{verbatim} where the nonlinear activation function f(·) is given by a step function of the form f(a) = +1, a ⩾0 −1, a < 0.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,957,"The vector φ(x) will typically include a bias component φ0(x) = 1. In earlier discussions of two-class classiﬁcation problems, we have focussed on a target coding scheme in which t ∈{0, 1}, which is appropriate in the context of probabilistic models. For the perceptron, however, it is more convenient to use target values t = +1 for class C1 and t = −1 for class C2, which matches the choice of activation function.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,958,"The algorithm used to determine the parameters w of the perceptron can most easily be motivated by error function minimization. A natural choice of error func- tion would be the total number of misclassiﬁed patterns. However, this does not lead to a simple learning algorithm because the error is a piecewise constant function of w, with discontinuities wherever a change in w causes the decision boundary to move across one of the data points. Methods based on changing w using the gradi- ent of the error function cannot then be applied, because the gradient is zero almost everywhere.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,959,"We therefore consider an alternative error function known as the perceptron cri- terion. To derive this, we note that we are seeking a weight vector w such that patterns xn in class C1 will have wTφ(xn) > 0, whereas patterns xn in class C2 have wTφ(xn) < 0. Using the t ∈{−1, +1} target coding scheme it follows that we would like all patterns to satisfy wTφ(xn)tn > 0. The perceptron criterion associates zero error with any pattern that is correctly classiﬁed, whereas for a mis- classiﬁed pattern xn it tries to minimize the quantity −wTφ(xn)tn. The perceptron criterion is therefore given by EP(w) = −  n∈M wTφntn (4.54) Frank Rosenblatt 1928–1969 Rosenblatt’s perceptron played an important role in the history of ma- chine learning. Initially, Rosenblatt simulated the perceptron on an IBM 704 computer at Cornell in 1957, but by the early 1960s he had built special-purpose hardware that provided a direct, par- allel implementation of perceptron learning. Many of his ideas were encapsulated in “Principles of Neuro- dynamics: Perceptrons and the Theory of Brain Mech- anisms” published in 1962.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,960,"criticized by Marvin Minksy, whose objections were published in the book “Perceptrons”, co-authored with Seymour Papert.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,961,This book was widely misinter- preted at the time as showing that neural networks were fatally ﬂawed and could only learn solutions for linearly separable problems.,The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,193,962,"In fact, it only proved such limitations in the case of single-layer networks such as the perceptron and merely conjectured (in- correctly) that they applied to more general network models. Unfortunately, however, this book contributed to the substantial decline in research funding for neu- ral computing, a situation that was not reversed un- til the mid-1980s. Today, there are many hundreds, if not thousands, of applications of neural networks in widespread use, with examples in areas such as handwriting recognition and information retrieval be- ing used routinely by millions of people.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,963,4. LINEAR MODELS FOR CLASSIFICATION where M denotes the set of all misclassiﬁed patterns. The contribution to the error associated with a particular misclassiﬁed pattern is a linear function of w in regions of w space where the pattern is misclassiﬁed and zero in regions where it is correctly classiﬁed. The total error function is therefore piecewise linear.,The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,964,"We now apply the stochastic gradient descent algorithm to this error function. The change in the weight vector w is then given by w(τ+1) = w(τ) −η∇EP(w) = w(τ) + ηφntn (4.55) where η is the learning rate parameter and τ is an integer that indexes the steps of the algorithm. Because the perceptron function y(x, w) is unchanged if we multiply w by a constant, we can set the learning rate parameter η equal to 1 without of generality. Note that, as the weight vector evolves during training, the set of patterns that are misclassiﬁed will change.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,965,"The perceptron learning algorithm has a simple interpretation, as follows. We cycle through the training patterns in turn, and for each pattern xn we evaluate the perceptron function (4.52). If the pattern is correctly classiﬁed, then the weight vector remains unchanged, whereas if it is incorrectly classiﬁed, then for class C1 we add the vector φ(xn) onto the current estimate of weight vector w while for class C2 we subtract the vector φ(xn) from w. The perceptron learning algorithm is illustrated in Figure 4.7.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,966,"If we consider the effect of a single update in the perceptron learning algorithm, we see that the contribution to the error from a misclassiﬁed pattern will be reduced because from (4.55) we have −w(τ+1)Tφntn = −w(τ)Tφntn −(φntn)Tφntn < −w(τ)Tφntn (4.56) where we have set η = 1, and made use of ∥φntn∥2 > 0. Of course, this does not imply that the contribution to the error function from the other misclassiﬁed patterns will have been reduced. Furthermore, the change in weight vector may have caused some previously correctly classiﬁed patterns to become misclassiﬁed. Thus the perceptron learning rule is not guaranteed to reduce the total error function at each stage.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,967,"However, the perceptron convergence theorem states that if there exists an ex- act solution (in other words, if the training data set is linearly separable), then the perceptron learning algorithm is guaranteed to ﬁnd an exact solution in a ﬁnite num- ber of steps. Proofs of this theorem can be found for example in Rosenblatt (1962), Block (1962), Nilsson (1965), Minsky and Papert (1969), Hertz et al. (1991), and Bishop (1995a). Note, however, that the number of steps required to achieve con- vergence could still be substantial, and in practice, until convergence is achieved, we will not be able to distinguish between a nonseparable problem and one that is simply slow to converge.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,194,968,"Even when the data set is linearly separable, there may be many solutions, and which one is found will depend on the initialization of the parameters and on the or- der of presentation of the data points. Furthermore, for data sets that are not linearly separable, the perceptron learning algorithm will never converge.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,195,969,"Figure 4.7 Illustration of the convergence of the perceptron learning algorithm, showing data points from two classes (red and blue) in a two-dimensional feature space (φ1, φ2). The top left plot shows the initial parameter vector w shown as a black arrow together with the corresponding decision boundary (black line), in which the arrow points towards the decision region which classiﬁed as belonging to the red class. The data point circled in green is misclassiﬁed and so its feature vector is added to the current weight vector, giving the new decision boundary shown in the top right plot. The bottom left plot shows the next misclassiﬁed point to be considered, indicated by the green circle, and its feature vector is again added to the weight vector giving the decision boundary shown in the bottom right plot for which all data points are correctly classiﬁed.",The perceptron algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,196,970,"Figure 4.8 Illustration of the Mark 1 perceptron hardware. The photograph on the left shows how the inputs were obtained using a simple camera system in which an input scene, in this case a printed character, was illuminated by powerful lights, and an image focussed onto a 20 × 20 array of cadmium sulphide photocells, giving a primitive 400 pixel image. The perceptron also had a patch board, shown in the middle photograph, which allowed different conﬁgurations of input features to be tried. Often these were wired up at random to demonstrate the ability of the perceptron to learn without the need for precise wiring, in contrast to a modern digital computer. The photograph on the right shows one of the racks of adaptive weights. Each weight was implemented using a rotary variable resistor, also called a potentiometer, driven by an electric motor thereby allowing the value of the weight to be adjusted automatically by the learning algorithm.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,196,971,"4. LINEAR MODELS FOR CLASSIFICATION Aside from difﬁculties with the learning algorithm, the perceptron does not pro- vide probabilistic outputs, nor does it generalize readily to K > 2 classes. The most important limitation, however, arises from the fact that (in common with all of the models discussed in this chapter and the previous one) it is based on linear com- binations of ﬁxed basis functions. More detailed discussions of the limitations of perceptrons can be found in Minsky and Papert (1969) and Bishop (1995a).",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,196,972,"Analogue hardware implementations of the perceptron were built by Rosenblatt, based on motor-driven variable resistors to implement the adaptive parameters wj.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,196,973,"These are illustrated in Figure 4.8. The inputs were obtained from a simple camera system based on an array of photo-sensors, while the basis functions φ could be chosen in a variety of ways, for example based on simple ﬁxed functions of randomly chosen subsets of pixels from the input image. Typical applications involved learning to discriminate simple shapes or characters.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,196,974,"At the same time that the perceptron was being developed, a closely related system called the adaline, which is short for ‘adaptive linear element’, was being explored by Widrow and co-workers. The functional form of the model was the same as for the perceptron, but a different approach to training was adopted (Widrow and Hoff, 1960; Widrow and Lehr, 1990).",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,197,975,"Figure 4.9 Plot of the logistic sigmoid function σ(a) deﬁned by (4.59), shown in red, together with the scaled pro- bit function Φ(λa), for λ2 = π/8, shown in dashed blue, where Φ(a) is deﬁned by (4.114).",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,197,976,"We turn next to a probabilistic view of classiﬁcation and show how models with linear decision boundaries arise from simple assumptions about the distribution of the data. In Section 1.5.4, we discussed the distinction between the discriminative and the generative approaches to classiﬁcation. Here we shall adopt a generative \end{verbatim} egin{verbatim} The scal- ing factor π/8 is chosen so that the derivatives of the two curves are equal for a = 0.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,197,977,"approach in which we model the class-conditional densities p(x|Ck), as well as the class priors p(Ck), and then use these to compute posterior probabilities p(Ck|x) through Bayes’ theorem.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,197,978,"Consider ﬁrst of all the case of two classes. The posterior probability for class C1 can be written as p(C1|x) = p(x|C1)p(C1) p(x|C1)p(C1) + p(x|C2)p(C2) = 1 1 + exp(−a) = σ(a) (4.57) where we have deﬁned a = ln p(x|C1)p(C1) p(x|C2)p(C2) (4.58) and σ(a) is the logistic sigmoid function deﬁned by σ(a) = 1 1 + exp(−a) (4.59) which is plotted in Figure 4.9. The term ‘sigmoid’ means S-shaped. This type of function is sometimes also called a ‘squashing function’ because it maps the whole real axis into a ﬁnite interval. The logistic sigmoid has been encountered already in earlier chapters and plays an important role in many classiﬁcation algorithms. It satisﬁes the following symmetry property σ(−a) = 1 −σ(a) (4.60) as is easily veriﬁed. The inverse of the logistic sigmoid is given by a = ln  σ 1 −σ  (4.61) and is known as the logit function. It represents the log of the ratio of probabilities ln [p(C1|x)/p(C2|x)] for the two classes, also known as the log odds.",Probabilistic Generative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,979,"4. LINEAR MODELS FOR CLASSIFICATION Note that in (4.57) we have simply rewritten the posterior probabilities in an equivalent form, and so the appearance of the logistic sigmoid may seem rather vac- uous. However, it will have signiﬁcance provided a(x) takes a simple functional form. We shall shortly consider situations in which a(x) is a linear function of x, in which case the posterior probability is governed by a generalized linear model.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,980,"For the case of K > 2 classes, we have p(Ck|x) = p(x|Ck)p(Ck)  j p(x|Cj)p(Cj) = exp(ak)  j exp(aj) (4.62) which is known as the normalized exponential and can be regarded as a multiclass generalization of the logistic sigmoid. Here the quantities ak are deﬁned by ak = ln p(x|Ck)p(Ck).",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,981,"The normalized exponential is also known as the softmax function, as it represents a smoothed version of the ‘max’ function because, if ak ≫aj for all j ̸= k, then p(Ck|x) ≃1, and p(Cj|x) ≃0.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,982,"We now investigate the consequences of choosing speciﬁc forms for the class- conditional densities, looking ﬁrst at continuous input variables x and then dis- cussing brieﬂy the case of discrete inputs.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,983,"Let us assume that the class-conditional densities are Gaussian and then explore the resulting form for the posterior probabilities. To start with, we shall assume that all classes share the same covariance matrix. Thus the density for class Ck is given by p(x|Ck) = 1 (2π)D/2 1 |Σ|1/2 exp −1 2(x −µk)TΣ−1(x −µk) .",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,198,984,"Consider ﬁrst the case of two classes. From (4.57) and (4.58), we have p(C1|x) = σ(wTx + w0) (4.65) where we have deﬁned w = Σ−1(µ1 −µ2) (4.66) w0 = −1 2µT 1 Σ−1µ1 + 1 2µT 2 Σ−1µ2 + ln p(C1) p(C2).",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,985,"Figure 4.10 The left-hand plot shows the class-conditional densities for two classes, denoted red and blue.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,986,"We see that the quadratic terms in x from the exponents of the Gaussian densities have cancelled (due to the assumption of common covariance matrices) leading to a linear function of x in the argument of the logistic sigmoid. This result is illus- trated for the case of a two-dimensional input space x in Figure 4.10. The resulting \end{verbatim} egin{verbatim} On the right is the corresponding posterior probability p(C1|x), which is given by a logistic sigmoid of a linear function of x. The surface in the right-hand plot is coloured using a proportion of red ink given by p(C1|x) and a proportion of blue ink given by p(C2|x) = 1 −p(C1|x).",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,987,"decision boundaries correspond to surfaces along which the posterior probabilities p(Ck|x) are constant and so will be given by linear functions of x, and therefore the decision boundaries are linear in input space. The prior probabilities p(Ck) enter only through the bias parameter w0 so that changes in the priors have the effect of making parallel shifts of the decision boundary and more generally of the parallel contours of constant posterior probability.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,988,"For the general case of K classes we have, from (4.62) and (4.63), ak(x) = wT k x + wk0 (4.68) where we have deﬁned wk = Σ−1µk (4.69) wk0 = −1 2µT k Σ−1µk + ln p(Ck).",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,989,"We see that the ak(x) are again linear functions of x as a consequence of the cancel- lation of the quadratic terms due to the shared covariances. The resulting decision boundaries, corresponding to the minimum misclassiﬁcation rate, will occur when two of the posterior probabilities (the two largest) are equal, and so will be deﬁned by linear functions of x, and so again we have a generalized linear model.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,199,990,"If we relax the assumption of a shared covariance matrix and allow each class- conditional density p(x|Ck) to have its own covariance matrix Σk, then the earlier cancellations will no longer occur, and we will obtain quadratic functions of x, giv- ing rise to a quadratic discriminant. The linear and quadratic decision boundaries are illustrated in Figure 4.11.",Continuous inputs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,200,991,"Figure 4.11 The left-hand plot shows the class-conditional densities for three classes each having a Gaussian distribution, coloured red, green, and blue, in which the red and green classes have the same covariance matrix.",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,200,992,"4. LINEAR MODELS FOR CLASSIFICATION −2 −1 0 1 2 −2.5 −2 −1.5 −1 −0.5 0 0.5 1 1.5 2 2.5 The right-hand plot shows the corresponding posterior probabilities, in which the RGB colour vector represents the posterior probabilities for the respective three classes. The decision boundaries are also shown. Notice that the boundary between the red and green classes, which have the same covariance matrix, is linear, whereas those between the other pairs of classes are quadratic.",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,200,993,"Once we have speciﬁed a parametric functional form for the class-conditional densities p(x|Ck), we can then determine the values of the parameters, together with the prior class probabilities p(Ck), using maximum likelihood. This requires a data set comprising observations of x along with their corresponding class labels.",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,200,994,"Consider ﬁrst the case of two classes, each having a Gaussian class-conditional density with a shared covariance matrix, and suppose we have a data set {xn, tn} where n = 1, . . . , N. Here tn = 1 denotes class C1 and tn = 0 denotes class C2. We denote the prior class probability p(C1) = π, so that p(C2) = 1 −π. For a data point xn from class C1, we have tn = 1 and hence p(xn, C1) = p(C1)p(xn|C1) = πN(xn|µ1, Σ).",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,200,995,"Similarly for class C2, we have tn = 0 and hence p(xn, C2) = p(C2)p(xn|C2) = (1 −π)N(xn|µ2, Σ).",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,201,996,"Thus the likelihood function is given by p(t|π, µ1, µ2, Σ) = N  n=1 [πN(xn|µ1, Σ)]tn [(1 −π)N(xn|µ2, Σ)]1−tn (4.71) where t = (t1, . . . , tN)T. As usual, it is convenient to maximize the log of the likelihood function. Consider ﬁrst the maximization with respect to π. The terms in \end{verbatim} egin{verbatim} the log likelihood function that depend on π are N  n=1 {tn ln π + (1 −tn) ln(1 −π)} .",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,201,997,"Setting the derivative with respect to π equal to zero and rearranging, we obtain π = 1 N N  n=1 tn = N1 N = N1 N1 + N2 (4.73) where N1 denotes the total number of data points in class C1, and N2 denotes the total number of data points in class C2. Thus the maximum likelihood estimate for π is simply the fraction of points in class C1 as expected. This result is easily generalized to the multiclass case where again the maximum likelihood estimate of the prior probability associated with class Ck is given by the fraction of the training set points assigned to that class.",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,201,998,"Now consider the maximization with respect to µ1. Again we can pick out of the log likelihood function those terms that depend on µ1 giving N  n=1 tn ln N(xn|µ1, Σ) = −1 2 N  n=1 tn(xn −µ1)TΣ−1(xn −µ1) + const. (4.74) Setting the derivative with respect to µ1 to zero and rearranging, we obtain µ1 = 1 N1 N  n=1 tnxn (4.75) which is simply the mean of all the input vectors xn assigned to class C1. By a similar argument, the corresponding result for µ2 is given by µ2 = 1 N2 N  n=1 (1 −tn)xn (4.76) which again is the mean of all the input vectors xn assigned to class C2.",Maximum likelihood solution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,202,999,"Finally, consider the maximum likelihood solution for the shared covariance matrix Σ. Picking out the terms in the log likelihood function that depend on Σ, we have −1 2 N  n=1 tn ln |Σ| −1 2 N  n=1 tn(xn −µ1)TΣ−1(xn −µ1) −1 2 N  n=1 (1 −tn) ln |Σ| −1 2 N  n=1 (1 −tn)(xn −µ2)TΣ−1(xn −µ2) = −N 2 ln |Σ| −N 2 Tr  Σ−1S  (4.77) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION where we have deﬁned S = N1 N S1 + N2 N S2 (4.78) S1 = 1 N1  n∈C1 (xn −µ1)(xn −µ1)T (4.79) S2 = 1 N2  n∈C2 (xn −µ2)(xn −µ2)T.",Discrete features
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,202,1000,"Using the standard result for the maximum likelihood solution for a Gaussian distri- bution, we see that Σ = S, which represents a weighted average of the covariance matrices associated with each of the two classes separately.",Discrete features
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,202,1001,"This result is easily extended to the K class problem to obtain the corresponding maximum likelihood solutions for the parameters in which each class-conditional density is Gaussian with a shared covariance matrix. Note that the approach of ﬁtting Gaussian distributions to the classes is not robust to outliers, because the maximum likelihood estimation of a Gaussian is not robust.",Discrete features
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,202,1002,"Let us now consider the case of discrete feature values xi. For simplicity, we begin by looking at binary feature values xi ∈{0, 1} and discuss the extension to more general discrete features shortly. If there are D inputs, then a general distribu- tion would correspond to a table of 2D numbers for each class, containing 2D −1 independent variables (due to the summation constraint). Because this grows expo- nentially with the number of features, we might seek a more restricted representa- tion. Here we will make the naive Bayes assumption in which the feature values are treated as independent, conditioned on the class Ck. Thus we have class-conditional distributions of the form p(x|Ck) = D  i=1 µxi ki(1 −µki)1−xi (4.81) which contain D independent parameters for each class. Substituting into (4.63) then gives ak(x) = D  i=1 {xi ln µki + (1 −xi) ln(1 −µki)} + ln p(Ck) (4.82) which again are linear functions of the input values xi. For the case of K = 2 classes, we can alternatively consider the logistic sigmoid formulation given by (4.57). Anal- ogous results are obtained for discrete variables each of which can take M > 2 states.",Discrete features
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1003,"As we have seen, for both Gaussian distributed and discrete inputs, the posterior class probabilities are given by generalized linear models with logistic sigmoid (K = \end{verbatim} egin{verbatim} 2 classes) or softmax (K ⩾2 classes) activation functions. These are particular cases of a more general result obtained by assuming that the class-conditional densities p(x|Ck) are members of the exponential family of distributions.",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1004,"Using the form (2.194) for members of the exponential family, we see that the distribution of x can be written in the form p(x|λk) = h(x)g(λk) exp  λT k u(x) .",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1005,"We now restrict attention to the subclass of such distributions for which u(x) = x. Then we make use of (2.236) to introduce a scaling parameter s, so that we obtain the restricted set of exponential family class-conditional densities of the form p(x|λk, s) = 1 sh 1 sx  g(λk) exp 1 sλT k x .",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1006,Note that we are allowing each class to have its own parameter vector λk but we are assuming that the classes share the same scale parameter s.,Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1007,"For the two-class problem, we substitute this expression for the class-conditional densities into (4.58) and we see that the posterior class probability is again given by a logistic sigmoid acting on a linear function a(x) which is given by a(x) = (λ1 −λ2)Tx + ln g(λ1) −ln g(λ2) + ln p(C1) −ln p(C2).",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1008,"Similarly, for the K-class problem, we substitute the class-conditional density ex- pression into (4.63) to give ak(x) = λT k x + ln g(λk) + ln p(Ck) (4.86) and so again is a linear function of x.",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1009,"For the two-class classiﬁcation problem, we have seen that the posterior probability of class C1 can be written as a logistic sigmoid acting on a linear function of x, for a wide choice of class-conditional distributions p(x|Ck). Similarly, for the multiclass case, the posterior probability of class Ck is given by a softmax transformation of a linear function of x. For speciﬁc choices of the class-conditional densities p(x|Ck), we have used maximum likelihood to determine the parameters of the densities as well as the class priors p(Ck) and then used Bayes’ theorem to ﬁnd the posterior class probabilities.",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,203,1010,"However, an alternative approach is to use the functional form of the generalized linear model explicitly and to determine its parameters directly by using maximum likelihood. We shall see that there is an efﬁcient algorithm ﬁnding such solutions known as iterative reweighted least squares, or IRLS.",Probabilistic Discriminative Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,204,1011,"Figure 4.12 Illustration of the role of nonlinear basis functions in linear classiﬁcation models. The left plot shows the original input space (x1, x2) together with data points from two classes labelled red and blue. Two ‘Gaussian’ basis functions φ1(x) and φ2(x) are deﬁned in this space with centres shown by the green crosses and with contours shown by the green circles. The right-hand plot shows the corresponding feature space (φ1, φ2) together with the linear decision boundary obtained given by a logistic regression model of the form discussed in Section 4.3.2.",Fixed basis functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,204,1012,"The indirect approach to ﬁnding the parameters of a generalized linear model, by ﬁtting class-conditional densities and class priors separately and then applying \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION x1 x2 −1 0 1 −1 0 1 φ1 φ2 0 0.5 1 0 0.5 1 This corresponds to a nonlinear decision boundary in the original input space, shown by the black curve in the left-hand plot.",Fixed basis functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,204,1013,"Bayes’ theorem, represents an example of generative modelling, because we could take such a model and generate synthetic data by drawing values of x from the marginal distribution p(x). In the direct approach, we are maximizing a likelihood function deﬁned through the conditional distribution p(Ck|x), which represents a form of discriminative training. One advantage of the discriminative approach is that there will typically be fewer adaptive parameters to be determined, as we shall see shortly. It may also lead to improved predictive performance, particularly when the class-conditional density assumptions give a poor approximation to the true dis- tributions.",Fixed basis functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1014,"So far in this chapter, we have considered classiﬁcation models that work di- rectly with the original input vector x. However, all of the algorithms are equally applicable if we ﬁrst make a ﬁxed nonlinear transformation of the inputs using a vector of basis functions φ(x). The resulting decision boundaries will be linear in the feature space φ, and these correspond to nonlinear decision boundaries in the original x space, as illustrated in Figure 4.12. Classes that are linearly separable in the feature space φ(x) need not be linearly separable in the original observation space x. Note that as in our discussion of linear models for regression, one of the \end{verbatim} egin{verbatim} basis functions is typically set to a constant, say φ0(x) = 1, so that the correspond- ing parameter w0 plays the role of a bias. For the remainder of this chapter, we shall include a ﬁxed basis function transformation φ(x), as this will highlight some useful similarities to the regression models discussed in Chapter 3.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1015,"For many problems of practical interest, there is signiﬁcant overlap between the class-conditional densities p(x|Ck). This corresponds to posterior probabilities p(Ck|x), which, for at least some values of x, are not 0 or 1. In such cases, the opti- mal solution is obtained by modelling the posterior probabilities accurately and then applying standard decision theory, as discussed in Chapter 1. Note that nonlinear transformations φ(x) cannot remove such class overlap. Indeed, they can increase the level of overlap, or create overlap where none existed in the original observation space. However, suitable choices of nonlinearity can make the process of modelling the posterior probabilities easier.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1016,"Such ﬁxed basis function models have important limitations, and these will be resolved in later chapters by allowing the basis functions themselves to adapt to the data. Notwithstanding these limitations, models with ﬁxed nonlinear basis functions play an important role in applications, and a discussion of such models will intro- duce many of the key concepts needed for an understanding of their more complex counterparts.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1017,"We begin our treatment of generalized linear models by considering the problem of two-class classiﬁcation. In our discussion of generative approaches in Section 4.2, we saw that under rather general assumptions, the posterior probability of class C1 can be written as a logistic sigmoid acting on a linear function of the feature vector φ so that p(C1|φ) = y(φ) = σ wTφ (4.87) with p(C2|φ) = 1 −p(C1|φ). Here σ(·) is the logistic sigmoid function deﬁned by (4.59). In the terminology of statistics, this model is known as logistic regression, although it should be emphasized that this is a model for classiﬁcation rather than regression.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1018,"For an M-dimensional feature space φ, this model has M adjustable parameters. By contrast, if we had ﬁtted Gaussian class conditional densities using maximum likelihood, we would have used 2M parameters for the means and M(M + 1)/2 parameters for the (shared) covariance matrix. Together with the class prior p(C1), this gives a total of M(M +5)/2+1 parameters, which grows quadratically with M, in contrast to the linear dependence on M of the number of parameters in logistic regression. For large values of M, there is a clear advantage in working with the logistic regression model directly.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,205,1019,"We now use maximum likelihood to determine the parameters of the logistic regression model. To do this, we shall make use of the derivative of the logistic sig- moid function, which can conveniently be expressed in terms of the sigmoid function itself dσ da = σ(1 −σ).",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,206,1020,"4. LINEAR MODELS FOR CLASSIFICATION For a data set {φn, tn}, where tn ∈{0, 1} and φn = φ(xn), with n = 1, . . . , N, the likelihood function can be written p(t|w) = N  n=1 ytn n {1 −yn}1−tn (4.89) where t = (t1, . . . , tN)T and yn = p(C1|φn). As usual, we can deﬁne an error function by taking the negative logarithm of the likelihood, which gives the cross- entropy error function in the form E(w) = −ln p(t|w) = − N  n=1 {tn ln yn + (1 −tn) ln(1 −yn)} (4.90) where yn = σ(an) and an = wTφn. Taking the gradient of the error function with respect to w, we obtain ∇E(w) = N  n=1 (yn −tn)φn (4.91) where we have made use of (4.88). We see that the factor involving the derivative of the logistic sigmoid has cancelled, leading to a simpliﬁed form for the gradient of the log likelihood. In particular, the contribution to the gradient from data point n is given by the ‘error’ yn −tn between the target value and the prediction of the model, times the basis function vector φn. Furthermore, comparison with (3.13) shows that this takes precisely the same form as the gradient of the sum-of-squares error function for the linear regression model.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,206,1021,"If desired, we could make use of the result (4.91) to give a sequential algorithm in which patterns are presented one at a time, in which each of the weight vectors is updated using (3.22) in which ∇En is the nth term in (4.91).",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,206,1022,"It is worth noting that maximum likelihood can exhibit severe over-ﬁtting for data sets that are linearly separable. This arises because the maximum likelihood so- lution occurs when the hyperplane corresponding to σ = 0.5, equivalent to wTφ = 0, separates the two classes and the magnitude of w goes to inﬁnity. In this case, the logistic sigmoid function becomes inﬁnitely steep in feature space, corresponding to a Heaviside step function, so that every training point from each class k is assigned a posterior probability p(Ck|x) = 1. Furthermore, there is typically a continuum of such solutions because any separating hyperplane will give rise to the same pos- terior probabilities at the training data points, as will be seen later in Figure 10.13.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,206,1023,"Maximum likelihood provides no way to favour one such solution over another, and which solution is found in practice will depend on the choice of optimization algo- rithm and on the parameter initialization. Note that the problem will arise even if the number of data points is large compared with the number of parameters in the model, so long as the training data set is linearly separable. The singularity can be avoided by inclusion of a prior and ﬁnding a MAP solution for w, or equivalently by adding a regularization term to the error function.",Logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,207,1024,"In the case of the linear regression models discussed in Chapter 3, the maxi- mum likelihood solution, on the assumption of a Gaussian noise model, leads to a closed-form solution. This was a consequence of the quadratic dependence of the log likelihood function on the parameter vector w. For logistic regression, there is no longer a closed-form solution, due to the nonlinearity of the logistic sigmoid function. However, the departure from a quadratic form is not substantial. To be precise, the error function is concave, as we shall see shortly, and hence has a unique minimum. Furthermore, the error function can be minimized by an efﬁcient iterative technique based on the Newton-Raphson iterative optimization scheme, which uses a local quadratic approximation to the log likelihood function. The Newton-Raphson update, for minimizing a function E(w), takes the form (Fletcher, 1987; Bishop and Nabney, 2008) w(new) = w(old) −H−1∇E(w).",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,207,1025,where H is the Hessian matrix whose elements comprise the second derivatives of E(w) with respect to the components of w.,Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,207,1026,"Let us ﬁrst of all apply the Newton-Raphson method to the linear regression model (3.3) with the sum-of-squares error function (3.12). The gradient and Hessian of this error function are given by ∇E(w) = N  n=1 (wTφn −tn)φn = ΦTΦw −ΦTt (4.93) H = ∇∇E(w) = N  n=1 φnφT n = ΦTΦ (4.94) where Φ is the N × M design matrix, whose nth row is given by φT n. The Newton- Raphson update then takes the form w(new) = w(old) −(ΦTΦ)−1  ΦTΦw(old) −ΦTt = (ΦTΦ)−1ΦTt (4.95) which we recognize as the standard least-squares solution. Note that the error func- tion in this case is quadratic and hence the Newton-Raphson formula gives the exact solution in one step.",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,208,1027,"Now let us apply the Newton-Raphson update to the cross-entropy error function (4.90) for the logistic regression model. From (4.91) we see that the gradient and Hessian of this error function are given by ∇E(w) = N  n=1 (yn −tn)φn = ΦT(y −t) (4.96) H = ∇∇E(w) = N  n=1 yn(1 −yn)φnφT n = ΦTRΦ (4.97) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION where we have made use of (4.88). Also, we have introduced the N × N diagonal matrix R with elements Rnn = yn(1 −yn).",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,208,1028,"We see that the Hessian is no longer constant but depends on w through the weight- ing matrix R, corresponding to the fact that the error function is no longer quadratic.",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,208,1029,"Using the property 0 < yn < 1, which follows from the form of the logistic sigmoid function, we see that uTHu > 0 for an arbitrary vector u, and so the Hessian matrix H is positive deﬁnite. It follows that the error function is a concave function of w and hence has a unique minimum.",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,208,1030,The Newton-Raphson update formula for the logistic regression model then be- comes w(new) = w(old) −(ΦTRΦ)−1ΦT(y −t) = (ΦTRΦ)−1  ΦTRΦw(old) −ΦT(y −t) = (ΦTRΦ)−1ΦTRz (4.99) where z is an N-dimensional vector with elements z = Φw(old) −R−1(y −t).,Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,208,1031,"We see that the update formula (4.99) takes the form of a set of normal equations for a weighted least-squares problem. Because the weighing matrix R is not constant but depends on the parameter vector w, we must apply the normal equations iteratively, each time using the new weight vector w to compute a revised weighing matrix R. For this reason, the algorithm is known as iterative reweighted least squares, or IRLS (Rubin, 1983). As in the weighted least-squares problem, the elements of the diagonal weighting matrix R can be interpreted as variances because the mean and variance of t in the logistic regression model are given by E[t] = σ(x) = y (4.101) var[t] = E[t2] −E[t]2 = σ(x) −σ(x)2 = y(1 −y) (4.102) where we have used the property t2 = t for t ∈{0, 1}. In fact, we can interpret IRLS as the solution to a linearized problem in the space of the variable a = wTφ. The quantity zn, which corresponds to the nth element of z, can then be given a simple interpretation as an effective target value in this space obtained by making a local linear approximation to the logistic sigmoid function around the current operating point w(old) an(w) ≃ an(w(old)) + dan dyn  w(old) (tn −yn) = φT nw(old) −(yn −tn) yn(1 −yn) = zn.",Iterative reweighted least squares
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,209,1032,"In our discussion of generative models for multiclass classiﬁcation, we have seen that for a large class of distributions, the posterior probabilities are given by a softmax transformation of linear functions of the feature variables, so that p(Ck|φ) = yk(φ) = exp(ak)  j exp(aj) (4.104) where the ‘activations’ ak are given by ak = wT k φ.",Multiclass logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,209,1033,"There we used maximum likelihood to determine separately the class-conditional densities and the class priors and then found the corresponding posterior probabilities using Bayes’ theorem, thereby implicitly determining the parameters {wk}. Here we consider the use of maximum likelihood to determine the parameters {wk} of this model directly. To do this, we will require the derivatives of yk with respect to all of the activations aj. These are given by ∂yk ∂aj = yk(Ikj −yj) (4.106) where Ikj are the elements of the identity matrix.",Multiclass logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,209,1034,"Next we write down the likelihood function. This is most easily done using the 1-of-K coding scheme in which the target vector tn for a feature vector φn belonging to class Ck is a binary vector with all elements zero except for element k, which equals one. The likelihood function is then given by p(T|w1, . . . , wK) = N  n=1 K  k=1 p(Ck|φn)tnk = N  n=1 K  k=1 ytnk nk (4.107) where ynk = yk(φn), and T is an N × K matrix of target variables with elements tnk. Taking the negative logarithm then gives E(w1, . . . , wK) = −ln p(T|w1, . . . , wK) = − N  n=1 K  k=1 tnk ln ynk (4.108) which is known as the cross-entropy error function for the multiclass classiﬁcation problem.",Multiclass logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1035,"We now take the gradient of the error function with respect to one of the param- eter vectors wj. Making use of the result (4.106) for the derivatives of the softmax function, we obtain ∇wjE(w1, . . . , wK) = N  n=1 (ynj −tnj) φn (4.109) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION where we have made use of  k tnk = 1. Once again, we see the same form arising for the gradient as was found for the sum-of-squares error function with the linear model and the cross-entropy error for the logistic regression model, namely the prod- uct of the error (ynj −tnj) times the basis function φn. Again, we could use this to formulate a sequential algorithm in which patterns are presented one at a time, in which each of the weight vectors is updated using (3.22).",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1036,"We have seen that the derivative of the log likelihood function for a linear regres- sion model with respect to the parameter vector w for a data point n took the form of the ‘error’ yn −tn times the feature vector φn. Similarly, for the combination of logistic sigmoid activation function and cross-entropy error function (4.90), and for the softmax activation function with the multiclass cross-entropy error function (4.108), we again obtain this same simple form. This is an example of a more general result, as we shall see in Section 4.3.6.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1037,"To ﬁnd a batch algorithm, we again appeal to the Newton-Raphson update to obtain the corresponding IRLS algorithm for the multiclass problem. This requires evaluation of the Hessian matrix that comprises blocks of size M × M in which block j, k is given by ∇wk∇wjE(w1, . . . , wK) = − N  n=1 ynk(Ikj −ynj)φnφT n.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1038,"As with the two-class problem, the Hessian matrix for the multiclass logistic regres- sion model is positive deﬁnite and so the error function again has a unique minimum.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1039,Practical details of IRLS for the multiclass case can be found in Bishop and Nabney (2008).,Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1040,"We have seen that, for a broad range of class-conditional distributions, described by the exponential family, the resulting posterior class probabilities are given by a logistic (or softmax) transformation acting on a linear function of the feature vari- ables. However, not all choices of class-conditional density give rise to such a simple form for the posterior probabilities (for instance, if the class-conditional densities are modelled using Gaussian mixtures). This suggests that it might be worth exploring other types of discriminative probabilistic model. For the purposes of this chapter, however, we shall return to the two-class case, and again remain within the frame- work of generalized linear models so that p(t = 1|a) = f(a) (4.111) where a = wTφ, and f(·) is the activation function.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,210,1041,"One way to motivate an alternative choice for the link function is to consider a noisy threshold model, as follows. For each input φn, we evaluate an = wTφn and then we set the target value according to tn = 1 if an ⩾θ tn = 0 otherwise.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,211,1042,"Figure 4.13 Schematic example of a probability density p(θ) shown by the blue curve, given in this example by a mixture of two Gaussians, along with its cumulative distribution function f(a), shown by the red curve. Note that the value of the blue curve at any point, such as that indicated by the vertical green line, corresponds to the slope of the red curve at the same point.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,211,1043,"Conversely, the value of the red curve at this point corresponds to the area under the blue curve indicated by the shaded green region. In the stochastic threshold model, the class label takes the value t = 1 if the value of a = wTφ exceeds a threshold, oth- erwise it takes the value t = 0. This is equivalent to an activation function given by the cumulative distribution function f(a).",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,211,1044,"If the value of θ is drawn from a probability density p(θ), then the corresponding activation function will be given by the cumulative distribution function f(a) =  a −∞ p(θ) dθ (4.113) as illustrated in Figure 4.13.",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,211,1045,"As a speciﬁc example, suppose that the density p(θ) is given by a zero mean, unit variance Gaussian. The corresponding cumulative distribution function is given by Φ(a) =  a −∞ N(θ|0, 1) dθ (4.114) which is known as the probit function. It has a sigmoidal shape and is compared with the logistic sigmoid function in Figure 4.9. Note that the use of a more gen- eral Gaussian distribution does not change the model because this is equivalent to a re-scaling of the linear coefﬁcients w. Many numerical packages provide for the evaluation of a closely related function deﬁned by erf(a) = 2 √π  a 0 exp(−θ2/2) dθ (4.115) and known as the erf function or error function (not to be confused with the error function of a machine learning model). It is related to the probit function by Φ(a) = 1 2 1 + 1 √ 2 erf(a) .",Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,211,1046,The generalized linear model based on a probit activation function is known as probit regression.,Probit regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1047,"We can determine the parameters of this model using maximum likelihood, by a straightforward extension of the ideas discussed earlier. In practice, the results found using probit regression tend to be similar to those of logistic regression. We shall, \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION however, ﬁnd another use for the probit model when we discuss Bayesian treatments of logistic regression in Section 4.5.",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1048,"One issue that can occur in practical applications is that of outliers, which can arise for instance through errors in measuring the input vector x or through misla- belling of the target value t. Because such points can lie a long way to the wrong side of the ideal decision boundary, they can seriously distort the classiﬁer. Note that the logistic and probit regression models behave differently in this respect because the tails of the logistic sigmoid decay asymptotically like exp(−x) for x →∞, whereas for the probit activation function they decay like exp(−x2), and so the probit model can be signiﬁcantly more sensitive to outliers.",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1049,"However, both the logistic and the probit models assume the data is correctly labelled. The effect of mislabelling is easily incorporated into a probabilistic model by introducing a probability ϵ that the target value t has been ﬂipped to the wrong value (Opper and Winther, 2000a), leading to a target value distribution for data point x of the form p(t|x) = (1 −ϵ)σ(x) + ϵ(1 −σ(x)) = ϵ + (1 −2ϵ)σ(x) (4.117) where σ(x) is the activation function with input vector x. Here ϵ may be set in advance, or it may be treated as a hyperparameter whose value is inferred from the data.",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1050,"For the linear regression model with a Gaussian noise distribution, the error function, corresponding to the negative log likelihood, is given by (3.12). If we take the derivative with respect to the parameter vector w of the contribution to the error function from a data point n, this takes the form of the ‘error’ yn −tn times the feature vector φn, where yn = wTφn. Similarly, for the combination of the logistic sigmoid activation function and the cross-entropy error function (4.90), and for the softmax activation function with the multiclass cross-entropy error function (4.108), we again obtain this same simple form. We now show that this is a general result of assuming a conditional distribution for the target variable from the exponential family, along with a corresponding choice for the activation function known as the canonical link function.",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1051,"We again make use of the restricted form (4.84) of exponential family distribu- tions. Note that here we are applying the assumption of exponential family distribu- tion to the target variable t, in contrast to Section 4.2.4 where we applied it to the input vector x. We therefore consider conditional distributions of the target variable of the form p(t|η, s) = 1 sh  t s  g(η) exp ηt s  .",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,212,1052,"Using the same line of argument as led to the derivation of the result (2.226), we see that the conditional mean of t, which we denote by y, is given by y ≡E[t|η] = −s d dη ln g(η).",Canonical link functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,213,1053,"Thus y and η must related, and we denote this relation through η = ψ(y). Following Nelder and Wedderburn (1972), we deﬁne a generalized linear model to be one for which y is a nonlinear function of a linear combination of the input (or feature) variables so that y = f(wTφ) (4.120) where f(·) is known as the activation function in the machine learning literature, and f −1(·) is known as the link function in statistics.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,213,1054,"Now consider the log likelihood function for this model, which, as a function of η, is given by ln p(t|η, s) = N  n=1 ln p(tn|η, s) = N  n=1  ln g(ηn) + ηntn s  + const (4.121) where we are assuming that all observations share a common scale parameter (which corresponds to the noise variance for a Gaussian distribution for instance) and so s is independent of n. The derivative of the log likelihood with respect to the model parameters w is then given by ∇w ln p(t|η, s) = N  n=1 d dηn ln g(ηn) + tn s dηn dyn dyn dan ∇an = N  n=1 1 s {tn −yn} ψ′(yn)f ′(an)φn (4.122) where an = wTφn, and we have used yn = f(an) together with the result (4.119) for E[t|η]. We now see that there is a considerable simpliﬁcation if we choose a particular form for the link function f −1(y) given by f −1(y) = ψ(y) (4.123) which gives f(ψ(y)) = y and hence f ′(ψ)ψ′(y) = 1. Also, because a = f −1(y), we have a = ψ and hence f ′(a)ψ′(y) = 1. In this case, the gradient of the error function reduces to ∇ln E(w) = 1 s N  n=1 {yn −tn}φn.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1055,"For the Gaussian s = β−1, whereas for the logistic model s = 1. In Section 4.5 we shall discuss the Bayesian treatment of logistic regression. As we shall see, this is more complex than the Bayesian treatment of linear regression models, discussed in Sections 3.3 and 3.5. In particular, we cannot integrate exactly \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION over the parameter vector w since the posterior distribution is no longer Gaussian.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1056,It is therefore necessary to introduce some form of approximation. Later in the book we shall consider a range of techniques based on analytical approximations Chapter 10 and numerical sampling.,The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1057,"Here we introduce a simple, but widely used, framework called the Laplace ap- proximation, that aims to ﬁnd a Gaussian approximation to a probability density deﬁned over a set of continuous variables. Consider ﬁrst the case of a single contin- uous variable z, and suppose the distribution p(z) is deﬁned by p(z) = 1 Z f(z) (4.125) where Z = f(z) dz is the normalization coefﬁcient. We shall suppose that the value of Z is unknown. In the Laplace method the goal is to ﬁnd a Gaussian approx- imation q(z) which is centred on a mode of the distribution p(z). The ﬁrst step is to ﬁnd a mode of p(z), in other words a point z0 such that p′(z0) = 0, or equivalently df(z) dz  z=z0 = 0.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1058,A Gaussian distribution has the property that its logarithm is a quadratic function of the variables. We therefore consider a Taylor expansion of ln f(z) centred on the mode z0 so that ln f(z) ≃ln f(z0) −1 2A(z −z0)2 (4.127) where A = −d2 dz2 ln f(z)  z=z0 .,The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1059,Note that the ﬁrst-order term in the Taylor expansion does not appear since z0 is a local maximum of the distribution. Taking the exponential we obtain f(z) ≃f(z0) exp −A 2 (z −z0)2 .,The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1060,"We can then obtain a normalized distribution q(z) by making use of the standard result for the normalization of a Gaussian, so that q(z) =  A 2π 1/2 exp −A 2 (z −z0)2 .",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,214,1061,"The Laplace approximation is illustrated in Figure 4.14. Note that the Gaussian approximation will only be well deﬁned if its precision A > 0, in other words the stationary point z0 must be a local maximum, so that the second derivative of f(z) at the point z0 is negative.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,215,1062,"Figure 4.14 Illustration of the Laplace approximation applied to the distribution p(z) ∝exp(−z2/2)σ(20z + 4) where σ(z) is the logistic sigmoid function deﬁned by σ(z) = (1 + e−z)−1. The left plot shows the normalized distribution p(z) in yellow, together with the Laplace approximation centred on the mode z0 of p(z) in red. The right plot shows the negative logarithms of the corresponding curves.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,215,1063,We can extend the Laplace method to approximate a distribution p(z) = f(z)/Z deﬁned over an M-dimensional space z. At a stationary point z0 the gradient ∇f(z) will vanish. Expanding around this stationary point we have ln f(z) ≃ln f(z0) −1 2(z −z0)TA(z −z0) (4.131) where the M × M Hessian matrix A is deﬁned by A = −∇∇ln f(z)|z=z0 (4.132) and ∇is the gradient operator. Taking the exponential of both sides we obtain f(z) ≃f(z0) exp −1 2(z −z0)TA(z −z0) .,The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,215,1064,"The distribution q(z) is proportional to f(z) and the appropriate normalization coef- ﬁcient can be found by inspection, using the standard result (2.43) for a normalized multivariate Gaussian, giving q(z) = |A|1/2 (2π)M/2 exp −1 2(z −z0)TA(z −z0) = N(z|z0, A−1) (4.134) where |A| denotes the determinant of A. This Gaussian distribution will be well deﬁned provided its precision matrix, given by A, is positive deﬁnite, which implies that the stationary point z0 must be a local maximum, not a minimum or a saddle point.",The Laplace Approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,216,1065,"In order to apply the Laplace approximation we ﬁrst need to ﬁnd the mode z0, and then evaluate the Hessian matrix at that mode. In practice a mode will typi- cally be found by running some form of numerical optimization algorithm (Bishop \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION and Nabney, 2008). Many of the distributions encountered in practice will be mul- timodal and so there will be different Laplace approximations according to which mode is being considered. Note that the normalization constant Z of the true distri- bution does not need to be known in order to apply the Laplace method. As a result of the central limit theorem, the posterior distribution for a model is expected to become increasingly better approximated by a Gaussian as the number of observed data points is increased, and so we would expect the Laplace approximation to be most useful in situations where the number of data points is relatively large.",Model comparison and BIC
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,216,1066,"One major weakness of the Laplace approximation is that, since it is based on a Gaussian distribution, it is only directly applicable to real variables. In other cases it may be possible to apply the Laplace approximation to a transformation of the variable. For instance if 0 ⩽τ < ∞then we can consider a Laplace approximation of ln τ. The most serious limitation of the Laplace framework, however, is that it is based purely on the aspects of the true distribution at a speciﬁc value of the variable, and so can fail to capture important global properties. In Chapter 10 we shall consider alternative approaches which adopt a more global perspective.",Model comparison and BIC
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,216,1067,"As well as approximating the distribution p(z) we can also obtain an approxi- mation to the normalization constant Z. Using the approximation (4.133) we have Z =  f(z) dz ≃ f(z0)  exp −1 2(z −z0)TA(z −z0) dz = f(z0)(2π)M/2 |A|1/2 (4.135) where we have noted that the integrand is Gaussian and made use of the standard result (2.43) for a normalized Gaussian distribution. We can use the result (4.135) to obtain an approximation to the model evidence which, as discussed in Section 3.4, plays a central role in Bayesian model comparison.",Model comparison and BIC
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,216,1068,"Consider a data set D and a set of models {Mi} having parameters {θi}. For each model we deﬁne a likelihood function p(D|θi, Mi). If we introduce a prior p(θi|Mi) over the parameters, then we are interested in computing the model evi- dence p(D|Mi) for the various models. From now on we omit the conditioning on Mi to keep the notation uncluttered. From Bayes’ theorem the model evidence is given by p(D) =  p(D|θ)p(θ) dθ.",Model comparison and BIC
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1069,"Identifying f(θ) = p(D|θ)p(θ) and Z = p(D), and applying the result (4.135), we obtain ln p(D) ≃ln p(D|θMAP) + ln p(θMAP) + M 2 ln(2π) −1 2 ln |A| ( )* + Occam factor (4.137) \end{verbatim} egin{verbatim} where θMAP is the value of θ at the mode of the posterior distribution, and A is the Hessian matrix of second derivatives of the negative log posterior A = −∇∇ln p(D|θMAP)p(θMAP) = −∇∇ln p(θMAP|D).",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1070,"The ﬁrst term on the right hand side of (4.137) represents the log likelihood evalu- ated using the optimized parameters, while the remaining three terms comprise the ‘Occam factor’ which penalizes model complexity.",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1071,"If we assume that the Gaussian prior distribution over parameters is broad, and that the Hessian has full rank, then we can approximate (4.137) very roughly using ln p(D) ≃ln p(D|θMAP) −1 2M ln N (4.139) where N is the number of data points, M is the number of parameters in θ and we have omitted additive constants. This is known as the Bayesian Information Criterion (BIC) or the Schwarz criterion (Schwarz, 1978). Note that, compared to AIC given by (1.73), this penalizes model complexity more heavily.",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1072,"Complexity measures such as AIC and BIC have the virtue of being easy to evaluate, but can also give misleading results. In particular, the assumption that the Hessian matrix has full rank is often not valid since many of the parameters are not ‘well-determined’. We can use the result (4.137) to obtain a more accurate estimate of the model evidence starting from the Laplace approximation, as we illustrate in the context of neural networks in Section 5.7.",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1073,"We now turn to a Bayesian treatment of logistic regression. Exact Bayesian infer- ence for logistic regression is intractable. In particular, evaluation of the posterior distribution would require normalization of the product of a prior distribution and a likelihood function that itself comprises a product of logistic sigmoid functions, one for every data point. Evaluation of the predictive distribution is similarly intractable.",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1074,"Here we consider the application of the Laplace approximation to the problem of Bayesian logistic regression (Spiegelhalter and Lauritzen, 1990; MacKay, 1992b).",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,217,1075,"Recall from Section 4.4 that the Laplace approximation is obtained by ﬁnding the mode of the posterior distribution and then ﬁtting a Gaussian centred at that mode. This requires evaluation of the second derivatives of the log posterior, which is equivalent to ﬁnding the Hessian matrix.",Bayesian Logistic Regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,218,1076,"Because we seek a Gaussian representation for the posterior distribution, it is natural to begin with a Gaussian prior, which we write in the general form p(w) = N(w|m0, S0) (4.140) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION where m0 and S0 are ﬁxed hyperparameters. The posterior distribution over w is given by p(w|t) ∝p(w)p(t|w) (4.141) where t = (t1, . . . , tN)T. Taking the log of both sides, and substituting for the prior distribution using (4.140), and for the likelihood function using (4.89), we obtain ln p(w|t) = −1 2(w −m0)TS−1 0 (w −m0) + N  n=1 {tn ln yn + (1 −tn) ln(1 −yn)} + const (4.142) where yn = σ(wTφn). To obtain a Gaussian approximation to the posterior dis- tribution, we ﬁrst maximize the posterior distribution to give the MAP (maximum posterior) solution wMAP, which deﬁnes the mean of the Gaussian. The covariance is then given by the inverse of the matrix of second derivatives of the negative log likelihood, which takes the form SN = −∇∇ln p(w|t) = S−1 0 + N  n=1 yn(1 −yn)φnφT n.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,218,1077,"The Gaussian approximation to the posterior distribution therefore takes the form q(w) = N(w|wMAP, SN).",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,218,1078,"Having obtained a Gaussian approximation to the posterior distribution, there remains the task of marginalizing with respect to this distribution in order to make predictions.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,218,1079,"The predictive distribution for class C1, given a new feature vector φ(x), is obtained by marginalizing with respect to the posterior distribution p(w|t), which is itself approximated by a Gaussian distribution q(w) so that p(C1|φ, t) =  p(C1|φ, w)p(w|t) dw ≃  σ(wTφ)q(w) dw (4.145) with the corresponding probability for class C2 given by p(C2|φ, t) = 1−p(C1|φ, t).",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1080,"To evaluate the predictive distribution, we ﬁrst note that the function σ(wTφ) de- pends on w only through its projection onto φ. Denoting a = wTφ, we have σ(wTφ) =  δ(a −wTφ)σ(a) da (4.146) where δ(·) is the Dirac delta function. From this we obtain  σ(wTφ)q(w) dw =  σ(a)p(a) da (4.147) \end{verbatim} egin{verbatim} where p(a) =  δ(a −wTφ)q(w) dw.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1081,"We can evaluate p(a) by noting that the delta function imposes a linear constraint on w and so forms a marginal distribution from the joint distribution q(w) by inte- grating out all directions orthogonal to φ. Because q(w) is Gaussian, we know from Section 2.3.2 that the marginal distribution will also be Gaussian. We can evaluate the mean and covariance of this distribution by taking moments, and interchanging the order of integration over a and w, so that µa = E[a] =  p(a)a da =  q(w)wTφ dw = wT MAPφ (4.149) where we have used the result (4.144) for the variational posterior distribution q(w).",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1082,"Note that the distribution of a takes the same form as the predictive distribution (3.58) for the linear regression model, with the noise variance set to zero. Thus our variational approximation to the predictive distribution becomes p(C1|t) =  σ(a)p(a) da =  σ(a)N(a|µa, σ2 a) da.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1083,This result can also be derived directly by making use of the results for the marginal of a Gaussian distribution given in Section 2.3.2.,Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1084,"The integral over a represents the convolution of a Gaussian with a logistic sig- moid, and cannot be evaluated analytically. We can, however, obtain a good approx- imation (Spiegelhalter and Lauritzen, 1990; MacKay, 1992b; Barber and Bishop, 1998a) by making use of the close similarity between the logistic sigmoid function σ(a) deﬁned by (4.59) and the probit function Φ(a) deﬁned by (4.114). In order to obtain the best approximation to the logistic function we need to re-scale the hori- zontal axis, so that we approximate σ(a) by Φ(λa). We can ﬁnd a suitable value of λ by requiring that the two functions have the same slope at the origin, which gives λ2 = π/8. The similarity of the logistic sigmoid and the probit function, for this choice of λ, is illustrated in Figure 4.9.",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,219,1085,"The advantage of using a probit function is that its convolution with a Gaussian can be expressed analytically in terms of another probit function. Speciﬁcally we can show that  Φ(λa)N(a|µ, σ2) da = Φ  µ (λ−2 + σ2)1/2  .",Predictive distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1086,"4. LINEAR MODELS FOR CLASSIFICATION We now apply the approximation σ(a) ≃Φ(λa) to the probit functions appearing on both sides of this equation, leading to the following approximation for the convo- lution of a logistic sigmoid with a Gaussian  σ(a)N(a|µ, σ2) da ≃σ κ(σ2)µ (4.153) where we have deﬁned κ(σ2) = (1 + πσ2/8)−1/2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1087,"Applying this result to (4.151) we obtain the approximate predictive distribution in the form p(C1|φ, t) = σ κ(σ2 a)µa (4.155) where µa and σ2 a are deﬁned by (4.149) and (4.150), respectively, and κ(σ2 a) is de- ﬁned by (4.154).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1088,"Note that the decision boundary corresponding to p(C1|φ, t) = 0.5 is given by µa = 0, which is the same as the decision boundary obtained by using the MAP value for w. Thus if the decision criterion is based on minimizing misclassiﬁca- tion rate, with equal prior probabilities, then the marginalization over w has no ef- fect. However, for more complex decision criteria it will play an important role.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1089,Marginalization of the logistic sigmoid model under a Gaussian approximation to the posterior distribution will be illustrated in the context of variational inference in Figure 10.13.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1090,"(⋆⋆) Given a set of data points {xn}, we can deﬁne the convex hull to be the set of all points x given by x =  n αnxn (4.156) where αn ⩾0 and  n αn = 1. Consider a second set of points {yn} together with their corresponding convex hull. By deﬁnition, the two sets of points will be linearly separable if there exists a vector w and a scalar w0 such that wTxn + w0 > 0 for all xn, and wTyn +w0 < 0 for all yn. Show that if their convex hulls intersect, the two sets of points cannot be linearly separable, and conversely that if they are linearly separable, their convex hulls do not intersect.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,220,1091,"Consider the minimization of a sum-of-squares error function (4.15), and suppose that all of the target vectors in the training set satisfy a linear constraint aTtn + b = 0 (4.157) where tn corresponds to the nth row of the matrix T in (4.15). Show that as a consequence of this constraint, the elements of the model prediction y(x) given by the least-squares solution (4.17) also satisfy this constraint, so that aTy(x) + b = 0.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1092,"To do so, assume that one of the basis functions φ0(x) = 1 so that the corresponding parameter w0 plays the role of a bias.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1093,"Extend the result of Exercise 4.2 to show that if multiple linear constraints are satisﬁed simultaneously by the target vectors, then the same constraints will also be satisﬁed by the least-squares prediction of a linear model.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1094,"Show that maximization of the class separation criterion given by (4.23) with respect to w, using a Lagrange multiplier to enforce the constraint wTw = 1, leads to the result that w ∝(m2 −m1).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1095,"(⋆) By making use of (4.20), (4.23), and (4.24), show that the Fisher criterion (4.25) can be written in the form (4.26).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1096,"(⋆) Using the deﬁnitions of the between-class and within-class covariance matrices given by (4.27) and (4.28), respectively, together with (4.34) and (4.36) and the choice of target values described in Section 4.1.5, show that the expression (4.33) that minimizes the sum-of-squares error function can be written in the form (4.37).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1097,Show that the logistic sigmoid function (4.59) satisﬁes the property σ(−a) = 1 −σ(a) and that its inverse is given by σ−1(y) = ln {y/(1 −y)}.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1098,"(⋆) Using (4.57) and (4.58), derive the result (4.65) for the posterior class probability in the two-class generative model with Gaussian densities, and verify the results (4.66) and (4.67) for the parameters w and w0.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1099,"Consider a generative classiﬁcation model for K classes deﬁned by prior class probabilities p(Ck) = πk and general class-conditional densities p(φ|Ck) where φ is the input feature vector. Suppose we are given a training data set {φn, tn} where n = 1, . . . , N, and tn is a binary target vector of length K that uses the 1-of- K coding scheme, so that it has components tnj = Ijk if pattern n is from class Ck.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1100,"Assuming that the data points are drawn independently from this model, show that the maximum-likelihood solution for the prior probabilities is given by πk = Nk N (4.159) where Nk is the number of data points assigned to class Ck.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,221,1101,"Consider the classiﬁcation model of Exercise 4.9 and now suppose that the class-conditional densities are given by Gaussian distributions with a shared covari- ance matrix, so that p(φ|Ck) = N(φ|µk, Σ).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1102,"Show that the maximum likelihood solution for the mean of the Gaussian distribution for class Ck is given by µk = 1 Nk N  n=1 tnkφn (4.161) \end{verbatim} egin{verbatim} 4. LINEAR MODELS FOR CLASSIFICATION which represents the mean of those feature vectors assigned to class Ck. Similarly, show that the maximum likelihood solution for the shared covariance matrix is given by Σ = K  k=1 Nk N Sk (4.162) where Sk = 1 Nk N  n=1 tnk(φn −µk)(φn −µk)T.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1103,"Thus Σ is given by a weighted average of the covariances of the data associated with each class, in which the weighting coefﬁcients are given by the prior probabilities of the classes.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1104,"(⋆⋆) Consider a classiﬁcation problem with K classes for which the feature vector φ has M components each of which can take L discrete states. Let the values of the components be represented by a 1-of-L binary coding scheme. Further suppose that, conditioned on the class Ck, the M components of φ are independent, so that the class-conditional density factorizes with respect to the feature vector components.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1105,"Show that the quantities ak given by (4.63), which appear in the argument to the softmax function describing the posterior class probabilities, are linear functions of the components of φ. Note that this represents an example of the naive Bayes model which is discussed in Section 8.2.2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1106,Verify the relation (4.88) for the derivative of the logistic sigmoid func- tion deﬁned by (4.59).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1107,"By making use of the result (4.88) for the derivative of the logistic sig- moid, show that the derivative of the error function (4.90) for the logistic regression model is given by (4.91).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1108,"Show that for a linearly separable data set, the maximum likelihood solution for the logistic regression model is obtained by ﬁnding a vector w whose decision boundary wTφ(x) = 0 separates the classes and then taking the magnitude of w to inﬁnity.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1109,"Show that the Hessian matrix H for the logistic regression model, given by (4.97), is positive deﬁnite. Here R is a diagonal matrix with elements yn(1 −yn), and yn is the output of the logistic regression model for input vector xn. Hence show that the error function is a concave function of w and that it has a unique minimum.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1110,"(⋆) Consider a binary classiﬁcation problem in which each observation xn is known to belong to one of two classes, corresponding to t = 0 and t = 1, and suppose that the procedure for collecting training data is imperfect, so that training points are sometimes mislabelled. For every data point xn, instead of having a value t for the class label, we have instead a value πn representing the probability that tn = 1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,222,1111,"Given a probabilistic model p(t = 1|φ), write down the log likelihood function appropriate to such a data set.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1112,"Show that the derivatives of the softmax activation function (4.104), where the ak are deﬁned by (4.105), are given by (4.106).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1113,"Using the result (4.91) for the derivatives of the softmax activation function, show that the gradients of the cross-entropy error (4.108) are given by (4.109).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1114,"Write down expressions for the gradient of the log likelihood, as well as the corresponding Hessian matrix, for the probit regression model deﬁned in Sec- tion 4.3.5. These are the quantities that would be required to train such a model using IRLS.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1115,"Show that the Hessian matrix for the multiclass logistic regression problem, deﬁned by (4.110), is positive semideﬁnite. Note that the full Hessian matrix for this problem is of size MK × MK, where M is the number of parameters and K is the number of classes. To prove the positive semideﬁnite property, consider the product uTHu where u is an arbitrary vector of length MK, and then apply Jensen’s inequality.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1116,(⋆) Show that the probit function (4.114) and the erf function (4.115) are related by (4.116).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1117,"Using the result (4.135), derive the expression (4.137) for the log model evi- dence under the Laplace approximation.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1118,"In this exercise, we derive the BIC result (4.139) starting from the Laplace approximation to the model evidence given by (4.137). Show that if the prior over parameters is Gaussian of the form p(θ) = N(θ|m, V0), the log model evidence under the Laplace approximation takes the form ln p(D) ≃ln p(D|θMAP) −1 2(θMAP −m)TV−1 0 (θMAP −m) −1 2 ln |H| + const where H is the matrix of second derivatives of the log likelihood ln p(D|θ) evaluated at θMAP. Now assume that the prior is broad so that V−1 0 is small and the second term on the right-hand side above can be neglected. Furthermore, consider the case of independent, identically distributed data so that H is the sum of terms one for each data point. Show that the log model evidence can then be written approximately in the form of the BIC expression (4.139).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1119,(⋆⋆) Use the results from Section 2.3.2 to derive the result (4.151) for the marginal- ization of the logistic regression model with respect to a Gaussian posterior distribu- tion over the parameters w.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,223,1120,"Suppose we wish to approximate the logistic sigmoid σ(a) deﬁned by (4.59) by a scaled probit function Φ(λa), where Φ(a) is deﬁned by (4.114). Show that if λ is chosen so that the derivatives of the two functions are equal at a = 0, then λ2 = π/8.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Linear Models for Classiﬁcation,4,224,1121,"4. LINEAR MODELS FOR CLASSIFICATION 4.26 (⋆⋆) In this exercise, we prove the relation (4.152) for the convolution of a probit function with a Gaussian distribution. To do this, show that the derivative of the left- hand side with respect to µ is equal to the derivative of the right-hand side, and then integrate both sides with respect to µ and then show that the constant of integration vanishes. Note that before differentiating the left-hand side, it is convenient ﬁrst to introduce a change of variable given by a = µ + σz so that the integral over a is replaced by an integral over z. When we differentiate the left-hand side of the relation (4.152), we will then obtain a Gaussian integral over z that can be evaluated analytically.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,225,1122,"In Chapters 3 and 4 we considered models for regression and classiﬁcation that com- prised linear combinations of ﬁxed basis functions. We saw that such models have useful analytical and computational properties but that their practical applicability was limited by the curse of dimensionality. In order to apply such models to large- scale problems, it is necessary to adapt the basis functions to the data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,226,1123,"Support vector machines (SVMs), discussed in Chapter 7, address this by ﬁrst deﬁning basis functions that are centred on the training data points and then selecting a subset of these during training. One advantage of SVMs is that, although the training involves nonlinear optimization, the objective function is convex, and so the solution of the optimization problem is relatively straightforward. The number of basis functions in the resulting models is generally much smaller than the number of training points, although it is often still relatively large and typically increases with the size of the training set. The relevance vector machine, discussed in Section 7.2, also chooses a subset from a ﬁxed set of basis functions and typically results in much \end{verbatim} egin{verbatim} sparser models. Unlike the SVM it also produces probabilistic outputs, although this is at the expense of a nonconvex optimization during training.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,226,1124,"An alternative approach is to ﬁx the number of basis functions in advance but allow them to be adaptive, in other words to use parametric forms for the basis func- tions in which the parameter values are adapted during training. The most successful model of this type in the context of pattern recognition is the feed-forward neural network, also known as the multilayer perceptron, discussed in this chapter. In fact, ‘multilayer perceptron’ is really a misnomer, because the model comprises multi- ple layers of logistic regression models (with continuous nonlinearities) rather than multiple perceptrons (with discontinuous nonlinearities). For many applications, the resulting model can be signiﬁcantly more compact, and hence faster to evaluate, than a support vector machine having the same generalization performance. The price to be paid for this compactness, as with the relevance vector machine, is that the like- lihood function, which forms the basis for network training, is no longer a convex function of the model parameters. In practice, however, it is often worth investing substantial computational resources during the training phase in order to obtain a compact model that is fast at processing new data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,226,1125,"The term ‘neural network’ has its origins in attempts to ﬁnd mathematical rep- resentations of information processing in biological systems (McCulloch and Pitts, 1943; Widrow and Hoff, 1960; Rosenblatt, 1962; Rumelhart et al., 1986). Indeed, it has been used very broadly to cover a wide range of different models, many of which have been the subject of exaggerated claims regarding their biological plau- sibility. From the perspective of practical applications of pattern recognition, how- ever, biological realism would impose entirely unnecessary constraints. Our focus in this chapter is therefore on neural networks as efﬁcient models for statistical pattern recognition. In particular, we shall restrict our attention to the speciﬁc class of neu- ral networks that have proven to be of greatest practical value, namely the multilayer perceptron.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,226,1126,"We begin by considering the functional form of the network model, including the speciﬁc parameterization of the basis functions, and we then discuss the prob- lem of determining the network parameters within a maximum likelihood frame- work, which involves the solution of a nonlinear optimization problem. This requires the evaluation of derivatives of the log likelihood function with respect to the net- work parameters, and we shall see how these can be obtained efﬁciently using the technique of error backpropagation. We shall also show how the backpropagation framework can be extended to allow other derivatives to be evaluated, such as the Jacobian and Hessian matrices. Next we discuss various approaches to regulariza- tion of neural network training and the relationships between them. We also consider some extensions to the neural network model, and in particular we describe a gen- eral framework for modelling conditional probability distributions known as mixture density networks. Finally, we discuss the use of Bayesian treatments of neural net- works. Additional background on neural network models can be found in Bishop (1995a).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,227,1127,"The linear models for regression and classiﬁcation discussed in Chapters 3 and 4, re- spectively, are based on linear combinations of ﬁxed nonlinear basis functions φj(x) and take the form y(x, w) = f  M  j=1 wjφj(x)  (5.1) where f(·) is a nonlinear activation function in the case of classiﬁcation and is the identity in the case of regression. Our goal is to extend this model by making the basis functions φj(x) depend on parameters and then to allow these parameters to be adjusted, along with the coefﬁcients {wj}, during training. There are, of course, many ways to construct parametric nonlinear basis functions. Neural networks use basis functions that follow the same form as (5.1), so that each basis function is itself a nonlinear function of a linear combination of the inputs, where the coefﬁcients in the linear combination are adaptive parameters.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,227,1128,"This leads to the basic neural network model, which can be described a series of functional transformations. First we construct M linear combinations of the input variables x1, . . . , xD in the form aj = D  i=1 w(1) ji xi + w(1) j0 (5.2) where j = 1, . . . , M, and the superscript (1) indicates that the corresponding param- eters are in the ﬁrst ‘layer’ of the network. We shall refer to the parameters w(1) ji as weights and the parameters w(1) j0 as biases, following the nomenclature of Chapter 3.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,227,1129,"The quantities aj are known as activations. Each of them is then transformed using a differentiable, nonlinear activation function h(·) to give zj = h(aj).",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,227,1130,"These quantities correspond to the outputs of the basis functions in (5.1) that, in the context of neural networks, are called hidden units. The nonlinear functions h(·) are generally chosen to be sigmoidal functions such as the logistic sigmoid or the ‘tanh’ function. Following (5.1), these values are again linearly combined to give output unit activations ak = M  j=1 w(2) kj zj + w(2) k0 (5.4) where k = 1, . . . , K, and K is the total number of outputs. This transformation cor- responds to the second layer of the network, and again the w(2) k0 are bias parameters.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1131,Figure 5.1 Network diagram for the two- layer neural network corre- sponding to (5.7).,Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1132,"Finally, the output unit activations are transformed using an appropriate activation function to give a set of network outputs yk. The choice of activation function is determined by the nature of the data and the assumed distribution of target variables \end{verbatim} egin{verbatim} The input, hidden, and output variables are represented by nodes, and the weight parameters are rep- resented by links between the nodes, in which the bias pa- rameters are denoted by links coming from additional input and hidden variables x0 and z0.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1133,tion of information ﬂow through the network during forward propagation.,Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1134,"and follows the same considerations as for linear models discussed in Chapters 3 and 4. Thus for standard regression problems, the activation function is the identity so that yk = ak. Similarly, for multiple binary classiﬁcation problems, each output unit activation is transformed using a logistic sigmoid function so that yk = σ(ak) (5.5) where σ(a) = 1 1 + exp(−a).",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1135,"Finally, for multiclass problems, a softmax activation function of the form (4.62) is used. The choice of output unit activation function is discussed in detail in Sec- tion 5.2.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,228,1136,"We can combine these various stages to give the overall network function that, for sigmoidal output unit activation functions, takes the form yk(x, w) = σ  M  j=1 w(2) kj h  D  i=1 w(1) ji xi + w(1) j0  + w(2) k0  (5.7) where the set of all weight and bias parameters have been grouped together into a vector w. Thus the neural network model is simply a nonlinear function from a set of input variables {xi} to a set of output variables {yk} controlled by a vector w of adjustable parameters.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1137,"This function can be represented in the form of a network diagram as shown in Figure 5.1. The process of evaluating (5.7) can then be interpreted as a forward propagation of information through the network. It should be emphasized that these diagrams do not represent probabilistic graphical models of the kind to be consid- ered in Chapter 8 because the internal nodes represent deterministic variables rather than stochastic ones. For this reason, we have adopted a slightly different graphical \end{verbatim} egin{verbatim} notation for the two kinds of model. We shall see later how to give a probabilistic interpretation to a neural network.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1138,"As discussed in Section 3.1, the bias parameters in (5.2) can be absorbed into the set of weight parameters by deﬁning an additional input variable x0 whose value is clamped at x0 = 1, so that (5.2) takes the form aj = D  i=0 w(1) ji xi.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1139,"We can similarly absorb the second-layer biases into the second-layer weights, so that the overall network function becomes yk(x, w) = σ  M  j=0 w(2) kj h  D  i=0 w(1) ji xi  .",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1140,"As can be seen from Figure 5.1, the neural network model comprises two stages of processing, each of which resembles the perceptron model of Section 4.1.7, and for this reason the neural network is also known as the multilayer perceptron, or MLP. A key difference compared to the perceptron, however, is that the neural net- work uses continuous sigmoidal nonlinearities in the hidden units, whereas the per- ceptron uses step-function nonlinearities. This means that the neural network func- tion is differentiable with respect to the network parameters, and this property will play a central role in network training.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1141,"If the activation functions of all the hidden units in a network are taken to be linear, then for any such network we can always ﬁnd an equivalent network without hidden units. This follows from the fact that the composition of successive linear transformations is itself a linear transformation. However, if the number of hidden units is smaller than either the number of input or output units, then the transforma- tions that the network can generate are not the most general possible linear trans- formations from inputs to outputs because information is lost in the dimensionality reduction at the hidden units. In Section 12.4.2, we show that networks of linear units give rise to principal component analysis. In general, however, there is little interest in multilayer networks of linear units.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,229,1142,"The network architecture shown in Figure 5.1 is the most commonly used one in practice. However, it is easily generalized, for instance by considering additional layers of processing each consisting of a weighted linear combination of the form (5.4) followed by an element-wise transformation using a nonlinear activation func- tion. Note that there is some confusion in the literature regarding the terminology for counting the number of layers in such networks. Thus the network in Figure 5.1 may be described as a 3-layer network (which counts the number of layers of units, and treats the inputs as units) or sometimes as a single-hidden-layer network (which counts the number of layers of hidden units). We recommend a terminology in which Figure 5.1 is called a two-layer network, because it is the number of layers of adap- tive weights that is important for determining the network properties.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,230,1143,Figure 5.2 Example of a neural network having a general feed-forward topology. Note that each hidden and output unit has an associated bias parameter (omitted for clarity).,Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,230,1144,"Another generalization of the network architecture is to include skip-layer con- nections, each of which is associated with a corresponding adaptive parameter. For \end{verbatim} egin{verbatim} x1 x2 z1 z3 z2 y1 y2 inputs outputs instance, in a two-layer network these would go directly from inputs to outputs. In principle, a network with sigmoidal hidden units can always mimic skip layer con- nections (for bounded input values) by using a sufﬁciently small ﬁrst-layer weight that, over its operating range, the hidden unit is effectively linear, and then com- pensating with a large weight value from the hidden unit to the output. In practice, however, it may be advantageous to include skip-layer connections explicitly.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,230,1145,"Furthermore, the network can be sparse, with not all possible connections within a layer being present. We shall see an example of a sparse network architecture when we consider convolutional neural networks in Section 5.5.6.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,230,1146,"Because there is a direct correspondence between a network diagram and its mathematical function, we can develop more general network mappings by con- sidering more complex network diagrams. However, these must be restricted to a feed-forward architecture, in other words to one having no closed directed cycles, to ensure that the outputs are deterministic functions of the inputs. This is illustrated with a simple example in Figure 5.2. Each (hidden or output) unit in such a network computes a function given by zk = h  j wkjzj  (5.10) where the sum runs over all units that send connections to unit k (and a bias param- eter is included in the summation). For a given set of values applied to the inputs of the network, successive application of (5.10) allows the activations of all units in the network to be evaluated including those of the output units.",Feed-forward Network Functions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1147,"Figure 5.3 Illustration of the ca- pability of a multilayer perceptron to approximate four different func- tions comprising (a) f(x) = x2, (b) f(x) = sin(x), (c), f(x) = |x|, and (d) f(x) = H(x) where H(x) is the Heaviside step function.",Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1148,"The approximation properties of feed-forward networks have been widely stud- ied (Funahashi, 1989; Cybenko, 1989; Hornik et al., 1989; Stinchecombe and White, 1989; Cotter, 1990; Ito, 1991; Hornik, 1991; Kreinovich, 1991; Ripley, 1996) and found to be very general. Neural networks are therefore said to be universal ap- proximators. For example, a two-layer network with linear outputs can uniformly approximate any continuous function on a compact input domain to arbitrary accu- racy provided the network has a sufﬁciently large number of hidden units. This result holds for a wide range of hidden unit activation functions, but excluding polynomi- als. Although such theorems are reassuring, the key problem is how to ﬁnd suitable parameter values given a set of training data, and in later sections of this chapter we \end{verbatim} egin{verbatim} In each case, N = 50 data points, shown as blue dots, have been sam- pled uniformly in x over the interval (−1, 1) and the corresponding val- ues of f(x) evaluated. These data points are then used to train a two- layer network having 3 hidden units with ‘tanh’ activation functions and linear output units.",Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1149,"network functions are shown by the red curves, and the outputs of the three hidden units are shown by the three dashed curves.",Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1150,will show that there exist effective solutions to this problem based on both maximum likelihood and Bayesian approaches.,Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1151,The capability of a two-layer network to model a broad range of functions is illustrated in Figure 5.3.,Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,231,1152,This ﬁgure also shows how individual hidden units work collaboratively to approximate the ﬁnal function. The role of hidden units in a simple classiﬁcation problem is illustrated in Figure 5.4 using the synthetic classiﬁcation data set described in Appendix A.,Weight-space symmetries
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1153,"Figure 5.4 Example of the solution of a simple two- class classiﬁcation problem involving synthetic data using a neural network having two inputs, two hidden units with ‘tanh’ activation functions, and a single output having a logistic sigmoid activa- tion function.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1154,"One property of feed-forward networks, which will play a role when we consider Bayesian model comparison, is that multiple distinct choices for the weight vector w can all give rise to the same mapping function from inputs to outputs (Chen et al., 1993). Consider a two-layer network of the form shown in Figure 5.1 with M hidden units having ‘tanh’ activation functions and full connectivity in both layers. If we change the sign of all of the weights and the bias feeding into a particular hidden unit, then, for a given input pattern, the sign of the activation of the hidden unit will be reversed, because ‘tanh’ is an odd function, so that tanh(−a) = −tanh(a). This transformation can be exactly compensated by changing the sign of all of the weights leading out of that hidden unit. Thus, by changing the signs of a particular group of weights (and a bias), the input–output mapping function represented by the network is unchanged, and so we have found two different weight vectors that give rise to the same mapping function. For M hidden units, there will be M such ‘sign-ﬂip’ \end{verbatim} egin{verbatim} The dashed blue lines show the z = 0.5 contours for each of the hidden units, and the red line shows the y = 0.5 decision surface for the net- work.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1155,"For comparison, the green line denotes the optimal decision boundary computed from the distributions used to generate the data.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1156,"symmetries, and thus any given weight vector will be one of a set 2M equivalent weight vectors .",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1157,"Similarly, imagine that we interchange the values of all of the weights (and the bias) leading both into and out of a particular hidden unit with the corresponding values of the weights (and bias) associated with a different hidden unit. Again, this clearly leaves the network input–output mapping function unchanged, but it corre- sponds to a different choice of weight vector. For M hidden units, any given weight vector will belong to a set of M! equivalent weight vectors associated with this inter- change symmetry, corresponding to the M! different orderings of the hidden units.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1158,"The network will therefore have an overall weight-space symmetry factor of M!2M. For networks with more than two layers of weights, the total level of symmetry will be given by the product of such factors, one for each layer of hidden units.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,232,1159,"It turns out that these factors account for all of the symmetries in weight space (except for possible accidental symmetries due to speciﬁc choices for the weight val- ues). Furthermore, the existence of these symmetries is not a particular property of the ‘tanh’ function but applies to a wide range of activation functions (K˙urkov´a and Kainen, 1994). In many cases, these symmetries in weight space are of little practi- cal consequence, although in Section 5.7 we shall encounter a situation in which we need to take them into account.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,233,1160,"So far, we have viewed neural networks as a general class of parametric nonlinear functions from a vector x of input variables to a vector y of output variables. A simple approach to the problem of determining the network parameters is to make an analogy with the discussion of polynomial curve ﬁtting in Section 1.1, and therefore to minimize a sum-of-squares error function. Given a training set comprising a set of input vectors {xn}, where n = 1, . . . , N, together with a corresponding set of \end{verbatim} egin{verbatim} target vectors {tn}, we minimize the error function E(w) = 1 2 N  n=1 ∥y(xn, w) −tn∥2.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,233,1161,"However, we can provide a much more general view of network training by ﬁrst giving a probabilistic interpretation to the network outputs. We have already seen many advantages of using probabilistic predictions in Section 1.5.4. Here it will also provide us with a clearer motivation both for the choice of output unit nonlinearity and the choice of error function.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,233,1162,"We start by discussing regression problems, and for the moment we consider a single target variable t that can take any real value. Following the discussions in Section 1.2.5 and 3.1, we assume that t has a Gaussian distribution with an x- dependent mean, which is given by the output of the neural network, so that p(t|x, w) = N t|y(x, w), β−1 (5.12) where β is the precision (inverse variance) of the Gaussian noise. Of course this is a somewhat restrictive assumption, and in Section 5.6 we shall see how to extend this approach to allow for more general conditional distributions. For the conditional distribution given by (5.12), it is sufﬁcient to take the output unit activation function to be the identity, because such a network can approximate any continuous function from x to y. Given a data set of N independent, identically distributed observations X = {x1, . . . , xN}, along with corresponding target values t = {t1, . . . , tN}, we can construct the corresponding likelihood function p(t|X, w, β) = N  n=1 p(tn|xn, w, β).",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1163,"Taking the negative logarithm, we obtain the error function β 2 N  n=1 {y(xn, w) −tn}2 −N 2 ln β + N 2 ln(2π) (5.13) which can be used to learn the parameters w and β. In Section 5.7, we shall dis- cuss the Bayesian treatment of neural networks, while here we consider a maximum likelihood approach. Note that in the neural networks literature, it is usual to con- sider the minimization of an error function rather than the maximization of the (log) likelihood, and so here we shall follow this convention. Consider ﬁrst the determi- nation of w. Maximizing the likelihood function is equivalent to minimizing the sum-of-squares error function given by E(w) = 1 2 N  n=1 {y(xn, w) −tn}2 (5.14) \end{verbatim} egin{verbatim} where we have discarded additive and multiplicative constants. The value of w found by minimizing E(w) will be denoted wML because it corresponds to the maximum likelihood solution. In practice, the nonlinearity of the network function y(xn, w) causes the error E(w) to be nonconvex, and so in practice local maxima of the likelihood may be found, corresponding to local minima of the error function, as discussed in Section 5.2.1.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1164,"Having found wML, the value of β can be found by minimizing the negative log likelihood to give 1 βML = 1 N N  n=1 {y(xn, wML) −tn}2.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1165,"Note that this can be evaluated once the iterative optimization required to ﬁnd wML is completed. If we have multiple target variables, and we assume that they are inde- pendent conditional on x and w with shared noise precision β, then the conditional distribution of the target values is given by p(t|x, w) = N t|y(x, w), β−1I .",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1166,"Following the same argument as for a single target variable, we see that the maximum likelihood weights are determined by minimizing the sum-of-squares error function (5.11). The noise precision is then given by 1 βML = 1 NK N  n=1 ∥y(xn, wML) −tn∥2 (5.17) where K is the number of target variables. The assumption of independence can be dropped at the expense of a slightly more complex optimization problem.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1167,"Recall from Section 4.3.6 that there is a natural pairing of the error function (given by the negative log likelihood) and the output unit activation function. In the regression case, we can view the network as having an output activation function that is the identity, so that yk = ak. The corresponding sum-of-squares error function has the property ∂E ∂ak = yk −tk (5.18) which we shall make use of when discussing error backpropagation in Section 5.3.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,234,1168,"Now consider the case of binary classiﬁcation in which we have a single target variable t such that t = 1 denotes class C1 and t = 0 denotes class C2. Following the discussion of canonical link functions in Section 4.3.6, we consider a network having a single output whose activation function is a logistic sigmoid y = σ(a) ≡ 1 1 + exp(−a) (5.19) so that 0 ⩽y(x, w) ⩽1. We can interpret y(x, w) as the conditional probability p(C1|x), with p(C2|x) given by 1 −y(x, w). The conditional distribution of targets given inputs is then a Bernoulli distribution of the form p(t|x, w) = y(x, w)t {1 −y(x, w)}1−t .",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1169,"If we consider a training set of independent observations, then the error function, which is given by the negative log likelihood, is then a cross-entropy error function of the form E(w) = − N  n=1 {tn ln yn + (1 −tn) ln(1 −yn)} (5.21) where yn denotes y(xn, w). Note that there is no analogue of the noise precision β because the target values are assumed to be correctly labelled. However, the model is easily extended to allow for labelling errors. Simard et al. (2003) found that using the cross-entropy error function instead of the sum-of-squares for a classiﬁcation problem leads to faster training as well as improved generalization.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1170,"If we have K separate binary classiﬁcations to perform, then we can use a net- work having K outputs each of which has a logistic sigmoid activation function.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1171,"Associated with each output is a binary class label tk ∈{0, 1}, where k = 1, . . . , K. If we assume that the class labels are independent, given the input vector, then the conditional distribution of the targets is p(t|x, w) = K  k=1 yk(x, w)tk [1 −yk(x, w)]1−tk .",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1172,"Taking the negative logarithm of the corresponding likelihood function then gives the following error function E(w) = − N  n=1 K  k=1 {tnk ln ynk + (1 −tnk) ln(1 −ynk)} (5.23) where ynk denotes yk(xn, w). Again, the derivative of the error function with re- spect to the activation for a particular output unit takes the form (5.18) just as in the regression case.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1173,"It is interesting to contrast the neural network solution to this problem with the corresponding approach based on a linear classiﬁcation model of the kind discussed in Chapter 4. Suppose that we are using a standard two-layer network of the kind shown in Figure 5.1. We see that the weight parameters in the ﬁrst layer of the network are shared between the various outputs, whereas in the linear model each classiﬁcation problem is solved independently. The ﬁrst layer of the network can be viewed as performing a nonlinear feature extraction, and the sharing of features between the different outputs can save on computation and can also lead to improved generalization.",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,235,1174,"Finally, we consider the standard multiclass classiﬁcation problem in which each input is assigned to one of K mutually exclusive classes. The binary target variables tk ∈{0, 1} have a 1-of-K coding scheme indicating the class, and the network outputs are interpreted as yk(x, w) = p(tk = 1|x), leading to the following error function E(w) = − N  n=1 K  k=1 tkn ln yk(xn, w).",Network Training
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,236,1175,Figure 5.5 Geometrical view of the error function E(w) as a surface sitting over weight space. Point wA is a local minimum and wB is the global minimum.,Parameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,236,1176,"At any point wC, the local gradient of the error surface is given by the vector ∇E.",Parameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,236,1177,"Following the discussion of Section 4.3.4, we see that the output unit activation function, which corresponds to the canonical link, is given by the softmax function yk(x, w) = exp(ak(x, w))  j exp(aj(x, w)) (5.25) which satisﬁes 0 ⩽yk ⩽1 and  k yk = 1. Note that the yk(x, w) are unchanged if a constant is added to all of the ak(x, w), causing the error function to be constant for some directions in weight space. This degeneracy is removed if an appropriate regularization term (Section 5.5) is added to the error function.",Parameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,236,1178,"Once again, the derivative of the error function with respect to the activation for a particular output unit takes the familiar form (5.18).",Parameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,236,1179,"In summary, there is a natural choice of both output unit activation function and matching error function, according to the type of problem being solved. For re- gression we use linear outputs and a sum-of-squares error, for (multiple independent) binary classiﬁcations we use logistic sigmoid outputs and a cross-entropy error func- tion, and for multiclass classiﬁcation we use softmax outputs with the corresponding multiclass cross-entropy error function. For classiﬁcation problems involving two classes, we can use a single logistic sigmoid output, or alternatively we can use a network with two outputs having a softmax output activation function.",Parameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,237,1180,"We turn next to the task of ﬁnding a weight vector w which minimizes the chosen function E(w). At this point, it is useful to have a geometrical picture of the error function, which we can view as a surface sitting over weight space as shown in Figure 5.5. First note that if we make a small step in weight space from w to w+δw then the change in the error function is δE ≃δwT∇E(w), where the vector ∇E(w) points in the direction of greatest rate of increase of the error function. Because the error E(w) is a smooth continuous function of w, its smallest value will occur at a \end{verbatim} egin{verbatim} point in weight space such that the gradient of the error function vanishes, so that ∇E(w) = 0 (5.26) as otherwise we could make a small step in the direction of −∇E(w) and thereby further reduce the error. Points at which the gradient vanishes are called stationary points, and may be further classiﬁed into minima, maxima, and saddle points.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,237,1181,"Our goal is to ﬁnd a vector w such that E(w) takes its smallest value. How- ever, the error function typically has a highly nonlinear dependence on the weights and bias parameters, and so there will be many points in weight space at which the gradient vanishes (or is numerically very small). Indeed, from the discussion in Sec- tion 5.1.1 we see that for any point w that is a local minimum, there will be other points in weight space that are equivalent minima. For instance, in a two-layer net- work of the kind shown in Figure 5.1, with M hidden units, each point in weight space is a member of a family of M!2M equivalent points.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,237,1182,"Furthermore, there will typically be multiple inequivalent stationary points and in particular multiple inequivalent minima. A minimum that corresponds to the smallest value of the error function for any weight vector is said to be a global minimum. Any other minima corresponding to higher values of the error function are said to be local minima. For a successful application of neural networks, it may not be necessary to ﬁnd the global minimum (and in general it will not be known whether the global minimum has been found) but it may be necessary to compare several local minima in order to ﬁnd a sufﬁciently good solution.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,237,1183,"Because there is clearly no hope of ﬁnding an analytical solution to the equa- tion ∇E(w) = 0 we resort to iterative numerical procedures. The optimization of continuous nonlinear functions is a widely studied problem and there exists an ex- tensive literature on how to solve it efﬁciently. Most techniques involve choosing some initial value w(0) for the weight vector and then moving through weight space in a succession of steps of the form w(τ+1) = w(τ) + ∆w(τ) (5.27) where τ labels the iteration step. Different algorithms involve different choices for the weight vector update ∆w(τ). Many algorithms make use of gradient information and therefore require that, after each update, the value of ∇E(w) is evaluated at the new weight vector w(τ+1). In order to understand the importance of gradient information, it is useful to consider a local approximation to the error function based on a Taylor expansion.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,237,1184,"Insight into the optimization problem, and into the various techniques for solv- ing it, can be obtained by considering a local quadratic approximation to the error function.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1185,Consider the Taylor expansion of E(w) around some point w in weight space E(w) ≃E(w) + (w −w)Tb + 1 2(w −w)TH(w −w) (5.28) \end{verbatim} egin{verbatim} where cubic and higher terms have been omitted. Here b is deﬁned to be the gradient of E evaluated at w b ≡∇E|w=b w (5.29) and the Hessian matrix H = ∇∇E has elements (H)ij ≡ ∂E ∂wi∂wj  w=b w .,Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1186,"From (5.28), the corresponding local approximation to the gradient is given by ∇E ≃b + H(w −w).",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1187,"For points w that are sufﬁciently close to w, these expressions will give reasonable approximations for the error and its gradient.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1188,"Consider the particular case of a local quadratic approximation around a point w⋆that is a minimum of the error function. In this case there is no linear term, because ∇E = 0 at w⋆, and (5.28) becomes E(w) = E(w⋆) + 1 2(w −w⋆)TH(w −w⋆) (5.32) where the Hessian H is evaluated at w⋆. In order to interpret this geometrically, consider the eigenvalue equation for the Hessian matrix Hui = λiui (5.33) where the eigenvectors ui form a complete orthonormal set (Appendix C) so that uT i uj = δij.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1189,We now expand (w −w⋆) as a linear combination of the eigenvectors in the form w −w⋆=  i αiui.,Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1190,"This can be regarded as a transformation of the coordinate system in which the origin is translated to the point w⋆, and the axes are rotated to align with the eigenvectors (through the orthogonal matrix whose columns are the ui), and is discussed in more detail in Appendix C. Substituting (5.35) into (5.32), and using (5.33) and (5.34), allows the error function to be written in the form E(w) = E(w⋆) + 1 2  i λiα2 i.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,238,1191,"A matrix H is said to be positive deﬁnite if, and only if, vTHv > 0 for all v.",Local quadratic approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1192,"Figure 5.6 In the neighbourhood of a min- imum w⋆, the error function can be approximated by a quadratic.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1193,"stant error are then ellipses whose axes are aligned with the eigenvectors ui of the Hes- sian matrix, with lengths that are inversely proportional to the square roots of the correspond- ing eigenvectors λi.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1194,"Because the eigenvectors {ui} form a complete set, an arbitrary vector v can be written in the form v =  i ciui.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1195,"From (5.33) and (5.34), we then have vTHv =  i c2 iλi (5.39) and so H will be positive deﬁnite if, and only if, all of its eigenvalues are positive.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1196,"In the new coordinate system, whose basis vectors are given by the eigenvectors {ui}, the contours of constant E are ellipses centred on the origin, as illustrated in Figure 5.6. For a one-dimensional weight space, a stationary point w⋆will be a minimum if ∂2E ∂w2  w⋆ > 0.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1197,"The corresponding result in D-dimensions is that the Hessian matrix, evaluated at w⋆, should be positive deﬁnite.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1198,"As we shall see in Section 5.3, it is possible to evaluate the gradient of an error function efﬁciently by means of the backpropagation procedure. The use of this gradient information can lead to signiﬁcant improvements in the speed with which the minima of the error function can be located. We can see why this is so, as follows.",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,239,1199,"In the quadratic approximation to the error function, given in (5.28), the error surface is speciﬁed by the quantities b and H, which contain a total of W(W + 3)/2 independent elements (because the matrix H is symmetric), where W is the dimensionality of w (i.e., the total number of adaptive parameters in the network).",Use of gradient information
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1200,"The location of the minimum of this quadratic approximation therefore depends on O(W 2) parameters, and we should not expect to be able to locate the minimum until we have gathered O(W 2) independent pieces of information. If we do not make use of gradient information, we would expect to have to perform O(W 2) function \end{verbatim} egin{verbatim} evaluations, each of which would require O(W) steps. Thus, the computational effort needed to ﬁnd the minimum using such an approach would be O(W 3).",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1201,"Now compare this with an algorithm that makes use of the gradient information. Because each evaluation of ∇E brings W items of information, we might hope to ﬁnd the minimum of the function in O(W) gradient evaluations. As we shall see, by using error backpropagation, each such evaluation takes only O(W) steps and so the minimum can now be found in O(W 2) steps. For this reason, the use of gradient information forms the basis of practical algorithms for training neural networks.",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1202,"The simplest approach to using gradient information is to choose the weight update in (5.27) to comprise a small step in the direction of the negative gradient, so that w(τ+1) = w(τ) −η∇E(w(τ)) (5.41) where the parameter η > 0 is known as the learning rate. After each such update, the gradient is re-evaluated for the new weight vector and the process repeated. Note that the error function is deﬁned with respect to a training set, and so each step requires that the entire training set be processed in order to evaluate ∇E. Techniques that use the whole data set at once are called batch methods. At each step the weight vector is moved in the direction of the greatest rate of decrease of the error function, and so this approach is known as gradient descent or steepest descent. Although such an approach might intuitively seem reasonable, in fact it turns out to be a poor algorithm, for reasons discussed in Bishop and Nabney (2008).",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1203,"For batch optimization, there are more efﬁcient methods, such as conjugate gra- dients and quasi-Newton methods, which are much more robust and much faster than simple gradient descent (Gill et al., 1981; Fletcher, 1987; Nocedal and Wright, 1999). Unlike gradient descent, these algorithms have the property that the error function always decreases at each iteration unless the weight vector has arrived at a local or global minimum.",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1204,"In order to ﬁnd a sufﬁciently good minimum, it may be necessary to run a gradient-based algorithm multiple times, each time using a different randomly cho- sen starting point, and comparing the resulting performance on an independent vali- dation set.",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1205,"There is, however, an on-line version of gradient descent that has proved useful in practice for training neural networks on large data sets (Le Cun et al., 1989).",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1206,"Error functions based on maximum likelihood for a set of independent observations comprise a sum of terms, one for each data point E(w) = N  n=1 En(w).",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,240,1207,"On-line gradient descent, also known as sequential gradient descent or stochastic gradient descent, makes an update to the weight vector based on one data point at a time, so that w(τ+1) = w(τ) −η∇En(w(τ)).",Gradient descent optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,241,1208,This update is repeated by cycling through the data either in sequence or by selecting points at random with replacement. There are of course intermediate scenarios in which the updates are based on batches of data points.,Error Backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,241,1209,"One advantage of on-line methods compared to batch methods is that the former handle redundancy in the data much more efﬁciently. To see, this consider an ex- treme example in which we take a data set and double its size by duplicating every data point. Note that this simply multiplies the error function by a factor of 2 and so is equivalent to using the original error function. Batch methods will require double the computational effort to evaluate the batch error function gradient, whereas on- line methods will be unaffected. Another property of on-line gradient descent is the possibility of escaping from local minima, since a stationary point with respect to the error function for the whole data set will generally not be a stationary point for each data point individually.",Error Backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,241,1210,"Nonlinear optimization algorithms, and their practical application to neural net- work training, are discussed in detail in Bishop and Nabney (2008).",Error Backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,241,1211,"Our goal in this section is to ﬁnd an efﬁcient technique for evaluating the gradient of an error function E(w) for a feed-forward neural network. We shall see that this can be achieved using a local message passing scheme in which information is sent alternately forwards and backwards through the network and is known as error backpropagation, or sometimes simply as backprop.",Error Backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,241,1212,"It should be noted that the term backpropagation is used in the neural com- puting literature to mean a variety of different things. For instance, the multilayer perceptron architecture is sometimes called a backpropagation network. The term backpropagation is also used to describe the training of a multilayer perceptron us- ing gradient descent applied to a sum-of-squares error function. In order to clarify the terminology, it is useful to consider the nature of the training process more care- fully. Most training algorithms involve an iterative procedure for minimization of an error function, with adjustments to the weights being made in a sequence of steps. At each such step, we can distinguish between two distinct stages. In the ﬁrst stage, the derivatives of the error function with respect to the weights must be evaluated. As we shall see, the important contribution of the backpropagation technique is in pro- viding a computationally efﬁcient method for evaluating such derivatives. Because it is at this stage that errors are propagated backwards through the network, we shall use the term backpropagation speciﬁcally to describe the evaluation of derivatives.",Error Backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,242,1213,"In the second stage, the derivatives are then used to compute the adjustments to be made to the weights. The simplest such technique, and the one originally considered by Rumelhart et al. (1986), involves gradient descent. It is important to recognize that the two stages are distinct. Thus, the ﬁrst stage, namely the propagation of er- rors backwards through the network in order to evaluate derivatives, can be applied to many other kinds of network and not just the multilayer perceptron. It can also be applied to error functions other that just the simple sum-of-squares, and to the eval- \end{verbatim} egin{verbatim} uation of other derivatives such as the Jacobian and Hessian matrices, as we shall see later in this chapter. Similarly, the second stage of weight adjustment using the calculated derivatives can be tackled using a variety of optimization schemes, many of which are substantially more powerful than simple gradient descent.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,242,1214,"We now derive the backpropagation algorithm for a general network having ar- bitrary feed-forward topology, arbitrary differentiable nonlinear activation functions, and a broad class of error function. The resulting formulae will then be illustrated using a simple layered network structure having a single layer of sigmoidal hidden units together with a sum-of-squares error.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,242,1215,"Many error functions of practical interest, for instance those deﬁned by maxi- mum likelihood for a set of i.i.d. data, comprise a sum of terms, one for each data point in the training set, so that E(w) = N  n=1 En(w).",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,242,1216,"Here we shall consider the problem of evaluating ∇En(w) for one such term in the error function. This may be used directly for sequential optimization, or the results can be accumulated over the training set in the case of batch methods.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,242,1217,"Consider ﬁrst a simple linear model in which the outputs yk are linear combina- tions of the input variables xi so that yk =  i wkixi (5.45) together with an error function that, for a particular input pattern n, takes the form En = 1 2  k (ynk −tnk)2 (5.46) where ynk = yk(xn, w). The gradient of this error function with respect to a weight wji is given by ∂En ∂wji = (ynj −tnj)xni (5.47) which can be interpreted as a ‘local’ computation involving the product of an ‘error signal’ ynj −tnj associated with the output end of the link wji and the variable xni associated with the input end of the link. In Section 4.3.2, we saw how a similar formula arises with the logistic sigmoid activation function together with the cross entropy error function, and similarly for the softmax activation function together with its matching cross-entropy error function. We shall now see how this simple result extends to the more complex setting of multilayer feed-forward networks.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1218,"In a general feed-forward network, each unit computes a weighted sum of its inputs of the form aj =  i wjizi (5.48) \end{verbatim} egin{verbatim} where zi is the activation of a unit, or input, that sends a connection to unit j, and wji is the weight associated with that connection. In Section 5.1, we saw that biases can be included in this sum by introducing an extra unit, or input, with activation ﬁxed at +1. We therefore do not need to deal with biases explicitly. The sum in (5.48) is transformed by a nonlinear activation function h(·) to give the activation zj of unit j in the form zj = h(aj).",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1219,"Note that one or more of the variables zi in the sum in (5.48) could be an input, and similarly, the unit j in (5.49) could be an output.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1220,"For each pattern in the training set, we shall suppose that we have supplied the corresponding input vector to the network and calculated the activations of all of the hidden and output units in the network by successive application of (5.48) and (5.49). This process is often called forward propagation because it can be regarded as a forward ﬂow of information through the network.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1221,Now consider the evaluation of the derivative of En with respect to a weight wji. The outputs of the various units will depend on the particular input pattern n.,Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1222,"However, in order to keep the notation uncluttered, we shall omit the subscript n from the network variables. First we note that En depends on the weight wji only via the summed input aj to unit j. We can therefore apply the chain rule for partial derivatives to give ∂En ∂wji = ∂En ∂aj ∂aj ∂wji .",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1223,"We now introduce a useful notation δj ≡∂En ∂aj (5.51) where the δ’s are often referred to as errors for reasons we shall see shortly. Using (5.48), we can write ∂aj ∂wji = zi.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1224,"Substituting (5.51) and (5.52) into (5.50), we then obtain ∂En ∂wji = δjzi.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1225,Equation (5.53) tells us that the required derivative is obtained simply by multiplying the value of δ for the unit at the output end of the weight by the value of z for the unit at the input end of the weight (where z = 1 in the case of a bias). Note that this takes the same form as for the simple linear model considered at the start of this section.,Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,243,1226,"Thus, in order to evaluate the derivatives, we need only to calculate the value of δj for each hidden and output unit in the network, and then apply (5.53).",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,244,1227,"Figure 5.7 Illustration of the calculation of δj for hidden unit j by backpropagation of the δ’s from those units k to which unit j sends connections. The blue arrow denotes the direction of information ﬂow during forward propagation, and the red arrows indicate the backward propagation of error information.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,244,1228,"As we have seen already, for the output units, we have δk = yk −tk (5.54) \end{verbatim} egin{verbatim} zi zj δj δk δ1 wji wkj provided we are using the canonical link as the output-unit activation function. To evaluate the δ’s for hidden units, we again make use of the chain rule for partial derivatives, δj ≡∂En ∂aj =  k ∂En ∂ak ∂ak ∂aj (5.55) where the sum runs over all units k to which unit j sends connections. The arrange- ment of units and weights is illustrated in Figure 5.7. Note that the units labelled k could include other hidden units and/or output units. In writing down (5.55), we are making use of the fact that variations in aj give rise to variations in the error func- tion only through variations in the variables ak. If we now substitute the deﬁnition of δ given by (5.51) into (5.55), and make use of (5.48) and (5.49), we obtain the following backpropagation formula δj = h′(aj)  k wkjδk (5.56) which tells us that the value of δ for a particular hidden unit can be obtained by propagating the δ’s backwards from units higher up in the network, as illustrated in Figure 5.7. Note that the summation in (5.56) is taken over the ﬁrst index on wkj (corresponding to backward propagation of information through the network), whereas in the forward propagation equation (5.10) it is taken over the second index.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,244,1229,"Because we already know the values of the δ’s for the output units, it follows that by recursively applying (5.56) we can evaluate the δ’s for all of the hidden units in a feed-forward network, regardless of its topology.",Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,244,1230,The backpropagation procedure can therefore be summarized as follows. 1. Apply an input vector xn to the network and forward propagate through the network using (5.48) and (5.49) to ﬁnd the activations of all the hidden and output units.,Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,244,1231,2. Evaluate the δk for all the output units using (5.54). 3. Backpropagate the δ’s using (5.56) to obtain δj for each hidden unit in the network.,Evaluation of error-function derivatives
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1232,"4. Use (5.53) to evaluate the required derivatives. \end{verbatim} egin{verbatim} For batch methods, the derivative of the total error E can then be obtained by repeating the above steps for each pattern in the training set and then summing over all patterns: ∂E ∂wji =  n ∂En ∂wji .",A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1233,"In the above derivation we have implicitly assumed that each hidden or output unit in the network has the same activation function h(·). The derivation is easily general- ized, however, to allow different units to have individual activation functions, simply by keeping track of which form of h(·) goes with which unit.",A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1234,"The above derivation of the backpropagation procedure allowed for general forms for the error function, the activation functions, and the network topology. In order to illustrate the application of this algorithm, we shall consider a particular example. This is chosen both for its simplicity and for its practical importance, be- cause many applications of neural networks reported in the literature make use of this type of network. Speciﬁcally, we shall consider a two-layer network of the form illustrated in Figure 5.1, together with a sum-of-squares error, in which the output units have linear activation functions, so that yk = ak, while the hidden units have logistic sigmoid activation functions given by h(a) ≡tanh(a) (5.58) where tanh(a) = ea −e−a ea + e−a .",A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1235,A useful feature of this function is that its derivative can be expressed in a par- ticularly simple form: h′(a) = 1 −h(a)2.,A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1236,"We also consider a standard sum-of-squares error function, so that for pattern n the error is given by En = 1 2 K  k=1 (yk −tk)2 (5.61) where yk is the activation of output unit k, and tk is the corresponding target, for a particular input pattern xn.",A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,245,1237,"For each pattern in the training set in turn, we ﬁrst perform a forward propagation using aj = D  i=0 w(1) ji xi (5.62) zj = tanh(aj) (5.63) yk = M  j=0 w(2) kj zj.",A simple example
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1238,Next we compute the δ’s for each output unit using δk = yk −tk.,Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1239,Then we backpropagate these to obtain δs for the hidden units using δj = (1 −z2 j) K  k=1 wkjδk.,Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1240,"Finally, the derivatives with respect to the ﬁrst-layer and second-layer weights are given by ∂En ∂w(1) ji = δjxi, ∂En ∂w(2) kj = δkzj.",Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1241,"One of the most important aspects of backpropagation is its computational efﬁ- ciency. To understand this, let us examine how the number of computer operations required to evaluate the derivatives of the error function scales with the total number W of weights and biases in the network. A single evaluation of the error function (for a given input pattern) would require O(W) operations, for sufﬁciently large W.",Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1242,"This follows from the fact that, except for a network with very sparse connections, the number of weights is typically much greater than the number of units, and so the bulk of the computational effort in forward propagation is concerned with evaluat- ing the sums in (5.48), with the evaluation of the activation functions representing a small overhead. Each term in the sum in (5.48) requires one multiplication and one addition, leading to an overall computational cost that is O(W).",Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1243,"An alternative approach to backpropagation for computing the derivatives of the error function is to use ﬁnite differences. This can be done by perturbing each weight in turn, and approximating the derivatives by the expression ∂En ∂wji = En(wji + ϵ) −En(wji) ϵ + O(ϵ) (5.68) where ϵ ≪1. In a software simulation, the accuracy of the approximation to the derivatives can be improved by making ϵ smaller, until numerical roundoff problems arise. The accuracy of the ﬁnite differences method can be improved signiﬁcantly by using symmetrical central differences of the form ∂En ∂wji = En(wji + ϵ) −En(wji −ϵ) 2ϵ + O(ϵ2).",Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,246,1244,"In this case, the O(ϵ) corrections cancel, as can be veriﬁed by Taylor expansion on the right-hand side of (5.69), and so the residual corrections are O(ϵ2). The number of computational steps is, however, roughly doubled compared with (5.68).",Efficiency of backpropagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,247,1245,Figure 5.8 Illustration of a modular pattern recognition system in which the Jacobian matrix can be used to backpropagate error signals from the outputs through to ear- lier modules in the system.,The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,247,1246,"The main problem with numerical differentiation is that the highly desirable O(W) scaling has been lost. Each forward propagation requires O(W) steps, and \end{verbatim} egin{verbatim} x u w y z v there are W weights in the network each of which must be perturbed individually, so that the overall scaling is O(W 2).",The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,247,1247,"However, numerical differentiation plays an important role in practice, because a comparison of the derivatives calculated by backpropagation with those obtained us- ing central differences provides a powerful check on the correctness of any software implementation of the backpropagation algorithm. When training networks in prac- tice, derivatives should be evaluated using backpropagation, because this gives the greatest accuracy and numerical efﬁciency. However, the results should be compared with numerical differentiation using (5.69) for some test cases in order to check the correctness of the implementation.",The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,247,1248,"We have seen how the derivatives of an error function with respect to the weights can be obtained by the propagation of errors backwards through the network. The technique of backpropagation can also be applied to the calculation of other deriva- tives. Here we consider the evaluation of the Jacobian matrix, whose elements are given by the derivatives of the network outputs with respect to the inputs Jki ≡∂yk ∂xi (5.70) where each such derivative is evaluated with all other inputs held ﬁxed. Jacobian matrices play a useful role in systems built from a number of distinct modules, as illustrated in Figure 5.8. Each module can comprise a ﬁxed or adaptive function, which can be linear or nonlinear, so long as it is differentiable. Suppose we wish to minimize an error function E with respect to the parameter w in Figure 5.8. The derivative of the error function is given by ∂E ∂w =  k,j ∂E ∂yk ∂yk ∂zj ∂zj ∂w (5.71) in which the Jacobian matrix for the red module in Figure 5.8 appears in the middle term.",The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,248,1249,"Because the Jacobian matrix provides a measure of the local sensitivity of the outputs to changes in each of the input variables, it also allows any known errors ∆xi \end{verbatim} egin{verbatim} associated with the inputs to be propagated through the trained network in order to estimate their contribution ∆yk to the errors at the outputs, through the relation ∆yk ≃  i ∂yk ∂xi ∆xi (5.72) which is valid provided the |∆xi| are small. In general, the network mapping rep- resented by a trained neural network will be nonlinear, and so the elements of the Jacobian matrix will not be constants but will depend on the particular input vector used. Thus (5.72) is valid only for small perturbations of the inputs, and the Jacobian itself must be re-evaluated for each new input vector.",The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,248,1250,"The Jacobian matrix can be evaluated using a backpropagation procedure that is similar to the one derived earlier for evaluating the derivatives of an error function with respect to the weights. We start by writing the element Jki in the form Jki = ∂yk ∂xi =  j ∂yk ∂aj ∂aj ∂xi =  j wji ∂yk ∂aj (5.73) where we have made use of (5.48). The sum in (5.73) runs over all units j to which the input unit i sends connections (for example, over all units in the ﬁrst hidden layer in the layered topology considered earlier). We now write down a recursive backpropagation formula to determine the derivatives ∂yk/∂aj ∂yk ∂aj =  l ∂yk ∂al ∂al ∂aj = h′(aj)  l wlj ∂yk ∂al (5.74) where the sum runs over all units l to which unit j sends connections (corresponding to the ﬁrst index of wlj). Again, we have made use of (5.48) and (5.49). This backpropagation starts at the output units for which the required derivatives can be found directly from the functional form of the output-unit activation function. For instance, if we have individual sigmoidal activation functions at each output unit, then ∂yk ∂aj = δkjσ′(aj) (5.75) whereas for softmax outputs we have ∂yk ∂aj = δkjyk −ykyj.",The Jacobian matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1251,"We can summarize the procedure for evaluating the Jacobian matrix as follows. Apply the input vector corresponding to the point in input space at which the Ja- cobian matrix is to be found, and forward propagate in the usual way to obtain the \end{verbatim} egin{verbatim} activations of all of the hidden and output units in the network. Next, for each row k of the Jacobian matrix, corresponding to the output unit k, backpropagate using the recursive relation (5.74), starting with (5.75) or (5.76), for all of the hidden units in the network. Finally, use (5.73) to do the backpropagation to the inputs. The Jacobian can also be evaluated using an alternative forward propagation formalism, which can be derived in an analogous way to the backpropagation approach given here.",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1252,"Again, the implementation of such algorithms can be checked by using numeri- cal differentiation in the form ∂yk ∂xi = yk(xi + ϵ) −yk(xi −ϵ) 2ϵ + O(ϵ2) (5.77) which involves 2D forward propagations for a network having D inputs.",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1253,"We have shown how the technique of backpropagation can be used to obtain the ﬁrst derivatives of an error function with respect to the weights in the network. Back- propagation can also be used to evaluate the second derivatives of the error, given by ∂2E ∂wji∂wlk .",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1254,"Note that it is sometimes convenient to consider all of the weight and bias parameters as elements wi of a single vector, denoted w, in which case the second derivatives form the elements Hij of the Hessian matrix H, where i, j ∈{1, . . . , W} and W is the total number of weights and biases. The Hessian plays an important role in many aspects of neural computing, including the following: 1. Several nonlinear optimization algorithms used for training neural networks are based on considerations of the second-order properties of the error surface, which are controlled by the Hessian matrix (Bishop and Nabney, 2008).",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1255,"2. The Hessian forms the basis of a fast procedure for re-training a feed-forward network following a small change in the training data (Bishop, 1991).",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1256,"3. The inverse of the Hessian has been used to identify the least signiﬁcant weights in a network as part of network ‘pruning’ algorithms (Le Cun et al., 1990).",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1257,"4. The Hessian plays a central role in the Laplace approximation for a Bayesian neural network (see Section 5.7). Its inverse is used to determine the predic- tive distribution for a trained network, its eigenvalues determine the values of hyperparameters, and its determinant is used to evaluate the model evidence.",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,249,1258,"Various approximation schemes have been used to evaluate the Hessian matrix for a neural network. However, the Hessian can also be calculated exactly using an extension of the backpropagation technique.",The Hessian Matrix
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1259,"An important consideration for many applications of the Hessian is the efﬁciency with which it can be evaluated. If there are W parameters (weights and biases) in the network, then the Hessian matrix has dimensions W × W and so the computational effort needed to evaluate the Hessian will scale like O(W 2) for each pattern in the data set. As we shall see, there are efﬁcient methods for evaluating the Hessian whose scaling is indeed O(W 2).",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1260,"Some of the applications for the Hessian matrix discussed above require the inverse of the Hessian, rather than the Hessian itself. For this reason, there has been some interest in using a diagonal approximation to the Hessian, in other words one that simply replaces the off-diagonal elements with zeros, because its inverse is trivial to evaluate. Again, we shall consider an error function that consists of a sum of terms, one for each pattern in the data set, so that E =  n En. The Hessian can then be obtained by considering one pattern at a time, and then summing the results over all patterns. From (5.48), the diagonal elements of the Hessian, for pattern n, can be written ∂2En ∂w2 ji = ∂2En ∂a2 j z2 i .",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1261,"Using (5.48) and (5.49), the second derivatives on the right-hand side of (5.79) can be found recursively using the chain rule of differential calculus to give a backprop- agation equation of the form ∂2En ∂a2 j = h′(aj)2  k  k′ wkjwk′j ∂2En ∂ak∂ak′ + h′′(aj)  k wkj ∂En ∂ak .",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1262,"If we now neglect off-diagonal elements in the second-derivative terms, we obtain (Becker and Le Cun, 1989; Le Cun et al., 1990) ∂2En ∂a2 j = h′(aj)2  k w2 kj ∂2En ∂a2 k + h′′(aj)  k wkj ∂En ∂ak .",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1263,"Note that the number of computational steps required to evaluate this approximation is O(W), where W is the total number of weight and bias parameters in the network, compared with O(W 2) for the full Hessian.",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,250,1264,"Ricotti et al. (1988) also used the diagonal approximation to the Hessian, but they retained all terms in the evaluation of ∂2En/∂a2 j and so obtained exact expres- sions for the diagonal terms. Note that this no longer has O(W) scaling. The major problem with diagonal approximations, however, is that in practice the Hessian is typically found to be strongly nondiagonal, and so these approximations, which are driven mainly be computational convenience, must be treated with care.",Diagonal approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1265,"When neural networks are applied to regression problems, it is common to use a sum-of-squares error function of the form E = 1 2 N  n=1 (yn −tn)2 (5.82) where we have considered the case of a single output in order to keep the notation simple (the extension to several outputs is straightforward). We can then write the Hessian matrix in the form H = ∇∇E = N  n=1 ∇yn∇yn + N  n=1 (yn −tn)∇∇yn.",Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1266,"If the network has been trained on the data set, and its outputs yn happen to be very close to the target values tn, then the second term in (5.83) will be small and can be neglected. More generally, however, it may be appropriate to neglect this term by the following argument. Recall from Section 1.5.5 that the optimal function that minimizes a sum-of-squares loss is the conditional average of the target data. The quantity (yn −tn) is then a random variable with zero mean. If we assume that its value is uncorrelated with the value of the second derivative term on the right-hand side of (5.83), then the whole term will average to zero in the summation over n.",Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1267,"By neglecting the second term in (5.83), we arrive at the Levenberg–Marquardt approximation or outer product approximation (because the Hessian matrix is built up from a sum of outer products of vectors), given by H ≃ N  n=1 bnbT n (5.84) where bn = ∇yn = ∇an because the activation function for the output units is simply the identity. Evaluation of the outer product approximation for the Hessian is straightforward as it only involves ﬁrst derivatives of the error function, which can be evaluated efﬁciently in O(W) steps using standard backpropagation. The elements of the matrix can then be found in O(W 2) steps by simple multiplication.",Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1268,"It is important to emphasize that this approximation is only likely to be valid for a network that has been trained appropriately, and that for a general network mapping the second derivative terms on the right-hand side of (5.83) will typically not be negligible.",Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1269,"In the case of the cross-entropy error function for a network with logistic sigmoid output-unit activation functions, the corresponding approximation is given by H ≃ N  n=1 yn(1 −yn)bnbT n.",Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,251,1270,An analogous result can be obtained for multiclass networks having softmax output- unit activation functions.,Outer product approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1271,"We can use the outer-product approximation to develop a computationally ef- ﬁcient procedure for approximating the inverse of the Hessian (Hassibi and Stork, 1993). First we write the outer-product approximation in matrix notation as HN = N  n=1 bnbT n (5.86) where bn ≡∇wan is the contribution to the gradient of the output unit activation arising from data point n. We now derive a sequential procedure for building up the Hessian by including data points one at a time. Suppose we have already obtained the inverse Hessian using the ﬁrst L data points. By separating off the contribution from data point L + 1, we obtain HL+1 = HL + bL+1bT L+1.",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1272,"In order to evaluate the inverse of the Hessian, we now consider the matrix identity M + vvT−1 = M−1 −(M−1v) vTM−1 1 + vTM−1v (5.88) where I is the unit matrix, which is simply a special case of the Woodbury identity (C.7). If we now identify HL with M and bL+1 with v, we obtain H−1 L+1 = H−1 L −H−1 L bL+1bT L+1H−1 L 1 + bT L+1H−1 L bL+1 .",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1273,"In this way, data points are sequentially absorbed until L+1 = N and the whole data set has been processed. This result therefore represents a procedure for evaluating the inverse of the Hessian using a single pass through the data set. The initial matrix H0 is chosen to be αI, where α is a small quantity, so that the algorithm actually ﬁnds the inverse of H + αI. The results are not particularly sensitive to the precise value of α. Extension of this algorithm to networks having more than one output is straightforward.",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1274,"We note here that the Hessian matrix can sometimes be calculated indirectly as part of the network training algorithm. In particular, quasi-Newton nonlinear opti- mization algorithms gradually build up an approximation to the inverse of the Hes- sian during training. Such algorithms are discussed in detail in Bishop and Nabney (2008).",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1275,"As in the case of the ﬁrst derivatives of the error function, we can ﬁnd the second derivatives by using ﬁnite differences, with accuracy limited by numerical precision.",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,252,1276,"If we perturb each possible pair of weights in turn, we obtain ∂2E ∂wji∂wlk = 1 4ϵ2 {E(wji + ϵ, wlk + ϵ) −E(wji + ϵ, wlk −ϵ) −E(wji −ϵ, wlk + ϵ) + E(wji −ϵ, wlk −ϵ)} + O(ϵ2).",Inverse Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1277,"Again, by using a symmetrical central differences formulation, we ensure that the residual errors are O(ϵ2) rather than O(ϵ). Because there are W 2 elements in the Hessian matrix, and because the evaluation of each element requires four forward propagations each needing O(W) operations (per pattern), we see that this approach will require O(W 3) operations to evaluate the complete Hessian. It therefore has poor scaling properties, although in practice it is very useful as a check on the soft- ware implementation of backpropagation methods.",Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1278,"A more efﬁcient version of numerical differentiation can be found by applying central differences to the ﬁrst derivatives of the error function, which are themselves calculated using backpropagation. This gives ∂2E ∂wji∂wlk = 1 2ϵ ∂E ∂wji (wlk + ϵ) −∂E ∂wji (wlk −ϵ) + O(ϵ2).",Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1279,"Because there are now only W weights to be perturbed, and because the gradients can be evaluated in O(W) steps, we see that this method gives the Hessian in O(W 2) operations.",Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1280,"So far, we have considered various approximation schemes for evaluating the Hessian matrix or its inverse. The Hessian can also be evaluated exactly, for a net- work of arbitrary feed-forward topology, using extension of the technique of back- propagation used to evaluate ﬁrst derivatives, which shares many of its desirable features including computational efﬁciency (Bishop, 1991; Bishop, 1992). It can be applied to any differentiable error function that can be expressed as a function of the network outputs and to networks having arbitrary differentiable activation func- tions. The number of computational steps needed to evaluate the Hessian scales like O(W 2). Similar algorithms have also been considered by Buntine and Weigend (1993).",Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1281,"Here we consider the speciﬁc case of a network having two layers of weights, for which the required equations are easily derived. We shall use indices i and i′ to denote inputs, indices j and j′ to denoted hidden units, and indices k and k′ to denote outputs. We ﬁrst deﬁne δk = ∂En ∂ak , Mkk′ ≡ ∂2En ∂ak∂ak′ (5.92) where En is the contribution to the error from data point n. The Hessian matrix for this network can then be considered in three separate blocks as follows.",Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,253,1282,1. Both weights in the second layer: ∂2En ∂w(2) kj ∂w(2) k′j′ = zjzj′Mkk′.,Exact evaluation of the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,254,1283,2. Both weights in the ﬁrst layer: ∂2En ∂w(1) ji ∂w(1) j′i′ = xixi′h′′(aj′)Ijj′  k w(2) kj′δk +xixi′h′(aj′)h′(aj)  k  k′ w(2) k′j′w(2) kj Mkk′.,Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,254,1284,3. One weight in each layer: ∂2En ∂w(1) ji ∂w(2) kj′ = xih′(aj′)  δkIjj′ + zj  k′ w(2) k′j′Hkk′  .,Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,254,1285,"Here Ijj′ is the j, j′ element of the identity matrix. If one or both of the weights is a bias term, then the corresponding expressions are obtained simply by setting the appropriate activation(s) to 1. Inclusion of skip-layer connections is straightforward.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,254,1286,"For many applications of the Hessian, the quantity of interest is not the Hessian matrix H itself but the product of H with some vector v. We have seen that the evaluation of the Hessian takes O(W 2) operations, and it also requires storage that is O(W 2). The vector vTH that we wish to calculate, however, has only W elements, so instead of computing the Hessian as an intermediate step, we can instead try to ﬁnd an efﬁcient approach to evaluating vTH directly in a way that requires only O(W) operations.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,254,1287,"To do this, we ﬁrst note that vTH = vT∇(∇E) (5.96) where ∇denotes the gradient operator in weight space. We can then write down the standard forward-propagation and backpropagation equations for the evaluation of ∇E and apply (5.96) to these equations to give a set of forward-propagation and backpropagation equations for the evaluation of vTH (Møller, 1993; Pearlmutter, 1994). This corresponds to acting on the original forward-propagation and back- propagation equations with a differential operator vT∇. Pearlmutter (1994) used the notation R{·} to denote the operator vT∇, and we shall follow this convention. The analysis is straightforward and makes use of the usual rules of differential calculus, together with the result R{w} = v.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,255,1288,"The technique is best illustrated with a simple example, and again we choose a two-layer network of the form shown in Figure 5.1, with linear output units and a sum-of-squares error function. As before, we consider the contribution to the error function from one pattern in the data set. The required vector is then obtained as \end{verbatim} egin{verbatim} usual by summing over the contributions from each of the patterns separately. For the two-layer network, the forward-propagation equations are given by aj =  i wjixi (5.98) zj = h(aj) (5.99) yk =  j wkjzj.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,255,1289,"We now act on these equations using the R{·} operator to obtain a set of forward propagation equations in the form R{aj} =  i vjixi (5.101) R{zj} = h′(aj)R{aj} (5.102) R{yk} =  j wkjR{zj} +  j vkjzj (5.103) where vji is the element of the vector v that corresponds to the weight wji. Quan- tities of the form R{zj}, R{aj} and R{yk} are to be regarded as new variables whose values are found using the above equations.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,255,1290,"Because we are considering a sum-of-squares error function, we have the fol- lowing standard backpropagation expressions: δk = yk −tk (5.104) δj = h′(aj)  k wkjδk.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,255,1291,"Again, we act on these equations with the R{·} operator to obtain a set of backprop- agation equations in the form R{δk} = R{yk} (5.106) R{δj} = h′′(aj)R{aj}  k wkjδk + h′(aj)  k vkjδk + h′(aj)  k wkjR{δk}.",Fast multiplication by the Hessian
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,256,1292,"Finally, we have the usual equations for the ﬁrst derivatives of the error ∂E ∂wkj = δkzj (5.108) ∂E ∂wji = δjxi (5.109) \end{verbatim} egin{verbatim} and acting on these with the R{·} operator, we obtain expressions for the elements of the vector vTH R ∂E ∂wkj = R{δk}zj + δkR{zj} (5.110) R ∂E ∂wji = xiR{δj}.",Regularization in Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,256,1293,"The implementation of this algorithm involves the introduction of additional variables R{aj}, R{zj} and R{δj} for the hidden units and R{δk} and R{yk} for the output units. For each input pattern, the values of these quantities can be found using the above results, and the elements of vTH are then given by (5.110) and (5.111). An elegant aspect of this technique is that the equations for evaluating vTH mirror closely those for standard forward and backward propagation, and so the extension of existing software to compute this product is typically straightforward.",Regularization in Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,256,1294,"If desired, the technique can be used to evaluate the full Hessian matrix by choosing the vector v to be given successively by a series of unit vectors of the form (0, 0, . . . , 1, . . . , 0) each of which picks out one column of the Hessian. This leads to a formalism that is analytically equivalent to the backpropagation procedure of Bishop (1992), as described in Section 5.4.5, though with some loss of efﬁciency due to redundant calculations.",Regularization in Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,256,1295,"The number of input and outputs units in a neural network is generally determined by the dimensionality of the data set, whereas the number M of hidden units is a free parameter that can be adjusted to give the best predictive performance. Note that M controls the number of parameters (weights and biases) in the network, and so we might expect that in a maximum likelihood setting there will be an optimum value of M that gives the best generalization performance, corresponding to the optimum balance between under-ﬁtting and over-ﬁtting. Figure 5.9 shows an example of the effect of different values of M for the sinusoidal regression problem.",Regularization in Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,256,1296,"The generalization error, however, is not a simple function of M due to the presence of local minima in the error function, as illustrated in Figure 5.10. Here we see the effect of choosing multiple random initializations for the weight vector for a range of values of M. The overall best validation set performance in this case occurred for a particular solution having M = 8. In practice, one approach to choosing M is in fact to plot a graph of the kind shown in Figure 5.10 and then to choose the speciﬁc solution having the smallest validation set error.",Regularization in Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,257,1297,"Figure 5.9 Examples of two-layer networks trained on 10 data points drawn from the sinusoidal data set. The graphs show the result of ﬁtting networks having M = 1, 3 and 10 hidden units, respectively, by minimizing a sum-of-squares error function using a scaled conjugate-gradient algorithm.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,257,1298,"Figure 5.10 Plot of the sum-of-squares test-set error for the polynomial data set ver- sus the number of hidden units in the network, with 30 random starts for each network size, showing the ef- fect of local minima. For each new start, the weight vector was initial- ized by sampling from an isotropic Gaussian distribution having a mean of zero and a variance of 10.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,257,1299,"There are, however, other ways to control the complexity of a neural network model in order to avoid over-ﬁtting. From our discussion of polynomial curve ﬁtting in Chapter 1, we see that an alternative approach is to choose a relatively large value for M and then to control complexity by the addition of a regularization term to the error function. The simplest regularizer is the quadratic, giving a regularized error \end{verbatim} egin{verbatim} M = 1 0 1 −1 0 1 M = 3 0 1 −1 0 1 M = 10 0 1 −1 0 1 of the form E(w) = E(w) + λ 2 wTw.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,257,1300,"This regularizer is also known as weight decay and has been discussed at length in Chapter 3. The effective model complexity is then determined by the choice of the regularization coefﬁcient λ. As we have seen previously, this regularizer can be interpreted as the negative logarithm of a zero-mean Gaussian prior distribution over the weight vector w.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,258,1301,"One of the limitations of simple weight decay in the form (5.112) is that is inconsistent with certain scaling properties of network mappings. To illustrate this, consider a multilayer perceptron network having two layers of weights and linear output units, which performs a mapping from a set of input variables {xi} to a set of output variables {yk}. The activations of the hidden units in the ﬁrst hidden layer 0 2 4 6 8 10 60 80 100 120 140 160 \end{verbatim} egin{verbatim} take the form zj = h  i wjixi + wj0  (5.113) while the activations of the output units are given by yk =  j wkjzj + wk0.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,258,1302,Suppose we perform a linear transformation of the input data of the form xi →xi = axi + b.,Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,258,1303,Then we can arrange for the mapping performed by the network to be unchanged by making a corresponding linear transformation of the weights and biases from the inputs to the units in the hidden layer of the form wji →wji = 1 awji (5.116) wj0 →wj0 = wj0 −b a  i wji.,Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,258,1304,"Similarly, a linear transformation of the output variables of the network of the form yk →yk = cyk + d (5.118) can be achieved by making a transformation of the second-layer weights and biases using wkj →wkj = cwkj (5.119) wk0 →wk0 = cwk0 + d.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,258,1305,"If we train one network using the original data and one network using data for which the input and/or target variables are transformed by one of the above linear transfor- mations, then consistency requires that we should obtain equivalent networks that differ only by the linear transformation of the weights as given. Any regularizer should be consistent with this property, otherwise it arbitrarily favours one solution over another, equivalent one. Clearly, simple weight decay (5.112), that treats all weights and biases on an equal footing, does not satisfy this property.",Consistent Gaussian priors
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1306,"We therefore look for a regularizer which is invariant under the linear trans- formations (5.116), (5.117), (5.119) and (5.120). These require that the regularizer should be invariant to re-scaling of the weights and to shifts of the biases. Such a regularizer is given by λ1 2  w∈W1 w2 + λ2 2  w∈W2 w2 (5.121) where W1 denotes the set of weights in the ﬁrst layer, W2 denotes the set of weights in the second layer, and biases are excluded from the summations. This regularizer \end{verbatim} egin{verbatim} will remain unchanged under the weight transformations provided the regularization parameters are re-scaled using λ1 →a1/2λ1 and λ2 →c−1/2λ2.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1307,"The regularizer (5.121) corresponds to a prior of the form p(w|α1, α2) ∝exp  −α1 2  w∈W1 w2 −α2 2  w∈W2 w2  .",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1308,"Note that priors of this form are improper (they cannot be normalized) because the bias parameters are unconstrained. The use of improper priors can lead to difﬁculties in selecting regularization coefﬁcients and in model comparison within the Bayesian framework, because the corresponding evidence is zero. It is therefore common to include separate priors for the biases (which then break shift invariance) having their own hyperparameters. We can illustrate the effect of the resulting four hyperpa- rameters by drawing samples from the prior and plotting the corresponding network functions, as shown in Figure 5.11.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1309,"More generally, we can consider priors in which the weights are divided into any number of groups Wk so that p(w) ∝exp  −1 2  k αk∥w∥2 k  (5.123) where ∥w∥2 k =  j∈Wk w2 j.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1310,"As a special case of this prior, if we choose the groups to correspond to the sets of weights associated with each of the input units, and we optimize the marginal likelihood with respect to the corresponding parameters αk, we obtain automatic relevance determination as discussed in Section 7.2.2.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,259,1311,"An alternative to regularization as a way of controlling the effective complexity of a network is the procedure of early stopping. The training of nonlinear network models corresponds to an iterative reduction of the error function deﬁned with re- spect to a set of training data. For many of the optimization algorithms used for network training, such as conjugate gradients, the error is a nonincreasing function of the iteration index. However, the error measured with respect to independent data, generally called a validation set, often shows a decrease at ﬁrst, followed by an in- crease as the network starts to over-ﬁt. Training can therefore be stopped at the point of smallest error with respect to the validation data set, as indicated in Figure 5.12, in order to obtain a network having good generalization performance.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,260,1312,"Figure 5.11 Illustration of the effect of the hyperparameters governing the prior distribution over weights and biases in a two-layer network having a single input, a single linear output, and 12 hidden units having ‘tanh’ activation functions. The priors are governed by four hyperparameters αb 1, αw 1 , αb 2, and αw 2 , which represent the precisions of the Gaussian distributions of the ﬁrst-layer biases, ﬁrst-layer weights, second-layer biases, and second-layer weights, respectively. We see that the parameter αw 2 governs the vertical scale of functions (note the different vertical axis ranges on the top two diagrams), αw 1 governs the horizontal scale of variations in the function values, and αb 1 governs the horizontal range over which variations occur. The parameter αb 2, whose effect is not illustrated here, governs the range of vertical offsets of the functions.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,260,1313,"The behaviour of the network in this case is sometimes explained qualitatively in terms of the effective number of degrees of freedom in the network, in which this number starts out small and then to grows during the training process, corresponding to a steady increase in the effective complexity of the model. Halting training before \end{verbatim} egin{verbatim} αw 1 = 1, αb 1 = 1, αw 2 = 1, αb 2 = 1 −1 −0.5 0 0.5 1 −6 −4 −2 0 2 4 αw 1 = 1, αb 1 = 1, αw 2 = 10, αb 2 = 1 −1 −0.5 0 0.5 1 −60 −40 −20 0 20 40 αw 1 = 1000, αb 1 = 100, αw 2 = 1, αb 2 = 1 −1 −0.5 0 0.5 1 −10 −5 0 5 αw 1 = 1000, αb 1 = 1000, αw 2 = 1, αb 2 = 1 −1 −0.5 0 0.5 1 −10 −5 0 5 a minimum of the training error has been reached then represents a way of limiting the effective network complexity.",Early stopping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,261,1314,"Figure 5.12 An illustration of the behaviour of training set error (left) and validation set error (right) during a typical training session, as a function of the iteration step, for the sinusoidal data set. The goal of achieving the best generalization performance suggests that training should be stopped at the point shown by the vertical dashed lines, corresponding to the minimum of the validation set error.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,261,1315,"In the case of a quadratic error function, we can verify this insight, and show that early stopping should exhibit similar behaviour to regularization using a sim- ple weight-decay term. This can be understood from Figure 5.13, in which the axes in weight space have been rotated to be parallel to the eigenvectors of the Hessian matrix. If, in the absence of weight decay, the weight vector starts at the origin and proceeds during training along a path that follows the local negative gradient vec- tor, then the weight vector will move initially parallel to the w2 axis through a point corresponding roughly to w and then move towards the minimum of the error func- tion wML. This follows from the shape of the error surface and the widely differing eigenvalues of the Hessian. Stopping at a point near w is therefore similar to weight decay. The relationship between early stopping and weight decay can be made quan- titative, thereby showing that the quantity τη (where τ is the iteration index, and η is the learning rate parameter) plays the role of the reciprocal of the regularization \end{verbatim} egin{verbatim} 0 10 20 30 40 50 0.15 0.2 0.25 0 10 20 30 40 50 0.35 0.4 0.45 parameter λ. The effective number of parameters in the network therefore grows during the course of training.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,261,1316,"In many applications of pattern recognition, it is known that predictions should be unchanged, or invariant, under one or more transformations of the input vari- ables. For example, in the classiﬁcation of objects in two-dimensional images, such as handwritten digits, a particular object should be assigned the same classiﬁcation irrespective of its position within the image (translation invariance) or of its size (scale invariance). Such transformations produce signiﬁcant changes in the raw data, expressed in terms of the intensities at each of the pixels in the image, and yet should give rise to the same output from the classiﬁcation system. Similarly in speech recognition, small levels of nonlinear warping along the time axis, which preserve temporal ordering, should not change the interpretation of the signal.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,261,1317,"If sufﬁciently large numbers of training patterns are available, then an adaptive model such as a neural network can learn the invariance, at least approximately. This involves including within the training set a sufﬁciently large number of examples of the effects of the various transformations. Thus, for translation invariance in an im- age, the training set should include examples of objects at many different positions.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1318,Figure 5.13 A schematic illustration of why early stopping can give similar results to weight decay in the case of a quadratic error func- tion.,Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1319,"This approach may be impractical, however, if the number of training examples is limited, or if there are several invariants (because the number of combinations of transformations grows exponentially with the number of such transformations). We therefore seek alternative approaches for encouraging an adaptive model to exhibit the required invariances. These can broadly be divided into four categories: 1. The training set is augmented using replicas of the training patterns, trans- formed according to the desired invariances. For instance, in our digit recog- nition example, we could make multiple copies of each example in which the \end{verbatim} egin{verbatim} The ellipse shows a con- tour of constant error, and wML denotes the minimum of the er- ror function. If the weight vector starts at the origin and moves ac- cording to the local negative gra- dient direction, then it will follow the path shown by the curve. By stopping training early, a weight vector ew is found that is qual- itatively similar to that obtained with a simple weight-decay reg- ularizer and training to the mini- mum of the regularized error, as can be seen by comparing with Figure 3.15.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1320,"digit is shifted to a different position in each image. 2. A regularization term is added to the error function that penalizes changes in the model output when the input is transformed. This leads to the technique of tangent propagation, discussed in Section 5.5.4.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1321,3. Invariance is built into the pre-processing by extracting features that are invari- ant under the required transformations. Any subsequent regression or classi- ﬁcation system that uses such features as inputs will necessarily also respect these invariances.,Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1322,"4. The ﬁnal option is to build the invariance properties into the structure of a neu- ral network (or into the deﬁnition of a kernel function in the case of techniques such as the relevance vector machine). One way to achieve this is through the use of local receptive ﬁelds and shared weights, as discussed in the context of convolutional neural networks in Section 5.5.6.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1323,"Approach 1 is often relatively easy to implement and can be used to encourage com- plex invariances such as those illustrated in Figure 5.14. For sequential training algorithms, this can be done by transforming each input pattern before it is presented to the model so that, if the patterns are being recycled, a different transformation (drawn from an appropriate distribution) is added each time. For batch methods, a similar effect can be achieved by replicating each data point a number of times and transforming each copy independently. The use of such augmented data can lead to signiﬁcant improvements in generalization (Simard et al., 2003), although it can also be computationally costly.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,262,1324,"Approach 2 leaves the data set unchanged but modiﬁes the error function through the addition of a regularizer. In Section 5.5.5, we shall show that this approach is closely related to approach 2.",Invariances
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1325,"Figure 5.14 Illustration of the synthetic warping of a handwritten digit. The original image is shown on the left. On the right, the top row shows three examples of warped digits, with the corresponding displacement ﬁelds shown on the bottom row. These displacement ﬁelds are generated by sampling random displacements ∆x, ∆y ∈(0, 1) at each pixel and then smoothing by convolution with Gaussians of width 0.01, 30 and 60 respectively.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1326,Figure 5.15 Illustration of a two-dimensional input space showing the effect of a continuous transforma- tion on a particular input vector xn.,Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1327,"One advantage of approach 3 is that it can correctly extrapolate well beyond the range of transformations included in the training set. However, it can be difﬁcult to ﬁnd hand-crafted features with the required invariances that do not also discard information that can be useful for discrimination.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1328,"We can use regularization to encourage models to be invariant to transformations of the input through the technique of tangent propagation (Simard et al., 1992).",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1329,"Consider the effect of a transformation on a particular input vector xn. Provided the transformation is continuous (such as translation or rotation, but not mirror reﬂection for instance), then the transformed pattern will sweep out a manifold M within the D-dimensional input space. This is illustrated in Figure 5.15, for the case of D = 2 for simplicity. Suppose the transformation is governed by a single parameter ξ (which might be rotation angle for instance). Then the subspace M swept out by xn A one- dimensional transformation, parameterized by the continuous variable ξ, applied to xn causes it to sweep out a one-dimensional manifold M.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,263,1330,"Locally, the effect of the transformation can be approximated by the tangent vector τ n.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1331,"will be one-dimensional, and will be parameterized by ξ. Let the vector that results from acting on xn by this transformation be denoted by s(xn, ξ), which is deﬁned so that s(x, 0) = x. Then the tangent to the curve M is given by the directional derivative τ = ∂s/∂ξ, and the tangent vector at the point xn is given by τ n = ∂s(xn, ξ) ∂ξ  ξ=0 .",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1332,"Under a transformation of the input vector, the network output vector will, in general, change. The derivative of output k with respect to ξ is given by ∂yk ∂ξ  ξ=0 = D  i=1 ∂yk ∂xi ∂xi ∂ξ  ξ=0 = D  i=1 Jkiτi (5.126) where Jki is the (k, i) element of the Jacobian matrix J, as discussed in Section 5.3.4.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1333,"The result (5.126) can be used to modify the standard error function, so as to encour- age local invariance in the neighbourhood of the data points, by the addition to the original error function E of a regularization function Ωto give a total error function of the form E = E + λΩ (5.127) where λ is a regularization coefﬁcient and Ω= 1 2  n  k  ∂ynk ∂ξ  ξ=0 2 = 1 2  n  k  D  i=1 Jnkiτni 2 .",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1334,"The regularization function will be zero when the network mapping function is in- variant under the transformation in the neighbourhood of each pattern vector, and the value of the parameter λ determines the balance between ﬁtting the training data and learning the invariance property.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1335,"In a practical implementation, the tangent vector τ n can be approximated us- ing ﬁnite differences, by subtracting the original vector xn from the corresponding vector after transformation using a small value of ξ, and then dividing by ξ. This is illustrated in Figure 5.16.",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1336,The regularization function depends on the network weights through the Jaco- bian J. A backpropagation formalism for computing the derivatives of the regu- larizer with respect to the network weights is easily obtained by extension of the techniques introduced in Section 5.3.,Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,264,1337,"If the transformation is governed by L parameters (e.g., L = 3 for the case of translations combined with in-plane rotations in a two-dimensional image), then the manifold M will have dimensionality L, and the corresponding regularizer is given by the sum of terms of the form (5.128), one for each transformation. If several transformations are considered at the same time, and the network mapping is made invariant to each separately, then it will be (locally) invariant to combinations of the transformations (Simard et al., 1992).",Tangent propagation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,265,1338,"Figure 5.16 Illustration showing (a) the original image x of a hand- written digit, (b) the tangent vector τ corresponding to an inﬁnitesimal clockwise rotation, (c) the result of adding a small contribution from the tangent vector to the original image giving x + ϵτ with ϵ = 15 degrees, and (d) the true image rotated for comparison.",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,265,1339,"A related technique, called tangent distance, can be used to build invariance properties into distance-based methods such as nearest-neighbour classiﬁers (Simard et al., 1993).",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,265,1340,"We have seen that one way to encourage invariance of a model to a set of trans- formations is to expand the training set using transformed versions of the original input patterns. Here we show that this approach is closely related to the technique of tangent propagation (Bishop, 1995b; Leen, 1995).",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,266,1341,"As in Section 5.5.4, we shall consider a transformation governed by a single parameter ξ and described by the function s(x, ξ), with s(x, 0) = x. We shall also consider a sum-of-squares error function. The error function for untransformed inputs can be written (in the inﬁnite data set limit) in the form E = 1 2  {y(x) −t}2p(t|x)p(x) dx dt (5.129) as discussed in Section 1.5.5. Here we have considered a network having a single output, in order to keep the notation uncluttered. If we now consider an inﬁnite number of copies of each data point, each of which is perturbed by the transformation \end{verbatim} egin{verbatim} in which the parameter ξ is drawn from a distribution p(ξ), then the error function deﬁned over this expanded data set can be written as E = 1 2  {y(s(x, ξ)) −t}2p(t|x)p(x)p(ξ) dx dt dξ.",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,266,1342,"We now assume that the distribution p(ξ) has zero mean with small variance, so that we are only considering small transformations of the original input vectors. We can then expand the transformation function as a Taylor series in powers of ξ to give s(x, ξ) = s(x, 0) + ξ ∂ ∂ξ s(x, ξ)  ξ=0 + ξ2 2 ∂2 ∂ξ2 s(x, ξ)  ξ=0 + O(ξ3) = x + ξτ + 1 2ξ2τ ′ + O(ξ3) where τ ′ denotes the second derivative of s(x, ξ) with respect to ξ evaluated at ξ = 0.",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,266,1343,"This allows us to expand the model function to give y(s(x, ξ)) = y(x) + ξτ T∇y(x) + ξ2 2 - (τ ′) T ∇y(x) + τ T∇∇y(x)τ .",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,266,1344,"Substituting into the mean error function (5.130) and expanding, we then have E = 1 2  {y(x) −t}2p(t|x)p(x) dx dt + E[ξ]  {y(x) −t}τ T∇y(x)p(t|x)p(x) dx dt + E[ξ2]  {y(x) −t}1 2  (τ ′) T ∇y(x) + τ T∇∇y(x)τ  + τ T∇y(x)2.",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,266,1345,"p(t|x)p(x) dx dt + O(ξ3). Because the distribution of transformations has zero mean we have E[ξ] = 0. Also, we shall denote E[ξ2] by λ. Omitting terms of O(ξ3), the average error function then becomes E = E + λΩ (5.131) where E is the original sum-of-squares error, and the regularization term Ωtakes the form Ω =  {y(x) −E[t|x]}1 2  (τ ′) T ∇y(x) + τ T∇∇y(x)τ  + τ T ∇y(x) 2 p(x) dx (5.132) in which we have performed the integration over t.",Training with transformed data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,267,1346,"We can further simplify this regularization term as follows. In Section 1.5.5 we saw that the function that minimizes the sum-of-squares error is given by the condi- tional average E[t|x] of the target values t. From (5.131) we see that the regularized error will equal the unregularized sum-of-squares plus terms which are O(ξ), and so the network function that minimizes the total error will have the form y(x) = E[t|x] + O(ξ).",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,267,1347,"Thus, to leading order in ξ, the ﬁrst term in the regularizer vanishes and we are left with Ω= 1 2  τ T ∇y(x)2 p(x) dx (5.134) which is equivalent to the tangent propagation regularizer (5.128).",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,267,1348,"If we consider the special case in which the transformation of the inputs simply consists of the addition of random noise, so that x →x + ξ, then the regularizer takes the form Ω= 1 2  ∥∇y(x)∥2 p(x) dx (5.135) which is known as Tikhonov regularization (Tikhonov and Arsenin, 1977; Bishop, 1995b). Derivatives of this regularizer with respect to the network weights can be found using an extended backpropagation algorithm (Bishop, 1993). We see that, for small noise amplitudes, Tikhonov regularization is related to the addition of random noise to the inputs, which has been shown to improve generalization in appropriate circumstances (Sietsma and Dow, 1991).",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,267,1349,"Another approach to creating models that are invariant to certain transformation of the inputs is to build the invariance properties into the structure of a neural net- work. This is the basis for the convolutional neural network (Le Cun et al., 1989; LeCun et al., 1998), which has been widely applied to image data.",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,267,1350,"Consider the speciﬁc task of recognizing handwritten digits. Each input image comprises a set of pixel intensity values, and the desired output is a posterior proba- bility distribution over the ten digit classes. We know that the identity of the digit is invariant under translations and scaling as well as (small) rotations. Furthermore, the network must also exhibit invariance to more subtle transformations such as elastic deformations of the kind illustrated in Figure 5.14. One simple approach would be to treat the image as the input to a fully connected network, such as the kind shown in Figure 5.1. Given a sufﬁciently large training set, such a network could in principle yield a good solution to this problem and would learn the appropriate invariances by example.",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,268,1351,"Figure 5.17 Diagram illustrating part of a convolutional neural network, showing a layer of convolu- tional units followed by a layer of subsampling units. Several successive pairs of such layers may be used.",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,268,1352,"However, this approach ignores a key property of images, which is that nearby pixels are more strongly correlated than more distant pixels. Many of the modern approaches to computer vision exploit this property by extracting local features that depend only on small subregions of the image. Information from such features can then be merged in later stages of processing in order to detect higher-order features \end{verbatim} egin{verbatim} Input image Convolutional layer Sub-sampling layer and ultimately to yield information about the image as whole. Also, local features that are useful in one region of the image are likely to be useful in other regions of the image, for instance if the object of interest is translated.",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,268,1353,"These notions are incorporated into convolutional neural networks through three mechanisms: (i) local receptive ﬁelds, (ii) weight sharing, and (iii) subsampling. The structure of a convolutional network is illustrated in Figure 5.17. In the convolutional layer the units are organized into planes, each of which is called a feature map. Units in a feature map each take inputs only from a small subregion of the image, and all of the units in a feature map are constrained to share the same weight values. For instance, a feature map might consist of 100 units arranged in a 10 × 10 grid, with each unit taking inputs from a 5×5 pixel patch of the image. The whole feature map therefore has 25 adjustable weight parameters plus one adjustable bias parameter.",Convolutional networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1354,"Input values from a patch are linearly combined using the weights and the bias, and the result transformed by a sigmoidal nonlinearity using (5.1). If we think of the units as feature detectors, then all of the units in a feature map detect the same pattern but at different locations in the input image. Due to the weight sharing, the evaluation of the activations of these units is equivalent to a convolution of the image pixel intensities with a ‘kernel’ comprising the weight parameters. If the input image is shifted, the activations of the feature map will be shifted by the same amount but will otherwise be unchanged. This provides the basis for the (approximate) invariance of \end{verbatim} egin{verbatim} the network outputs to translations and distortions of the input image. Because we will typically need to detect multiple features in order to build an effective model, there will generally be multiple feature maps in the convolutional layer, each having its own set of weight and bias parameters.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1355,"The outputs of the convolutional units form the inputs to the subsampling layer of the network. For each feature map in the convolutional layer, there is a plane of units in the subsampling layer and each unit takes inputs from a small receptive ﬁeld in the corresponding feature map of the convolutional layer. These units perform subsampling. For instance, each subsampling unit might take inputs from a 2 × 2 unit region in the corresponding feature map and would compute the average of those inputs, multiplied by an adaptive weight with the addition of an adaptive bias parameter, and then transformed using a sigmoidal nonlinear activation function.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1356,"The receptive ﬁelds are chosen to be contiguous and nonoverlapping so that there are half the number of rows and columns in the subsampling layer compared with the convolutional layer. In this way, the response of a unit in the subsampling layer will be relatively insensitive to small shifts of the image in the corresponding regions of the input space.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1357,"In a practical architecture, there may be several pairs of convolutional and sub- sampling layers. At each stage there is a larger degree of invariance to input trans- formations compared to the previous layer. There may be several feature maps in a given convolutional layer for each plane of units in the previous subsampling layer, so that the gradual reduction in spatial resolution is then compensated by an increas- ing number of features. The ﬁnal layer of the network would typically be a fully connected, fully adaptive layer, with a softmax output nonlinearity in the case of multiclass classiﬁcation.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1358,"The whole network can be trained by error minimization using backpropagation to evaluate the gradient of the error function. This involves a slight modiﬁcation of the usual backpropagation algorithm to ensure that the shared-weight constraints are satisﬁed. Due to the use of local receptive ﬁelds, the number of weights in the network is smaller than if the network were fully connected. Furthermore, the number of independent parameters to be learned from the data is much smaller still, due to the substantial numbers of constraints on the weights.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1359,"One way to reduce the effective complexity of a network with a large number of weights is to constrain weights within certain groups to be equal. This is the technique of weight sharing that was discussed in Section 5.5.6 as a way of building translation invariance into networks used for image interpretation. It is only appli- cable, however, to particular problems in which the form of the constraints can be speciﬁed in advance. Here we consider a form of soft weight sharing (Nowlan and Hinton, 1992) in which the hard constraint of equal weights is replaced by a form of regularization in which groups of weights are encouraged to have similar values.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,269,1360,"Furthermore, the division of weights into groups, the mean weight value for each group, and the spread of values within the groups are all determined as part of the learning process.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,270,1361,"Recall that the simple weight decay regularizer, given in (5.112), can be viewed as the negative log of a Gaussian prior distribution over the weights. We can encour- age the weight values to form several groups, rather than just one group, by consid- ering instead a probability distribution that is a mixture of Gaussians. The centres and variances of the Gaussian components, as well as the mixing coefﬁcients, will be considered as adjustable parameters to be determined as part of the learning process.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,270,1362,"Thus, we have a probability density of the form p(w) =  i p(wi) (5.136) where p(wi) = M  j=1 πjN(wi|µj, σ2 j) (5.137) and πj are the mixing coefﬁcients. Taking the negative logarithm then leads to a regularization function of the form Ω(w) = −  i ln  M  j=1 πjN(wi|µj, σ2 j)  .",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,270,1363,"The total error function is then given by E(w) = E(w) + λΩ(w) (5.139) where λ is the regularization coefﬁcient. This error is minimized both with respect to the weights wi and with respect to the parameters {πj, µj, σj} of the mixture model. If the weights were constant, then the parameters of the mixture model could be determined by using the EM algorithm discussed in Chapter 9. However, the dis- tribution of weights is itself evolving during the learning process, and so to avoid nu- merical instability, a joint optimization is performed simultaneously over the weights and the mixture-model parameters. This can be done using a standard optimization algorithm such as conjugate gradients or quasi-Newton methods.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,270,1364,"In order to minimize the total error function, it is necessary to be able to evaluate its derivatives with respect to the various adjustable parameters. To do this it is con- venient to regard the {πj} as prior probabilities and to introduce the corresponding posterior probabilities which, following (2.192), are given by Bayes’ theorem in the form γj(w) = πjN(w|µj, σ2 j)  k πkN(w|µk, σ2 k).",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,270,1365,The derivatives of the total error function with respect to the weights are then given by ∂E ∂wi = ∂E ∂wi + λ  j γj(wi)(wi −µj) σ2 j .,Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,271,1366,"The effect of the regularization term is therefore to pull each weight towards the centre of the jth Gaussian, with a force proportional to the posterior probability of that Gaussian for the given weight. This is precisely the kind of effect that we are seeking.",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,271,1367,"Derivatives of the error with respect to the centres of the Gaussians are also easily computed to give ∂E ∂µj = λ  i γj(wi)(µi −wj) σ2 j (5.142) which has a simple intuitive interpretation, because it pushes µj towards an aver- age of the weight values, weighted by the posterior probabilities that the respective weight parameters were generated by component j. Similarly, the derivatives with respect to the variances are given by ∂E ∂σj = λ  i γj(wi)  1 σj −(wi −µj)2 σ3 j  (5.143) which drives σj towards the weighted average of the squared deviations of the weights around the corresponding centre µj, where the weighting coefﬁcients are again given by the posterior probability that each weight is generated by component j. Note that in a practical implementation, new variables ηj deﬁned by σ2 j = exp(ηj) (5.144) are introduced, and the minimization is performed with respect to the ηj. This en- sures that the parameters σj remain positive. It also has the effect of discouraging pathological solutions in which one or more of the σj goes to zero, corresponding to a Gaussian component collapsing onto one of the weight parameter values. Such solutions are discussed in more detail in the context of Gaussian mixture models in For the derivatives with respect to the mixing coefﬁcients πj, we need to take account of the constraints  j πj = 1, 0 ⩽πi ⩽1 (5.145) which follow from the interpretation of the πj as prior probabilities. This can be done by expressing the mixing coefﬁcients in terms of a set of auxiliary variables {ηj} using the softmax function given by πj = exp(ηj) M k=1 exp(ηk) .",Soft weight sharing
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1368,"Figure 5.18 The left ﬁgure shows a two-link robot arm, in which the Cartesian coordinates (x1, x2) of the end ef- fector are determined uniquely by the two joint angles θ1 and θ2 and the (ﬁxed) lengths L1 and L2 of the arms. This is know as the forward kinematics of the arm. In prac- tice, we have to ﬁnd the joint angles that will give rise to a desired end effector position and, as shown in the right ﬁg- ure, this inverse kinematics has two solutions correspond- ing to ‘elbow up’ and ‘elbow down’.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1369,"The derivatives of the regularized error function with respect to the {ηj} then take the form \end{verbatim} egin{verbatim} L1 L2 θ1 θ2 (x1, x2) (x1, x2) elbow down elbow up ∂E ∂ηj =  i {πj −γj(wi)} .",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1370,We see that πj is therefore driven towards the average posterior probability for com- ponent j.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1371,"The goal of supervised learning is to model a conditional distribution p(t|x), which for many simple regression problems is chosen to be Gaussian. However, practical machine learning problems can often have signiﬁcantly non-Gaussian distributions.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1372,"These can arise, for example, with inverse problems in which the distribution can be multimodal, in which case the Gaussian assumption can lead to very poor predic- tions.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1373,"As a simple example of an inverse problem, consider the kinematics of a robot arm, as illustrated in Figure 5.18. The forward problem involves ﬁnding the end ef- fector position given the joint angles and has a unique solution. However, in practice we wish to move the end effector of the robot to a speciﬁc position, and to do this we must set appropriate joint angles. We therefore need to solve the inverse problem, which has two solutions as seen in Figure 5.18.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,272,1374,"Forward problems often corresponds to causality in a physical system and gen- erally have a unique solution. For instance, a speciﬁc pattern of symptoms in the human body may be caused by the presence of a particular disease. In pattern recog- nition, however, we typically have to solve an inverse problem, such as trying to predict the presence of a disease given a set of symptoms. If the forward problem involves a many-to-one mapping, then the inverse problem will have multiple solu- tions. For instance, several different diseases may result in the same symptoms.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1375,Figure 5.19 On the left is the data set for a simple ‘forward problem’ in which the red curve shows the result of ﬁtting a two-layer neural network by minimizing the sum-of-squares error function.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1376,"In the robotics example, the kinematics is deﬁned by geometrical equations, and the multimodality is readily apparent. However, in many machine learning problems the presence of multimodality, particularly in problems involving spaces of high di- mensionality, can be less obvious. For tutorial purposes, however, we shall consider a simple toy problem for which we can easily visualize the multimodality. Data for this problem is generated by sampling a variable x uniformly over the interval (0, 1), to give a set of values {xn}, and the corresponding target values tn are obtained \end{verbatim} egin{verbatim} The corresponding inverse problem, shown on the right, is obtained by exchanging the roles of x and t.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1377,work trained again by minimizing the sum-of-squares error function gives a very poor ﬁt to the data due to the multimodality of the data set.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1378,"by computing the function xn + 0.3 sin(2πxn) and then adding uniform noise over the interval (−0.1, 0.1). The inverse problem is then obtained by keeping the same data points but exchanging the roles of x and t. Figure 5.19 shows the data sets for the forward and inverse problems, along with the results of ﬁtting two-layer neural networks having 6 hidden units and a single linear output unit by minimizing a sum- of-squares error function. Least squares corresponds to maximum likelihood under a Gaussian assumption. We see that this leads to a very poor model for the highly non-Gaussian inverse problem.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1379,"We therefore seek a general framework for modelling conditional probability distributions. This can be achieved by using a mixture model for p(t|x) in which both the mixing coefﬁcients as well as the component densities are ﬂexible functions of the input vector x, giving rise to the mixture density network. For any given value of x, the mixture model provides a general formalism for modelling an arbitrary conditional density function p(t|x). Provided we consider a sufﬁciently ﬂexible network, we then have a framework for approximating arbitrary conditional distri- butions.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1380,"Here we shall develop the model explicitly for Gaussian components, so that p(t|x) = K  k=1 πk(x)N t|µk(x), σ2 k(x) .",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,273,1381,"This is an example of a heteroscedastic model since the noise variance on the data is a function of the input vector x. Instead of Gaussians, we can use other distribu- tions for the components, such as Bernoulli distributions if the target variables are binary rather than continuous. We have also specialized to the case of isotropic co- variances for the components, although the mixture density network can readily be extended to allow for general covariance matrices by representing the covariances using a Cholesky factorization (Williams, 1996). Even with isotropic components, the conditional distribution p(t|x) does not assume factorization with respect to the components of t (in contrast to the standard sum-of-squares regression model) as a consequence of the mixture distribution.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,274,1382,Figure 5.20 The mixture density network can represent general conditional probability densities p(t|x) by considering a parametric mixture model for the distribution of t whose parameters are determined by the outputs of a neural network that takes x as its input vector.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,274,1383,"We now take the various parameters of the mixture model, namely the mixing coefﬁcients πk(x), the means µk(x), and the variances σ2 k(x), to be governed by \end{verbatim} egin{verbatim} x1 xD θ1 θM θ t p(t|x) the outputs of a conventional neural network that takes x as its input. The structure of this mixture density network is illustrated in Figure 5.20. The mixture density network is closely related to the mixture of experts discussed in Section 14.5.3. The principle difference is that in the mixture density network the same function is used to predict the parameters of all of the component densities as well as the mixing co- efﬁcients, and so the nonlinear hidden units are shared amongst the input-dependent functions.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,274,1384,"The neural network in Figure 5.20 can, for example, be a two-layer network having sigmoidal (‘tanh’) hidden units. If there are L components in the mixture model (5.148), and if t has K components, then the network will have L output unit activations denoted by aπ k that determine the mixing coefﬁcients πk(x), K outputs denoted by aσ k that determine the kernel widths σk(x), and L × K outputs denoted by aµ kj that determine the components µkj(x) of the kernel centres µk(x). The total number of network outputs is given by (K + 2)L, as compared with the usual K outputs for a network, which simply predicts the conditional means of the target variables.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,274,1385,"The mixing coefﬁcients must satisfy the constraints K  k=1 πk(x) = 1, 0 ⩽πk(x) ⩽1 (5.149) which can be achieved using a set of softmax outputs πk(x) = exp(aπ k) K l=1 exp(aπ l ) .",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,274,1386,"Similarly, the variances must satisfy σ2 k(x) ⩾0 and so can be represented in terms of the exponentials of the corresponding network activations using σk(x) = exp(aσ k).",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1387,"Finally, because the means µk(x) have real components, they can be represented \end{verbatim} egin{verbatim} directly by the network output activations µkj(x) = aµ kj.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1388,"The adaptive parameters of the mixture density network comprise the vector w of weights and biases in the neural network, that can be set by maximum likelihood, or equivalently by minimizing an error function deﬁned to be the negative logarithm of the likelihood. For independent data, this error function takes the form E(w) = − N  n=1 ln  k  k=1 πk(xn, w)N tn|µk(xn, w), σ2 k(xn, w)  (5.153) where we have made the dependencies on w explicit.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1389,"In order to minimize the error function, we need to calculate the derivatives of the error E(w) with respect to the components of w. These can be evaluated by using the standard backpropagation procedure, provided we obtain suitable expres- sions for the derivatives of the error with respect to the output-unit activations. These represent error signals δ for each pattern and for each output unit, and can be back- propagated to the hidden units and the error function derivatives evaluated in the usual way. Because the error function (5.153) is composed of a sum of terms, one for each training data point, we can consider the derivatives for a particular pattern n and then ﬁnd the derivatives of E by summing over all patterns.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1390,"Because we are dealing with mixture distributions, it is convenient to view the mixing coefﬁcients πk(x) as x-dependent prior probabilities and to introduce the corresponding posterior probabilities given by γk(t|x) = πkNnk K l=1 πlNnl (5.154) where Nnk denotes N (tn|µk(xn), σ2 k(xn)).",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1391,The derivatives with respect to the network output activations governing the mix- ing coefﬁcients are given by ∂En ∂aπ k = πk −γk.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1392,"Similarly, the derivatives with respect to the output activations controlling the com- ponent means are given by ∂En ∂aµ kl = γk µkl −tl σ2 k .",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,275,1393,"Finally, the derivatives with respect to the output activations controlling the compo- nent variances are given by ∂En ∂aσ k = −γk ∥t −µk∥2 σ3 k −1 σk .",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,276,1394,"Figure 5.21 (a) Plot of the mixing coefﬁcients πk(x) as a function of x for the three kernel functions in a mixture density network trained on the data shown in Figure 5.19. The model has three Gaussian compo- nents, and uses a two-layer multi- layer perceptron with ﬁve ‘tanh’ sig- moidal units in the hidden layer, and nine outputs (corresponding to the 3 means and 3 variances of the Gaus- sian components and the 3 mixing coefﬁcients). At both small and large values of x, where the conditional probability density of the target data is unimodal, only one of the ker- nels has a high value for its prior probability, while at intermediate val- ues of x, where the conditional den- sity is trimodal, the three mixing co- efﬁcients have comparable values.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,276,1395,(b) Plots of the means µk(x) using the same colour coding as for the mixing coefﬁcients.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,276,1396,contours of the corresponding con- ditional probability density of the tar- get data for the same mixture den- sity network.,Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,276,1397,"(d) Plot of the ap- proximate conditional mode, shown by the red points, of the conditional density.",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,276,1398,"We illustrate the use of a mixture density network by returning to the toy ex- ample of an inverse problem shown in Figure 5.19. Plots of the mixing coefﬁ- cients πk(x), the means µk(x), and the conditional density contours corresponding to p(t|x), are shown in Figure 5.21. The outputs of the neural network, and hence the parameters in the mixture model, are necessarily continuous single-valued functions of the input variables. However, we see from Figure 5.21(c) that the model is able to produce a conditional density that is unimodal for some values of x and trimodal for other values by modulating the amplitudes of the mixing components πk(x).",Mixture Density Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,277,1399,"Once a mixture density network has been trained, it can predict the conditional density function of the target data for any given value of the input vector. This conditional density represents a complete description of the generator of the data, so far as the problem of predicting the value of the output vector is concerned. From this density function we can calculate more speciﬁc quantities that may be of interest in different applications. One of the simplest of these is the mean, corresponding to the conditional average of the target data, and is given by E [t|x] =  tp(t|x) dt = K  k=1 πk(x)µk(x) (5.158) \end{verbatim} egin{verbatim} where we have used (5.148). Because a standard network trained by least squares is approximating the conditional mean, we see that a mixture density network can reproduce the conventional least-squares result as a special case. Of course, as we have already noted, for a multimodal distribution the conditional mean is of limited value.",Bayesian Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,277,1400,"We have seen that for multimodal distributions, the conditional mean can give a poor representation of the data. For instance, in controlling the simple robot arm shown in Figure 5.18, we need to pick one of the two possible joint angle settings in order to achieve the desired end-effector location, whereas the average of the two solutions is not itself a solution. In such cases, the conditional mode may be of more value. Because the conditional mode for the mixture density network does not have a simple analytical solution, this would require numerical iteration. A simple alternative is to take the mean of the most probable component (i.e., the one with the largest mixing coefﬁcient) at each value of x. This is shown for the toy data set in Figure 5.21(d).",Bayesian Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,277,1401,"So far, our discussion of neural networks has focussed on the use of maximum like- lihood to determine the network parameters (weights and biases). Regularized max- imum likelihood can be interpreted as a MAP (maximum posterior) approach in which the regularizer can be viewed as the logarithm of a prior parameter distribu- tion. However, in a Bayesian treatment we need to marginalize over the distribution of parameters in order to make predictions.",Bayesian Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,277,1402,"In Section 3.3, we developed a Bayesian solution for a simple linear regression model under the assumption of Gaussian noise. We saw that the posterior distribu- tion, which is Gaussian, could be evaluated exactly and that the predictive distribu- tion could also be found in closed form. In the case of a multilayered network, the highly nonlinear dependence of the network function on the parameter values means that an exact Bayesian treatment can no longer be found. In fact, the log of the pos- terior distribution will be nonconvex, corresponding to the multiple local minima in the error function.",Bayesian Neural Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1403,"The technique of variational inference, to be discussed in Chapter 10, has been applied to Bayesian neural networks using a factorized Gaussian approximation \end{verbatim} egin{verbatim} to the posterior distribution (Hinton and van Camp, 1993) and also using a full- covariance Gaussian (Barber and Bishop, 1998a; Barber and Bishop, 1998b). The most complete treatment, however, has been based on the Laplace approximation (MacKay, 1992c; MacKay, 1992b) and forms the basis for the discussion given here.",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1404,"We will approximate the posterior distribution by a Gaussian, centred at a mode of the true posterior. Furthermore, we shall assume that the covariance of this Gaus- sian is small so that the network function is approximately linear with respect to the parameters over the region of parameter space for which the posterior probability is signiﬁcantly nonzero. With these two approximations, we will obtain models that are analogous to the linear regression and classiﬁcation models discussed in earlier chapters and so we can exploit the results obtained there. We can then make use of the evidence framework to provide point estimates for the hyperparameters and to compare alternative models (for example, networks having different numbers of hid- den units). To start with, we shall discuss the regression case and then later consider the modiﬁcations needed for solving classiﬁcation tasks.",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1405,"Consider the problem of predicting a single continuous target variable t from a vector x of inputs (the extension to multiple targets is straightforward). We shall suppose that the conditional distribution p(t|x) is Gaussian, with an x-dependent mean given by the output of a neural network model y(x, w), and with precision (inverse variance) β p(t|x, w, β) = N(t|y(x, w), β−1).",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1406,"Similarly, we shall choose a prior distribution over the weights w that is Gaussian of the form p(w|α) = N(w|0, α−1I).",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1407,"For an i.i.d. data set of N observations x1, . . . , xN, with a corresponding set of target values D = {t1, . . . , tN}, the likelihood function is given by p(D|w, β) = N  n=1 N(tn|y(xn, w), β−1) (5.163) and so the resulting posterior distribution is then p(w|D, α, β) ∝p(w|α)p(D|w, β).",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,278,1408,"which, as a consequence of the nonlinear dependence of y(x, w) on w, will be non- Gaussian.",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,279,1409,"We can ﬁnd a Gaussian approximation to the posterior distribution by using the Laplace approximation. To do this, we must ﬁrst ﬁnd a (local) maximum of the posterior, and this must be done using iterative numerical optimization. As usual, it is convenient to maximize the logarithm of the posterior, which can be written in the \end{verbatim} egin{verbatim} form ln p(w|D) = −α 2 wTw −β 2 N  n=1 {y(xn, w) −tn}2 + const (5.165) which corresponds to a regularized sum-of-squares error function. Assuming for the moment that α and β are ﬁxed, we can ﬁnd a maximum of the posterior, which we denote wMAP, by standard nonlinear optimization algorithms such as conjugate gradients, using error backpropagation to evaluate the required derivatives.",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,279,1410,"Having found a mode wMAP, we can then build a local Gaussian approximation by evaluating the matrix of second derivatives of the negative log posterior distribu- tion. From (5.165), this is given by A = −∇∇ln p(w|D, α, β) = αI + βH (5.166) where H is the Hessian matrix comprising the second derivatives of the sum-of- squares error function with respect to the components of w. Algorithms for comput- ing and approximating the Hessian were discussed in Section 5.4. The corresponding Gaussian approximation to the posterior is then given from (4.134) by q(w|D) = N(w|wMAP, A−1).",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,279,1411,"Similarly, the predictive distribution is obtained by marginalizing with respect to this posterior distribution p(t|x, D) =  p(t|x, w)q(w|D) dw.",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,279,1412,"However, even with the Gaussian approximation to the posterior, this integration is still analytically intractable due to the nonlinearity of the network function y(x, w) as a function of w. To make progress, we now assume that the posterior distribution has small variance compared with the characteristic scales of w over which y(x, w) is varying. This allows us to make a Taylor series expansion of the network function around wMAP and retain only the linear terms y(x, w) ≃y(x, wMAP) + gT(w −wMAP) (5.169) where we have deﬁned g = ∇wy(x, w)|w=wMAP .",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,279,1413,"With this approximation, we now have a linear-Gaussian model with a Gaussian distribution for p(w) and a Gaussian for p(t|w) whose mean is a linear function of w of the form p(t|x, w, β) ≃N t|y(x, wMAP) + gT(w −wMAP), β−1 .",Posterior parameter distribution
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1414,"We can therefore make use of the general result (2.115) for the marginal p(t) to give p(t|x, D, α, β) = N t|y(x, wMAP), σ2(x) (5.172) \end{verbatim} egin{verbatim} where the input-dependent variance is given by σ2(x) = β−1 + gTA−1g.",Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1415,"We see that the predictive distribution p(t|x, D) is a Gaussian whose mean is given by the network function y(x, wMAP) with the parameter set to their MAP value. The variance has two terms, the ﬁrst of which arises from the intrinsic noise on the target variable, whereas the second is an x-dependent term that expresses the uncertainty in the interpolant due to the uncertainty in the model parameters w. This should be compared with the corresponding predictive distribution for the linear regression model, given by (3.58) and (3.59).",Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1416,"So far, we have assumed that the hyperparameters α and β are ﬁxed and known. We can make use of the evidence framework, discussed in Section 3.5, together with the Gaussian approximation to the posterior obtained using the Laplace approxima- tion, to obtain a practical procedure for choosing the values of such hyperparameters.",Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1417,"The marginal likelihood, or evidence, for the hyperparameters is obtained by integrating over the network weights p(D|α, β) =  p(D|w, β)p(w|α) dw.",Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1418,"This is easily evaluated by making use of the Laplace approximation result (4.135). Taking logarithms then gives ln p(D|α, β) ≃−E(wMAP) −1 2 ln |A| + W 2 ln α + N 2 ln β −N 2 ln(2π) (5.175) where W is the total number of parameters in w, and the regularized error function is deﬁned by E(wMAP) = β 2 N  n=1 {y(xn, wMAP) −tn}2 + α 2 wT MAPwMAP.",Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,280,1419,We see that this takes the same form as the corresponding result (3.86) for the linear regression model.,Hyperparameter optimization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1420,"In the evidence framework, we make point estimates for α and β by maximizing ln p(D|α, β). Consider ﬁrst the maximization with respect to α, which can be done by analogy with the linear regression case discussed in Section 3.5.2. We ﬁrst deﬁne the eigenvalue equation βHui = λiui (5.177) where H is the Hessian matrix comprising the second derivatives of the sum-of- squares error function, evaluated at w = wMAP. By analogy with (3.92), we obtain α = γ wT MAPwMAP (5.178) \end{verbatim} egin{verbatim} where γ represents the effective number of parameters and is deﬁned by γ = W  i=1 λi α + λi .",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1421,"Note that this result was exact for the linear regression case. For the nonlinear neural network, however, it ignores the fact that changes in α will cause changes in the Hessian H, which in turn will change the eigenvalues. We have therefore implicitly ignored terms involving the derivatives of λi with respect to α.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1422,"Similarly, from (3.95) we see that maximizing the evidence with respect to β gives the re-estimation formula 1 β = 1 N −γ N  n=1 {y(xn, wMAP) −tn}2.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1423,"As with the linear model, we need to alternate between re-estimation of the hyper- parameters α and β and updating of the posterior distribution. The situation with a neural network model is more complex, however, due to the multimodality of the posterior distribution. As a consequence, the solution for wMAP found by maximiz- ing the log posterior will depend on the initialization of w. Solutions that differ only as a consequence of the interchange and sign reversal symmetries in the hidden units are identical so far as predictions are concerned, and it is irrelevant which of the equivalent solutions is found. However, there may be inequivalent solutions as well, and these will generally yield different values for the optimized hyperparameters.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1424,"In order to compare different models, for example neural networks having differ- ent numbers of hidden units, we need to evaluate the model evidence p(D). This can be approximated by taking (5.175) and substituting the values of α and β obtained from the iterative optimization of these hyperparameters. A more careful evaluation is obtained by marginalizing over α and β, again by making a Gaussian approxima- tion (MacKay, 1992c; Bishop, 1995a). In either case, it is necessary to evaluate the determinant |A| of the Hessian matrix. This can be problematic in practice because the determinant, unlike the trace, is sensitive to the small eigenvalues that are often difﬁcult to determine accurately.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,281,1425,"The Laplace approximation is based on a local quadratic expansion around a mode of the posterior distribution over weights. We have seen in Section 5.1.1 that any given mode in a two-layer network is a member of a set of M!2M equivalent modes that differ by interchange and sign-change symmetries, where M is the num- ber of hidden units. When comparing networks having different numbers of hid- den units, this can be taken into account by multiplying the evidence by a factor of M!2M.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1426,"So far, we have used the Laplace approximation to develop a Bayesian treat- ment of neural network regression models. We now discuss the modiﬁcations to \end{verbatim} egin{verbatim} this framework that arise when it is applied to classiﬁcation. Here we shall con- sider a network having a single logistic sigmoid output corresponding to a two-class classiﬁcation problem. The extension to networks with multiclass softmax outputs is straightforward. We shall build extensively on the analogous results for linear classiﬁcation models discussed in Section 4.5, and so we encourage the reader to familiarize themselves with that material before studying this section.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1427,"The log likelihood function for this model is given by ln p(D|w) =  n = 1N {tn ln yn + (1 −tn) ln(1 −yn)} (5.181) where tn ∈{0, 1} are the target values, and yn ≡y(xn, w). Note that there is no hyperparameter β, because the data points are assumed to be correctly labelled. As before, the prior is taken to be an isotropic Gaussian of the form (5.162).",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1428,"The ﬁrst stage in applying the Laplace framework to this model is to initialize the hyperparameter α, and then to determine the parameter vector w by maximizing the log posterior distribution. This is equivalent to minimizing the regularized error function E(w) = −ln p(D|w) + α 2 wTw (5.182) and can be achieved using error backpropagation combined with standard optimiza- tion algorithms, as discussed in Section 5.3.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1429,"Having found a solution wMAP for the weight vector, the next step is to eval- uate the Hessian matrix H comprising the second derivatives of the negative log likelihood function. This can be done, for instance, using the exact method of Sec- tion 5.4.5, or using the outer product approximation given by (5.85). The second derivatives of the negative log posterior can again be written in the form (5.166), and the Gaussian approximation to the posterior is then given by (5.167).",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1430,"To optimize the hyperparameter α, we again maximize the marginal likelihood, which is easily shown to take the form ln p(D|α) ≃−E(wMAP) −1 2 ln |A| + W 2 ln α + const (5.183) where the regularized error function is deﬁned by E(wMAP) = − N  n=1 {tn ln yn + (1 −tn) ln(1 −yn)} + α 2 wT MAPwMAP (5.184) in which yn ≡y(xn, wMAP). Maximizing this evidence function with respect to α again leads to the re-estimation equation given by (5.178).",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,282,1431,The use of the evidence procedure to determine α is illustrated in Figure 5.22 for the synthetic two-dimensional data discussed in Appendix A.,Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1432,Figure 5.22 Illustration of the evidence framework applied to a synthetic two-class data set.,Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1433,"Finally, we need the predictive distribution, which is deﬁned by (5.168). Again, this integration is intractable due to the nonlinearity of the network function. The \end{verbatim} egin{verbatim} The green curve shows the optimal de- cision boundary, the black curve shows the result of ﬁtting a two-layer network with 8 hidden units by maximum likeli- hood, and the red curve shows the re- sult of including a regularizer in which α is optimized using the evidence pro- cedure, starting from the initial value α = 0. Note that the evidence proce- dure greatly reduces the over-ﬁtting of the network.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1434,"simplest approximation is to assume that the posterior distribution is very narrow and hence make the approximation p(t|x, D) ≃p(t|x, wMAP).",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1435,"We can improve on this, however, by taking account of the variance of the posterior distribution. In this case, a linear approximation for the network outputs, as was used in the case of regression, would be inappropriate due to the logistic sigmoid output- unit activation function that constrains the output to lie in the range (0, 1). Instead, we make a linear approximation for the output unit activation in the form a(x, w) ≃aMAP(x) + bT(w −wMAP) (5.186) where aMAP(x) = a(x, wMAP), and the vector b ≡∇a(x, wMAP) can be found by backpropagation.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1436,"Because we now have a Gaussian approximation for the posterior distribution over w, and a model for a that is a linear function of w, we can now appeal to the results of Section 4.5.2. The distribution of output unit activation values, induced by the distribution over network weights, is given by p(a|x, D) =  δ a −aMAP(x) −bT(x)(w −wMAP) q(w|D) dw (5.187) where q(w|D) is the Gaussian approximation to the posterior distribution given by (5.167). From Section 4.5.2, we see that this distribution is Gaussian with mean aMAP ≡a(x, wMAP), and variance σ2 a(x) = bT(x)A−1b(x).",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,283,1437,"Finally, to obtain the predictive distribution, we must marginalize over a using p(t = 1|x, D) =  σ(a)p(a|x, D) da.",Bayesian neural networks for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1438,"Figure 5.23 An illustration of the Laplace approximation for a Bayesian neural network having 8 hidden units with ‘tanh’ activation functions and a single logistic-sigmoid output unit. The weight parameters were found using scaled conjugate gradients, and the hyperparameter α was optimized using the evidence framework. On the left is the result of using the simple approximation (5.185) based on a point estimate wMAP of the parameters, in which the green curve shows the y = 0.5 decision boundary, and the other contours correspond to output probabilities of y = 0.1, 0.3, 0.7, and 0.9. On the right is the corresponding result obtained using (5.190). Note that the effect of marginalization is to spread out the contours and to make the predictions less conﬁdent, so that at each input point x, the posterior probabilities are shifted towards 0.5, while the y = 0.5 contour itself is unaffected.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1439,"The convolution of a Gaussian with a logistic sigmoid is intractable. We therefore apply the approximation (4.153) to (5.189) giving p(t = 1|x, D) = σ κ(σ2 a)bTwMAP (5.190) where κ(·) is deﬁned by (4.154). Recall that both σ2 a and b are functions of x.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1440,Figure 5.23 shows an example of this framework applied to the synthetic classi- ﬁcation data set described in Appendix A.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1441,(⋆⋆) Consider a two-layer network function of the form (5.7) in which the hidden- unit nonlinear activation functions g(·) are given by logistic sigmoid functions of the form σ(a) = {1 + exp(−a)}−1 .,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1442,"Show that there exists an equivalent network, which computes exactly the same func- tion, but with hidden unit activation functions given by tanh(a) where the tanh func- tion is deﬁned by (5.59). Hint: ﬁrst ﬁnd the relation between σ(a) and tanh(a), and then show that the parameters of the two networks differ by linear transformations.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,284,1443,Show that maximizing the likelihood function under the conditional distribution (5.16) for a multioutput neural network is equivalent to minimizing the sum-of-squares error function (5.11).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1444,"Consider a regression problem involving multiple target variables in which it is assumed that the distribution of the targets, conditioned on the input vector x, is a Gaussian of the form p(t|x, w) = N(t|y(x, w), Σ) (5.192) where y(x, w) is the output of a neural network with input vector x and weight vector w, and Σ is the covariance of the assumed Gaussian noise on the targets.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1445,"Given a set of independent observations of x and t, write down the error function that must be minimized in order to ﬁnd the maximum likelihood solution for w, if we assume that Σ is ﬁxed and known. Now assume that Σ is also to be determined from the data, and write down an expression for the maximum likelihood solution for Σ. Note that the optimizations of w and Σ are now coupled, in contrast to the case of independent target variables discussed in Section 5.2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1446,"Consider a binary classiﬁcation problem in which the target values are t ∈ {0, 1}, with a network output y(x, w) that represents p(t = 1|x), and suppose that there is a probability ϵ that the class label on a training data point has been incorrectly set. Assuming independent and identically distributed data, write down the error function corresponding to the negative log likelihood. Verify that the error function (5.21) is obtained when ϵ = 0. Note that this error function makes the model robust to incorrectly labelled data, in contrast to the usual error function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1447,"Show that maximizing likelihood for a multiclass neural network model in which the network outputs have the interpretation yk(x, w) = p(tk = 1|x) is equivalent to the minimization of the cross-entropy error function (5.24).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1448,Show the derivative of the error function (5.21) with respect to the activation ak for an output unit having a logistic sigmoid activation function satisﬁes (5.18).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1449,(⋆) Show the derivative of the error function (5.24) with respect to the activation ak for output units having a softmax activation function satisﬁes (5.18).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1450,We saw in (4.88) that the derivative of the logistic sigmoid activation function can be expressed in terms of the function value itself. Derive the corresponding result for the ‘tanh’ activation function deﬁned by (5.59).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,285,1451,"The error function (5.21) for binary classiﬁcation problems was de- rived for a network having a logistic-sigmoid output activation function, so that 0 ⩽y(x, w) ⩽1, and data having target values t ∈{0, 1}. Derive the correspond- ing error function if we consider a network having an output −1 ⩽y(x, w) ⩽1 and target values t = 1 for class C1 and t = −1 for class C2. What would be the appropriate choice of output unit activation function? 5.10 (⋆) www Consider a Hessian matrix H with eigenvector equation (5.33). By setting the vector v in (5.39) equal to each of the eigenvectors ui in turn, show that H is positive deﬁnite if, and only if, all of its eigenvalues are positive.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1452,"Consider a quadratic error function deﬁned by (5.32), in which the Hessian matrix H has an eigenvalue equation given by (5.33). Show that the con- tours of constant error are ellipses whose axes are aligned with the eigenvectors ui, with lengths that are inversely proportional to the square root of the corresponding eigenvalues λi.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1453,"By considering the local Taylor expansion (5.32) of an error function about a stationary point w⋆, show that the necessary and sufﬁcient condition for the stationary point to be a local minimum of the error function is that the Hessian matrix H, deﬁned by (5.30) with w = w⋆, be positive deﬁnite.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1454,"Show that as a consequence of the symmetry of the Hessian matrix H, the number of independent elements in the quadratic error function (5.28) is given by W(W + 3)/2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1455,"(⋆) By making a Taylor expansion, verify that the terms that are O(ϵ) cancel on the right-hand side of (5.69).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1456,"(⋆⋆) In Section 5.3.4, we derived a procedure for evaluating the Jacobian matrix of a neural network using a backpropagation procedure. Derive an alternative formalism for ﬁnding the Jacobian based on forward propagation equations.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1457,The outer product approximation to the Hessian matrix for a neural network using a sum-of-squares error function is given by (5.84). Extend this result to the case of multiple outputs.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1458,"(⋆) Consider a squared loss function of the form E = 1 2  {y(x, w) −t}2 p(x, t) dx dt (5.193) where y(x, w) is a parametric function such as a neural network. The result (1.89) shows that the function y(x, w) that minimizes this error is given by the conditional expectation of t given x. Use this result to show that the second derivative of E with respect to two elements wr and ws of the vector w, is given by ∂2E ∂wr∂ws =  ∂y ∂wr ∂y ∂ws p(x) dx.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1459,"Note that, for a ﬁnite sample from p(x), we obtain (5.84). 5.18 (⋆) Consider a two-layer network of the form shown in Figure 5.1 with the addition of extra parameters corresponding to skip-layer connections that go directly from the inputs to the outputs. By extending the discussion of Section 5.3.2, write down the equations for the derivatives of the error function with respect to these additional parameters.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,286,1460,"Derive the expression (5.85) for the outer product approximation to the Hessian matrix for a network having a single output with a logistic sigmoid output-unit activation function and a cross-entropy error function, corresponding to the result (5.84) for the sum-of-squares error function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1461,"(⋆) Derive an expression for the outer product approximation to the Hessian matrix for a network having K outputs with a softmax output-unit activation function and a cross-entropy error function, corresponding to the result (5.84) for the sum-of- squares error function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1462,"(⋆⋆⋆) Extend the expression (5.86) for the outer product approximation of the Hes- sian matrix to the case of K > 1 output units. Hence, derive a recursive expression analogous to (5.87) for incrementing the number N of patterns and a similar expres- sion for incrementing the number K of outputs. Use these results, together with the identity (5.88), to ﬁnd sequential update expressions analogous to (5.89) for ﬁnding the inverse of the Hessian by incrementally including both extra patterns and extra outputs.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1463,"Derive the results (5.93), (5.94), and (5.95) for the elements of the Hessian matrix of a two-layer feed-forward network by application of the chain rule of cal- culus.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1464,(⋆⋆) Extend the results of Section 5.4.5 for the exact Hessian of a two-layer network to include skip-layer connections that go directly from inputs to outputs.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1465,"(⋆) Verify that the network function deﬁned by (5.113) and (5.114) is invariant un- der the transformation (5.115) applied to the inputs, provided the weights and biases are simultaneously transformed using (5.116) and (5.117). Similarly, show that the network outputs can be transformed according (5.118) by applying the transforma- tion (5.119) and (5.120) to the second-layer weights and biases.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,287,1466,"Consider a quadratic error function of the form E = E0 + 1 2(w −w⋆)TH(w −w⋆) (5.195) where w⋆represents the minimum, and the Hessian matrix H is positive deﬁnite and constant. Suppose the initial weight vector w(0) is chosen to be at the origin and is updated using simple gradient descent w(τ) = w(τ−1) −ρ∇E (5.196) where τ denotes the step number, and ρ is the learning rate (which is assumed to be small). Show that, after τ steps, the components of the weight vector parallel to the eigenvectors of H can be written w(τ) j = {1 −(1 −ρηj)τ} w⋆ j (5.197) where wj = wTuj, and uj and ηj are the eigenvectors and eigenvalues, respectively, of H so that Huj = ηjuj.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1467,"Show that as τ →∞, this gives w(τ) →w⋆as expected, provided |1 −ρηj| < 1. Now suppose that training is halted after a ﬁnite number τ of steps. Show that the \end{verbatim} egin{verbatim} components of the weight vector parallel to the eigenvectors of the Hessian satisfy w(τ) j ≃w⋆ j when ηj ≫(ρτ)−1 (5.199) |w(τ) j | ≪|w⋆ j | when ηj ≪(ρτ)−1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1468,"Compare this result with the discussion in Section 3.5.3 of regularization with simple weight decay, and hence show that (ρτ)−1 is analogous to the regularization param- eter λ. The above results also show that the effective number of parameters in the network, as deﬁned by (3.91), grows as the training progresses.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1469,"(⋆⋆) Consider a multilayer perceptron with arbitrary feed-forward topology, which is to be trained by minimizing the tangent propagation error function (5.127) in which the regularizing function is given by (5.128). Show that the regularization term Ωcan be written as a sum over patterns of terms of the form Ωn = 1 2  k (Gyk)2 (5.201) where G is a differential operator deﬁned by G ≡  i τi ∂ ∂xi .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1470,"By acting on the forward propagation equations zj = h(aj), aj =  i wjizi (5.203) with the operator G, show that Ωn can be evaluated by forward propagation using the following equations: αj = h′(aj)βj, βj =  i wjiαi.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1471,"where we have deﬁned the new variables αj ≡Gzj, βj ≡Gaj.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1472,"Now show that the derivatives of Ωn with respect to a weight wrs in the network can be written in the form ∂Ωn ∂wrs =  k αk {φkrzs + δkrαs} (5.206) where we have deﬁned δkr ≡∂yk ∂ar , φkr ≡Gδkr.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,288,1473,"Write down the backpropagation equations for δkr, and hence derive a set of back- propagation equations for the evaluation of the φkr.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1474,"Consider the framework for training with transformed data in the special case in which the transformation consists simply of the addition of random noise x →x + ξ where ξ has a Gaussian distribution with zero mean and unit covariance. By following an argument analogous to that of Section 5.5.5, show that the resulting regularizer reduces to the Tikhonov form (5.135).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1475,"Consider a neural network, such as the convolutional network discussed in Section 5.5.6, in which multiple weights are constrained to have the same value.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1476,Discuss how the standard backpropagation algorithm must be modiﬁed in order to ensure that such constraints are satisﬁed when evaluating the derivatives of an error function with respect to the adjustable parameters in the network.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1477,(⋆) Verify the result (5.142). 5.31 (⋆) Verify the result (5.143).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1478,"(⋆⋆) Show that the derivatives of the mixing coefﬁcients {πk}, deﬁned by (5.146), with respect to the auxiliary parameters {ηj} are given by ∂πk ∂ηj = δjkπj −πjπk.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1479,"Hence, by making use of the constraint  k πk = 1, derive the result (5.147).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1480,"Write down a pair of equations that express the Cartesian coordinates (x1, x2) for the robot arm shown in Figure 5.18 in terms of the joint angles θ1 and θ2 and the lengths L1 and L2 of the links. Assume the origin of the coordinate system is given by the attachment point of the lower arm. These equations deﬁne the ‘forward kinematics’ of the robot arm.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1481,Derive the result (5.155) for the derivative of the error function with respect to the network output activations controlling the mixing coefﬁcients in the mixture density network.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1482,Derive the result (5.156) for the derivative of the error function with respect to the network output activations controlling the component means in the mixture density network.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1483,Derive the result (5.157) for the derivative of the error function with respect to the network output activations controlling the component variances in the mixture density network.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1484,Verify the results (5.158) and (5.160) for the conditional mean and variance of the mixture density network model.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,289,1485,"Using the general result (2.115), derive the predictive distribution (5.172) for the Laplace approximation to the Bayesian neural network model.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,290,1486,Make use of the Laplace approximation result (4.135) to show that the evidence function for the hyperparameters α and β in the Bayesian neural network model can be approximated by (5.175).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,290,1487,"Outline the modiﬁcations needed to the framework for Bayesian neural networks, discussed in Section 5.7.3, to handle multiclass problems using networks having softmax output-unit activation functions.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Neural Networks,5,290,1488,"By following analogous steps to those given in Section 5.7.1 for regression networks, derive the result (5.183) for the marginal likelihood in the case of a net- work having a cross-entropy error function and logistic-sigmoid output-unit activa- tion function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,291,1489,"In Chapters 3 and 4, we considered linear parametric models for regression and classiﬁcation in which the form of the mapping y(x, w) from input x to output y is governed by a vector w of adaptive parameters. During the learning phase, a set of training data is used either to obtain a point estimate of the parameter vector or to determine a posterior distribution over this vector. The training data is then discarded, and predictions for new inputs are based purely on the learned parameter vector w. This approach is also used in nonlinear parametric models such as neural networks.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,291,1490,"However, there is a class of pattern recognition techniques, in which the training data points, or a subset of them, are kept and used also during the prediction phase.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1491,"For instance, the Parzen probability density model comprised a linear combination of ‘kernel’ functions each one centred on one of the training data points. Similarly, in Section 2.5.2 we introduced a simple technique for classiﬁcation called nearest neighbours, which involved assigning to each new test vector the same label as the \end{verbatim} egin{verbatim} closest example from the training set. These are examples of memory-based methods that involve storing the entire training set in order to make predictions for future data points. They typically require a metric to be deﬁned that measures the similarity of any two vectors in input space, and are generally fast to ‘train’ but slow at making predictions for test data points.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1492,"Many linear parametric models can be re-cast into an equivalent ‘dual represen- tation’ in which the predictions are also based on linear combinations of a kernel function evaluated at the training data points. As we shall see, for models which are based on a ﬁxed nonlinear feature space mapping φ(x), the kernel function is given by the relation k(x, x′) = φ(x)Tφ(x′).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1493,"From this deﬁnition, we see that the kernel is a symmetric function of its arguments so that k(x, x′) = k(x′, x). The kernel concept was introduced into the ﬁeld of pat- tern recognition by Aizerman et al. (1964) in the context of the method of potential functions, so-called because of an analogy with electrostatics. Although neglected for many years, it was re-introduced into machine learning in the context of large- margin classiﬁers by Boser et al. (1992) giving rise to the technique of support vector machines. Since then, there has been considerable interest in this topic, both Chapter 7 in terms of theory and applications. One of the most signiﬁcant developments has been the extension of kernels to handle symbolic objects, thereby greatly expanding the range of problems that can be addressed.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1494,"The simplest example of a kernel function is obtained by considering the identity mapping for the feature space in (6.1) so that φ(x) = x, in which case k(x, x′) = xTx′. We shall refer to this as the linear kernel.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1495,"The concept of a kernel formulated as an inner product in a feature space allows us to build interesting extensions of many well-known algorithms by making use of the kernel trick, also known as kernel substitution. The general idea is that, if we have an algorithm formulated in such a way that the input vector x enters only in the form of scalar products, then we can replace that scalar product with some other choice of kernel. For instance, the technique of kernel substitution can be applied to principal component analysis in order to develop a nonlinear variant of PCA (Sch¨olkopf et al., 1998). Other examples of kernel substitution include nearest-neighbour classiﬁers and the kernel Fisher discriminant (Mika et al., 1999; Roth and Steinhage, 2000; Baudat and Anouar, 2000).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1496,"There are numerous forms of kernel functions in common use, and we shall en- counter several examples in this chapter. Many have the property of being a function only of the difference between the arguments, so that k(x, x′) = k(x −x′), which are known as stationary kernels because they are invariant to translations in input space. A further specialization involves homogeneous kernels, also known as ra- dial basis functions, which depend only on the magnitude of the distance (typically Euclidean) between the arguments so that k(x, x′) = k(∥x −x′∥).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,292,1497,"For recent textbooks on kernel methods, see Sch¨olkopf and Smola (2002), Her- brich (2002), and Shawe-Taylor and Cristianini (2004).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,293,1498,Many linear models for regression and classiﬁcation can be reformulated in terms of a dual representation in which the kernel function arises naturally. This concept will play an important role when we consider support vector machines in the next chapter.,Dual Representations
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,293,1499,"Here we consider a linear regression model whose parameters are determined by minimizing a regularized sum-of-squares error function given by J(w) = 1 2 N  n=1  wTφ(xn) −tn 2 + λ 2 wTw (6.2) where λ ⩾0. If we set the gradient of J(w) with respect to w equal to zero, we see that the solution for w takes the form of a linear combination of the vectors φ(xn), with coefﬁcients that are functions of w, of the form w = −1 λ N  n=1  wTφ(xn) −tn  φ(xn) = N  n=1 anφ(xn) = ΦTa (6.3) where Φ is the design matrix, whose nth row is given by φ(xn)T. Here the vector a = (a1, . . . , aN)T, and we have deﬁned an = −1 λ  wTφ(xn) −tn  .",Dual Representations
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,293,1500,"Instead of working with the parameter vector w, we can now reformulate the least- squares algorithm in terms of the parameter vector a, giving rise to a dual represen- tation. If we substitute w = ΦTa into J(w), we obtain J(a) = 1 2aTΦΦTΦΦTa −aTΦΦTt + 1 2tTt + λ 2 aTΦΦTa (6.5) where t = (t1, . . . , tN)T. We now deﬁne the Gram matrix K = ΦΦT, which is an N × N symmetric matrix with elements Knm = φ(xn)Tφ(xm) = k(xn, xm) (6.6) where we have introduced the kernel function k(x, x′) deﬁned by (6.1). In terms of the Gram matrix, the sum-of-squares error function can be written as J(a) = 1 2aTKKa −aTKt + 1 2tTt + λ 2 aTKa.",Dual Representations
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,293,1501,"Setting the gradient of J(a) with respect to a to zero, we obtain the following solu- tion a = (K + λIN)−1 t.",Dual Representations
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1502,"If we substitute this back into the linear regression model, we obtain the following prediction for a new input x y(x) = wTφ(x) = aTΦφ(x) = k(x)T (K + λIN)−1 t (6.9) where we have deﬁned the vector k(x) with elements kn(x) = k(xn, x). Thus we see that the dual formulation allows the solution to the least-squares problem to be expressed entirely in terms of the kernel function k(x, x′). This is known as a dual formulation because, by noting that the solution for a can be expressed as a linear combination of the elements of φ(x), we recover the original formulation in terms of the parameter vector w. Note that the prediction at x is given by a linear combination of the target values from the training set. In fact, we have already obtained this result, using a slightly different notation, in Section 3.3.3.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1503,"In the dual formulation, we determine the parameter vector a by inverting an N × N matrix, whereas in the original parameter space formulation we had to invert an M × M matrix in order to determine w. Because N is typically much larger than M, the dual formulation does not seem to be particularly useful. However, the advantage of the dual formulation, as we shall see, is that it is expressed entirely in terms of the kernel function k(x, x′). We can therefore work directly in terms of kernels and avoid the explicit introduction of the feature vector φ(x), which allows us implicitly to use feature spaces of high, even inﬁnite, dimensionality.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1504,"The existence of a dual representation based on the Gram matrix is a property of many linear models, including the perceptron. In Section 6.4, we will develop a dual- ity between probabilistic linear models for regression and the technique of Gaussian processes. Duality will also play an important role when we discuss support vector machines in Chapter 7.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1505,"In order to exploit kernel substitution, we need to be able to construct valid kernel functions. One approach is to choose a feature space mapping φ(x) and then use this to ﬁnd the corresponding kernel, as is illustrated in Figure 6.1. Here the kernel function is deﬁned for a one-dimensional input space by k(x, x′) = φ(x)Tφ(x′) = M  i=1 φi(x)φi(x′) (6.10) where φi(x) are the basis functions.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1506,"An alternative approach is to construct kernel functions directly. In this case, we must ensure that the function we choose is a valid kernel, in other words that it corresponds to a scalar product in some (perhaps inﬁnite dimensional) feature space.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,294,1507,"As a simple example, consider a kernel function given by k(x, z) = xTz 2 .",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,295,1508,"Figure 6.1 Illustration of the construction of kernel functions starting from a corresponding set of basis func- tions. In each column the lower plot shows the kernel function k(x, x′) deﬁned by (6.10) plotted as a function of x for x′ = 0, while the upper plot shows the corresponding basis functions given by polynomials (left column), ‘Gaussians’ (centre column), and logistic sigmoids (right column).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,295,1509,"If we take the particular case of a two-dimensional input space x = (x1, x2) we can expand out the terms and thereby identify the corresponding nonlinear feature mapping k(x, z) = xTz 2 = (x1z1 + x2z2)2 = x2 1z2 1 + 2x1z1x2z2 + x2 2z2 2 = (x2 1, √ 2x1x2, x2 2)(z2 1, √ 2z1z2, z2 2)T = φ(x)Tφ(z).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,295,1510,"We see that the feature mapping takes the form φ(x) = (x2 1, √ 2x1x2, x2 2)T and therefore comprises all possible second order terms, with a speciﬁc weighting be- tween them.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,295,1511,"More generally, however, we need a simple way to test whether a function con- stitutes a valid kernel without having to construct the function φ(x) explicitly. A necessary and sufﬁcient condition for a function k(x, x′) to be a valid kernel (Shawe- Taylor and Cristianini, 2004) is that the Gram matrix K, whose elements are given by k(xn, xm), should be positive semideﬁnite for all possible choices of the set {xn}.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,295,1512,Note that a positive semideﬁnite matrix is not the same thing as a matrix whose elements are nonnegative.,Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,296,1513,One powerful technique for constructing new kernels is to build them out of simpler kernels as building blocks. This can be done using the following properties: \end{verbatim} egin{verbatim} Techniques for Constructing New Kernels.,Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,296,1514,"Given valid kernels k1(x, x′) and k2(x, x′), the following new kernels will also be valid: k(x, x′) = ck1(x, x′) (6.13) k(x, x′) = f(x)k1(x, x′)f(x′) (6.14) k(x, x′) = q (k1(x, x′)) (6.15) k(x, x′) = exp (k1(x, x′)) (6.16) k(x, x′) = k1(x, x′) + k2(x, x′) (6.17) k(x, x′) = k1(x, x′)k2(x, x′) (6.18) k(x, x′) = k3 (φ(x), φ(x′)) (6.19) k(x, x′) = xTAx′ (6.20) k(x, x′) = ka(xa, x′ a) + kb(xb, x′ b) (6.21) k(x, x′) = ka(xa, x′ a)kb(xb, x′ b) (6.22) where c > 0 is a constant, f(·) is any function, q(·) is a polynomial with nonneg- ative coefﬁcients, φ(x) is a function from x to RM, k3(·, ·) is a valid kernel in RM, A is a symmetric positive semideﬁnite matrix, xa and xb are variables (not necessarily disjoint) with x = (xa, xb), and ka and kb are valid kernel functions over their respective spaces.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,296,1515,"Equipped with these properties, we can now embark on the construction of more complex kernels appropriate to speciﬁc applications. We require that the kernel k(x, x′) be symmetric and positive semideﬁnite and that it expresses the appropriate form of similarity between x and x′ according to the intended application. Here we consider a few common examples of kernel functions. For a more extensive discus- sion of ‘kernel engineering’, see Shawe-Taylor and Cristianini (2004).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,296,1516,"We saw that the simple polynomial kernel k(x, x′) = xTx′2 contains only terms of degree two.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,296,1517,"If we consider the slightly generalized kernel k(x, x′) = xTx′ + c2 with c > 0, then the corresponding feature mapping φ(x) contains con- stant and linear terms as well as terms of order two. Similarly, k(x, x′) = xTx′M contains all monomials of order M. For instance, if x and x′ are two images, then the kernel represents a particular weighted sum of all possible products of M pixels in the ﬁrst image with M pixels in the second image. This can similarly be gener- alized to include all terms up to degree M by considering k(x, x′) = xTx′ + c M with c > 0. Using the results (6.17) and (6.18) for combining kernels we see that these will all be valid kernel functions.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1518,"Another commonly used kernel takes the form k(x, x′) = exp −∥x −x′∥2/2σ2 (6.23) and is often called a ‘Gaussian’ kernel. Note, however, that in this context it is not interpreted as a probability density, and hence the normalization coefﬁcient is \end{verbatim} egin{verbatim} omitted. We can see that this is a valid kernel by expanding the square ∥x −x′∥2 = xTx + (x′)Tx′ −2xTx′ (6.24) to give k(x, x′) = exp −xTx/2σ2 exp xTx′/σ2 exp −(x′)Tx′/2σ2 (6.25) and then making use of (6.14) and (6.16), together with the validity of the linear kernel k(x, x′) = xTx′. Note that the feature vector that corresponds to the Gaussian kernel has inﬁnite dimensionality.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1519,"The Gaussian kernel is not restricted to the use of Euclidean distance. If we use kernel substitution in (6.24) to replace xTx′ with a nonlinear kernel κ(x, x′), we obtain k(x, x′) = exp −1 2σ2 (κ(x, x) + κ(x′, x′) −2κ(x, x′)) .",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1520,"An important contribution to arise from the kernel viewpoint has been the exten- sion to inputs that are symbolic, rather than simply vectors of real numbers. Kernel functions can be deﬁned over objects as diverse as graphs, sets, strings, and text doc- uments. Consider, for instance, a ﬁxed set and deﬁne a nonvectorial space consisting of all possible subsets of this set. If A1 and A2 are two such subsets then one simple choice of kernel would be k(A1, A2) = 2|A1∩A2| (6.27) where A1 ∩A2 denotes the intersection of sets A1 and A2, and |A| denotes the number of subsets in A. This is a valid kernel function because it can be shown to correspond to an inner product in a feature space.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1521,"One powerful approach to the construction of kernels starts from a probabilistic generative model (Haussler, 1999), which allows us to apply generative models in a discriminative setting. Generative models can deal naturally with missing data and in the case of hidden Markov models can handle sequences of varying length. By contrast, discriminative models generally give better performance on discriminative tasks than generative models. It is therefore of some interest to combine these two approaches (Lasserre et al., 2006). One way to combine them is to use a generative model to deﬁne a kernel, and then use this kernel in a discriminative approach.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1522,"Given a generative model p(x) we can deﬁne a kernel by k(x, x′) = p(x)p(x′).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,297,1523,"This is clearly a valid kernel function because we can interpret it as an inner product in the one-dimensional feature space deﬁned by the mapping p(x). It says that two inputs x and x′ are similar if they both have high probabilities. We can use (6.13) and (6.17) to extend this class of kernels by considering sums over products of different probability distributions, with positive weighting coefﬁcients p(i), of the form k(x, x′) =  i p(x|i)p(x′|i)p(i).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1524,"This is equivalent, up to an overall multiplicative constant, to a mixture distribution in which the components factorize, with the index i playing the role of a ‘latent’ variable. Two inputs x and x′ will give a large value for the kernel function, and hence appear similar, if they have signiﬁcant probability under a range of different components. Taking the limit of an inﬁnite sum, we can also consider kernels of the form k(x, x′) =  p(x|z)p(x′|z)p(z) dz (6.30) where z is a continuous latent variable.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1525,"Now suppose that our data consists of ordered sequences of length L so that an observation is given by X = {x1, . . . , xL}. A popular generative model for sequences is the hidden Markov model, which expresses the distribution p(X) as a marginalization over a corresponding sequence of hidden states Z = {z1, . . . , zL}.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1526,"We can use this approach to deﬁne a kernel function measuring the similarity of two sequences X and X′ by extending the mixture representation (6.29) to give k(X, X′) =  Z p(X|Z)p(X′|Z)p(Z) (6.31) so that both observed sequences are generated by the same hidden sequence Z. This model can easily be extended to allow sequences of differing length to be compared.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1527,"An alternative technique for using generative models to deﬁne kernel functions is known as the Fisher kernel (Jaakkola and Haussler, 1999). Consider a parametric generative model p(x|θ) where θ denotes the vector of parameters. The goal is to ﬁnd a kernel that measures the similarity of two input vectors x and x′ induced by the generative model. Jaakkola and Haussler (1999) consider the gradient with respect to θ, which deﬁnes a vector in a ‘feature’ space having the same dimensionality as θ. In particular, they consider the Fisher score g(θ, x) = ∇θ ln p(x|θ) (6.32) from which the Fisher kernel is deﬁned by k(x, x′) = g(θ, x)TF−1g(θ, x′).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1528,"Here F is the Fisher information matrix, given by F = Ex  g(θ, x)g(θ, x)T (6.34) where the expectation is with respect to x under the distribution p(x|θ). This can be motivated from the perspective of information geometry (Amari, 1998), which considers the differential geometry of the space of model parameters. Here we sim- ply note that the presence of the Fisher information matrix causes this kernel to be invariant under a nonlinear re-parameterization of the density model θ →ψ(θ).",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,298,1529,"In practice, it is often infeasible to evaluate the Fisher information matrix. One approach is simply to replace the expectation in the deﬁnition of the Fisher informa- tion with the sample average, giving F ≃1 N N  n=1 g(θ, xn)g(θ, xn)T.",Constructing Kernels
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,299,1530,"This is the covariance matrix of the Fisher scores, and so the Fisher kernel corre- sponds to a whitening of these scores. More simply, we can just omit the Fisher information matrix altogether and use the noninvariant kernel k(x, x′) = g(θ, x)Tg(θ, x′).",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,299,1531,"An application of Fisher kernels to document retrieval is given by Hofmann (2000). A ﬁnal example of a kernel function is the sigmoidal kernel given by k(x, x′) = tanh axTx′ + b (6.37) whose Gram matrix in general is not positive semideﬁnite. This form of kernel has, however, been used in practice (Vapnik, 1995), possibly because it gives kernel expansions such as the support vector machine a superﬁcial resemblance to neural network models. As we shall see, in the limit of an inﬁnite number of basis functions, a Bayesian neural network with an appropriate prior reduces to a Gaussian process, thereby providing a deeper link between neural networks and kernel methods.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,299,1532,"In Chapter 3, we discussed regression models based on linear combinations of ﬁxed basis functions, although we did not discuss in detail what form those basis functions might take. One choice that has been widely used is that of radial basis functions, which have the property that each basis function depends only on the radial distance (typically Euclidean) from a centre µj, so that φj(x) = h(∥x −µj∥).",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,299,1533,"Historically, radial basis functions were introduced for the purpose of exact func- tion interpolation (Powell, 1987). Given a set of input vectors {x1, . . . , xN} along with corresponding target values {t1, . . . , tN}, the goal is to ﬁnd a smooth function f(x) that ﬁts every target value exactly, so that f(xn) = tn for n = 1, . . . , N. This is achieved by expressing f(x) as a linear combination of radial basis functions, one centred on every data point f(x) = N  n=1 wnh(∥x −xn∥).",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,299,1534,"The values of the coefﬁcients {wn} are found by least squares, and because there are the same number of coefﬁcients as there are constraints, the result is a function that ﬁts every target value exactly. In pattern recognition applications, however, the target values are generally noisy, and exact interpolation is undesirable because this corresponds to an over-ﬁtted solution.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1535,"Expansions in radial basis functions also arise from regularization theory (Pog- gio and Girosi, 1990; Bishop, 1995a). For a sum-of-squares error function with a regularizer deﬁned in terms of a differential operator, the optimal solution is given by an expansion in the Green’s functions of the operator (which are analogous to the eigenvectors of a discrete matrix), again with one basis function centred on each data \end{verbatim} egin{verbatim} point. If the differential operator is isotropic then the Green’s functions depend only on the radial distance from the corresponding data point. Due to the presence of the regularizer, the solution no longer interpolates the training data exactly.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1536,"Another motivation for radial basis functions comes from a consideration of the interpolation problem when the input (rather than the target) variables are noisy (Webb, 1994; Bishop, 1995a). If the noise on the input variable x is described by a variable ξ having a distribution ν(ξ), then the sum-of-squares error function becomes E = 1 2 N  n=1  {y(xn + ξ) −tn}2 ν(ξ) dξ.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1537,"Using the calculus of variations, we can optimize with respect to the function f(x) Appendix D to give y(xn) = N  n=1 tnh(x −xn) (6.40) where the basis functions are given by h(x −xn) = ν(x −xn) N  n=1 ν(x −xn) .",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1538,"We see that there is one basis function centred on every data point. This is known as the Nadaraya-Watson model and will be derived again from a different perspective in Section 6.3.1. If the noise distribution ν(ξ) is isotropic, so that it is a function only of ∥ξ∥, then the basis functions will be radial.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1539,"Note that the basis functions (6.41) are normalized, so that  n h(x −xn) = 1 for any value of x. The effect of such normalization is shown in Figure 6.2. Normal- ization is sometimes used in practice as it avoids having regions of input space where all of the basis functions take small values, which would necessarily lead to predic- tions in such regions that are either small or controlled purely by the bias parameter.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1540,"Another situation in which expansions in normalized radial basis functions arise is in the application of kernel density estimation to the problem of regression, as we shall discuss in Section 6.3.1.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,300,1541,"Because there is one basis function associated with every data point, the corre- sponding model can be computationally costly to evaluate when making predictions for new data points. Models have therefore been proposed (Broomhead and Lowe, 1988; Moody and Darken, 1989; Poggio and Girosi, 1990), which retain the expan- sion in radial basis functions but where the number M of basis functions is smaller than the number N of data points. Typically, the number of basis functions, and the locations µi of their centres, are determined based on the input data {xn} alone. The basis functions are then kept ﬁxed and the coefﬁcients {wi} are determined by least squares by solving the usual set of linear equations, as discussed in Section 3.1.1.",Radial Basis Function Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,301,1542,"Figure 6.2 Plot of a set of Gaussian basis functions on the left, together with the corresponding normalized basis functions on the right.",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,301,1543,"One of the simplest ways of choosing basis function centres is to use a randomly chosen subset of the data points. A more systematic approach is called orthogonal least squares (Chen et al., 1991). This is a sequential selection process in which at each step the next data point to be chosen as a basis function centre corresponds to the one that gives the greatest reduction in the sum-of-squares error. Values for the expansion coefﬁcients are determined as part of the algorithm. Clustering algorithms such as K-means have also been used, which give a set of basis function centres that no longer coincide with training data points.",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,301,1544,"In Section 3.3.3, we saw that the prediction of a linear regression model for a new input x takes the form of a linear combination of the training set target values with coefﬁcients given by the ‘equivalent kernel’ (3.62) where the equivalent kernel satisﬁes the summation constraint (3.64).",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,302,1545,"We can motivate the kernel regression model (3.61) from a different perspective, starting with kernel density estimation. Suppose we have a training set {xn, tn} and we use a Parzen density estimator to model the joint distribution p(x, t), so that p(x, t) = 1 N N  n=1 f(x −xn, t −tn) (6.42) where f(x, t) is the component density function, and there is one such component centred on each data point. We now ﬁnd an expression for the regression function y(x), corresponding to the conditional average of the target variable conditioned on \end{verbatim} egin{verbatim} the input variable, which is given by y(x) = E[t|x] =  ∞ −∞ tp(t|x) dt =  tp(x, t) dt  p(x, t) dt =  n  tf(x −xn, t −tn) dt  m  f(x −xm, t −tm) dt .",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,302,1546,"We now assume for simplicity that the component density functions have zero mean so that  ∞ −∞ f(x, t)t dt = 0 (6.44) for all values of x. Using a simple change of variable, we then obtain y(x) =  n g(x −xn)tn  m g(x −xm) =  n k(x, xn)tn (6.45) where n, m = 1, . . . , N and the kernel function k(x, xn) is given by k(x, xn) = g(x −xn)  m g(x −xm) (6.46) and we have deﬁned g(x) =  ∞ −∞ f(x, t) dt.",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,302,1547,"The result (6.45) is known as the Nadaraya-Watson model, or kernel regression (Nadaraya, 1964; Watson, 1964). For a localized kernel function, it has the prop- erty of giving more weight to the data points xn that are close to x. Note that the kernel (6.46) satisﬁes the summation constraint N  n=1 k(x, xn) = 1.",Nadaraya-Watson model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,303,1548,"Figure 6.3 Illustration of the Nadaraya-Watson kernel regression model using isotropic Gaussian kernels, for the sinusoidal data set. The original sine function is shown by the green curve, the data points are shown in blue, and each is the centre of an isotropic Gaussian kernel.",Gaussian Processes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,303,1549,"The resulting regression function, given by the condi- tional mean, is shown by the red line, along with the two- standard-deviation region for the conditional distribution p(t|x) shown by the red shading. The blue ellipse around each data point shows one standard deviation contour for the corresponding kernel. These appear noncircular due to the different scales on the horizontal and vertical axes.",Gaussian Processes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,303,1550,"In fact, this model deﬁnes not only a conditional expectation but also a full conditional distribution given by p(t|x) = p(t, x)  p(t, x) dt =  n f(x −xn, t −tn)  m  f(x −xm, t −tm) dt (6.48) from which other expectations can be evaluated.",Gaussian Processes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,303,1551,"As an illustration we consider the case of a single input variable x in which f(x, t) is given by a zero-mean isotropic Gaussian over the variable z = (x, t) with variance σ2. The corresponding conditional distribution (6.48) is given by a Gaus- sian mixture, and is shown, together with the conditional mean, for the sinusoidal synthetic data set in Figure 6.3.",Gaussian Processes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,303,1552,"An obvious extension of this model is to allow for more ﬂexible forms of Gaus- sian components, for instance having different variance parameters for the input and target variables. More generally, we could model the joint distribution p(t, x) using a Gaussian mixture model, trained using techniques discussed in Chapter 9 (Ghahra- mani and Jordan, 1994), and then ﬁnd the corresponding conditional distribution p(t|x). In this latter case we no longer have a representation in terms of kernel func- tions evaluated at the training set data points. However, the number of components in the mixture model can be smaller than the number of training set points, resulting in a model that is faster to evaluate for test data points. We have thereby accepted an increased computational cost during the training phase in order to have a model that is faster at making predictions.",Gaussian Processes
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,304,1553,"In Section 6.1, we introduced kernels by applying the concept of duality to a non- probabilistic model for regression. Here we extend the role of kernels to probabilis- \end{verbatim} egin{verbatim} tic discriminative models, leading to the framework of Gaussian processes. We shall thereby see how kernels arise naturally in a Bayesian setting.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,304,1554,"In Chapter 3, we considered linear regression models of the form y(x, w) = wTφ(x) in which w is a vector of parameters and φ(x) is a vector of ﬁxed nonlinear basis functions that depend on the input vector x. We showed that a prior distribution over w induced a corresponding prior distribution over functions y(x, w). Given a training data set, we then evaluated the posterior distribution over w and thereby obtained the corresponding posterior distribution over regression functions, which in turn (with the addition of noise) implies a predictive distribution p(t|x) for new input vectors x.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,304,1555,"In the Gaussian process viewpoint, we dispense with the parametric model and instead deﬁne a prior probability distribution over functions directly. At ﬁrst sight, it might seem difﬁcult to work with a distribution over the uncountably inﬁnite space of functions. However, as we shall see, for a ﬁnite training set we only need to consider the values of the function at the discrete set of input values xn corresponding to the training set and test set data points, and so in practice we can work in a ﬁnite space.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,304,1556,"Models equivalent to Gaussian processes have been widely studied in many dif- ferent ﬁelds. For instance, in the geostatistics literature Gaussian process regression is known as kriging (Cressie, 1993). Similarly, ARMA (autoregressive moving aver- age) models, Kalman ﬁlters, and radial basis function networks can all be viewed as forms of Gaussian process models. Reviews of Gaussian processes from a machine learning perspective can be found in MacKay (1998), Williams (1999), and MacKay (2003), and a comparison of Gaussian process models with alternative approaches is given in Rasmussen (1996). See also Rasmussen and Williams (2006) for a recent textbook on Gaussian processes.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,304,1557,"In order to motivate the Gaussian process viewpoint, let us return to the linear regression example and re-derive the predictive distribution by working in terms of distributions over functions y(x, w). This will provide a speciﬁc example of a Gaussian process.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1558,"Consider a model deﬁned in terms of a linear combination of M ﬁxed basis functions given by the elements of the vector φ(x) so that y(x) = wTφ(x) (6.49) where x is the input vector and w is the M-dimensional weight vector. Now consider a prior distribution over w given by an isotropic Gaussian of the form p(w) = N(w|0, α−1I) (6.50) governed by the hyperparameter α, which represents the precision (inverse variance) of the distribution. For any given value of w, the deﬁnition (6.49) deﬁnes a partic- ular function of x. The probability distribution over w deﬁned by (6.50) therefore induces a probability distribution over functions y(x). In practice, we wish to eval- uate this function at speciﬁc values of x, for example at the training data points \end{verbatim} egin{verbatim} x1, . . . , xN. We are therefore interested in the joint distribution of the function val- ues y(x1), . . . , y(xN), which we denote by the vector y with elements yn = y(xn) for n = 1, . . . , N. From (6.49), this vector is given by y = Φw (6.51) where Φ is the design matrix with elements Φnk = φk(xn). We can ﬁnd the proba- bility distribution of y as follows. First of all we note that y is a linear combination of Gaussian distributed variables given by the elements of w and hence is itself Gaus- sian. We therefore need only to ﬁnd its mean and covariance, which are given from (6.50) by E[y] = ΦE[w] = 0 (6.52) cov[y] = E  yyT = ΦE  wwT ΦT = 1 αΦΦT = K (6.53) where K is the Gram matrix with elements Knm = k(xn, xm) = 1 αφ(xn)Tφ(xm) (6.54) and k(x, x′) is the kernel function.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1559,"This model provides us with a particular example of a Gaussian process. In gen- eral, a Gaussian process is deﬁned as a probability distribution over functions y(x) such that the set of values of y(x) evaluated at an arbitrary set of points x1, . . . , xN jointly have a Gaussian distribution. In cases where the input vector x is two di- mensional, this may also be known as a Gaussian random ﬁeld. More generally, a stochastic process y(x) is speciﬁed by giving the joint probability distribution for any ﬁnite set of values y(x1), . . . , y(xN) in a consistent manner.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1560,"A key point about Gaussian stochastic processes is that the joint distribution over N variables y1, . . . , yN is speciﬁed completely by the second-order statistics, namely the mean and the covariance. In most applications, we will not have any prior knowledge about the mean of y(x) and so by symmetry we take it to be zero.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1561,"This is equivalent to choosing the mean of the prior over weight values p(w|α) to be zero in the basis function viewpoint. The speciﬁcation of the Gaussian process is then completed by giving the covariance of y(x) evaluated at any two values of x, which is given by the kernel function E [y(xn)y(xm)] = k(xn, xm).",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1562,"For the speciﬁc case of a Gaussian process deﬁned by the linear regression model (6.49) with a weight prior (6.50), the kernel function is given by (6.54).",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,305,1563,"We can also deﬁne the kernel function directly, rather than indirectly through a choice of basis function. Figure 6.4 shows samples of functions drawn from Gaus- sian processes for two different choices of kernel function. The ﬁrst of these is a ‘Gaussian’ kernel of the form (6.23), and the second is the exponential kernel given by k(x, x′) = exp (−θ |x −x′|) (6.56) which corresponds to the Ornstein-Uhlenbeck process originally introduced by Uh- lenbeck and Ornstein (1930) to describe Brownian motion.",Linear regression revisited
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,306,1564,Figure 6.4 Samples from Gaus- sian processes for a ‘Gaussian’ ker- nel (left) and an exponential kernel (right).,Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,306,1565,"In order to apply Gaussian process models to the problem of regression, we need to take account of the noise on the observed target values, which are given by tn = yn + ϵn (6.57) where yn = y(xn), and ϵn is a random noise variable whose value is chosen inde- pendently for each observation n. Here we shall consider noise processes that have a Gaussian distribution, so that p(tn|yn) = N(tn|yn, β−1) (6.58) where β is a hyperparameter representing the precision of the noise. Because the noise is independent for each data point, the joint distribution of the target values t = (t1, . . . , tN)T conditioned on the values of y = (y1, . . . , yN)T is given by an isotropic Gaussian of the form p(t|y) = N(t|y, β−1IN) (6.59) where IN denotes the N ×N unit matrix. From the deﬁnition of a Gaussian process, the marginal distribution p(y) is given by a Gaussian whose mean is zero and whose covariance is deﬁned by a Gram matrix K so that p(y) = N(y|0, K).",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,306,1566,"The kernel function that determines K is typically chosen to express the property that, for points xn and xm that are similar, the corresponding values y(xn) and y(xm) will be more strongly correlated than for dissimilar points. Here the notion of similarity will depend on the application.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1567,"In order to ﬁnd the marginal distribution p(t), conditioned on the input values x1, . . . , xN, we need to integrate over y. This can be done by making use of the results from Section 2.3.3 for the linear-Gaussian model. Using (2.115), we see that the marginal distribution of t is given by p(t) =  p(t|y)p(y) dy = N(t|0, C) (6.61) \end{verbatim} egin{verbatim} where the covariance matrix C has elements C(xn, xm) = k(xn, xm) + β−1δnm.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1568,"This result reﬂects the fact that the two Gaussian sources of randomness, namely that associated with y(x) and that associated with ϵ, are independent and so their covariances simply add.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1569,"One widely used kernel function for Gaussian process regression is given by the exponential of a quadratic form, with the addition of constant and linear terms to give k(xn, xm) = θ0 exp −θ1 2 ∥xn −xm∥2 + θ2 + θ3xT nxm.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1570,"Note that the term involving θ3 corresponds to a parametric model that is a linear function of the input variables. Samples from this prior are plotted for various values of the parameters θ0, . . . , θ3 in Figure 6.5, and Figure 6.6 shows a set of points sam- pled from the joint distribution (6.60) along with the corresponding values deﬁned by (6.61).",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1571,"So far, we have used the Gaussian process viewpoint to build a model of the joint distribution over sets of data points. Our goal in regression, however, is to make predictions of the target variables for new inputs, given a set of training data.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1572,"Let us suppose that tN = (t1, . . . , tN)T, corresponding to input values x1, . . . , xN, comprise the observed training set, and our goal is to predict the target variable tN+1 for a new input vector xN+1. This requires that we evaluate the predictive distri- bution p(tN+1|tN). Note that this distribution is conditioned also on the variables x1, . . . , xN and xN+1. However, to keep the notation simple we will not show these conditioning variables explicitly.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,307,1573,"To ﬁnd the conditional distribution p(tN+1|t), we begin by writing down the joint distribution p(tN+1), where tN+1 denotes the vector (t1, . . . , tN, tN+1)T. We then apply the results from Section 2.3.1 to obtain the required conditional distribu- tion, as illustrated in Figure 6.7.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,308,1574,"Figure 6.5 Samples from a Gaussian process prior deﬁned by the covariance function (6.63). The title above each plot denotes (θ0, θ1, θ2, θ3).",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,308,1575,"From (6.61), the joint distribution over t1, . . . , tN+1 will be given by p(tN+1) = N(tN+1|0, CN+1) (6.64) where CN+1 is an (N + 1) × (N + 1) covariance matrix with elements given by (6.62). Because this joint distribution is Gaussian, we can apply the results from Section 2.3.1 to ﬁnd the conditional Gaussian distribution. To do this, we partition the covariance matrix as follows CN+1 =  CN k kT c  (6.65) where CN is the N ×N covariance matrix with elements given by (6.62) for n, m = 1, . . . , N, the vector k has elements k(xn, xN+1) for n = 1, . . . , N, and the scalar \end{verbatim} egin{verbatim} (1.00, 4.00, 0.00, 0.00) −1 −0.5 0 0.5 1 −3 −1.5 0 1.5 3 (9.00, 4.00, 0.00, 0.00) −1 −0.5 0 0.5 1 −9 −4.5 0 4.5 9 (1.00, 64.00, 0.00, 0.00) −1 −0.5 0 0.5 1 −3 −1.5 0 1.5 3 (1.00, 0.25, 0.00, 0.00) −1 −0.5 0 0.5 1 −3 −1.5 0 1.5 3 (1.00, 4.00, 10.00, 0.00) −1 −0.5 0 0.5 1 −9 −4.5 0 4.5 9 (1.00, 4.00, 0.00, 5.00) −1 −0.5 0 0.5 1 −4 −2 0 2 4 c = k(xN+1, xN+1) + β−1. Using the results (2.81) and (2.82), we see that the con- ditional distribution p(tN+1|t) is a Gaussian distribution with mean and covariance given by m(xN+1) = kTC−1 N t (6.66) σ2(xN+1) = c −kTC−1 N k.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,308,1576,"These are the key results that deﬁne Gaussian process regression. Because the vector k is a function of the test point input value xN+1, we see that the predictive distribu- tion is a Gaussian whose mean and variance both depend on xN+1. An example of Gaussian process regression is shown in Figure 6.8.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1577,Figure 6.6 Illustration of the sampling of data points {tn} from a Gaussian process.,Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1578,"The only restriction on the kernel function is that the covariance matrix given by (6.62) must be positive deﬁnite. If λi is an eigenvalue of K, then the corresponding eigenvalue of C will be λi + β−1. It is therefore sufﬁcient that the kernel matrix k(xn, xm) be positive semideﬁnite for any pair of points xn and xm, so that λi ⩾0, because any eigenvalue λi that is zero will still give rise to a positive eigenvalue for C because β > 0. This is the same restriction on the kernel function discussed earlier, and so we can again exploit all of the techniques in Section 6.2 to construct \end{verbatim} egin{verbatim} The blue curve shows a sample func- tion from the Gaussian process prior over functions, and the red points show the values of yn obtained by evaluating the function at a set of in- put values {xn}.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1579,"ing values of {tn}, shown in green, are obtained by adding independent Gaussian noise to each of the {yn}.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1580,"Note that the mean (6.66) of the predictive distribution can be written, as a func- tion of xN+1, in the form m(xN+1) = N  n=1 ank(xn, xN+1) (6.68) where an is the nth component of C−1 N t. Thus, if the kernel function k(xn, xm) depends only on the distance ∥xn −xm∥, then we obtain an expansion in radial basis functions.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1581,"The results (6.66) and (6.67) deﬁne the predictive distribution for Gaussian pro- cess regression with an arbitrary kernel function k(xn, xm). In the particular case in which the kernel function k(x, x′) is deﬁned in terms of a ﬁnite set of basis functions, we can derive the results obtained previously in Section 3.3.2 for linear regression starting from the Gaussian process viewpoint.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,309,1582,"For such models, we can therefore obtain the predictive distribution either by taking a parameter space viewpoint and using the linear regression result or by taking a function space viewpoint and using the Gaussian process result.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1583,"Figure 6.7 Illustration of the mechanism of Gaussian process regression for the case of one training point and one test point, in which the red el- lipses show contours of the joint dis- tribution p(t1, t2).",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1584,Figure 6.8 Illustration of Gaussian process re- gression applied to the sinusoidal data set in Figure A.6 in which the three right-most data points have been omitted.,Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1585,"The central computational operation in using Gaussian processes will involve the inversion of a matrix of size N × N, for which standard methods require O(N 3) computations. By contrast, in the basis function model we have to invert a matrix SN of size M × M, which has O(M 3) computational complexity. Note that for both viewpoints, the matrix inversion must be performed once for the given training set. For each new test point, both methods require a vector-matrix multiply, which has cost O(N 2) in the Gaussian process case and O(M 2) for the linear basis func- tion model. If the number M of basis functions is smaller than the number N of data points, it will be computationally more efﬁcient to work in the basis function \end{verbatim} egin{verbatim} Here t1 is the training data point, and condition- ing on the value of t1, correspond- ing to the vertical blue line, we ob- tain p(t2|t1) shown as a function of t2 by the green curve.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1586,"framework. However, an advantage of a Gaussian processes viewpoint is that we can consider covariance functions that can only be expressed in terms of an inﬁnite number of basis functions.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1587,"For large training data sets, however, the direct application of Gaussian process methods can become infeasible, and so a range of approximation schemes have been developed that have better scaling with training set size than the exact approach (Gibbs, 1997; Tresp, 2001; Smola and Bartlett, 2001; Williams and Seeger, 2001; Csat´o and Opper, 2002; Seeger et al., 2003). Practical issues in the application of Gaussian processes are discussed in Bishop and Nabney (2008).",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1588,"We have introduced Gaussian process regression for the case of a single tar- get variable. The extension of this formalism to multiple target variables, known as co-kriging (Cressie, 1993), is straightforward. Various other extensions of Gaus- The green curve shows the sinusoidal function from which the data points, shown in blue, are obtained by sampling and addition of Gaussian noise.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1589,"red line shows the mean of the Gaussian process predictive distri- bution, and the shaded region cor- responds to plus and minus two standard deviations.",Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,310,1590,the uncertainty increases in the re- gion to the right of the data points.,Gaussian processes for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1591,"sian process regression have also been considered, for purposes such as modelling the distribution over low-dimensional manifolds for unsupervised learning (Bishop et al., 1998a) and the solution of stochastic differential equations (Graepel, 2003).",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1592,"The predictions of a Gaussian process model will depend, in part, on the choice of covariance function. In practice, rather than ﬁxing the covariance function, we may prefer to use a parametric family of functions and then infer the parameter values from the data. These parameters govern such things as the length scale of the correlations and the precision of the noise and correspond to the hyperparameters in a standard parametric model.",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1593,"Techniques for learning the hyperparameters are based on the evaluation of the likelihood function p(t|θ) where θ denotes the hyperparameters of the Gaussian pro- cess model. The simplest approach is to make a point estimate of θ by maximizing the log likelihood function. Because θ represents a set of hyperparameters for the regression problem, this can be viewed as analogous to the type 2 maximum like- lihood procedure for linear regression models. Maximization of the log likelihood can be done using efﬁcient gradient-based optimization algorithms such as conjugate gradients (Fletcher, 1987; Nocedal and Wright, 1999; Bishop and Nabney, 2008).",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1594,"The log likelihood function for a Gaussian process regression model is easily evaluated using the standard form for a multivariate Gaussian distribution, giving ln p(t|θ) = −1 2 ln |CN| −1 2tTC−1 N t −N 2 ln(2π).",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1595,"For nonlinear optimization, we also need the gradient of the log likelihood func- tion with respect to the parameter vector θ. We shall assume that evaluation of the derivatives of CN is straightforward, as would be the case for the covariance func- tions considered in this chapter. Making use of the result (C.21) for the derivative of C−1 N , together with the result (C.22) for the derivative of ln |CN|, we obtain ∂ ∂θi ln p(t|θ) = −1 2Tr  C−1 N ∂CN ∂θi  + 1 2tTC−1 N ∂CN ∂θi C−1 N t.",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1596,"Because ln p(t|θ) will in general be a nonconvex function, it can have multiple max- ima.",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,311,1597,"It is straightforward to introduce a prior over θ and to maximize the log poste- rior using gradient-based methods. In a fully Bayesian treatment, we need to evaluate marginals over θ weighted by the product of the prior p(θ) and the likelihood func- tion p(t|θ). In general, however, exact marginalization will be intractable, and we must resort to approximations.",Learning the hyperparameters
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1598,"Figure 6.9 Samples from the ARD prior for Gaussian processes, in which the kernel function is given by (6.71). The left plot corresponds to η1 = η2 = 1, and the right plot cor- responds to η1 = 1, η2 = 0.01.",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1599,"The Gaussian process regression model gives a predictive distribution whose mean and variance are functions of the input vector x. However, we have assumed that the contribution to the predictive variance arising from the additive noise, gov- erned by the parameter β, is a constant. For some problems, known as heteroscedas- tic, the noise variance itself will also depend on x. To model this, we can extend the \end{verbatim} egin{verbatim} Gaussian process framework by introducing a second Gaussian process to represent the dependence of β on the input x (Goldberg et al., 1998). Because β is a variance, and hence nonnegative, we use the Gaussian process to model ln β(x).",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1600,"In the previous section, we saw how maximum likelihood could be used to de- termine a value for the correlation length-scale parameter in a Gaussian process.",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1601,"This technique can usefully be extended by incorporating a separate parameter for each input variable (Rasmussen and Williams, 2006). The result, as we shall see, is that the optimization of these parameters by maximum likelihood allows the relative importance of different inputs to be inferred from the data. This represents an exam- ple in the Gaussian process context of automatic relevance determination, or ARD, which was originally formulated in the framework of neural networks (MacKay, 1994; Neal, 1996). The mechanism by which appropriate inputs are preferred is discussed in Section 7.2.2.",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1602,"Consider a Gaussian process with a two-dimensional input space x = (x1, x2), having a kernel function of the form k(x, x′) = θ0 exp  −1 2 2  i=1 ηi(xi −x′ i)2  .",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,312,1603,"Samples from the resulting prior over functions y(x) are shown for two different settings of the precision parameters ηi in Figure 6.9. We see that, as a particu- lar parameter ηi becomes small, the function becomes relatively insensitive to the corresponding input variable xi. By adapting these parameters to a data set using maximum likelihood, it becomes possible to detect input variables that have little effect on the predictive distribution, because the corresponding values of ηi will be small. This can be useful in practice because it allows such inputs to be discarded.",Automatic relevance determination
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,313,1604,"Figure 6.10 Illustration of automatic rele- vance determination in a Gaus- sian process for a synthetic prob- lem having three inputs x1, x2, and x3, for which the curves show the corresponding values of the hyperparameters η1 (red), η2 (green), and η3 (blue) as a func- tion of the number of iterations when optimizing the marginal likelihood.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,313,1605,"ARD is illustrated using a simple synthetic data set having three inputs x1, x2 and x3 (Nabney, 2002) in Figure 6.10. The target variable t, is generated by sampling 100 values of x1 from a Gaussian, evaluating the function sin(2πx1), and then adding \end{verbatim} egin{verbatim} Details are given in the text.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,313,1606,"scale on the vertical axis. 0 20 40 60 80 100 10 −4 10 −2 10 0 10 2 Gaussian noise. Values of x2 are given by copying the corresponding values of x1 and adding noise, and values of x3 are sampled from an independent Gaussian dis- tribution. Thus x1 is a good predictor of t, x2 is a more noisy predictor of t, and x3 has only chance correlations with t. The marginal likelihood for a Gaussian process with ARD parameters η1, η2, η3 is optimized using the scaled conjugate gradients algorithm. We see from Figure 6.10 that η1 converges to a relatively large value, η2 converges to a much smaller value, and η3 becomes very small indicating that x3 is irrelevant for predicting t.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,313,1607,"The ARD framework is easily incorporated into the exponential-quadratic kernel (6.63) to give the following form of kernel function, which has been found useful for applications of Gaussian processes to a range of regression problems k(xn, xm) = θ0 exp  −1 2 D  i=1 ηi(xni −xmi)2  + θ2 + θ3 D  i=1 xnixmi (6.72) where D is the dimensionality of the input space.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,313,1608,"In a probabilistic approach to classiﬁcation, our goal is to model the posterior probabilities of the target variable for a new input vector, given a set of training data. These probabilities must lie in the interval (0, 1), whereas a Gaussian process model makes predictions that lie on the entire real axis. However, we can easily adapt Gaussian processes to classiﬁcation problems by transforming the output of the Gaussian process using an appropriate nonlinear activation function.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,314,1609,"Figure 6.11 The left plot shows a sample from a Gaussian process prior over functions a(x), and the right plot shows the result of transforming this sample using a logistic sigmoid function.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,314,1610,"Consider ﬁrst the two-class problem with a target variable t ∈{0, 1}. If we de- ﬁne a Gaussian process over a function a(x) and then transform the function using a logistic sigmoid y = σ(a), given by (4.59), then we will obtain a non-Gaussian stochastic process over functions y(x) where y ∈(0, 1). This is illustrated for the case of a one-dimensional input space in Figure 6.11 in which the probability distri- \end{verbatim} egin{verbatim} −1 −0.5 0 0.5 1 −10 −5 0 5 10 −1 −0.5 0 0.5 1 0 0.25 0.5 0.75 1 bution over the target variable t is then given by the Bernoulli distribution p(t|a) = σ(a)t(1 −σ(a))1−t.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,314,1611,"As usual, we denote the training set inputs by x1, . . . , xN with corresponding observed target variables t = (t1, . . . , tN)T. We also consider a single test point xN+1 with target value tN+1. Our goal is to determine the predictive distribution p(tN+1|t), where we have left the conditioning on the input variables implicit. To do this we introduce a Gaussian process prior over the vector aN+1, which has compo- nents a(x1), . . . , a(xN+1). This in turn deﬁnes a non-Gaussian process over tN+1, and by conditioning on the training data tN we obtain the required predictive distri- bution. The Gaussian process prior for aN+1 takes the form p(aN+1) = N(aN+1|0, CN+1).",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,314,1612,"Unlike the regression case, the covariance matrix no longer includes a noise term because we assume that all of the training data points are correctly labelled. How- ever, for numerical reasons it is convenient to introduce a noise-like term governed by a parameter ν that ensures that the covariance matrix is positive deﬁnite. Thus the covariance matrix CN+1 has elements given by C(xn, xm) = k(xn, xm) + νδnm (6.75) where k(xn, xm) is any positive semideﬁnite kernel function of the kind considered in Section 6.2, and the value of ν is typically ﬁxed in advance. We shall assume that the kernel function k(x, x′) is governed by a vector θ of parameters, and we shall later discuss how θ may be learned from the training data.",Gaussian processes for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1613,"For two-class problems, it is sufﬁcient to predict p(tN+1 = 1|tN) because the value of p(tN+1 = 0|tN) is then given by 1 −p(tN+1 = 1|tN). The required \end{verbatim} egin{verbatim} predictive distribution is given by p(tN+1 = 1|tN) =  p(tN+1 = 1|aN+1)p(aN+1|tN) daN+1 (6.76) where p(tN+1 = 1|aN+1) = σ(aN+1).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1614,"This integral is analytically intractable, and so may be approximated using sam- pling methods (Neal, 1997). Alternatively, we can consider techniques based on an analytical approximation. In Section 4.5.2, we derived the approximate formula (4.153) for the convolution of a logistic sigmoid with a Gaussian distribution. We can use this result to evaluate the integral in (6.76) provided we have a Gaussian approximation to the posterior distribution p(aN+1|tN). The usual justiﬁcation for a Gaussian approximation to a posterior distribution is that the true posterior will tend to a Gaussian as the number of data points increases as a consequence of the central limit theorem. In the case of Gaussian processes, the number of variables grows with the number of data points, and so this argument does not apply directly. However, if we consider increasing the number of data points falling in a ﬁxed region of x space, then the corresponding uncertainty in the function a(x) will decrease, again leading asymptotically to a Gaussian (Williams and Barber, 1998).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1615,"Three different approaches to obtaining a Gaussian approximation have been considered. One technique is based on variational inference (Gibbs and MacKay, 2000) and makes use of the local variational bound (10.144) on the logistic sigmoid.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1616,This allows the product of sigmoid functions to be approximated by a product of Gaussians thereby allowing the marginalization over aN to be performed analyti- cally. The approach also yields a lower bound on the likelihood function p(tN|θ).,Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1617,"The variational framework for Gaussian process classiﬁcation can also be extended to multiclass (K > 2) problems by using a Gaussian approximation to the softmax function (Gibbs, 1997).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,315,1618,"A second approach uses expectation propagation (Opper and Winther, 2000b; Minka, 2001b; Seeger, 2003). Because the true posterior distribution is unimodal, as we shall see shortly, the expectation propagation approach can give good results.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,316,1619,"The third approach to Gaussian process classiﬁcation is based on the Laplace approximation, which we now consider in detail. In order to evaluate the predictive distribution (6.76), we seek a Gaussian approximation to the posterior distribution over aN+1, which, using Bayes’ theorem, is given by p(aN+1|tN) =  p(aN+1, aN|tN) daN = 1 p(tN)  p(aN+1, aN)p(tN|aN+1, aN) daN = 1 p(tN)  p(aN+1|aN)p(aN)p(tN|aN) daN =  p(aN+1|aN)p(aN|tN) daN (6.77) \end{verbatim} egin{verbatim} where we have used p(tN|aN+1, aN) = p(tN|aN). The conditional distribution p(aN+1|aN) is obtained by invoking the results (6.66) and (6.67) for Gaussian pro- cess regression, to give p(aN+1|aN) = N(aN+1|kTC−1 N aN, c −kTC−1 N k).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,316,1620,"We can therefore evaluate the integral in (6.77) by ﬁnding a Laplace approximation for the posterior distribution p(aN|tN), and then using the standard result for the convolution of two Gaussian distributions.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,316,1621,"The prior p(aN) is given by a zero-mean Gaussian process with covariance ma- trix CN, and the data term (assuming independence of the data points) is given by p(tN|aN) = N  n=1 σ(an)tn(1 −σ(an))1−tn = N  n=1 eantnσ(−an).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,316,1622,"We then obtain the Laplace approximation by Taylor expanding the logarithm of p(aN|tN), which up to an additive normalization constant is given by the quantity Ψ(aN) = ln p(aN) + ln p(tN|aN) = −1 2aT NC−1 N aN −N 2 ln(2π) −1 2 ln |CN| + tT NaN − N  n=1 ln(1 + ean) + const.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1623,"First we need to ﬁnd the mode of the posterior distribution, and this requires that we evaluate the gradient of Ψ(aN), which is given by ∇Ψ(aN) = tN −σN −C−1 N aN (6.81) where σN is a vector with elements σ(an). We cannot simply ﬁnd the mode by setting this gradient to zero, because σN depends nonlinearly on aN, and so we resort to an iterative scheme based on the Newton-Raphson method, which gives rise to an iterative reweighted least squares (IRLS) algorithm. This requires the second derivatives of Ψ(aN), which we also require for the Laplace approximation anyway, and which are given by ∇∇Ψ(aN) = −WN −C−1 N (6.82) where WN is a diagonal matrix with elements σ(an)(1 −σ(an)), and we have used the result (4.88) for the derivative of the logistic sigmoid function. Note that these diagonal elements lie in the range (0, 1/4), and hence WN is a positive deﬁnite matrix. Because CN (and hence its inverse) is positive deﬁnite by construction, and because the sum of two positive deﬁnite matrices is also positive deﬁnite, we see that the Hessian matrix A = −∇∇Ψ(aN) is positive deﬁnite and so the posterior distribution p(aN|tN) is log convex and therefore has a single mode that is the global \end{verbatim} egin{verbatim} maximum. The posterior distribution is not Gaussian, however, because the Hessian is a function of aN.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1624,"Using the Newton-Raphson formula (4.92), the iterative update equation for aN is given by anew N = CN(I + WNCN)−1 {tN −σN + WNaN} .",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1625,"These equations are iterated until they converge to the mode which we denote by a⋆ N. At the mode, the gradient ∇Ψ(aN) will vanish, and hence a⋆ N will satisfy a⋆ N = CN(tN −σN).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1626,"Once we have found the mode a⋆ N of the posterior, we can evaluate the Hessian matrix given by H = −∇∇Ψ(aN) = WN + C−1 N (6.85) where the elements of WN are evaluated using a⋆ N. This deﬁnes our Gaussian ap- proximation to the posterior distribution p(aN|tN) given by q(aN) = N(aN|a⋆ N, H−1).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1627,"We can now combine this with (6.78) and hence evaluate the integral (6.77). Because this corresponds to a linear-Gaussian model, we can use the general result (2.115) to give E[aN+1|tN] = kT(tN −σN) (6.87) var[aN+1|tN] = c −kT(W−1 N + CN)−1k.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1628,"Now that we have a Gaussian distribution for p(aN+1|tN), we can approximate the integral (6.76) using the result (4.153). As with the Bayesian logistic regression model of Section 4.5, if we are only interested in the decision boundary correspond- ing to p(tN+1|tN) = 0.5, then we need only consider the mean and we can ignore the effect of the variance.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,317,1629,"We also need to determine the parameters θ of the covariance function. One approach is to maximize the likelihood function given by p(tN|θ) for which we need expressions for the log likelihood and its gradient. If desired, suitable regularization terms can also be added, leading to a penalized maximum likelihood solution. The likelihood function is deﬁned by p(tN|θ) =  p(tN|aN)p(aN|θ) daN.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1630,"This integral is analytically intractable, so again we make use of the Laplace approx- imation. Using the result (4.135), we obtain the following approximation for the log of the likelihood function ln p(tN|θ) = Ψ(a⋆ N) −1 2 ln |WN + C−1 N | + N 2 ln(2π) (6.90) \end{verbatim} egin{verbatim} where Ψ(a⋆ N) = ln p(a⋆ N|θ) + ln p(tN|a⋆ N). We also need to evaluate the gradient of ln p(tN|θ) with respect to the parameter vector θ. Note that changes in θ will cause changes in a⋆ N, leading to additional terms in the gradient. Thus, when we differentiate (6.90) with respect to θ, we obtain two sets of terms, the ﬁrst arising from the dependence of the covariance matrix CN on θ, and the rest arising from dependence of a⋆ N on θ.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1631,"The terms arising from the explicit dependence on θ can be found by using (6.80) together with the results (C.21) and (C.22), and are given by ∂ln p(tN|θ) ∂θj = 1 2a⋆T N C−1 N ∂CN ∂θj C−1 N a⋆ N −1 2Tr (I + CNWN)−1WN ∂CN ∂θj .",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1632,"To compute the terms arising from the dependence of a⋆ N on θ, we note that the Laplace approximation has been constructed such that Ψ(aN) has zero gradient at aN = a⋆ N, and so Ψ(a⋆ N) gives no contribution to the gradient as a result of its dependence on a⋆ N. This leaves the following contribution to the derivative with respect to a component θj of θ −1 2 N  n=1 ∂ln |WN + C−1 N | ∂a⋆n ∂a⋆ n ∂θj = −1 2 N  n=1  (I + CNWN)−1CN nn σ⋆ n(1 −σ⋆ n)(1 −2σ⋆ n)∂a⋆ n ∂θj (6.92) where σ⋆ n = σ(a⋆ n), and again we have used the result (C.22) together with the deﬁnition of WN. We can evaluate the derivative of a⋆ N with respect to θj by differ- entiating the relation (6.84) with respect to θj to give ∂a⋆ n ∂θj = ∂CN ∂θj (tN −σN) −CNWN ∂a⋆ n ∂θj .",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1633,= (I + WNCN)−1 ∂CN ∂θj (tN −σN).,Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1634,"Combining (6.91), (6.92), and (6.94), we can evaluate the gradient of the log likelihood function, which can be used with standard nonlinear optimization algo- rithms in order to determine a value for θ.",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,318,1635,"We can illustrate the application of the Laplace approximation for Gaussian pro- cesses using the synthetic two-class data set shown in Figure 6.12. Extension of the Appendix A Laplace approximation to Gaussian processes involving K > 2 classes, using the softmax activation function, is straightforward (Williams and Barber, 1998).",Laplace approximation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,319,1636,"Figure 6.12 Illustration of the use of a Gaussian process for classiﬁcation, showing the data on the left together with the optimal decision boundary from the true distribution in green, and the decision boundary from the Gaussian process classiﬁer in black. On the right is the predicted posterior probability for the blue and red classes together with the Gaussian process decision boundary.",Connection to neural networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,319,1637,"We have seen that the range of functions which can be represented by a neural network is governed by the number M of hidden units, and that, for sufﬁciently large M, a two-layer network can approximate any given function with arbitrary accuracy. In the framework of maximum likelihood, the number of hidden units needs to be limited (to a level dependent on the size of the training set) in order to avoid over-ﬁtting. However, from a Bayesian perspective it makes little sense to limit the number of parameters in the network according to the size of the training set.",Connection to neural networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,319,1638,"In a Bayesian neural network, the prior distribution over the parameter vector w, in conjunction with the network function f(x, w), produces a prior distribution over functions from y(x) where y is the vector of network outputs. Neal (1996) has shown that, for a broad class of prior distributions over w, the distribution of functions generated by a neural network will tend to a Gaussian process in the limit M →∞. It should be noted, however, that in this limit the output variables of the neural network become independent. One of the great merits of neural networks is that the outputs share the hidden units and so they can ‘borrow statistical strength’ from each other, that is, the weights associated with each hidden unit are inﬂuenced by all of the output variables not just by one of them. This property is therefore lost in the Gaussian process limit.",Connection to neural networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,319,1639,We have seen that a Gaussian process is determined by its covariance (kernel) function. Williams (1998) has given explicit forms for the covariance in the case of two speciﬁc choices for the hidden unit activation function (probit and Gaussian).,Connection to neural networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,319,1640,"These kernel functions k(x, x′) are nonstationary, i.e. they cannot be expressed as a function of the difference x −x′, as a consequence of the Gaussian weight prior being centred on zero which breaks translation invariance in weight space.",Connection to neural networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1641,"By working directly with the covariance function we have implicitly marginal- ized over the distribution of weights. If the weight prior is governed by hyperpa- rameters, then their values will determine the length scales of the distribution over functions, as can be understood by studying the examples in Figure 5.11 for the case of a ﬁnite number of hidden units. Note that we cannot marginalize out the hyperpa- rameters analytically, and must instead resort to techniques of the kind discussed in 6.1 (⋆⋆) www Consider the dual formulation of the least squares linear regression problem given in Section 6.1. Show that the solution for the components an of the vector a can be expressed as a linear combination of the elements of the vector φ(xn). Denoting these coefﬁcients by the vector w, show that the dual of the dual formulation is given by the original representation in terms of the parameter vector w.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1642,"In this exercise, we develop a dual formulation of the perceptron learning algorithm. Using the perceptron learning rule (4.55), show that the learned weight vector w can be written as a linear combination of the vectors tnφ(xn) where tn ∈ {−1, +1}. Denote the coefﬁcients of this linear combination by αn and derive a formulation of the perceptron learning algorithm, and the predictive function for the perceptron, in terms of the αn. Show that the feature vector φ(x) enters only in the form of the kernel function k(x, x′) = φ(x)Tφ(x′).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1643,"The nearest-neighbour classiﬁer (Section 2.5.2) assigns a new input vector x to the same class as that of the nearest input vector xn from the training set, where in the simplest case, the distance is deﬁned by the Euclidean metric ∥x −xn∥2. By expressing this rule in terms of scalar products and then making use of kernel sub- stitution, formulate the nearest-neighbour classiﬁer for a general nonlinear kernel.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1644,"In Appendix C, we give an example of a matrix that has positive elements but that has a negative eigenvalue and hence that is not positive deﬁnite. Find an example of the converse property, namely a 2 × 2 matrix with positive eigenvalues yet that has at least one negative element.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1645,Verify the results (6.13) and (6.14) for constructing valid kernels. 6.6 (⋆) Verify the results (6.15) and (6.16) for constructing valid kernels.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1646,Verify the results (6.17) and (6.18) for constructing valid kernels. 6.8 (⋆) Verify the results (6.19) and (6.20) for constructing valid kernels.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,320,1647,"(⋆) Verify the results (6.21) and (6.22) for constructing valid kernels. 6.10 (⋆) Show that an excellent choice of kernel for learning a function f(x) is given by k(x, x′) = f(x)f(x′) by showing that a linear learning machine based on this kernel will always ﬁnd a solution proportional to f(x).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1648,"By making use of the expansion (6.25), and then expanding the middle factor as a power series, show that the Gaussian kernel (6.23) can be expressed as the inner product of an inﬁnite-dimensional feature vector.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1649,"Consider the space of all possible subsets A of a given ﬁxed set D. Show that the kernel function (6.27) corresponds to an inner product in a feature space of dimensionality 2|D| deﬁned by the mapping φ(A) where A is a subset of D and the element φU(A), indexed by the subset U, is given by φU(A) = 1, if U ⊆A; 0, otherwise.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1650,"Here U ⊆A denotes that U is either a subset of A or is equal to A. 6.13 (⋆) Show that the Fisher kernel, deﬁned by (6.33), remains invariant if we make a nonlinear transformation of the parameter vector θ →ψ(θ), where the function ψ(·) is invertible and differentiable.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1651,"Write down the form of the Fisher kernel, deﬁned by (6.33), for the case of a distribution p(x|µ) = N(x|µ, S) that is Gaussian with mean µ and ﬁxed covariance S.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1652,"By considering the determinant of a 2 × 2 Gram matrix, show that a positive- deﬁnite kernel function k(x, x′) satisﬁes the Cauchy-Schwartz inequality k(x1, x2)2 ⩽k(x1, x1)k(x2, x2).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1653,"Consider a parametric model governed by the parameter vector w together with a data set of input values x1, . . . , xN and a nonlinear feature mapping φ(x).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1654,"Suppose that the dependence of the error function on w takes the form J(w) = f(wTφ(x1), . . . , wTφ(xN)) + g(wTw) (6.97) where g(·) is a monotonically increasing function. By writing w in the form w = N  n=1 αnφ(xn) + w⊥ (6.98) show that the value of w that minimizes J(w) takes the form of a linear combination of the basis functions φ(xn) for n = 1, . . . , N.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,321,1655,"Consider the sum-of-squares error function (6.39) for data having noisy inputs, where ν(ξ) is the distribution of the noise. Use the calculus of vari- ations to minimize this error function with respect to the function y(x), and hence show that the optimal solution is given by an expansion of the form (6.40) in which the basis functions are given by (6.41).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1656,"Consider a Nadaraya-Watson model with one input variable x and one target variable t having Gaussian components with isotropic covariances, so that the co- variance matrix is given by σ2I where I is the unit matrix. Write down expressions for the conditional density p(t|x) and for the conditional mean E[t|x] and variance var[t|x], in terms of the kernel function k(x, xn).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1657,"Another viewpoint on kernel regression comes from a consideration of re- gression problems in which the input variables as well as the target variables are corrupted with additive noise. Suppose each target value tn is generated as usual by taking a function y(zn) evaluated at a point zn, and adding Gaussian noise. The value of zn is not directly observed, however, but only a noise corrupted version xn = zn + ξn where the random variable ξ is governed by some distribution g(ξ).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1658,"Consider a set of observations {xn, tn}, where n = 1, . . . , N, together with a cor- responding sum-of-squares error function deﬁned by averaging over the distribution of input noise to give E = 1 2 N  n=1  {y(xn −ξn) −tn}2 g(ξn) dξn.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1659,"By minimizing E with respect to the function y(z) using the calculus of variations (Appendix D), show that optimal solution for y(x) is given by a Nadaraya-Watson kernel regression solution of the form (6.45) with a kernel of the form (6.46).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1660,"Verify the results (6.66) and (6.67). 6.21 (⋆⋆) www Consider a Gaussian process regression model in which the kernel function is deﬁned in terms of a ﬁxed set of nonlinear basis functions. Show that the predictive distribution is identical to the result (3.58) obtained in Section 3.3.2 for the Bayesian linear regression model. To do this, note that both models have Gaussian predictive distributions, and so it is only necessary to show that the conditional mean and variance are the same. For the mean, make use of the matrix identity (C.6), and for the variance, make use of the matrix identity (C.7).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1661,"Consider a regression problem with N training set input vectors x1, . . . , xN and L test set input vectors xN+1, . . . , xN+L, and suppose we deﬁne a Gaussian process prior over functions t(x). Derive an expression for the joint predictive dis- tribution for t(xN+1), . . . , t(xN+L), given the values of t(x1), . . . , t(xN). Show the marginal of this distribution for one of the test observations tj where N + 1 ⩽j ⩽ N + L is given by the usual Gaussian process regression result (6.66) and (6.67).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1662,"Consider a Gaussian process regression model in which the target variable t has dimensionality D. Write down the conditional distribution of tN+1 for a test input vector xN+1, given a training set of input vectors x1, . . . , xN+1 and corresponding target observations t1, . . . , tN.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,322,1663,(⋆) Show that a diagonal matrix W whose elements satisfy 0 < Wii < 1 is positive deﬁnite. Show that the sum of two positive deﬁnite matrices is itself positive deﬁnite.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,323,1664,"Using the Newton-Raphson formula (4.92), derive the iterative update formula (6.83) for ﬁnding the mode a⋆ N of the posterior distribution in the Gaussian process classiﬁcation model.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,323,1665,"Using the result (2.115), derive the expressions (6.87) and (6.88) for the mean and variance of the posterior distribution p(aN+1|tN) in the Gaussian process clas- siﬁcation model.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Kernel Methods,6,323,1666,"(⋆⋆⋆) Derive the result (6.90) for the log likelihood function in the Laplace approx- imation framework for Gaussian process classiﬁcation. Similarly, derive the results (6.91), (6.92), and (6.94) for the terms in the gradient of the log likelihood.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,325,1667,"In the previous chapter, we explored a variety of learning algorithms based on non- linear kernels. One of the signiﬁcant limitations of many such algorithms is that the kernel function k(xn, xm) must be evaluated for all possible pairs xn and xm of training points, which can be computationally infeasible during training and can lead to excessive computation times when making predictions for new data points.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,325,1668,"In this chapter we shall look at kernel-based algorithms that have sparse solutions, so that predictions for new inputs depend only on the kernel function evaluated at a subset of the training data points.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,326,1669,"We begin by looking in some detail at the support vector machine (SVM), which became popular in some years ago for solving problems in classiﬁcation, regression, and novelty detection. An important property of support vector machines is that the determination of the model parameters corresponds to a convex optimization prob- lem, and so any local solution is also a global optimum. Because the discussion of support vector machines makes extensive use of Lagrange multipliers, the reader is \end{verbatim} egin{verbatim} encouraged to review the key concepts covered in Appendix E. Additional infor- mation on support vector machines can be found in Vapnik (1995), Burges (1998), Cristianini and Shawe-Taylor (2000), M¨uller et al. (2001), Sch¨olkopf and Smola (2002), and Herbrich (2002).",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,326,1670,"The SVM is a decision machine and so does not provide posterior probabilities. We have already discussed some of the beneﬁts of determining probabilities in Sec- tion 1.5.4. An alternative sparse kernel technique, known as the relevance vector machine (RVM), is based on a Bayesian formulation and provides posterior proba- bilistic outputs, as well as having typically much sparser solutions than the SVM.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,326,1671,"We begin our discussion of support vector machines by returning to the two-class classiﬁcation problem using linear models of the form y(x) = wTφ(x) + b (7.1) where φ(x) denotes a ﬁxed feature-space transformation, and we have made the bias parameter b explicit. Note that we shall shortly introduce a dual representation expressed in terms of kernel functions, which avoids having to work explicitly in feature space. The training data set comprises N input vectors x1, . . . , xN, with corresponding target values t1, . . . , tN where tn ∈{−1, 1}, and new data points x are classiﬁed according to the sign of y(x).",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,326,1672,"We shall assume for the moment that the training data set is linearly separable in feature space, so that by deﬁnition there exists at least one choice of the parameters w and b such that a function of the form (7.1) satisﬁes y(xn) > 0 for points having tn = +1 and y(xn) < 0 for points having tn = −1, so that tny(xn) > 0 for all training data points.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,326,1673,"There may of course exist many such solutions that separate the classes exactly. In Section 4.1.7, we described the perceptron algorithm that is guaranteed to ﬁnd a solution in a ﬁnite number of steps. The solution that it ﬁnds, however, will be dependent on the (arbitrary) initial values chosen for w and b as well as on the order in which the data points are presented. If there are multiple solutions all of which classify the training data set exactly, then we should try to ﬁnd the one that will give the smallest generalization error. The support vector machine approaches this problem through the concept of the margin, which is deﬁned to be the smallest distance between the decision boundary and any of the samples, as illustrated in Figure 7.1.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,327,1674,"Figure 7.1 The margin is deﬁned as the perpendicular distance between the decision boundary and the closest of the data points, as shown on the left ﬁgure. Maximizing the margin leads to a particular choice of decision boundary, as shown on the right. The location of this boundary is determined by a subset of the data points, known as support vectors, which are indicated by the circles.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,327,1675,"In support vector machines the decision boundary is chosen to be the one for which the margin is maximized. The maximum margin solution can be motivated us- ing computational learning theory, also known as statistical learning theory. How- ever, a simple insight into the origins of maximum margin has been given by Tong and Koller (2000) who consider a framework for classiﬁcation based on a hybrid of generative and discriminative approaches. They ﬁrst model the distribution over in- put vectors x for each class using a Parzen density estimator with Gaussian kernels \end{verbatim} egin{verbatim} y = 1 y = 0 y = −1 margin y = 1 y = 0 y = −1 having a common parameter σ2. Together with the class priors, this deﬁnes an opti- mal misclassiﬁcation-rate decision boundary. However, instead of using this optimal boundary, they determine the best hyperplane by minimizing the probability of error relative to the learned density model. In the limit σ2 →0, the optimal hyperplane is shown to be the one having maximum margin. The intuition behind this result is that as σ2 is reduced, the hyperplane is increasingly dominated by nearby data points relative to more distant ones. In the limit, the hyperplane becomes independent of data points that are not support vectors.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,327,1676,We shall see in Figure 10.13 that marginalization with respect to the prior distri- bution of the parameters in a Bayesian approach for a simple linearly separable data set leads to a decision boundary that lies in the middle of the region separating the data points. The large margin solution has similar behaviour.,Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,327,1677,Recall from Figure 4.1 that the perpendicular distance of a point x from a hyper- plane deﬁned by y(x) = 0 where y(x) takes the form (7.1) is given by |y(x)|/∥w∥.,Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,327,1678,"Furthermore, we are only interested in solutions for which all data points are cor- rectly classiﬁed, so that tny(xn) > 0 for all n. Thus the distance of a point xn to the decision surface is given by tny(xn) ∥w∥ = tn(wTφ(xn) + b) ∥w∥ .",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,328,1679,"The margin is given by the perpendicular distance to the closest point xn from the data set, and we wish to optimize the parameters w and b in order to maximize this distance. Thus the maximum margin solution is found by solving arg max w,b 1 ∥w∥min n  tn wTφ(xn) + b (7.3) where we have taken the factor 1/∥w∥outside the optimization over n because w \end{verbatim} egin{verbatim} does not depend on n. Direct solution of this optimization problem would be very complex, and so we shall convert it into an equivalent problem that is much easier to solve. To do this we note that if we make the rescaling w →κw and b →κb, then the distance from any point xn to the decision surface, given by tny(xn)/∥w∥, is unchanged. We can use this freedom to set tn wTφ(xn) + b = 1 (7.4) for the point that is closest to the surface. In this case, all data points will satisfy the constraints tn wTφ(xn) + b ⩾1, n = 1, . . . , N.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,328,1680,"This is known as the canonical representation of the decision hyperplane. In the case of data points for which the equality holds, the constraints are said to be active, whereas for the remainder they are said to be inactive. By deﬁnition, there will always be at least one active constraint, because there will always be a closest point, and once the margin has been maximized there will be at least two active constraints.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,328,1681,"The optimization problem then simply requires that we maximize ∥w∥−1, which is equivalent to minimizing ∥w∥2, and so we have to solve the optimization problem arg min w,b 1 2∥w∥2 (7.6) subject to the constraints given by (7.5). The factor of 1/2 in (7.6) is included for later convenience. This is an example of a quadratic programming problem in which we are trying to minimize a quadratic function subject to a set of linear inequality constraints. It appears that the bias parameter b has disappeared from the optimiza- tion. However, it is determined implicitly via the constraints, because these require that changes to ∥w∥be compensated by changes to b. We shall see how this works shortly.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,328,1682,"In order to solve this constrained optimization problem, we introduce Lagrange multipliers an ⩾0, with one multiplier an for each of the constraints in (7.5), giving Appendix E the Lagrangian function L(w, b, a) = 1 2∥w∥2 − N  n=1 an  tn(wTφ(xn) + b) −1 (7.7) where a = (a1, . . . , aN)T. Note the minus sign in front of the Lagrange multiplier term, because we are minimizing with respect to w and b, and maximizing with respect to a. Setting the derivatives of L(w, b, a) with respect to w and b equal to zero, we obtain the following two conditions w = N  n=1 antnφ(xn) (7.8) 0 = N  n=1 antn.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1683,"Eliminating w and b from L(w, b, a) using these conditions then gives the dual representation of the maximum margin problem in which we maximize L(a) = N  n=1 an −1 2 N  n=1 N  m=1 anamtntmk(xn, xm) (7.10) with respect to a subject to the constraints an ⩾ 0, n = 1, . . . , N, (7.11) N  n=1 antn = 0.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1684,"Here the kernel function is deﬁned by k(x, x′) = φ(x)Tφ(x′). Again, this takes the form of a quadratic programming problem in which we optimize a quadratic function of a subject to a set of inequality constraints. We shall discuss techniques for solving such quadratic programming problems in Section 7.1.1.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1685,"The solution to a quadratic programming problem in M variables in general has computational complexity that is O(M 3). In going to the dual formulation we have turned the original optimization problem, which involved minimizing (7.6) over M variables, into the dual problem (7.10), which has N variables. For a ﬁxed set of basis functions whose number M is smaller than the number N of data points, the move to the dual problem appears disadvantageous. However, it allows the model to be reformulated using kernels, and so the maximum margin classiﬁer can be applied efﬁciently to feature spaces whose dimensionality exceeds the number of data points, including inﬁnite feature spaces. The kernel formulation also makes clear the role of the constraint that the kernel function k(x, x′) be positive deﬁnite, because this ensures that the Lagrangian function L(a) is bounded below, giving rise to a well- deﬁned optimization problem.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1686,"In order to classify new data points using the trained model, we evaluate the sign of y(x) deﬁned by (7.1). This can be expressed in terms of the parameters {an} and the kernel function by substituting for w using (7.8) to give y(x) = N  n=1 antnk(x, xn) + b.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1687,"Although widely considered to be a French mathematician, Lagrange was born in Turin in Italy. By the age of nineteen, he had already made important contributions mathemat- ics and had been appointed as Pro- fessor at the Royal Artillery School in Turin. For many years, Euler worked hard to persuade Lagrange to move to Berlin, which he eventually did in 1766 where he succeeded Euler as Director of Mathematics at the Berlin Academy.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1688,"Later he moved to Paris, nar- rowly escaping with his life during the French revo- lution thanks to the personal intervention of Lavoisier (the French chemist who discovered oxygen) who him- self was later executed at the guillotine.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,329,1689,made key contributions to the calculus of variations and the foundations of dynamics.,Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,330,1690,"In Appendix E, we show that a constrained optimization of this form satisﬁes the Karush-Kuhn-Tucker (KKT) conditions, which in this case require that the following three properties hold an ⩾ 0 (7.14) tny(xn) −1 ⩾ 0 (7.15) an {tny(xn) −1} = 0.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,330,1691,"Thus for every data point, either an = 0 or tny(xn) = 1. Any data point for which an = 0 will not appear in the sum in (7.13) and hence plays no role in making predictions for new data points. The remaining data points are called support vectors, and because they satisfy tny(xn) = 1, they correspond to points that lie on the maximum margin hyperplanes in feature space, as illustrated in Figure 7.1. This property is central to the practical applicability of support vector machines. Once the model is trained, a signiﬁcant proportion of the data points can be discarded and only the support vectors retained.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,330,1692,"Having solved the quadratic programming problem and found a value for a, we can then determine the value of the threshold parameter b by noting that any support vector xn satisﬁes tny(xn) = 1. Using (7.13) this gives tn  m∈S amtmk(xn, xm) + b  = 1 (7.17) where S denotes the set of indices of the support vectors. Although we can solve this equation for b using an arbitrarily chosen support vector xn, a numerically more stable solution is obtained by ﬁrst multiplying through by tn, making use of t2 n = 1, and then averaging these equations over all support vectors and solving for b to give b = 1 NS  n∈S  tn −  m∈S amtmk(xn, xm)  (7.18) where NS is the total number of support vectors.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,330,1693,"For later comparison with alternative models, we can express the maximum- margin classiﬁer in terms of the minimization of an error function, with a simple quadratic regularizer, in the form N  n=1 E∞(y(xn)tn −1) + λ∥w∥2 (7.19) where E∞(z) is a function that is zero if z ⩾0 and ∞otherwise and ensures that the constraints (7.5) are satisﬁed. Note that as long as the regularization parameter satisﬁes λ > 0, its precise value plays no role.",Maximum Margin Classifiers
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,331,1694,"Figure 7.2 Example of synthetic data from two classes in two dimensions showing contours of constant y(x) obtained from a support vector machine having a Gaus- sian kernel function. Also shown are the decision boundary, the margin boundaries, and the sup- port vectors.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,331,1695,"Figure 7.2 shows an example of the classiﬁcation resulting from training a sup- port vector machine on a simple synthetic data set using a Gaussian kernel of the \end{verbatim} egin{verbatim} form (6.23). Although the data set is not linearly separable in the two-dimensional data space x, it is linearly separable in the nonlinear feature space deﬁned implicitly by the nonlinear kernel function. Thus the training data points are perfectly separated in the original data space.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,331,1696,"This example also provides a geometrical insight into the origin of sparsity in the SVM. The maximum margin hyperplane is deﬁned by the location of the support vectors. Other data points can be moved around freely (so long as they remain out- side the margin region) without changing the decision boundary, and so the solution will be independent of such data points.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,331,1697,"So far, we have assumed that the training data points are linearly separable in the feature space φ(x). The resulting support vector machine will give exact separation of the training data in the original input space x, although the corresponding decision boundary will be nonlinear. In practice, however, the class-conditional distributions may overlap, in which case exact separation of the training data can lead to poor generalization.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,332,1698,Figure 7.3 Illustration of the slack variables ξn ⩾0.,Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,332,1699,"We therefore need a way to modify the support vector machine so as to allow some of the training points to be misclassiﬁed. From (7.19) we see that in the case of separable classes, we implicitly used an error function that gave inﬁnite error if a data point was misclassiﬁed and zero error if it was classiﬁed correctly, and then optimized the model parameters to maximize the margin. We now modify this approach so that data points are allowed to be on the ‘wrong side’ of the margin boundary, but with a penalty that increases with the distance from that boundary. For the subsequent optimization problem, it is convenient to make this penalty a linear function of this distance. To do this, we introduce slack variables, ξn ⩾0 where n = 1, . . . , N, with one slack variable for each training data point (Bennett, 1992; Cortes and Vapnik, 1995). These are deﬁned by ξn = 0 for data points that are on or inside the correct margin boundary and ξn = |tn −y(xn)| for other points. Thus a data point that is on the decision boundary y(xn) = 0 will have ξn = 1, and points \end{verbatim} egin{verbatim} Data points with circles around them are support vectors.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,332,1700,"with ξn > 1 will be misclassiﬁed. The exact classiﬁcation constraints (7.5) are then replaced with tny(xn) ⩾1 −ξn, n = 1, . . . , N (7.20) in which the slack variables are constrained to satisfy ξn ⩾0. Data points for which ξn = 0 are correctly classiﬁed and are either on the margin or on the correct side of the margin. Points for which 0 < ξn ⩽1 lie inside the margin, but on the cor- rect side of the decision boundary, and those data points for which ξn > 1 lie on the wrong side of the decision boundary and are misclassiﬁed, as illustrated in Fig- ure 7.3. This is sometimes described as relaxing the hard margin constraint to give a soft margin and allows some of the training set data points to be misclassiﬁed. Note that while slack variables allow for overlapping class distributions, this framework is still sensitive to outliers because the penalty for misclassiﬁcation increases linearly with ξ.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,332,1701,"Our goal is now to maximize the margin while softly penalizing points that lie on the wrong side of the margin boundary. We therefore minimize C N  n=1 ξn + 1 2∥w∥2 (7.21) where the parameter C > 0 controls the trade-off between the slack variable penalty and the margin. Because any point that is misclassiﬁed has ξn > 1, it follows that  n ξn is an upper bound on the number of misclassiﬁed points. The parameter C is therefore analogous to (the inverse of) a regularization coefﬁcient because it controls the trade-off between minimizing training errors and controlling model complexity.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,332,1702,"In the limit C →∞, we will recover the earlier support vector machine for separable data.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,333,1703,"We now wish to minimize (7.21) subject to the constraints (7.20) together with ξn ⩾0. The corresponding Lagrangian is given by L(w, b, a) = 1 2∥w∥2 +C N  n=1 ξn − N  n=1 an {tny(xn) −1 + ξn}− N  n=1 µnξn (7.22) \end{verbatim} egin{verbatim} where {an ⩾0} and {µn ⩾0} are Lagrange multipliers. The corresponding set of KKT conditions are given by Appendix E an ⩾ 0 (7.23) tny(xn) −1 + ξn ⩾ 0 (7.24) an (tny(xn) −1 + ξn) = 0 (7.25) µn ⩾ 0 (7.26) ξn ⩾ 0 (7.27) µnξn = 0 (7.28) where n = 1, . . . , N.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,333,1704,"We now optimize out w, b, and {ξn} making use of the deﬁnition (7.1) of y(x) to give ∂L ∂w = 0 ⇒ w = N  n=1 antnφ(xn) (7.29) ∂L ∂b = 0 ⇒ N  n=1 antn = 0 (7.30) ∂L ∂ξn = 0 ⇒ an = C −µn.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,333,1705,"Using these results to eliminate w, b, and {ξn} from the Lagrangian, we obtain the dual Lagrangian in the form L(a) = N  n=1 an −1 2 N  n=1 N  m=1 anamtntmk(xn, xm) (7.32) which is identical to the separable case, except that the constraints are somewhat different. To see what these constraints are, we note that an ⩾0 is required because these are Lagrange multipliers. Furthermore, (7.31) together with µn ⩾0 implies an ⩽C. We therefore have to minimize (7.32) with respect to the dual variables {an} subject to 0 ⩽an ⩽C (7.33) N  n=1 antn = 0 (7.34) for n = 1, . . . , N, where (7.33) are known as box constraints. This again represents a quadratic programming problem. If we substitute (7.29) into (7.1), we see that predictions for new data points are again made by using (7.13).",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1706,"We can now interpret the resulting solution. As before, a subset of the data points may have an = 0, in which case they do not contribute to the predictive \end{verbatim} egin{verbatim} model (7.13). The remaining data points constitute the support vectors. These have an > 0 and hence from (7.25) must satisfy tny(xn) = 1 −ξn.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1707,"If an < C, then (7.31) implies that µn > 0, which from (7.28) requires ξn = 0 and hence such points lie on the margin. Points with an = C can lie inside the margin and can either be correctly classiﬁed if ξn ⩽1 or misclassiﬁed if ξn > 1.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1708,"To determine the parameter b in (7.1), we note that those support vectors for which 0 < an < C have ξn = 0 so that tny(xn) = 1 and hence will satisfy tn  m∈S amtmk(xn, xm) + b  = 1.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1709,"Again, a numerically stable solution is obtained by averaging to give b = 1 NM  n∈M  tn −  m∈S amtmk(xn, xm)  (7.37) where M denotes the set of indices of data points having 0 < an < C.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1710,"An alternative, equivalent formulation of the support vector machine, known as the ν-SVM, has been proposed by Sch¨olkopf et al. (2000). This involves maximizing L(a) = −1 2 N  n=1 N  m=1 anamtntmk(xn, xm) (7.38) subject to the constraints 0 ⩽an ⩽1/N (7.39) N  n=1 antn = 0 (7.40) N  n=1 an ⩾ν.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,334,1711,"This approach has the advantage that the parameter ν, which replaces C, can be interpreted as both an upper bound on the fraction of margin errors (points for which ξn > 0 and hence which lie on the wrong side of the margin boundary and which may or may not be misclassiﬁed) and a lower bound on the fraction of support vectors. An example of the ν-SVM applied to a synthetic data set is shown in Figure 7.4. Here Gaussian kernels of the form exp (−γ∥x −x′∥2) have been used, with γ = 0.45.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,335,1712,Figure 7.4 Illustration of the ν-SVM applied to a nonseparable data set in two dimensions. The support vectors are indicated by circles.,Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,335,1713,"Although predictions for new inputs are made using only the support vectors, the training phase (i.e., the determination of the parameters a and b) makes use of the whole data set, and so it is important to have efﬁcient algorithms for solving \end{verbatim} egin{verbatim} −2 0 2 −2 0 2 the quadratic programming problem. We ﬁrst note that the objective function L(a) given by (7.10) or (7.32) is quadratic and so any local optimum will also be a global optimum provided the constraints deﬁne a convex region (which they do as a conse- quence of being linear). Direct solution of the quadratic programming problem us- ing traditional techniques is often infeasible due to the demanding computation and memory requirements, and so more practical approaches need to be found. The tech- nique of chunking (Vapnik, 1982) exploits the fact that the value of the Lagrangian is unchanged if we remove the rows and columns of the kernel matrix corresponding to Lagrange multipliers that have value zero. This allows the full quadratic pro- gramming problem to be broken down into a series of smaller ones, whose goal is eventually to identify all of the nonzero Lagrange multipliers and discard the others.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,335,1714,"Chunking can be implemented using protected conjugate gradients (Burges, 1998). Although chunking reduces the size of the matrix in the quadratic function from the number of data points squared to approximately the number of nonzero Lagrange multipliers squared, even this may be too big to ﬁt in memory for large-scale appli- cations. Decomposition methods (Osuna et al., 1996) also solve a series of smaller quadratic programming problems but are designed so that each of these is of a ﬁxed size, and so the technique can be applied to arbitrarily large data sets. However, it still involves numerical solution of quadratic programming subproblems and these can be problematic and expensive. One of the most popular approaches to training support vector machines is called sequential minimal optimization, or SMO (Platt, 1999). It takes the concept of chunking to the extreme limit and considers just two Lagrange multipliers at a time. In this case, the subproblem can be solved analyti- cally, thereby avoiding numerical quadratic programming altogether. Heuristics are given for choosing the pair of Lagrange multipliers to be considered at each step.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,335,1715,"In practice, SMO is found to have a scaling with the number of data points that is somewhere between linear and quadratic depending on the particular application.",Overlapping class distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,336,1716,"We have seen that kernel functions correspond to inner products in feature spaces that can have high, or even inﬁnite, dimensionality. By working directly in terms of the kernel function, without introducing the feature space explicitly, it might there- fore seem that support vector machines somehow manage to avoid the curse of di- \end{verbatim} egin{verbatim} mensionality. This is not the case, however, because there are constraints amongst the feature values that restrict the effective dimensionality of feature space. To see this consider a simple second-order polynomial kernel that we can expand in terms of its components k(x, z) = 1 + xTz2 = (1 + x1z1 + x2z2)2 = 1 + 2x1z1 + 2x2z2 + x2 1z2 1 + 2x1z1x2z2 + x2 2z2 2 = (1, √ 2x1, √ 2x2, x2 1, √ 2x1x2, x2 2)(1, √ 2z1, √ 2z2, z2 1, √ 2z1z2, z2 2)T = φ(x)Tφ(z).",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,336,1717,"This kernel function therefore represents an inner product in a feature space having six dimensions, in which the mapping from input space to feature space is described by the vector function φ(x). However, the coefﬁcients weighting these different features are constrained to have speciﬁc forms. Thus any set of points in the original two-dimensional space x would be constrained to lie exactly on a two-dimensional nonlinear manifold embedded in the six-dimensional feature space.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,336,1718,"We have already highlighted the fact that the support vector machine does not provide probabilistic outputs but instead makes classiﬁcation decisions for new in- put vectors. Veropoulos et al. (1999) discuss modiﬁcations to the SVM to allow the trade-off between false positive and false negative errors to be controlled. How- ever, if we wish to use the SVM as a module in a larger probabilistic system, then probabilistic predictions of the class label t for new inputs x are required.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,336,1719,"To address this issue, Platt (2000) has proposed ﬁtting a logistic sigmoid to the outputs of a previously trained support vector machine. Speciﬁcally, the required conditional probability is assumed to be of the form p(t = 1|x) = σ (Ay(x) + B) (7.43) where y(x) is deﬁned by (7.1). Values for the parameters A and B are found by minimizing the cross-entropy error function deﬁned by a training set consisting of pairs of values y(xn) and tn. The data used to ﬁt the sigmoid needs to be independent of that used to train the original SVM in order to avoid severe over-ﬁtting. This two- stage approach is equivalent to assuming that the output y(x) of the support vector machine represents the log-odds of x belonging to class t = 1. Because the SVM training procedure is not speciﬁcally intended to encourage this, the SVM can give a poor approximation to the posterior probabilities (Tipping, 2001).",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,336,1720,"As with the separable case, we can re-cast the SVM for nonseparable distri- butions in terms of the minimization of a regularized error function. This will also allow us to highlight similarities, and differences, compared to the logistic regression model.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,337,1721,"Figure 7.5 Plot of the ‘hinge’ error function used in support vector machines, shown in blue, along with the error function for logistic regression, rescaled by a factor of 1/ ln(2) so that it passes through the point (0, 1), shown in red.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,337,1722,"We have seen that for data points that are on the correct side of the margin boundary, and which therefore satisfy yntn ⩾1, we have ξn = 0, and for the \end{verbatim} egin{verbatim} Also shown are the misclassiﬁcation error in black and the squared error in green.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,337,1723,"remaining points we have ξn = 1 −yntn. Thus the objective function (7.21) can be written (up to an overall multiplicative constant) in the form N  n=1 ESV(yntn) + λ∥w∥2 (7.44) where λ = (2C)−1, and ESV(·) is the hinge error function deﬁned by ESV(yntn) = [1 −yntn]+ (7.45) where [ · ]+ denotes the positive part. The hinge error function, so-called because of its shape, is plotted in Figure 7.5. It can be viewed as an approximation to the misclassiﬁcation error, i.e., the error function that ideally we would like to minimize, which is also shown in Figure 7.5.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,337,1724,"When we considered the logistic regression model in Section 4.3.2, we found it convenient to work with target variable t ∈{0, 1}. For comparison with the support vector machine, we ﬁrst reformulate maximum likelihood logistic regression using the target variable t ∈{−1, 1}. To do this, we note that p(t = 1|y) = σ(y) where y(x) is given by (7.1), and σ(y) is the logistic sigmoid function deﬁned by (4.59). It follows that p(t = −1|y) = 1 −σ(y) = σ(−y), where we have used the properties of the logistic sigmoid function, and so we can write p(t|y) = σ(yt).",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,337,1725,"From this we can construct an error function by taking the negative logarithm of the likelihood function that, with a quadratic regularizer, takes the form N  n=1 ELR(yntn) + λ∥w∥2.",Relation to logistic regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1726,"ELR(yt) = ln (1 + exp(−yt)) . (7.48) \end{verbatim} egin{verbatim} For comparison with other error functions, we can divide by ln(2) so that the error function passes through the point (0, 1). This rescaled error function is also plotted in Figure 7.5 and we see that it has a similar form to the support vector error function.",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1727,"The key difference is that the ﬂat region in ESV(yt) leads to sparse solutions. Both the logistic error and the hinge loss can be viewed as continuous approx- imations to the misclassiﬁcation error. Another continuous error function that has sometimes been used to solve classiﬁcation problems is the squared error, which is again plotted in Figure 7.5. It has the property, however, of placing increasing emphasis on data points that are correctly classiﬁed but that are a long way from the decision boundary on the correct side. Such points will be strongly weighted at the expense of misclassiﬁed points, and so if the objective is to minimize the mis- classiﬁcation rate, then a monotonically decreasing error function would be a better choice.",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1728,"The support vector machine is fundamentally a two-class classiﬁer. In practice, however, we often have to tackle problems involving K > 2 classes. Various meth- ods have therefore been proposed for combining multiple two-class SVMs in order to build a multiclass classiﬁer.",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1729,"One commonly used approach (Vapnik, 1998) is to construct K separate SVMs, in which the kth model yk(x) is trained using the data from class Ck as the positive examples and the data from the remaining K −1 classes as the negative examples.",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1730,"This is known as the one-versus-the-rest approach. However, in Figure 4.2 we saw that using the decisions of the individual classiﬁers can lead to inconsistent results in which an input is assigned to multiple classes simultaneously. This problem is sometimes addressed by making predictions for new inputs x using y(x) = max k yk(x).",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1731,"Unfortunately, this heuristic approach suffers from the problem that the different classiﬁers were trained on different tasks, and there is no guarantee that the real- valued quantities yk(x) for different classiﬁers will have appropriate scales.",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1732,"Another problem with the one-versus-the-rest approach is that the training sets are imbalanced. For instance, if we have ten classes each with equal numbers of training data points, then the individual classiﬁers are trained on data sets comprising 90% negative examples and only 10% positive examples, and the symmetry of the original problem is lost. A variant of the one-versus-the-rest scheme was proposed by Lee et al. (2001) who modify the target values so that the positive class has target +1 and the negative class has target −1/(K −1).",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,338,1733,"Weston and Watkins (1999) deﬁne a single objective function for training all K SVMs simultaneously, based on maximizing the margin from each to remaining classes. However, this can result in much slower training because, instead of solving K separate optimization problems each over N data points with an overall cost of O(KN 2), a single optimization problem of size (K −1)N must be solved giving an overall cost of O(K2N 2).",Multiclass SVMs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,339,1734,"Another approach is to train K(K −1)/2 different 2-class SVMs on all possible pairs of classes, and then to classify test points according to which class has the high- est number of ‘votes’, an approach that is sometimes called one-versus-one. Again, we saw in Figure 4.2 that this can lead to ambiguities in the resulting classiﬁcation.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,339,1735,"Also, for large K this approach requires signiﬁcantly more training time than the one-versus-the-rest approach. Similarly, to evaluate test points, signiﬁcantly more computation is required.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,339,1736,"The latter problem can be alleviated by organizing the pairwise classiﬁers into a directed acyclic graph (not to be confused with a probabilistic graphical model) leading to the DAGSVM (Platt et al., 2000). For K classes, the DAGSVM has a total of K(K −1)/2 classiﬁers, and to classify a new test point only K −1 pairwise classiﬁers need to be evaluated, with the particular classiﬁers used depending on which path through the graph is traversed.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,339,1737,"A different approach to multiclass classiﬁcation, based on error-correcting out- put codes, was developed by Dietterich and Bakiri (1995) and applied to support vector machines by Allwein et al. (2000). This can be viewed as a generalization of the voting scheme of the one-versus-one approach in which more general partitions of the classes are used to train the individual classiﬁers. The K classes themselves are represented as particular sets of responses from the two-class classiﬁers chosen, and together with a suitable decoding scheme, this gives robustness to errors and to ambiguity in the outputs of the individual classiﬁers. Although the application of SVMs to multiclass classiﬁcation problems remains an open issue, in practice the one-versus-the-rest approach is the most widely used in spite of its ad-hoc formula- tion and its practical limitations.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,339,1738,"There are also single-class support vector machines, which solve an unsuper- vised learning problem related to probability density estimation. Instead of mod- elling the density of data, however, these methods aim to ﬁnd a smooth boundary enclosing a region of high density. The boundary is chosen to represent a quantile of the density, that is, the probability that a data point drawn from the distribution will land inside that region is given by a ﬁxed number between 0 and 1 that is speciﬁed in advance. This is a more restricted problem than estimating the full density but may be sufﬁcient in speciﬁc applications. Two approaches to this problem using support vector machines have been proposed. The algorithm of Sch¨olkopf et al. (2001) tries to ﬁnd a hyperplane that separates all but a ﬁxed fraction ν of the training data from the origin while at the same time maximizing the distance (margin) of the hyperplane from the origin, while Tax and Duin (1999) look for the smallest sphere in feature space that contains all but a fraction ν of the data points. For kernels k(x, x′) that are functions only of x −x′, the two algorithms are equivalent.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1739,Figure 7.6 Plot of an ϵ-insensitive error function (in red) in which the error increases lin- early with distance beyond the insen- sitive region. Also shown for compar- ison is the quadratic error function (in green).,SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1740,"We now extend support vector machines to regression problems while at the same time preserving the property of sparseness. In simple linear regression, we \end{verbatim} egin{verbatim} 0 z E(z) −ϵ ϵ minimize a regularized error function given by 1 2 N  n=1 {yn −tn}2 + λ 2 ∥w∥2.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1741,"To obtain sparse solutions, the quadratic error function is replaced by an ϵ-insensitive error function (Vapnik, 1995), which gives zero error if the absolute difference be- tween the prediction y(x) and the target t is less than ϵ where ϵ > 0. A simple example of an ϵ-insensitive error function, having a linear cost associated with errors outside the insensitive region, is given by Eϵ(y(x) −t) = 0, if |y(x) −t| < ϵ; |y(x) −t| −ϵ, otherwise (7.51) and is illustrated in Figure 7.6.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1742,"We therefore minimize a regularized error function given by C N  n=1 Eϵ(y(xn) −tn) + 1 2∥w∥2 (7.52) where y(x) is given by (7.1). By convention the (inverse) regularization parameter, denoted C, appears in front of the error term.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1743,"As before, we can re-express the optimization problem by introducing slack variables. For each data point xn, we now need two slack variables ξn ⩾0 and ξn ⩾0, where ξn > 0 corresponds to a point for which tn > y(xn) + ϵ, and ξn > 0 corresponds to a point for which tn < y(xn) −ϵ, as illustrated in Figure 7.7.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,340,1744,"The condition for a target point to lie inside the ϵ-tube is that yn −ϵ ⩽tn ⩽ yn+ϵ, where yn = y(xn). Introducing the slack variables allows points to lie outside the tube provided the slack variables are nonzero, and the corresponding conditions are tn ⩽ y(xn) + ϵ + ξn (7.53) tn ⩾ y(xn) −ϵ −ξn.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,341,1745,"Figure 7.7 Illustration of SVM regression, showing the regression curve together with the ϵ- insensitive ‘tube’.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,341,1746,"ples of the slack variables ξ and bξ. Points above the ϵ-tube have ξ > 0 and bξ = 0, points below the ϵ-tube have ξ = 0 and bξ > 0, and points inside the ϵ-tube have ξ = bξ = 0.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,341,1747,"The error function for support vector regression can then be written as C N  n=1 (ξn + ξn) + 1 2∥w∥2 (7.55) which must be minimized subject to the constraints ξn ⩾0 and ξn ⩾0 as well as (7.53) and (7.54). This can be achieved by introducing Lagrange multipliers an ⩾0, an ⩾0, µn ⩾0, and µn ⩾0 and optimizing the Lagrangian L = C N  n=1 (ξn + ξn) + 1 2∥w∥2 − N  n=1 (µnξn + µnξn) − N  n=1 an(ϵ + ξn + yn −tn) − N  n=1 an(ϵ + ξn −yn + tn).",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,341,1748,"We now substitute for y(x) using (7.1) and then set the derivatives of the La- grangian with respect to w, b, ξn, and ξn to zero, giving ∂L ∂w = 0 ⇒ w = N  n=1 (an −an)φ(xn) (7.57) ∂L ∂b = 0 ⇒ N  n=1 (an −an) = 0 (7.58) ∂L ∂ξn = 0 ⇒ an + µn = C (7.59) ∂L ∂ξn = 0 ⇒ an + µn = C.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,342,1749,"Using these results to eliminate the corresponding variables from the Lagrangian, we see that the dual problem involves maximizing \end{verbatim} egin{verbatim} L(a, a) = −1 2 N  n=1 N  m=1 (an −an)(am −am)k(xn, xm) −ϵ N  n=1 (an + an) + N  n=1 (an −an)tn (7.61) with respect to {an} and {an}, where we have introduced the kernel k(x, x′) = φ(x)Tφ(x′). Again, this is a constrained maximization, and to ﬁnd the constraints we note that an ⩾0 and an ⩾0 are both required because these are Lagrange multipliers. Also µn ⩾0 and µn ⩾0 together with (7.59) and (7.60), require an ⩽C and an ⩽C, and so again we have the box constraints 0 ⩽an ⩽C (7.62) 0 ⩽an ⩽C (7.63) together with the condition (7.58).",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,342,1750,"Substituting (7.57) into (7.1), we see that predictions for new inputs can be made using y(x) = N  n=1 (an −an)k(x, xn) + b (7.64) which is again expressed in terms of the kernel function.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,342,1751,"The corresponding Karush-Kuhn-Tucker (KKT) conditions, which state that at the solution the product of the dual variables and the constraints must vanish, are given by an(ϵ + ξn + yn −tn) = 0 (7.65) an(ϵ + ξn −yn + tn) = 0 (7.66) (C −an)ξn = 0 (7.67) (C −an)ξn = 0.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,342,1752,"From these we can obtain several useful results. First of all, we note that a coefﬁcient an can only be nonzero if ϵ + ξn + yn −tn = 0, which implies that the data point either lies on the upper boundary of the ϵ-tube (ξn = 0) or lies above the upper boundary (ξn > 0). Similarly, a nonzero value for an implies ϵ +ξn −yn + tn = 0, and such points must lie either on or below the lower boundary of the ϵ-tube.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,342,1753,"Furthermore, the two constraints ϵ+ξn +yn −tn = 0 and ϵ+ξn −yn +tn = 0 are incompatible, as is easily seen by adding them together and noting that ξn and ξn are nonnegative while ϵ is strictly positive, and so for every data point xn, either an or an (or both) must be zero.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,343,1754,"The support vectors are those data points that contribute to predictions given by (7.64), in other words those for which either an ̸= 0 or an ̸= 0. These are points that lie on the boundary of the ϵ-tube or outside the tube. All points within the tube have \end{verbatim} egin{verbatim} an = an = 0. We again have a sparse solution, and the only terms that have to be evaluated in the predictive model (7.64) are those that involve the support vectors.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,343,1755,"The parameter b can be found by considering a data point for which 0 < an < C, which from (7.67) must have ξn = 0, and from (7.65) must therefore satisfy ϵ + yn −tn = 0. Using (7.1) and solving for b, we obtain b = tn −ϵ −wTφ(xn) = tn −ϵ − N  m=1 (am −am)k(xn, xm) (7.69) where we have used (7.57). We can obtain an analogous result by considering a point for which 0 < an < C. In practice, it is better to average over all such estimates of b.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,343,1756,"As with the classiﬁcation case, there is an alternative formulation of the SVM for regression in which the parameter governing complexity has a more intuitive interpretation (Sch¨olkopf et al., 2000). In particular, instead of ﬁxing the width ϵ of the insensitive region, we ﬁx instead a parameter ν that bounds the fraction of points lying outside the tube. This involves maximizing L(a, a) = −1 2 N  n=1 N  m=1 (an −an)(am −am)k(xn, xm) + N  n=1 (an −an)tn (7.70) subject to the constraints 0 ⩽an ⩽C/N (7.71) 0 ⩽an ⩽C/N (7.72) N  n=1 (an −an) = 0 (7.73) N  n=1 (an + an) ⩽νC.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,343,1757,"It can be shown that there are at most νN data points falling outside the insensitive tube, while at least νN data points are support vectors and so lie either on the tube or outside it.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,343,1758,"The use of a support vector machine to solve a regression problem is illustrated using the sinusoidal data set in Figure 7.8. Here the parameters ν and C have been Appendix A chosen by hand. In practice, their values would typically be determined by cross- validation.",SVMs for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1759,"Figure 7.8 Illustration of the ν-SVM for re- gression applied to the sinusoidal synthetic data set using Gaussian kernels. The predicted regression curve is shown by the red line, and the ϵ-insensitive tube corresponds to the shaded region.",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1760,"data points are shown in green, and those with support vectors are indicated by blue circles.",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1761,"Historically, support vector machines have largely been motivated and analysed using a theoretical framework known as computational learning theory, also some- times called statistical learning theory (Anthony and Biggs, 1992; Kearns and Vazi- rani, 1994; Vapnik, 1995; Vapnik, 1998). This has its origins with Valiant (1984) who formulated the probably approximately correct, or PAC, learning framework.",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1762,"The goal of the PAC framework is to understand how large a data set needs to be in order to give good generalization. It also gives bounds for the computational cost of learning, although we do not consider these here.",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1763,"Suppose that a data set D of size N is drawn from some joint distribution p(x, t) where x is the input variable and t represents the class label, and that we restrict attention to ‘noise free’ situations in which the class labels are determined by some (unknown) deterministic function t = g(x). In PAC learning we say that a function f(x; D), drawn from a space F of such functions on the basis of the training set D, has good generalization if its expected error rate is below some pre-speciﬁed threshold ϵ, so that Ex,t [I (f(x; D) ̸= t)] < ϵ (7.75) where I(·) is the indicator function, and the expectation is with respect to the dis- tribution p(x, t). The quantity on the left-hand side is a random variable, because it depends on the training set D, and the PAC framework requires that (7.75) holds, with probability greater than 1 −δ, for a data set D drawn randomly from p(x, t).",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,344,1764,"Here δ is another pre-speciﬁed parameter, and the terminology ‘probably approxi- mately correct’ comes from the requirement that with high probability (greater than 1−δ), the error rate be small (less than ϵ). For a given choice of model space F, and for given parameters ϵ and δ, PAC learning aims to provide bounds on the minimum size N of data set needed to meet this criterion. A key quantity in PAC learning is the Vapnik-Chervonenkis dimension, or VC dimension, which provides a measure of the complexity of a space of functions, and which allows the PAC framework to be extended to spaces containing an inﬁnite number of functions.",Computational learning theory
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1765,"The bounds derived within the PAC framework are often described as worst- \end{verbatim} egin{verbatim} case, because they apply to any choice for the distribution p(x, t), so long as both the training and the test examples are drawn (independently) from the same distribu- tion, and for any choice for the function f(x) so long as it belongs to F. In real-world applications of machine learning, we deal with distributions that have signiﬁcant reg- ularity, for example in which large regions of input space carry the same class label.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1766,"As a consequence of the lack of any assumptions about the form of the distribution, the PAC bounds are very conservative, in other words they strongly over-estimate the size of data sets required to achieve a given generalization performance. For this reason, PAC bounds have found few, if any, practical applications.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1767,"One attempt to improve the tightness of the PAC bounds is the PAC-Bayesian framework (McAllester, 2003), which considers a distribution over the space F of functions, somewhat analogous to the prior in a Bayesian treatment. This still con- siders any possible choice for p(x, t), and so although the bounds are tighter, they are still very conservative.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1768,"Support vector machines have been used in a variety of classiﬁcation and regres- sion applications. Nevertheless, they suffer from a number of limitations, several of which have been highlighted already in this chapter. In particular, the outputs of an SVM represent decisions rather than posterior probabilities. Also, the SVM was originally formulated for two classes, and the extension to K > 2 classes is prob- lematic. There is a complexity parameter C, or ν (as well as a parameter ϵ in the case of regression), that must be found using a hold-out method such as cross-validation.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1769,"Finally, predictions are expressed as linear combinations of kernel functions that are centred on training data points and that are required to be positive deﬁnite.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1770,"The relevance vector machine or RVM (Tipping, 2001) is a Bayesian sparse ker- nel technique for regression and classiﬁcation that shares many of the characteristics of the SVM whilst avoiding its principal limitations. Additionally, it typically leads to much sparser models resulting in correspondingly faster performance on test data whilst maintaining comparable generalization error.",Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,345,1771,In contrast to the SVM we shall ﬁnd it more convenient to introduce the regres- sion form of the RVM ﬁrst and then consider the extension to classiﬁcation tasks.,Relevance Vector Machines
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,346,1772,"The relevance vector machine for regression is a linear model of the form studied in Chapter 3 but with a modiﬁed prior that results in sparse solutions. The model deﬁnes a conditional distribution for a real-valued target variable t, given an input vector x, which takes the form p(t|x, w, β) = N(t|y(x), β−1) (7.76) \end{verbatim} egin{verbatim} where β = σ−2 is the noise precision (inverse noise variance), and the mean is given by a linear model of the form y(x) = M  i=1 wiφi(x) = wTφ(x) (7.77) with ﬁxed nonlinear basis functions φi(x), which will typically include a constant term so that the corresponding weight parameter represents a ‘bias’.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,346,1773,"The relevance vector machine is a speciﬁc instance of this model, which is in- tended to mirror the structure of the support vector machine. In particular, the basis functions are given by kernels, with one kernel associated with each of the data points from the training set. The general expression (7.77) then takes the SVM-like form y(x) = N  n=1 wnk(x, xn) + b (7.78) where b is a bias parameter. The number of parameters in this case is M = N + 1, and y(x) has the same form as the predictive model (7.64) for the SVM, except that the coefﬁcients an are here denoted wn. It should be emphasized that the subsequent analysis is valid for arbitrary choices of basis function, and for generality we shall work with the form (7.77). In contrast to the SVM, there is no restriction to positive- deﬁnite kernels, nor are the basis functions tied in either number or location to the training data points.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,346,1774,"Suppose we are given a set of N observations of the input vector x, which we denote collectively by a data matrix X whose nth row is xT n with n = 1, . . . , N. The corresponding target values are given by t = (t1, . . . , tN)T. Thus, the likelihood function is given by p(t|X, w, β) = N  n=1 p(tn|xn, w, β−1).",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,347,1775,"Next we introduce a prior distribution over the parameter vector w and as in Chapter 3, we shall consider a zero-mean Gaussian prior. However, the key differ- ence in the RVM is that we introduce a separate hyperparameter αi for each of the weight parameters wi instead of a single shared hyperparameter. Thus the weight prior takes the form p(w|α) = M  i=1 N(wi|0, α−1 i ) (7.80) where αi represents the precision of the corresponding parameter wi, and α denotes (α1, . . . , αM)T. We shall see that, when we maximize the evidence with respect to these hyperparameters, a signiﬁcant proportion of them go to inﬁnity, and the corresponding weight parameters have posterior distributions that are concentrated at zero. The basis functions associated with these parameters therefore play no role \end{verbatim} egin{verbatim} in the predictions made by the model and so are effectively pruned out, resulting in a sparse model.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,347,1776,"Using the result (3.49) for linear regression models, we see that the posterior distribution for the weights is again Gaussian and takes the form p(w|t, X, α, β) = N(w|m, Σ) (7.81) where the mean and covariance are given by m = βΣΦTt (7.82) Σ = A + βΦTΦ−1 (7.83) where Φ is the N × M design matrix with elements Φni = φi(xn), and A = diag(αi). Note that in the speciﬁc case of the model (7.78), we have Φ = K, where K is the symmetric (N + 1) × (N + 1) kernel matrix with elements k(xn, xm).",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,347,1777,"The values of α and β are determined using type-2 maximum likelihood, also known as the evidence approximation, in which we maximize the marginal likeli- hood function obtained by integrating out the weight parameters p(t|X, α, β) =  p(t|X, w, β)p(w|α) dw.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,347,1778,"Because this represents the convolution of two Gaussians, it is readily evaluated to give the log marginal likelihood in the form ln p(t|X, α, β) = ln N(t|0, C) = −1 2  N ln(2π) + ln |C| + tTC−1t (7.85) where t = (t1, . . . , tN)T, and we have deﬁned the N × N matrix C given by C = β−1I + ΦA−1ΦT.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1779,"Our goal is now to maximize (7.85) with respect to the hyperparameters α and β. This requires only a small modiﬁcation to the results obtained in Section 3.5 for the evidence approximation in the linear regression model. Again, we can identify two approaches. In the ﬁrst, we simply set the required derivatives of the marginal likelihood to zero and obtain the following re-estimation equations αnew i = γi m2 i (7.87) (βnew)−1 = ∥t −Φm∥2 N − i γi (7.88) where mi is the ith component of the posterior mean m deﬁned by (7.82). The quantity γi measures how well the corresponding parameter wi is determined by the data and is deﬁned by \end{verbatim} egin{verbatim} γi = 1 −αiΣii (7.89) in which Σii is the ith diagonal component of the posterior covariance Σ given by (7.83). Learning therefore proceeds by choosing initial values for α and β, evalu- ating the mean and covariance of the posterior using (7.82) and (7.83), respectively, and then alternately re-estimating the hyperparameters, using (7.87) and (7.88), and re-estimating the posterior mean and covariance, using (7.82) and (7.83), until a suit- able convergence criterion is satisﬁed.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1780,"The second approach is to use the EM algorithm, and is discussed in Sec- tion 9.3.4. These two approaches to ﬁnding the values of the hyperparameters that maximize the evidence are formally equivalent. Numerically, however, it is found that the direct optimization approach corresponding to (7.87) and (7.88) gives some- what faster convergence (Tipping, 2001).",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1781,"As a result of the optimization, we ﬁnd that a proportion of the hyperparameters {αi} are driven to large (in principle inﬁnite) values, and so the weight parameters wi corresponding to these hyperparameters have posterior distributions with mean and variance both zero. Thus those parameters, and the corresponding basis func- tions φi(x), are removed from the model and play no role in making predictions for new inputs. In the case of models of the form (7.78), the inputs xn corresponding to the remaining nonzero weights are called relevance vectors, because they are iden- tiﬁed through the mechanism of automatic relevance determination, and are analo- gous to the support vectors of an SVM. It is worth emphasizing, however, that this mechanism for achieving sparsity in probabilistic models through automatic rele- vance determination is quite general and can be applied to any model expressed as an adaptive linear combination of basis functions.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1782,"Having found values α⋆and β⋆for the hyperparameters that maximize the marginal likelihood, we can evaluate the predictive distribution over t for a new input x. Using (7.76) and (7.81), this is given by p(t|x, X, t, α⋆, β⋆) =  p(t|x, w, β⋆)p(w|X, t, α⋆, β⋆) dw = N t|mTφ(x), σ2(x) .",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1783,"Thus the predictive mean is given by (7.76) with w set equal to the posterior mean m, and the variance of the predictive distribution is given by σ2(x) = (β⋆)−1 + φ(x)TΣφ(x) (7.91) where Σ is given by (7.83) in which α and β are set to their optimized values α⋆and β⋆. This is just the familiar result (3.59) obtained in the context of linear regression.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,348,1784,"Recall that for localized basis functions, the predictive variance for linear regression models becomes small in regions of input space where there are no basis functions.",RVM for regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1785,"Figure 7.9 Illustration of RVM regression us- ing the same data set, and the same Gaussian kernel functions, as used in Figure 7.8 for the ν-SVM regression model.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1786,"In the case of an RVM with the basis functions centred on data points, the model will therefore become increasingly certain of its predictions when extrapolating outside the domain of the data (Rasmussen and Qui˜nonero-Candela, 2005), which of course is undesirable. The predictive distribution in Gaussian process regression does not \end{verbatim} egin{verbatim} The mean of the predictive distribu- tion for the RVM is shown by the red line, and the one standard- deviation predictive distribution is shown by the shaded region.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1787,"Also, the data points are shown in green, and the relevance vec- tors are indicated by blue circles.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1788,Note that there are only 3 rele- vance vectors compared to 7 sup- port vectors for the ν-SVM in Fig- ure 7.8.,Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1789,"suffer from this problem. However, the computational cost of making predictions with a Gaussian processes is typically much higher than with an RVM.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1790,"Figure 7.9 shows an example of the RVM applied to the sinusoidal regression data set. Here the noise precision parameter β is also determined through evidence maximization. We see that the number of relevance vectors in the RVM is signif- icantly smaller than the number of support vectors used by the SVM. For a wide range of regression and classiﬁcation tasks, the RVM is found to give models that are typically an order of magnitude more compact than the corresponding support vector machine, resulting in a signiﬁcant improvement in the speed of processing on test data. Remarkably, this greater sparsity is achieved with little or no reduction in generalization error compared with the corresponding SVM.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,349,1791,"The principal disadvantage of the RVM compared to the SVM is that training involves optimizing a nonconvex function, and training times can be longer than for a comparable SVM. For a model with M basis functions, the RVM requires inversion of a matrix of size M × M, which in general requires O(M 3) computation. In the speciﬁc case of the SVM-like model (7.78), we have M = N +1. As we have noted, there are techniques for training SVMs whose cost is roughly quadratic in N. Of course, in the case of the RVM we always have the option of starting with a smaller number of basis functions than N + 1. More signiﬁcantly, in the relevance vector machine the parameters governing complexity and noise variance are determined automatically from a single training run, whereas in the support vector machine the parameters C and ϵ (or ν) are generally found using cross-validation, which involves multiple training runs. Furthermore, in the next section we shall derive an alternative procedure for training the relevance vector machine that improves training speed signiﬁcantly.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,350,1792,"Figure 7.10 Illustration of the mechanism for sparsity in a Bayesian linear regression model, showing a training set vector of target values given by t = (t1, t2)T, indicated by the cross, for a model with one basis vector ϕ = (φ(x1), φ(x2))T, which is poorly aligned with the target data vector t. On the left we see a model having only isotropic noise, so that C = β−1I, corresponding to α = ∞, with β set to its most probable value. On the right we see the same model but with a ﬁnite value of α. In each case the red ellipse corresponds to unit Mahalanobis distance, with |C| taking the same value for both plots, while the dashed green circle shows the contrition arising from the noise term β−1. We see that any ﬁnite value of α reduces the probability of the observed data, and so for the most probable solution the basis vector is removed.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,350,1793,"We have noted earlier that the mechanism of automatic relevance determination causes a subset of parameters to be driven to zero. We now examine in more detail \end{verbatim} egin{verbatim} t1 t2 t C t1 t2 t C ϕ the mechanism of sparsity in the context of the relevance vector machine. In the process, we will arrive at a signiﬁcantly faster procedure for optimizing the hyper- parameters compared to the direct techniques given above.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,351,1794,"Before proceeding with a mathematical analysis, we ﬁrst give some informal insight into the origin of sparsity in Bayesian linear models. Consider a data set comprising N = 2 observations t1 and t2, together with a model having a single basis function φ(x), with hyperparameter α, along with isotropic noise having pre- cision β. From (7.85), the marginal likelihood is given by p(t|α, β) = N(t|0, C) in which the covariance matrix takes the form C = 1 β I + 1 αϕϕT (7.92) where ϕ denotes the N-dimensional vector (φ(x1), φ(x2))T, and similarly t = (t1, t2)T. Notice that this is just a zero-mean Gaussian process model over t with covariance C. Given a particular observation for t, our goal is to ﬁnd α⋆and β⋆by maximizing the marginal likelihood. We see from Figure 7.10 that, if there is a poor alignment between the direction of ϕ and that of the training data vector t, then the corresponding hyperparameter α will be driven to ∞, and the basis vector will be pruned from the model. This arises because any ﬁnite value for α will always assign a lower probability to the data, thereby decreasing the value of the density at t, pro- vided that β is set to its optimal value. We see that any ﬁnite value for α would cause the distribution to be elongated in a direction away from the data, thereby increasing the probability mass in regions away from the observed data and hence reducing the value of the density at the target data vector itself. For the more general case of M \end{verbatim} egin{verbatim} basis vectors ϕ1, . . . , ϕM a similar intuition holds, namely that if a particular basis vector is poorly aligned with the data vector t, then it is likely to be pruned from the model.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,351,1795,"We now investigate the mechanism for sparsity from a more mathematical per- spective, for a general case involving M basis functions. To motivate this analysis we ﬁrst note that, in the result (7.87) for re-estimating the parameter αi, the terms on the right-hand side are themselves also functions of αi. These results therefore rep- resent implicit solutions, and iteration would be required even to determine a single αi with all other αj for j ̸= i ﬁxed.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,351,1796,"This suggests a different approach to solving the optimization problem for the RVM, in which we make explicit all of the dependence of the marginal likelihood (7.85) on a particular αi and then determine its stationary points explicitly (Faul and Tipping, 2002; Tipping and Faul, 2003). To do this, we ﬁrst pull out the contribution from αi in the matrix C deﬁned by (7.86) to give C = β−1I +  j̸=i α−1 j ϕjϕT j + α−1 i ϕiϕT i = C−i + α−1 i ϕiϕT i (7.93) where ϕi denotes the ith column of Φ, in other words the N-dimensional vector with elements (φi(x1), . . . , φi(xN)), in contrast to φn, which denotes the nth row of Φ.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,351,1797,"The matrix C−i represents the matrix C with the contribution from basis function i removed. Using the matrix identities (C.7) and (C.15), the determinant and inverse of C can then be written |C| = |C−i||1 + α−1 i ϕT i C−1 −iϕi| (7.94) C−1 = C−1 −i −C−1 −iϕiϕT i C−1 −i αi + ϕT i C−1 −iϕi .",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,351,1798,"Using these results, we can then write the log marginal likelihood function (7.85) in the form L(α) = L(α−i) + λ(αi) (7.96) where L(α−i) is simply the log marginal likelihood with basis function ϕi omitted, and the quantity λ(αi) is deﬁned by λ(αi) = 1 2 ln αi −ln (αi + si) + q2 i αi + si (7.97) and contains all of the dependence on αi. Here we have introduced the two quantities si = ϕT i C−1 −iϕi (7.98) qi = ϕT i C−1 −it.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1799,"Figure 7.11 Plots of the log marginal likelihood λ(αi) versus ln αi showing on the left, the single maximum at a ﬁnite αi for q2 i = 4 and si = 1 (so that q2 i > si) and on the right, the maximum at αi = ∞ for q2 i = 1 and si = 2 (so that q2 i < si).",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1800,"Here si is called the sparsity and qi is known as the quality of ϕi, and as we shall see, a large value of si relative to the value of qi means that the basis function ϕi \end{verbatim} egin{verbatim} −5 0 5 −4 −2 0 2 −5 0 5 −4 −2 0 2 is more likely to be pruned from the model. The ‘sparsity’ measures the extent to which basis function ϕi overlaps with the other basis vectors in the model, and the ‘quality’ represents a measure of the alignment of the basis vector ϕn with the error between the training set values t = (t1, . . . , tN)T and the vector y−i of predictions that would result from the model with the vector ϕi excluded (Tipping and Faul, 2003).",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1801,"The stationary points of the marginal likelihood with respect to αi occur when the derivative dλ(αi) dαi = α−1 i s2 i −(q2 i −si) 2(αi + si)2 (7.100) is equal to zero. There are two possible forms for the solution. Recalling that αi ⩾0, we see that if q2 i < si, then αi →∞provides a solution. Conversely, if q2 i > si, we can solve for αi to obtain αi = s2 i q2 i −si .",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1802,"These two solutions are illustrated in Figure 7.11. We see that the relative size of the quality and sparsity terms determines whether a particular basis vector will be pruned from the model or not. A more complete analysis (Faul and Tipping, 2002), based on the second derivatives of the marginal likelihood, conﬁrms these solutions are indeed the unique maxima of λ(αi).",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1803,"Note that this approach has yielded a closed-form solution for αi, for given values of the other hyperparameters. As well as providing insight into the origin of sparsity in the RVM, this analysis also leads to a practical algorithm for optimizing the hyperparameters that has signiﬁcant speed advantages. This uses a ﬁxed set of candidate basis vectors, and then cycles through them in turn to decide whether each vector should be included in the model or not. The resulting sequential sparse Bayesian learning algorithm is described below.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1804,"Sequential Sparse Bayesian Learning Algorithm 1. If solving a regression problem, initialize β.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,352,1805,"2. Initialize using one basis function ϕ1, with hyperparameter α1 set using (7.101), with the remaining hyperparameters αj for j ̸= i initialized to inﬁnity, so that only ϕ1 is included in the model.",Analysis of sparsity
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1806,"3. Evaluate Σ and m, along with qi and si for all basis functions. 4. Select a candidate basis function ϕi.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1807,"i > si, and αi < ∞, so that the basis vector ϕi is already included in the model, then update αi using (7.101).",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1808,"i > si, and αi = ∞, then add ϕi to the model, and evaluate hyperpa- rameter αi using (7.101).",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1809,"i ⩽si, and αi < ∞then remove basis function ϕi from the model, and set αi = ∞.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1810,"8. If solving a regression problem, update β. 9. If converged terminate, otherwise go to 3.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1811,"i ⩽si and αi = ∞, then the basis function ϕi is already excluded from the model and no action is required.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1812,"In practice, it is convenient to evaluate the quantities Qi = ϕT i C−1t (7.102) Si = ϕT i C−1ϕi.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1813,The quality and sparseness variables can then be expressed in the form qi = αiQi αi −Si (7.104) si = αiSi αi −Si .,RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,353,1814,"Note that when αi = ∞, we have qi = Qi and si = Si. Using (C.7), we can write Qi = βϕT i t −β2ϕT i ΦΣΦTt (7.106) Si = βϕT i ϕi −β2ϕT i ΦΣΦTϕi (7.107) where Φ and Σ involve only those basis vectors that correspond to ﬁnite hyperpa- rameters αi. At each stage the required computations therefore scale like O(M 3), where M is the number of active basis vectors in the model and is typically much smaller than the number N of training patterns.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1815,"We can extend the relevance vector machine framework to classiﬁcation prob- lems by applying the ARD prior over weights to a probabilistic linear classiﬁcation model of the kind studied in Chapter 4. To start with, we consider two-class prob- lems with a binary target variable t ∈{0, 1}. The model now takes the form of a linear combination of basis functions transformed by a logistic sigmoid function y(x, w) = σ wTφ(x) (7.108) \end{verbatim} egin{verbatim} where σ(·) is the logistic sigmoid function deﬁned by (4.59). If we introduce a Gaussian prior over the weight vector w, then we obtain the model that has been considered already in Chapter 4. The difference here is that in the RVM, this model uses the ARD prior (7.80) in which there is a separate precision hyperparameter associated with each weight parameter.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1816,"In contrast to the regression model, we can no longer integrate analytically over the parameter vector w. Here we follow Tipping (2001) and use the Laplace ap- proximation, which was applied to the closely related problem of Bayesian logistic regression in Section 4.5.1.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1817,"We begin by initializing the hyperparameter vector α. For this given value of α, we then build a Gaussian approximation to the posterior distribution and thereby obtain an approximation to the marginal likelihood. Maximization of this approxi- mate marginal likelihood then leads to a re-estimated value for α, and the process is repeated until convergence.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1818,"Let us consider the Laplace approximation for this model in more detail. For a ﬁxed value of α, the mode of the posterior distribution over w is obtained by maximizing ln p(w|t, α) = ln {p(t|w)p(w|α)} −ln p(t|α) = N  n=1 {tn ln yn + (1 −tn) ln(1 −yn)} −1 2wTAw + const (7.109) where A = diag(αi). This can be done using iterative reweighted least squares (IRLS) as discussed in Section 4.3.3. For this, we need the gradient vector and Hessian matrix of the log posterior distribution, which from (7.109) are given by ∇ln p(w|t, α) = ΦT(t −y) −Aw (7.110) ∇∇ln p(w|t, α) = − ΦTBΦ + A (7.111) where B is an N × N diagonal matrix with elements bn = yn(1 −yn), the vector y = (y1, . . . , yN)T, and Φ is the design matrix with elements Φni = φi(xn). Here we have used the property (4.88) for the derivative of the logistic sigmoid function.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1819,"At convergence of the IRLS algorithm, the negative Hessian represents the inverse covariance matrix for the Gaussian approximation to the posterior distribution.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,354,1820,"The mode of the resulting approximation to the posterior distribution, corre- sponding to the mean of the Gaussian approximation, is obtained setting (7.110) to zero, giving the mean and covariance of the Laplace approximation in the form w⋆ = A−1ΦT(t −y) (7.112) Σ = ΦTBΦ + A−1 .",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1821,"We can now use this Laplace approximation to evaluate the marginal likelihood. Using the general result (4.135) for an integral evaluated using the Laplace approxi- \end{verbatim} egin{verbatim} mation, we have p(t|α) =  p(t|w)p(w|α) dw ≃ p(t|w⋆)p(w⋆|α)(2π)M/2|Σ|1/2.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1822,"If we substitute for p(t|w⋆) and p(w⋆|α) and then set the derivative of the marginal likelihood with respect to αi equal to zero, we obtain −1 2(w⋆ i )2 + 1 2αi −1 2Σii = 0.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1823,Deﬁning γi = 1 −αiΣii and rearranging then gives αnew i = γi (w⋆ i )2 (7.116) which is identical to the re-estimation formula (7.87) obtained for the regression RVM.,RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1824,"t = Φw⋆+ B−1(t −y) (7.117) we can write the approximate log marginal likelihood in the form ln p(t|α, β) = −1 2  N ln(2π) + ln |C| + (t)TC−1t  (7.118) where C = B + ΦAΦT.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1825,"This takes the same form as (7.85) in the regression case, and so we can apply the same analysis of sparsity and obtain the same fast learning algorithm in which we fully optimize a single hyperparameter αi at each step.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1826,"Figure 7.12 shows the relevance vector machine applied to a synthetic classiﬁ- cation data set. We see that the relevance vectors tend not to lie in the region of the Appendix A decision boundary, in contrast to the support vector machine. This is consistent with our earlier discussion of sparsity in the RVM, because a basis function φi(x) centred on a data point near the boundary will have a vector ϕi that is poorly aligned with the training data vector t.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,355,1827,"One of the potential advantages of the relevance vector machine compared with the SVM is that it makes probabilistic predictions. For example, this allows the RVM to be used to help construct an emission density in a nonlinear extension of the linear dynamical system for tracking faces in video sequences (Williams et al., 2005).",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,356,1828,"Figure 7.12 Example of the relevance vector machine applied to a synthetic data set, in which the left-hand plot shows the decision boundary and the data points, with the relevance vectors indicated by circles. Comparison with the results shown in Figure 7.4 for the corresponding support vector machine shows that the RVM gives a much sparser model. The right-hand plot shows the posterior probability given by the RVM output in which the proportion of red (blue) ink indicates the probability of that point belonging to the red (blue) class.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,356,1829,"So far, we have considered the RVM for binary classiﬁcation problems. For K > 2 classes, we again make use of the probabilistic approach in Section 4.3.4 in which there are K linear models of the form ak = wT k x (7.120) \end{verbatim} egin{verbatim} −2 0 2 −2 0 2 which are combined using a softmax function to give outputs yk(x) = exp(ak)  j exp(aj) .",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,356,1830,"The log likelihood function is then given by ln p(T|w1, . . . , wK) = N  n=1 K  k=1 ytnk nk (7.122) where the target values tnk have a 1-of-K coding for each data point n, and T is a matrix with elements tnk. Again, the Laplace approximation can be used to optimize the hyperparameters (Tipping, 2001), in which the model and its Hessian are found using IRLS. This gives a more principled approach to multiclass classiﬁcation than the pairwise method used in the support vector machine and also provides probabilis- tic predictions for new data points. The principal disadvantage is that the Hessian matrix has size MK ×MK, where M is the number of active basis functions, which gives an additional factor of K3 in the computational cost of training compared with the two-class RVM.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,356,1831,"The principal disadvantage of the relevance vector machine is the relatively long training times compared with the SVM. This is offset, however, by the avoidance of cross-validation runs to set the model complexity parameters. Furthermore, because it yields sparser models, the computation time on test points, which is usually the more important consideration in practice, is typically much less.",RVM for classification
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1832,"Suppose we have a data set of input vectors {xn} with corresponding target values tn ∈{−1, 1}, and suppose that we model the density of input vec- tors within each class separately using a Parzen kernel density estimator (see Sec- tion 2.5.1) with a kernel k(x, x′). Write down the minimum misclassiﬁcation-rate decision rule assuming the two classes have equal prior probability. Show also that, if the kernel is chosen to be k(x, x′) = xTx′, then the classiﬁcation rule reduces to simply assigning a new input vector to the class having the closest mean. Finally, show that, if the kernel takes the form k(x, x′) = φ(x)Tφ(x′), that the classiﬁcation is based on the closest mean in the feature space φ(x).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1833,"Show that, if the 1 on the right-hand side of the constraint (7.5) is replaced by some arbitrary constant γ > 0, the solution for the maximum margin hyperplane is unchanged.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1834,"Show that, irrespective of the dimensionality of the data space, a data set consisting of just two data points, one from each class, is sufﬁcient to determine the location of the maximum-margin hyperplane.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1835,Show that the value ρ of the margin for the maximum-margin hyper- plane is given by 1 ρ2 = N  n=1 an (7.123) where {an} are given by maximizing (7.10) subject to the constraints (7.11) and (7.12).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1836,"(⋆⋆) Show that the values of ρ and {an} in the previous exercise also satisfy 1 ρ2 = 2L(a) (7.124) where L(a) is deﬁned by (7.10). Similarly, show that 1 ρ2 = ∥w∥2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1837,"Consider the logistic regression model with a target variable t ∈{−1, 1}. If we deﬁne p(t = 1|y) = σ(y) where y(x) is given by (7.1), show that the negative log likelihood, with the addition of a quadratic regularization term, takes the form (7.47).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,357,1838,"Consider the Lagrangian (7.56) for the regression support vector machine. By setting the derivatives of the Lagrangian with respect to w, b, ξn, and ξn to zero and then back substituting to eliminate the corresponding variables, show that the dual Lagrangian is given by (7.61).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1839,"For the regression support vector machine considered in Section 7.1.4, show that all training data points for which ξn > 0 will have an = C, and similarly all points for which ξn > 0 will have an = C.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1840,(⋆) Verify the results (7.82) and (7.83) for the mean and covariance of the posterior distribution over weights in the regression RVM.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1841,"Derive the result (7.85) for the marginal likelihood function in the regression RVM, by performing the Gaussian integral over w in (7.84) using the technique of completing the square in the exponential.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1842,"(⋆⋆) Repeat the above exercise, but this time make use of the general result (2.115). 7.12 (⋆⋆) www Show that direct maximization of the log marginal likelihood (7.85) for the regression relevance vector machine leads to the re-estimation equations (7.87) and (7.88) where γi is deﬁned by (7.89).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1843,"(⋆⋆) In the evidence framework for RVM regression, we obtained the re-estimation formulae (7.87) and (7.88) by maximizing the marginal likelihood given by (7.85).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1844,"Extend this approach by inclusion of hyperpriors given by gamma distributions of the form (B.26) and obtain the corresponding re-estimation formulae for α and β by maximizing the corresponding posterior probability p(t, α, β|X) with respect to α and β.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1845,Derive the result (7.90) for the predictive distribution in the relevance vector machine for regression. Show that the predictive variance is given by (7.91).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1846,"Using the results (7.94) and (7.95), show that the marginal likelihood (7.85) can be written in the form (7.96), where λ(αn) is deﬁned by (7.97) and the sparsity and quality factors are deﬁned by (7.98) and (7.99), respectively.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1847,"By taking the second derivative of the log marginal likelihood (7.97) for the regression RVM with respect to the hyperparameter αi, show that the stationary point given by (7.101) is a maximum of the marginal likelihood.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1848,"Using (7.83) and (7.86), together with the matrix identity (C.7), show that the quantities Sn and Qn deﬁned by (7.102) and (7.103) can be written in the form (7.106) and (7.107).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1849,Show that the gradient vector and Hessian matrix of the log poste- rior distribution (7.109) for the classiﬁcation relevance vector machine are given by (7.110) and (7.111).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sparse Kernel Machines,7,358,1850,(⋆⋆) Verify that maximization of the approximate log marginal likelihood function (7.114) for the classiﬁcation relevance vector machine leads to the result (7.116) for re-estimation of the hyperparameters.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,359,1851,"Probabilities play a central role in modern pattern recognition. We have seen in Chapter 1 that probability theory can be expressed in terms of two simple equations corresponding to the sum rule and the product rule. All of the probabilistic infer- ence and learning manipulations discussed in this book, no matter how complex, amount to repeated application of these two equations. We could therefore proceed to formulate and solve complicated probabilistic models purely by algebraic ma- nipulation. However, we shall ﬁnd it highly advantageous to augment the analysis using diagrammatic representations of probability distributions, called probabilistic graphical models. These offer several useful properties: 1. They provide a simple way to visualize the structure of a probabilistic model and can be used to design and motivate new models.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,359,1852,"2. Insights into the properties of the model, including conditional independence properties, can be obtained by inspection of the graph.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1853,"3. Complex computations, required to perform inference and learning in sophis- ticated models, can be expressed in terms of graphical manipulations, in which underlying mathematical expressions are carried along implicitly.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1854,"A graph comprises nodes (also called vertices) connected by links (also known as edges or arcs). In a probabilistic graphical model, each node represents a random variable (or group of random variables), and the links express probabilistic relation- ships between these variables. The graph then captures the way in which the joint distribution over all of the random variables can be decomposed into a product of factors each depending only on a subset of the variables. We shall begin by dis- cussing Bayesian networks, also known as directed graphical models, in which the links of the graphs have a particular directionality indicated by arrows. The other major class of graphical models are Markov random ﬁelds, also known as undirected graphical models, in which the links do not carry arrows and have no directional signiﬁcance. Directed graphs are useful for expressing causal relationships between random variables, whereas undirected graphs are better suited to expressing soft con- straints between random variables. For the purposes of solving inference problems, it is often convenient to convert both directed and undirected graphs into a different representation called a factor graph.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1855,"In this chapter, we shall focus on the key aspects of graphical models as needed for applications in pattern recognition and machine learning. More general treat- ments of graphical models can be found in the books by Whittaker (1990), Lauritzen (1996), Jensen (1996), Castillo et al. (1997), Jordan (1999), Cowell et al. (1999), and Jordan (2007).",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1856,"In order to motivate the use of directed graphs to describe probability distributions, consider ﬁrst an arbitrary joint distribution p(a, b, c) over three variables a, b, and c.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1857,"Note that at this stage, we do not need to specify anything further about these vari- ables, such as whether they are discrete or continuous. Indeed, one of the powerful aspects of graphical models is that a speciﬁc graph can make probabilistic statements for a broad class of distributions. By application of the product rule of probability (1.11), we can write the joint distribution in the form p(a, b, c) = p(c|a, b)p(a, b).",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1858,"A second application of the product rule, this time to the second term on the right- hand side of (8.1), gives p(a, b, c) = p(c|a, b)p(b|a)p(a).",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,360,1859,Note that this decomposition holds for any choice of the joint distribution. We now represent the right-hand side of (8.2) in terms of a simple graphical model as follows.,Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1860,"Figure 8.1 A directed graphical model representing the joint probabil- ity distribution over three variables a, b, and c, correspond- ing to the decomposition on the right-hand side of (8.2).",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1861,"First we introduce a node for each of the random variables a, b, and c and associate each node with the corresponding conditional distribution on the right-hand side of \end{verbatim} egin{verbatim} a b c (8.2). Then, for each conditional distribution we add directed links (arrows) to the graph from the nodes corresponding to the variables on which the distribution is conditioned. Thus for the factor p(c|a, b), there will be links from nodes a and b to node c, whereas for the factor p(a) there will be no incoming links. The result is the graph shown in Figure 8.1. If there is a link going from a node a to a node b, then we say that node a is the parent of node b, and we say that node b is the child of node a.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1862,Note that we shall not make any formal distinction between a node and the variable to which it corresponds but will simply use the same symbol to refer to both.,Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1863,"An interesting point to note about (8.2) is that the left-hand side is symmetrical with respect to the three variables a, b, and c, whereas the right-hand side is not.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1864,"Indeed, in making the decomposition in (8.2), we have implicitly chosen a particular ordering, namely a, b, c, and had we chosen a different ordering we would have obtained a different decomposition and hence a different graphical representation.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1865,"We shall return to this point later. For the moment let us extend the example of Figure 8.1 by considering the joint distribution over K variables given by p(x1, . . . , xK). By repeated application of the product rule of probability, this joint distribution can be written as a product of conditional distributions, one for each of the variables p(x1, . . . , xK) = p(xK|x1, . . . , xK−1) . . . p(x2|x1)p(x1).",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1866,"For a given choice of K, we can again represent this as a directed graph having K nodes, one for each conditional distribution on the right-hand side of (8.3), with each node having incoming links from all lower numbered nodes. We say that this graph is fully connected because there is a link between every pair of nodes.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,361,1867,"So far, we have worked with completely general joint distributions, so that the decompositions, and their representations as fully connected graphs, will be applica- ble to any choice of distribution. As we shall see shortly, it is the absence of links in the graph that conveys interesting information about the properties of the class of distributions that the graph represents. Consider the graph shown in Figure 8.2. This is not a fully connected graph because, for instance, there is no link from x1 to x2 or from x3 to x7.",Bayesian Networks
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,362,1868,"Figure 8.2 Example of a directed acyclic graph describing the joint distribution over variables x1, . . . , x7. The corresponding decomposition of the joint distribution is given by (8.4).",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,362,1869,"We shall now go from this graph to the corresponding representation of the joint probability distribution written in terms of the product of a set of conditional dis- tributions, one for each node in the graph. Each such conditional distribution will be conditioned only on the parents of the corresponding node in the graph. For in- stance, x5 will be conditioned on x1 and x3. The joint distribution of all 7 variables \end{verbatim} egin{verbatim} x1 x2 x3 x4 x5 x6 x7 is therefore given by p(x1)p(x2)p(x3)p(x4|x1, x2, x3)p(x5|x1, x3)p(x6|x4)p(x7|x4, x5).",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,362,1870,The reader should take a moment to study carefully the correspondence between (8.4) and Figure 8.2.,Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,362,1871,"We can now state in general terms the relationship between a given directed graph and the corresponding distribution over the variables. The joint distribution deﬁned by a graph is given by the product, over all of the nodes of the graph, of a conditional distribution for each node conditioned on the variables corresponding to the parents of that node in the graph. Thus, for a graph with K nodes, the joint distribution is given by p(x) = K  k=1 p(xk|pak) (8.5) where pak denotes the set of parents of xk, and x = {x1, . . . , xK}. This key equation expresses the factorization properties of the joint distribution for a directed graphical model. Although we have considered each node to correspond to a single variable, we can equally well associate sets of variables and vector-valued variables with the nodes of a graph. It is easy to show that the representation on the right- hand side of (8.5) is always correctly normalized provided the individual conditional distributions are normalized.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,362,1872,"The directed graphs that we are considering are subject to an important restric- tion namely that there must be no directed cycles, in other words there are no closed paths within the graph such that we can move from node to node along links follow- ing the direction of the arrows and end up back at the starting node. Such graphs are also called directed acyclic graphs, or DAGs. This is equivalent to the statement that there exists an ordering of the nodes such that there are no links that go from any node to any lower numbered node.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1873,Figure 8.3 Directed graphical model representing the joint distribution (8.6) corresponding to the Bayesian polynomial regression model introduced in Sec- tion 1.2.6.,Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1874,"Figure 8.4 An alternative, more compact, representation of the graph shown in Figure 8.3 in which we have introduced a plate (the box labelled N) that represents N nodes of which only a single example tn is shown explicitly.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1875,"As an illustration of the use of directed graphs to describe probability distri- butions, we consider the Bayesian polynomial regression model introduced in Sec- \end{verbatim} egin{verbatim} w t1 tN tion 1.2.6. The random variables in this model are the vector of polynomial coefﬁ- cients w and the observed data t = (t1, . . . , tN)T. In addition, this model contains the input data x = (x1, . . . , xN)T, the noise variance σ2, and the hyperparameter α representing the precision of the Gaussian prior over w, all of which are parameters of the model rather than random variables. Focussing just on the random variables for the moment, we see that the joint distribution is given by the product of the prior p(w) and N conditional distributions p(tn|w) for n = 1, . . . , N so that p(t, w) = p(w) N  n=1 p(tn|w).",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1876,"This joint distribution can be represented by a graphical model shown in Figure 8.3. When we start to deal with more complex models later in the book, we shall ﬁnd it inconvenient to have to write out multiple nodes of the form t1, . . . , tN explicitly as in Figure 8.3. We therefore introduce a graphical notation that allows such multiple nodes to be expressed more compactly, in which we draw a single representative node tn and then surround this with a box, called a plate, labelled with N indicating that there are N nodes of this kind. Re-writing the graph of Figure 8.3 in this way, we obtain the graph shown in Figure 8.4.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1877,"We shall sometimes ﬁnd it helpful to make the parameters of a model, as well as its stochastic variables, explicit. In this case, (8.6) becomes p(t, w|x, α, σ2) = p(w|α) N  n=1 p(tn|w, xn, σ2).",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,363,1878,"Correspondingly, we can make x and α explicit in the graphical representation. To do this, we shall adopt the convention that random variables will be denoted by open circles, and deterministic parameters will be denoted by smaller solid circles. If we take the graph of Figure 8.4 and include the deterministic parameters, we obtain the graph shown in Figure 8.5.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,364,1879,Figure 8.5 This shows the same model as in Figure 8.4 but with the deterministic parameters shown explicitly by the smaller solid nodes.,Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,364,1880,Figure 8.6 As in Figure 8.5 but with the nodes {tn} shaded to indicate that the corresponding random vari- ables have been set to their observed (training set) values.,Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,364,1881,"When we apply a graphical model to a problem in machine learning or pattern recognition, we will typically set some of the random variables to speciﬁc observed tn N w \end{verbatim} egin{verbatim} tn xn N w α σ2 values, for example the variables {tn} from the training set in the case of polynomial curve ﬁtting. In a graphical model, we will denote such observed variables by shad- ing the corresponding nodes. Thus the graph corresponding to Figure 8.5 in which the variables {tn} are observed is shown in Figure 8.6. Note that the value of w is not observed, and so w is an example of a latent variable, also known as a hidden variable. Such variables play a crucial role in many probabilistic models and will form the focus of Chapters 9 and 12.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,364,1882,"Having observed the values {tn} we can, if desired, evaluate the posterior dis- tribution of the polynomial coefﬁcients w as discussed in Section 1.2.5. For the moment, we note that this involves a straightforward application of Bayes’ theorem p(w|T) ∝p(w) N  n=1 p(tn|w) (8.7) where again we have omitted the deterministic parameters in order to keep the nota- tion uncluttered.",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,364,1883,"In general, model parameters such as w are of little direct interest in themselves, because our ultimate goal is to make predictions for new input values. Suppose we are given a new input value x and we wish to ﬁnd the corresponding probability dis- tribution fort conditioned on the observed data. The graphical model that describes this problem is shown in Figure 8.7, and the corresponding joint distribution of all of the random variables in this model, conditioned on the deterministic parameters, is then given by p(t, t, w|x, x, α, σ2) = N  n=1 p(tn|xn, w, σ2) p(w|α)p(t|x, w, σ2).",Example: Polynomial regression
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,365,1884,"Figure 8.7 The polynomial regression model, corresponding to Figure 8.6, showing also a new input value bx together with the corresponding model prediction bt.",Generative models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,365,1885,"The required predictive distribution for t is then obtained, from the sum rule of probability, by integrating out the model parameters w so that p(t|x, x, t, α, σ2) ∝  p(t, t, w|x, x, α, σ2) dw where we are implicitly setting the random variables in t to the speciﬁc values ob- served in the data set. The details of this calculation were discussed in Chapter 3.",Generative models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,365,1886,"There are many situations in which we wish to draw samples from a given prob- ability distribution. Although we shall devote the whole of Chapter 11 to a detailed discussion of sampling methods, it is instructive to outline here one technique, called ancestral sampling, which is particularly relevant to graphical models. Consider a joint distribution p(x1, . . . , xK) over K variables that factorizes according to (8.5) corresponding to a directed acyclic graph. We shall suppose that the variables have been ordered such that there are no links from any node to any lower numbered node, in other words each node has a higher number than any of its parents. Our goal is to draw a sample x1, . . . , xK from the joint distribution.",Generative models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,365,1887,"To do this, we start with the lowest-numbered node and draw a sample from the distribution p(x1), which we call x1. We then work through each of the nodes in or- der, so that for node n we draw a sample from the conditional distribution p(xn|pan) in which the parent variables have been set to their sampled values. Note that at each stage, these parent values will always be available because they correspond to lower- numbered nodes that have already been sampled. Techniques for sampling from speciﬁc distributions will be discussed in detail in Chapter 11. Once we have sam- pled from the ﬁnal variable xK, we will have achieved our objective of obtaining a sample from the joint distribution. To obtain a sample from some marginal distribu- tion corresponding to a subset of the variables, we simply take the sampled values for the required nodes and ignore the sampled values for the remaining nodes. For example, to draw a sample from the distribution p(x2, x4), we simply sample from the full joint distribution and then retain the values x2, x4 and discard the remaining values {xj̸=2,4}.",Generative models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1888,"Figure 8.8 A graphical model representing the process by which images of objects are created, in which the identity of an object (a discrete variable) and the position and orientation of that object (continuous variables) have independent prior probabilities. The image (a vector of pixel intensities) has a probability distribution that is dependent on the identity of the object as well as on its position and orientation.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1889,"For practical applications of probabilistic models, it will typically be the higher- numbered variables corresponding to terminal nodes of the graph that represent the observations, with lower-numbered nodes corresponding to latent variables. The primary role of the latent variables is to allow a complicated distribution over the observed variables to be represented in terms of a model constructed from simpler (typically exponential family) conditional distributions.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1890,"We can interpret such models as expressing the processes by which the observed data arose. For instance, consider an object recognition task in which each observed data point corresponds to an image (comprising a vector of pixel intensities) of one of the objects. In this case, the latent variables might have an interpretation as the position and orientation of the object. Given a particular observed image, our goal is to ﬁnd the posterior distribution over objects, in which we integrate over all possible positions and orientations. We can represent this problem using a graphical model of the form show in Figure 8.8.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1891,"The graphical model captures the causal process (Pearl, 1988) by which the ob- served data was generated. For this reason, such models are often called generative models. By contrast, the polynomial regression model described by Figure 8.5 is not generative because there is no probability distribution associated with the input variable x, and so it is not possible to generate synthetic data points from this model.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1892,"We could make it generative by introducing a suitable prior distribution p(x), at the expense of a more complex model.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,366,1893,"The hidden variables in a probabilistic model need not, however, have any ex- plicit physical interpretation but may be introduced simply to allow a more complex joint distribution to be constructed from simpler components. In either case, the technique of ancestral sampling applied to a generative model mimics the creation of the observed data and would therefore give rise to ‘fantasy’ data whose probability distribution (if the model were a perfect representation of reality) would be the same as that of the observed data. In practice, producing synthetic observations from a generative model can prove informative in understanding the form of the probability distribution represented by that model.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1894,"Figure 8.9 (a) This fully-connected graph describes a general distribu- tion over two K-state discrete variables having a total of K2 −1 parameters. (b) By dropping the link between the nodes, the number of parameters is reduced to 2(K −1).",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1895,"We have discussed the importance of probability distributions that are members of the exponential family, and we have seen that this family includes many well- known distributions as particular cases. Although such distributions are relatively simple, they form useful building blocks for constructing more complex probability \end{verbatim} egin{verbatim} (a) x1 x2 (b) x1 x2 distributions, and the framework of graphical models is very useful in expressing the way in which these building blocks are linked together.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1896,"Such models have particularly nice properties if we choose the relationship be- tween each parent-child pair in a directed graph to be conjugate, and we shall ex- plore several examples of this shortly. Two cases are particularly worthy of note, namely when the parent and child node each correspond to discrete variables and when they each correspond to Gaussian variables, because in these two cases the relationship can be extended hierarchically to construct arbitrarily complex directed acyclic graphs. We begin by examining the discrete case.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1897,"The probability distribution p(x|µ) for a single discrete variable x having K possible states (using the 1-of-K representation) is given by p(x|µ) = K  k=1 µxk k (8.9) and is governed by the parameters µ = (µ1, . . . , µK)T.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1898,"k µk = 1, only K −1 values for µk need to be speciﬁed in order to deﬁne the distribution.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1899,"Now suppose that we have two discrete variables, x1 and x2, each of which has K states, and we wish to model their joint distribution. We denote the probability of observing both x1k = 1 and x2l = 1 by the parameter µkl, where x1k denotes the kth component of x1, and similarly for x2l. The joint distribution can be written p(x1, x2|µ) = K  k=1 K  l=1 µx1kx2l kl .",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1900,"Because the parameters µkl are subject to the constraint  k  l µkl = 1, this distri- bution is governed by K2 −1 parameters. It is easily seen that the total number of parameters that must be speciﬁed for an arbitrary joint distribution over M variables is KM −1 and therefore grows exponentially with the number M of variables.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,367,1901,"Using the product rule, we can factor the joint distribution p(x1, x2) in the form p(x2|x1)p(x1), which corresponds to a two-node graph with a link going from the x1 node to the x2 node as shown in Figure 8.9(a). The marginal distribution p(x1) is governed by K −1 parameters, as before, Similarly, the conditional distribution p(x2|x1) requires the speciﬁcation of K −1 parameters for each of the K possible values of x1. The total number of parameters that must be speciﬁed in the joint distribution is therefore (K −1) + K(K −1) = K2 −1 as before.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1902,"Figure 8.10 This chain of M discrete nodes, each having K states, requires the speciﬁcation of K −1 + (M −1)K(K −1) parameters, which grows linearly with the length M of the chain. In contrast, a fully con- nected graph of M nodes would have KM −1 param- eters, which grows exponentially with M.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1903,"Now suppose that the variables x1 and x2 were independent, corresponding to the graphical model shown in Figure 8.9(b). Each variable is then described by \end{verbatim} egin{verbatim} x1 x2 xM a separate multinomial distribution, and the total number of parameters would be 2(K −1). For a distribution over M independent discrete variables, each having K states, the total number of parameters would be M(K −1), which therefore grows linearly with the number of variables. From a graphical perspective, we have reduced the number of parameters by dropping links in the graph, at the expense of having a restricted class of distributions.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1904,"More generally, if we have M discrete variables x1, . . . , xM, we can model the joint distribution using a directed graph with one variable corresponding to each node. The conditional distribution at each node is given by a set of nonnegative pa- rameters subject to the usual normalization constraint. If the graph is fully connected then we have a completely general distribution having KM −1 parameters, whereas if there are no links in the graph the joint distribution factorizes into the product of the marginals, and the total number of parameters is M(K −1). Graphs having in- termediate levels of connectivity allow for more general distributions than the fully factorized one while requiring fewer parameters than the general joint distribution.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1905,"As an illustration, consider the chain of nodes shown in Figure 8.10. The marginal distribution p(x1) requires K −1 parameters, whereas each of the M −1 condi- tional distributions p(xi|xi−1), for i = 2, . . . , M, requires K(K −1) parameters.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1906,"This gives a total parameter count of K −1+(M −1)K(K −1), which is quadratic in K and which grows linearly (rather than exponentially) with the length M of the chain.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1907,"An alternative way to reduce the number of independent parameters in a model is by sharing parameters (also known as tying of parameters). For instance, in the chain example of Figure 8.10, we can arrange that all of the conditional distributions p(xi|xi−1), for i = 2, . . . , M, are governed by the same set of K(K−1) parameters.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1908,"Together with the K−1 parameters governing the distribution of x1, this gives a total of K2 −1 parameters that must be speciﬁed in order to deﬁne the joint distribution.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,368,1909,"We can turn a graph over discrete variables into a Bayesian model by introduc- ing Dirichlet priors for the parameters. From a graphical point of view, each node then acquires an additional parent representing the Dirichlet distribution over the pa- rameters associated with the corresponding discrete node. This is illustrated for the chain model in Figure 8.11. The corresponding model in which we tie the parame- ters governing the conditional distributions p(xi|xi−1), for i = 2, . . . , M, is shown in Figure 8.12.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,369,1910,Figure 8.11 An extension of the model of Figure 8.10 to include Dirich- let priors over the param- eters governing the discrete distributions.,Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,369,1911,Figure 8.12 As in Figure 8.11 but with a sin- gle set of parameters µ shared amongst all of the conditional distributions p(xi|xi−1).,Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,369,1912,"Figure 8.13 A graph comprising M parents x1, . . . , xM and a sin- gle child y, used to illustrate the idea of parameterized conditional distributions for discrete variables.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,369,1913,"Another way of controlling the exponential growth in the number of parameters in models of discrete variables is to use parameterized models for the conditional distributions instead of complete tables of conditional probability values. To illus- trate this idea, consider the graph in Figure 8.13 in which all of the nodes represent binary variables. Each of the parent variables xi is governed by a single parame- \end{verbatim} egin{verbatim} x1 x2 xM µ1 µ2 µM x1 x2 xM µ1 µ ter µi representing the probability p(xi = 1), giving M parameters in total for the parent nodes. The conditional distribution p(y|x1, . . . , xM), however, would require 2M parameters representing the probability p(y = 1) for each of the 2M possible settings of the parent variables. Thus in general the number of parameters required to specify this conditional distribution will grow exponentially with M. We can ob- tain a more parsimonious form for the conditional distribution by using a logistic sigmoid function acting on a linear combination of the parent variables, giving p(y = 1|x1, . . . , xM) = σ  w0 + M  i=1 wixi  = σ(wTx) (8.10) where σ(a) = (1+exp(−a))−1 is the logistic sigmoid, x = (x0, x1, . . . , xM)T is an (M + 1)-dimensional vector of parent states augmented with an additional variable x0 whose value is clamped to 1, and w = (w0, w1, . . . , wM)T is a vector of M + 1 parameters. This is a more restricted form of conditional distribution than the general case but is now governed by a number of parameters that grows linearly with M. In this sense, it is analogous to the choice of a restrictive form of covariance matrix (for example, a diagonal matrix) in a multivariate Gaussian distribution. The motivation for the logistic sigmoid representation was discussed in Section 4.2.",Discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,370,1914,"In the previous section, we saw how to construct joint probability distributions over a set of discrete variables by expressing the variables as nodes in a directed acyclic graph. Here we show how a multivariate Gaussian can be expressed as a directed graph corresponding to a linear-Gaussian model over the component vari- ables. This allows us to impose interesting structure on the distribution, with the general Gaussian and the diagonal covariance Gaussian representing opposite ex- tremes. Several widely used techniques are examples of linear-Gaussian models, such as probabilistic principal component analysis, factor analysis, and linear dy- namical systems (Roweis and Ghahramani, 1999). We shall make extensive use of the results of this section in later chapters when we consider some of these techniques in detail.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,370,1915,Consider an arbitrary directed acyclic graph over D variables in which node i represents a single continuous random variable xi having a Gaussian distribution.,Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,370,1916,"The mean of this distribution is taken to be a linear combination of the states of its parent nodes pai of node i p(xi|pai) = N ⎛ ⎝xi   j∈pai wijxj + bi, vi ⎞ ⎠ (8.11) where wij and bi are parameters governing the mean, and vi is the variance of the conditional distribution for xi. The log of the joint distribution is then the log of the product of these conditionals over all nodes in the graph and hence takes the form ln p(x) = D  i=1 ln p(xi|pai) (8.12) = − D  i=1 1 2vi ⎛ ⎝xi −  j∈pai wijxj −bi ⎞ ⎠ 2 + const (8.13) where x = (x1, . . . , xD)T and ‘const’ denotes terms independent of x. We see that this is a quadratic function of the components of x, and hence the joint distribution p(x) is a multivariate Gaussian.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,370,1917,"We can determine the mean and covariance of the joint distribution recursively as follows. Each variable xi has (conditional on the states of its parents) a Gaussian distribution of the form (8.11) and so xi =  j∈pai wijxj + bi + √viϵi (8.14) where ϵi is a zero mean, unit variance Gaussian random variable satisfying E[ϵi] = 0 and E[ϵiϵj] = Iij, where Iij is the i, j element of the identity matrix. Taking the expectation of (8.14), we have E[xi] =  j∈pai wijE[xj] + bi.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,371,1918,"Figure 8.14 A directed graph over three Gaussian variables, with one missing link.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,371,1919,"Thus we can ﬁnd the components of E[x] = (E[x1], . . . , E[xD])T by starting at the lowest numbered node and working recursively through the graph (here we again assume that the nodes are numbered such that each node has a higher number than its parents). Similarly, we can use (8.14) and (8.15) to obtain the i, j element of the covariance matrix for p(x) in the form of a recursion relation cov[xi, xj] = E [(xi −E[xi])(xj −E[xj])] = E ⎡ ⎣(xi −E[xi]) ⎧ ⎨ ⎩  k∈paj wjk(xk −E[xk]) + √vjϵj ⎫ ⎬ ⎭ ⎤ ⎦ =  k∈paj wjkcov[xi, xk] + Iijvj (8.16) and so the covariance can similarly be evaluated recursively starting from the lowest numbered node.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,371,1920,"Let us consider two extreme cases. First of all, suppose that there are no links in the graph, which therefore comprises D isolated nodes. In this case, there are no parameters wij and so there are just D parameters bi and D parameters vi. From the recursion relations (8.15) and (8.16), we see that the mean of p(x) is given by (b1, . . . , bD)T and the covariance matrix is diagonal of the form diag(v1, . . . , vD).",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,371,1921,The joint distribution has a total of 2D parameters and represents a set of D inde- pendent univariate Gaussian distributions.,Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,371,1922,"Now consider a fully connected graph in which each node has all lower num- bered nodes as parents. The matrix wij then has i −1 entries on the ith row and hence is a lower triangular matrix (with no entries on the leading diagonal). Then the total number of parameters wij is obtained by taking the number D2 of elements in a D ×D matrix, subtracting D to account for the absence of elements on the lead- ing diagonal, and then dividing by 2 because the matrix has elements only below the diagonal, giving a total of D(D−1)/2. The total number of independent parameters {wij} and {vi} in the covariance matrix is therefore D(D + 1)/2 corresponding to a general symmetric covariance matrix.",Linear-Gaussian models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,372,1923,"Graphs having some intermediate level of complexity correspond to joint Gaus- sian distributions with partially constrained covariance matrices. Consider for ex- ample the graph shown in Figure 8.14, which has a link missing between variables x1 and x3. Using the recursion relations (8.15) and (8.16), we see that the mean and covariance of the joint distribution are given by µ = (b1, b2 + w21b1, b3 + w32b2 + w32w21b1)T (8.17) Σ =  v1 w21v1 w32w21v1 w21v1 v2 + w2 21v1 w32(v2 + w2 21v1) w32w21v1 w32(v2 + w2 21v1) v3 + w2 32(v2 + w2 21v1)  . (8.18) \end{verbatim} egin{verbatim} We can readily extend the linear-Gaussian graphical model to the case in which the nodes of the graph represent multivariate Gaussian variables. In this case, we can write the conditional distribution for node i in the form p(xi|pai) = N ⎛ ⎝xi   j∈pai Wijxj + bi, Σi ⎞ ⎠ (8.19) where now Wij is a matrix (which is nonsquare if xi and xj have different dimen- sionalities). Again it is easy to verify that the joint distribution over all variables is Gaussian.",Conditional Independence
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,372,1924,"Note that we have already encountered a speciﬁc example of the linear-Gaussian relationship when we saw that the conjugate prior for the mean µ of a Gaussian variable x is itself a Gaussian distribution over µ. The joint distribution over x and µ is therefore Gaussian. This corresponds to a simple two-node graph in which the node representing µ is the parent of the node representing x. The mean of the distribution over µ is a parameter controlling a prior, and so it can be viewed as a hyperparameter. Because the value of this hyperparameter may itself be unknown, we can again treat it from a Bayesian perspective by introducing a prior over the hyperparameter, sometimes called a hyperprior, which is again given by a Gaussian distribution. This type of construction can be extended in principle to any level and is an illustration of a hierarchical Bayesian model, of which we shall encounter further examples in later chapters.",Conditional Independence
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,372,1925,"An important concept for probability distributions over multiple variables is that of conditional independence (Dawid, 1980). Consider three variables a, b, and c, and suppose that the conditional distribution of a, given b and c, is such that it does not depend on the value of b, so that p(a|b, c) = p(a|c).",Conditional Independence
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,372,1926,"We say that a is conditionally independent of b given c. This can be expressed in a slightly different way if we consider the joint distribution of a and b conditioned on c, which we can write in the form p(a, b|c) = p(a|b, c)p(b|c) = p(a|c)p(b|c).",Conditional Independence
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1927,"Figure 8.15 The ﬁrst of three examples of graphs over three variables a, b, and c used to discuss conditional independence properties of directed graphical models.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1928,"where we have used the product rule of probability together with (8.20). Thus we see that, conditioned on c, the joint distribution of a and b factorizes into the prod- uct of the marginal distribution of a and the marginal distribution of b (again both conditioned on c). This says that the variables a and b are statistically independent, given c. Note that our deﬁnition of conditional independence will require that (8.20), \end{verbatim} egin{verbatim} c a b or equivalently (8.21), must hold for every possible value of c, and not just for some values. We shall sometimes use a shorthand notation for conditional independence (Dawid, 1979) in which a ⊥⊥b | c (8.22) denotes that a is conditionally independent of b given c and is equivalent to (8.20).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1929,Conditional independence properties play an important role in using probabilis- tic models for pattern recognition by simplifying both the structure of a model and the computations needed to perform inference and learning under that model. We shall see examples of this shortly.,Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1930,"If we are given an expression for the joint distribution over a set of variables in terms of a product of conditional distributions (i.e., the mathematical representation underlying a directed graph), then we could in principle test whether any poten- tial conditional independence property holds by repeated application of the sum and product rules of probability. In practice, such an approach would be very time con- suming. An important and elegant feature of graphical models is that conditional independence properties of the joint distribution can be read directly from the graph without having to perform any analytical manipulations. The general framework for achieving this is called d-separation, where the ‘d’ stands for ‘directed’ (Pearl, 1988). Here we shall motivate the concept of d-separation and give a general state- ment of the d-separation criterion. A formal proof can be found in Lauritzen (1996).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1931,"We begin our discussion of the conditional independence properties of directed graphs by considering three simple examples each involving graphs having just three nodes. Together, these will motivate and illustrate the key concepts of d-separation.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1932,"The ﬁrst of the three examples is shown in Figure 8.15, and the joint distribution corresponding to this graph is easily written down using the general result (8.5) to give p(a, b, c) = p(a|c)p(b|c)p(c).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,373,1933,"If none of the variables are observed, then we can investigate whether a and b are independent by marginalizing both sides of (8.23) with respect to c to give p(a, b) =  c p(a|c)p(b|c)p(c).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1934,Figure 8.16 As in Figure 8.15 but where we have conditioned on the value of variable c.,Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1935,Figure 8.17 The second of our three examples of 3-node graphs used to motivate the conditional indepen- dence framework for directed graphical models.,Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1936,"In general, this does not factorize into the product p(a)p(b), and so a ̸⊥⊥b | ∅ (8.25) \end{verbatim} egin{verbatim} c a b where ∅denotes the empty set, and the symbol ̸⊥⊥means that the conditional inde- pendence property does not hold in general. Of course, it may hold for a particular distribution by virtue of the speciﬁc numerical values associated with the various conditional probabilities, but it does not follow in general from the structure of the graph.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1937,"Now suppose we condition on the variable c, as represented by the graph of Figure 8.16. From (8.23), we can easily write down the conditional distribution of a and b, given c, in the form p(a, b|c) = p(a, b, c) p(c) = p(a|c)p(b|c) and so we obtain the conditional independence property a ⊥⊥b | c.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1938,"We can provide a simple graphical interpretation of this result by considering the path from node a to node b via c. The node c is said to be tail-to-tail with re- spect to this path because the node is connected to the tails of the two arrows, and the presence of such a path connecting nodes a and b causes these nodes to be de- pendent. However, when we condition on node c, as in Figure 8.16, the conditioned node ‘blocks’ the path from a to b and causes a and b to become (conditionally) independent.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1939,"We can similarly consider the graph shown in Figure 8.17. The joint distribution corresponding to this graph is again obtained from our general formula (8.5) to give p(a, b, c) = p(a)p(c|a)p(b|c).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,374,1940,"First of all, suppose that none of the variables are observed. Again, we can test to see if a and b are independent by marginalizing over c to give p(a, b) = p(a)  c p(c|a)p(b|c) = p(a)p(b|a).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1941,Figure 8.18 As in Figure 8.17 but now conditioning on node c.,Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1942,Figure 8.19 The last of our three examples of 3-node graphs used to explore conditional independence properties in graphi- cal models. This graph has rather different properties from the two previous examples.,Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1943,"which in general does not factorize into p(a)p(b), and so a ̸⊥⊥b | ∅ (8.27) as before.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1944,"Now suppose we condition on node c, as shown in Figure 8.18. Using Bayes’ theorem, together with (8.26), we obtain p(a, b|c) = p(a, b, c) p(c) = p(a)p(c|a)p(b|c) p(c) = p(a|c)p(b|c) and so again we obtain the conditional independence property a ⊥⊥b | c.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1945,"As before, we can interpret these results graphically. The node c is said to be head-to-tail with respect to the path from node a to node b. Such a path connects nodes a and b and renders them dependent. If we now observe c, as in Figure 8.18, then this observation ‘blocks’ the path from a to b and so we obtain the conditional independence property a ⊥⊥b | c.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1946,"Finally, we consider the third of our 3-node examples, shown by the graph in Figure 8.19. As we shall see, this has a more subtle behaviour than the two previous graphs.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,375,1947,"The joint distribution can again be written down using our general result (8.5) to give p(a, b, c) = p(a)p(b)p(c|a, b).",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1948,"Figure 8.20 As in Figure 8.19 but conditioning on the value of node c. In this graph, the act of conditioning induces a depen- dence between a and b.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1949,"Consider ﬁrst the case where none of the variables are observed. Marginalizing both sides of (8.28) over c we obtain p(a, b) = p(a)p(b) c a b \end{verbatim} egin{verbatim} c a b and so a and b are independent with no variables observed, in contrast to the two previous examples. We can write this result as a ⊥⊥b | ∅.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1950,"Now suppose we condition on c, as indicated in Figure 8.20. The conditional distri- bution of a and b is then given by p(a, b|c) = p(a, b, c) p(c) = p(a)p(b)p(c|a, b) p(c) which in general does not factorize into the product p(a)p(b), and so a ̸⊥⊥b | c.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1951,"Thus our third example has the opposite behaviour from the ﬁrst two. Graphically, we say that node c is head-to-head with respect to the path from a to b because it connects to the heads of the two arrows. When node c is unobserved, it ‘blocks’ the path, and the variables a and b are independent. However, conditioning on c ‘unblocks’ the path and renders a and b dependent.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1952,"There is one more subtlety associated with this third example that we need to consider. First we introduce some more terminology. We say that node y is a de- scendant of node x if there is a path from x to y in which each step of the path follows the directions of the arrows. Then it can be shown that a head-to-head path will become unblocked if either the node, or any of its descendants, is observed.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1953,"In summary, a tail-to-tail node or a head-to-tail node leaves a path unblocked unless it is observed in which case it blocks the path. By contrast, a head-to-head node blocks a path if it is unobserved, but once the node, and/or at least one of its descendants, is observed the path becomes unblocked.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,376,1954,"It is worth spending a moment to understand further the unusual behaviour of the graph of Figure 8.20. Consider a particular instance of such a graph corresponding to a problem with three binary random variables relating to the fuel system on a car, as shown in Figure 8.21.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,377,1955,"Figure 8.21 An example of a 3-node graph used to illustrate the phenomenon of ‘explaining away’. The three nodes represent the state of the battery (B), the state of the fuel tank (F) and the reading on the electric fuel gauge (G). See the text for details.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,377,1956,"The variables are called B, representing the state of a battery that is either charged (B = 1) or ﬂat (B = 0), F representing the state of the fuel tank that is either full of fuel (F = 1) or empty (F = 0), and G, which is the state of an electric fuel gauge and which indicates either full (G = 1) or empty \end{verbatim} egin{verbatim} G B F G B F G B F (G = 0). The battery is either charged or ﬂat, and independently the fuel tank is either full or empty, with prior probabilities p(B = 1) = 0.9 p(F = 1) = 0.9.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,377,1957,"Given the state of the fuel tank and the battery, the fuel gauge reads full with proba- bilities given by p(G = 1|B = 1, F = 1) = 0.8 p(G = 1|B = 1, F = 0) = 0.2 p(G = 1|B = 0, F = 1) = 0.2 p(G = 1|B = 0, F = 0) = 0.1 so this is a rather unreliable fuel gauge! All remaining probabilities are determined by the requirement that probabilities sum to one, and so we have a complete speciﬁ- cation of the probabilistic model.",Three example graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,378,1958,"Before we observe any data, the prior probability of the fuel tank being empty is p(F = 0) = 0.1. Now suppose that we observe the fuel gauge and discover that it reads empty, i.e., G = 0, corresponding to the middle graph in Figure 8.21. We can use Bayes’ theorem to evaluate the posterior probability of the fuel tank being empty. First we evaluate the denominator for Bayes’ theorem given by p(G = 0) =  B∈{0,1}  F ∈{0,1} p(G = 0|B, F)p(B)p(F) = 0.315 (8.30) and similarly we evaluate p(G = 0|F = 0) =  B∈{0,1} p(G = 0|B, F = 0)p(B) = 0.81 (8.31) and using these results we have p(F = 0|G = 0) = p(G = 0|F = 0)p(F = 0) p(G = 0) ≃0.257 (8.32) \end{verbatim} egin{verbatim} and so p(F = 0|G = 0) > p(F = 0). Thus observing that the gauge reads empty makes it more likely that the tank is indeed empty, as we would intuitively expect.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,378,1959,"Next suppose that we also check the state of the battery and ﬁnd that it is ﬂat, i.e., B = 0. We have now observed the states of both the fuel gauge and the battery, as shown by the right-hand graph in Figure 8.21. The posterior probability that the fuel tank is empty given the observations of both the fuel gauge and the battery state is then given by p(F = 0|G = 0, B = 0) = p(G = 0|B = 0, F = 0)p(F = 0)  F ∈{0,1} p(G = 0|B = 0, F)p(F) ≃0.111 (8.33) where the prior probability p(B = 0) has cancelled between numerator and denom- inator. Thus the probability that the tank is empty has decreased (from 0.257 to 0.111) as a result of the observation of the state of the battery. This accords with our intuition that ﬁnding out that the battery is ﬂat explains away the observation that the fuel gauge reads empty. We see that the state of the fuel tank and that of the battery have indeed become dependent on each other as a result of observing the reading on the fuel gauge. In fact, this would also be the case if, instead of observing the fuel gauge directly, we observed the state of some descendant of G. Note that the probability p(F = 0|G = 0, B = 0) ≃0.111 is greater than the prior probability p(F = 0) = 0.1 because the observation that the fuel gauge reads zero still provides some evidence in favour of an empty fuel tank.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,378,1960,"We now give a general statement of the d-separation property (Pearl, 1988) for directed graphs. Consider a general directed graph in which A, B, and C are arbi- trary nonintersecting sets of nodes (whose union may be smaller than the complete set of nodes in the graph). We wish to ascertain whether a particular conditional independence statement A ⊥⊥B | C is implied by a given directed acyclic graph. To do so, we consider all possible paths from any node in A to any node in B. Any such path is said to be blocked if it includes a node such that either (a) the arrows on the path meet either head-to-tail or tail-to-tail at the node, and the node is in the set C, or (b) the arrows meet head-to-head at the node, and neither the node, nor any of its descendants, is in the set C.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,378,1961,"If all paths are blocked, then A is said to be d-separated from B by C, and the joint distribution over all of the variables in the graph will satisfy A ⊥⊥B | C.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,378,1962,"The concept of d-separation is illustrated in Figure 8.22. In graph (a), the path from a to b is not blocked by node f because it is a tail-to-tail node for this path and is not observed, nor is it blocked by node e because, although the latter is a head-to-head node, it has a descendant c because is in the conditioning set. Thus the conditional independence statement a ⊥⊥b | c does not follow from this graph.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,379,1963,Figure 8.22 Illustration of the con- cept of d-separation. See the text for details.,D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,379,1964,"Figure 8.23 (a) Directed graph corre- sponding to the problem of inferring the mean µ of a univariate Gaussian dis- tribution from observations x1, . . . , xN.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,379,1965,"In graph (b), the path from a to b is blocked by node f because this is a tail-to-tail node that is observed, and so the conditional independence property a ⊥⊥b | f will \end{verbatim} egin{verbatim} f e b a c (a) f e b a c (b) be satisﬁed by any distribution that factorizes according to this graph. Note that this path is also blocked by node e because e is a head-to-head node and neither it nor its descendant are in the conditioning set.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,379,1966,"For the purposes of d-separation, parameters such as α and σ2 in Figure 8.5, indicated by small ﬁlled circles, behave in the same was as observed nodes. How- ever, there are no marginal distributions associated with such nodes. Consequently parameter nodes never themselves have parents and so all paths through these nodes will always be tail-to-tail and hence blocked. Consequently they play no role in Another example of conditional independence and d-separation is provided by the concept of i.i.d. (independent identically distributed) data introduced in Sec- tion 1.2.4. Consider the problem of ﬁnding the posterior distribution for the mean of a univariate Gaussian distribution. This can be represented by the directed graph shown in Figure 8.23 in which the joint distribution is deﬁned by a prior p(µ) to- gether with a set of conditional distributions p(xn|µ) for n = 1, . . . , N. In practice, we observe D = {x1, . . . , xN} and our goal is to infer µ. Suppose, for a moment, that we condition on µ and consider the joint distribution of the observations. Using d-separation, we note that there is a unique path from any xi to any other xj̸=i and that this path is tail-to-tail with respect to the observed node µ. Every such path is blocked and so the observations D = {x1, . . . , xN} are independent given µ, so that p(D|µ) = N  n=1 p(xn|µ).",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,379,1967,graph drawn using the plate notation.,D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1968,Figure 8.24 A graphical representation of the ‘naive Bayes’ model for classiﬁcation.,D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1969,"class label z, the components of the observed vector x = (x1, . . . , xD)T are assumed to be independent.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1970,"However, if we integrate over µ, the observations are in general no longer indepen- dent p(D) =  ∞ 0 p(D|µ)p(µ) dµ ̸= N  n=1 p(xn).",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1971,"Here µ is a latent variable, because its value is not observed. Another example of a model representing i.i.d. data is the graph in Figure 8.7 corresponding to Bayesian polynomial regression. Here the stochastic nodes corre- spond to {tn}, w and t. We see that the node for w is tail-to-tail with respect to the path fromt to any one of the nodes tn and so we have the following conditional independence property t ⊥⊥tn | w.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1972,"Thus, conditioned on the polynomial coefﬁcients w, the predictive distribution for t is independent of the training data {t1, . . . , tN}. We can therefore ﬁrst use the training data to determine the posterior distribution over the coefﬁcients w and then we can discard the training data and use the posterior distribution for w to make predictions oft for new input observations x.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,380,1973,"A related graphical structure arises in an approach to classiﬁcation called the naive Bayes model, in which we use conditional independence assumptions to sim- plify the model structure. Suppose our observed variable consists of a D-dimensional vector x = (x1, . . . , xD)T, and we wish to assign observed values of x to one of K classes. Using the 1-of-K encoding scheme, we can represent these classes by a K- dimensional binary vector z. We can then deﬁne a generative model by introducing a multinomial prior p(z|µ) over the class labels, where the kth component µk of µ is the prior probability of class Ck, together with a conditional distribution p(x|z) for the observed vector x. The key assumption of the naive Bayes model is that, conditioned on the class z, the distributions of the input variables x1, . . . , xD are in- dependent. The graphical representation of this model is shown in Figure 8.24. We see that observation of z blocks the path between xi and xj for j ̸= i (because such paths are tail-to-tail at the node z) and so xi and xj are conditionally independent given z. If, however, we marginalize out z (so that z is unobserved) the tail-to-tail path from xi to xj is no longer blocked. This tells us that in general the marginal density p(x) will not factorize with respect to the components of x. We encountered a simple application of the naive Bayes model in the context of fusing data from different sources for medical diagnosis in Section 1.5.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1974,"If we are given a labelled training set, comprising inputs {x1, . . . , xN} together with their class labels, then we can ﬁt the naive Bayes model to the training data \end{verbatim} egin{verbatim} using maximum likelihood assuming that the data are drawn independently from the model. The solution is obtained by ﬁtting the model for each class separately using the correspondingly labelled data. As an example, suppose that the probability density within each class is chosen to be Gaussian. In this case, the naive Bayes assumption then implies that the covariance matrix for each Gaussian is diagonal, and the contours of constant density within each class will be axis-aligned ellipsoids.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1975,"The marginal density, however, is given by a superposition of diagonal Gaussians (with weighting coefﬁcients given by the class priors) and so will no longer factorize with respect to its components.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1976,"The naive Bayes assumption is helpful when the dimensionality D of the input space is high, making density estimation in the full D-dimensional space more chal- lenging. It is also useful if the input vector contains both discrete and continuous variables, since each can be represented separately using appropriate models (e.g., Bernoulli distributions for binary observations or Gaussians for real-valued vari- ables). The conditional independence assumption of this model is clearly a strong one that may lead to rather poor representations of the class-conditional densities.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1977,"Nevertheless, even if this assumption is not precisely satisﬁed, the model may still give good classiﬁcation performance in practice because the decision boundaries can be insensitive to some of the details in the class-conditional densities, as illustrated in Figure 1.27.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1978,"We have seen that a particular directed graph represents a speciﬁc decomposition of a joint probability distribution into a product of conditional probabilities. The graph also expresses a set of conditional independence statements obtained through the d-separation criterion, and the d-separation theorem is really an expression of the equivalence of these two properties. In order to make this clear, it is helpful to think of a directed graph as a ﬁlter. Suppose we consider a particular joint probability distribution p(x) over the variables x corresponding to the (nonobserved) nodes of the graph. The ﬁlter will allow this distribution to pass through if, and only if, it can be expressed in terms of the factorization (8.5) implied by the graph. If we present to the ﬁlter the set of all possible distributions p(x) over the set of variables x, then the subset of distributions that are passed by the ﬁlter will be denoted DF, for directed factorization. This is illustrated in Figure 8.25. Alternatively, we can use the graph as a different kind of ﬁlter by ﬁrst listing all of the conditional independence properties obtained by applying the d-separation criterion to the graph, and then allowing a distribution to pass only if it satisﬁes all of these properties. If we present all possible distributions p(x) to this second kind of ﬁlter, then the d-separation theorem tells us that the set of distributions that will be allowed through is precisely the set DF.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,381,1979,"It should be emphasized that the conditional independence properties obtained from d-separation apply to any probabilistic model described by that particular di- rected graph. This will be true, for instance, whether the variables are discrete or continuous or a combination of these. Again, we see that a particular graph is de- scribing a whole family of probability distributions.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,382,1980,"Figure 8.25 We can view a graphical model (in this case a directed graph) as a ﬁlter in which a prob- ability distribution p(x) is allowed through the ﬁlter if, and only if, it satisﬁes the directed factorization property (8.5). The set of all possible probability distributions p(x) that pass through the ﬁlter is denoted DF. We can alternatively use the graph to ﬁlter distributions according to whether they respect all of the conditional independencies implied by the d-separation properties of the graph. The d-separation theorem says that it is the same set of distributions DF that will be allowed through this second kind of ﬁlter.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,382,1981,"At one extreme we have a fully connected graph that exhibits no conditional in- dependence properties at all, and which can represent any possible joint probability distribution over the given variables. The set DF will contain all possible distribu- \end{verbatim} egin{verbatim} p(x) DF tions p(x). At the other extreme, we have the fully disconnected graph, i.e., one having no links at all. This corresponds to joint distributions which factorize into the product of the marginal distributions over the variables comprising the nodes of the graph.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,382,1982,"Note that for any given graph, the set of distributions DF will include any dis- tributions that have additional independence properties beyond those described by the graph. For instance, a fully factorized distribution will always be passed through the ﬁlter implied by any graph over the corresponding set of variables.",D-separation
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,383,1983,"Figure 8.26 The Markov blanket of a node xi comprises the set of parents, children and co-parents of the node. It has the property that the conditional distribution of xi, conditioned on all the remaining variables in the graph, is dependent only on the variables in the Markov blanket.",Markov Random Fields
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,383,1984,"We end our discussion of conditional independence properties by exploring the concept of a Markov blanket or Markov boundary. Consider a joint distribution p(x1, . . . , xD) represented by a directed graph having D nodes, and consider the conditional distribution of a particular node with variables xi conditioned on all of the remaining variables xj̸=i. Using the factorization property (8.5), we can express this conditional distribution in the form p(xi|x{j̸=i}) = p(x1, . . . , xD)  p(x1, . . . , xD) dxi =  k p(xk|pak)   k p(xk|pak) dxi in which the integral is replaced by a summation in the case of discrete variables. We now observe that any factor p(xk|pak) that does not have any functional dependence on xi can be taken outside the integral over xi, and will therefore cancel between numerator and denominator. The only factors that remain will be the conditional distribution p(xi|pai) for node xi itself, together with the conditional distributions for any nodes xk such that node xi is in the conditioning set of p(xk|pak), in other words for which xi is a parent of xk. The conditional p(xi|pai) will depend on the parents of node xi, whereas the conditionals p(xk|pak) will depend on the children \end{verbatim} egin{verbatim} xi of xi as well as on the co-parents, in other words variables corresponding to parents of node xk other than node xi. The set of nodes comprising the parents, the children and the co-parents is called the Markov blanket and is illustrated in Figure 8.26. We can think of the Markov blanket of a node xi as being the minimal set of nodes that isolates xi from the rest of the graph. Note that it is not sufﬁcient to include only the parents and children of node xi because the phenomenon of explaining away means that observations of the child nodes will not block paths to the co-parents. We must therefore observe the co-parent nodes also.",Markov Random Fields
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,383,1985,We have seen that directed graphical models specify a factorization of the joint dis- tribution over a set of variables into a product of local conditional distributions. They also deﬁne a set of conditional independence properties that must be satisﬁed by any distribution that factorizes according to the graph. We turn now to the second ma- jor class of graphical models that are described by undirected graphs and that again specify both a factorization and a set of conditional independence relations.,Markov Random Fields
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,383,1986,"A Markov random ﬁeld, also known as a Markov network or an undirected graphical model (Kindermann and Snell, 1980), has a set of nodes each of which corresponds to a variable or group of variables, as well as a set of links each of which connects a pair of nodes. The links are undirected, that is they do not carry arrows. In the case of undirected graphs, it is convenient to begin with a discussion of conditional independence properties.",Markov Random Fields
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1987,Figure 8.27 An example of an undirected graph in which every path from any node in set A to any node in set B passes through at least one node in set C.,Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1988,"In the case of directed graphs, we saw that it was possible to test whether a par- ticular conditional independence property holds by applying a graphical test called d-separation. This involved testing whether or not the paths connecting two sets of nodes were ‘blocked’. The deﬁnition of blocked, however, was somewhat subtle due to the presence of paths having head-to-head nodes. We might ask whether it is possible to deﬁne an alternative graphical semantics for probability distributions such that conditional independence is determined by simple graph separation. This is indeed the case and corresponds to undirected graphical models. By removing the \end{verbatim} egin{verbatim} Conse- quently the conditional independence property A ⊥⊥B | C holds for any probability distribution described by this graph.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1989,"directionality from the links of the graph, the asymmetry between parent and child nodes is removed, and so the subtleties associated with head-to-head nodes no longer arise.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1990,"Suppose that in an undirected graph we identify three sets of nodes, denoted A, B, and C, and that we consider the conditional independence property A ⊥⊥B | C.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1991,"To test whether this property is satisﬁed by a probability distribution deﬁned by a graph we consider all possible paths that connect nodes in set A to nodes in set B. If all such paths pass through one or more nodes in set C, then all such paths are ‘blocked’ and so the conditional independence property holds. However, if there is at least one such path that is not blocked, then the property does not necessarily hold, or more precisely there will exist at least some distributions corresponding to the graph that do not satisfy this conditional independence relation. This is illustrated with an example in Figure 8.27. Note that this is exactly the same as the d-separation crite- rion except that there is no ‘explaining away’ phenomenon. Testing for conditional independence in undirected graphs is therefore simpler than in directed graphs.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1992,"An alternative way to view the conditional independence test is to imagine re- moving all nodes in set C from the graph together with any links that connect to those nodes. We then ask if there exists a path that connects any node in A to any node in B. If there are no such paths, then the conditional independence property must hold.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1993,"The Markov blanket for an undirected graph takes a particularly simple form, because a node will be conditionally independent of all other nodes conditioned only on the neighbouring nodes, as illustrated in Figure 8.28.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,384,1994,"We now seek a factorization rule for undirected graphs that will correspond to the above conditional independence test. Again, this will involve expressing the joint distribution p(x) as a product of functions deﬁned over sets of variables that are local to the graph. We therefore need to decide what is the appropriate notion of locality in this case.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,1995,"Figure 8.28 For an undirected graph, the Markov blanket of a node xi consists of the set of neighbouring nodes. It has the property that the conditional distribution of xi, conditioned on all the remaining variables in the graph, is dependent only on the variables in the Markov blanket.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,1996,Figure 8.29 A four-node undirected graph showing a clique (outlined in green) and a maximal clique (outlined in blue).,Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,1997,"If we consider two nodes xi and xj that are not connected by a link, then these variables must be conditionally independent given all other nodes in the graph. This follows from the fact that there is no direct path between the two nodes, and all other paths pass through nodes that are observed, and hence those paths are blocked. This conditional independence property can be expressed as p(xi, xj|x\{i,j}) = p(xi|x\{i,j})p(xj|x\{i,j}) (8.38) where x\{i,j} denotes the set x of all variables with xi and xj removed. The factor- ization of the joint distribution must therefore be such that xi and xj do not appear in the same factor in order for the conditional independence property to hold for all possible distributions belonging to the graph.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,1998,"This leads us to consider a graphical concept called a clique, which is deﬁned as a subset of the nodes in a graph such that there exists a link between all pairs of nodes in the subset. In other words, the set of nodes in a clique is fully connected.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,1999,"Furthermore, a maximal clique is a clique such that it is not possible to include any other nodes from the graph in the set without it ceasing to be a clique. These concepts are illustrated by the undirected graph over four variables shown in Figure 8.29. This graph has ﬁve cliques of two nodes given by {x1, x2}, {x2, x3}, {x3, x4}, {x4, x2}, and {x1, x3}, as well as two maximal cliques given by {x1, x2, x3} and {x2, x3, x4}.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,385,2000,"The set {x1, x2, x3, x4} is not a clique because of the missing link from x1 to x4. We can therefore deﬁne the factors in the decomposition of the joint distribution to be functions of the variables in the cliques. In fact, we can consider functions of the maximal cliques, without loss of generality, because other cliques must be subsets of maximal cliques. Thus, if {x1, x2, x3} is a maximal clique and we deﬁne an arbitrary function over this clique, then including another factor deﬁned over a subset of these variables would be redundant.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2001,Let us denote a clique by C and the set of variables in that clique by xC. Then x1 x2 x3 x4 \end{verbatim} egin{verbatim} the joint distribution is written as a product of potential functions ψC(xC) over the maximal cliques of the graph p(x) = 1 Z  C ψC(xC).,Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2002,"Here the quantity Z, sometimes called the partition function, is a normalization con- stant and is given by Z =  x  C ψC(xC) (8.40) which ensures that the distribution p(x) given by (8.39) is correctly normalized.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2003,"By considering only potential functions which satisfy ψC(xC) ⩾0 we ensure that p(x) ⩾0. In (8.40) we have assumed that x comprises discrete variables, but the framework is equally applicable to continuous variables, or a combination of the two, in which the summation is replaced by the appropriate combination of summation and integration.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2004,"Note that we do not restrict the choice of potential functions to those that have a speciﬁc probabilistic interpretation as marginal or conditional distributions. This is in contrast to directed graphs in which each factor represents the conditional distribu- tion of the corresponding variable, conditioned on the state of its parents. However, in special cases, for instance where the undirected graph is constructed by starting with a directed graph, the potential functions may indeed have such an interpretation, as we shall see shortly.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2005,"One consequence of the generality of the potential functions ψC(xC) is that their product will in general not be correctly normalized. We therefore have to in- troduce an explicit normalization factor given by (8.40). Recall that for directed graphs, the joint distribution was automatically normalized as a consequence of the normalization of each of the conditional distributions in the factorization.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,386,2006,"The presence of this normalization constant is one of the major limitations of undirected graphs. If we have a model with M discrete nodes each having K states, then the evaluation of the normalization term involves summing over KM states and so (in the worst case) is exponential in the size of the model. The partition function is needed for parameter learning because it will be a function of any parameters that govern the potential functions ψC(xC). However, for evaluation of local conditional distributions, the partition function is not needed because a conditional is the ratio of two marginals, and the partition function cancels between numerator and denom- inator when evaluating this ratio. Similarly, for evaluating local marginal probabil- ities we can work with the unnormalized joint distribution and then normalize the marginals explicitly at the end. Provided the marginals only involves a small number of variables, the evaluation of their normalization coefﬁcient will be feasible.",Factorization properties
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2007,"So far, we have discussed the notion of conditional independence based on sim- ple graph separation and we have proposed a factorization of the joint distribution that is intended to correspond to this conditional independence structure. However, we have not made any formal connection between conditional independence and factorization for undirected graphs. To do so we need to restrict attention to poten- tial functions ψC(xC) that are strictly positive (i.e., never zero or negative for any \end{verbatim} egin{verbatim} choice of xC). Given this restriction, we can make a precise relationship between factorization and conditional independence.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2008,"To do this we again return to the concept of a graphical model as a ﬁlter, corre- sponding to Figure 8.25. Consider the set of all possible distributions deﬁned over a ﬁxed set of variables corresponding to the nodes of a particular undirected graph.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2009,"We can deﬁne UI to be the set of such distributions that are consistent with the set of conditional independence statements that can be read from the graph using graph separation. Similarly, we can deﬁne UF to be the set of such distributions that can be expressed as a factorization of the form (8.39) with respect to the maximal cliques of the graph. The Hammersley-Clifford theorem (Clifford, 1990) states that the sets UI and UF are identical.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2010,"Because we are restricted to potential functions which are strictly positive it is convenient to express them as exponentials, so that ψC(xC) = exp {−E(xC)} (8.41) where E(xC) is called an energy function, and the exponential representation is called the Boltzmann distribution. The joint distribution is deﬁned as the product of potentials, and so the total energy is obtained by adding the energies of each of the maximal cliques.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2011,"In contrast to the factors in the joint distribution for a directed graph, the po- tentials in an undirected graph do not have a speciﬁc probabilistic interpretation.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2012,"Although this gives greater ﬂexibility in choosing the potential functions, because there is no normalization constraint, it does raise the question of how to motivate a choice of potential function for a particular application. This can be done by view- ing the potential function as expressing which conﬁgurations of the local variables are preferred to others. Global conﬁgurations that have a relatively high probability are those that ﬁnd a good balance in satisfying the (possibly conﬂicting) inﬂuences of the clique potentials. We turn now to a speciﬁc example to illustrate the use of undirected graphs.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2013,"We can illustrate the application of undirected graphs using an example of noise removal from a binary image (Besag, 1974; Geman and Geman, 1984; Besag, 1986).",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,387,2014,"Although a very simple example, this is typical of more sophisticated applications. Let the observed noisy image be described by an array of binary pixel values yi ∈ {−1, +1}, where the index i = 1, . . . , D runs over all pixels. We shall suppose that the image is obtained by taking an unknown noise-free image, described by binary pixel values xi ∈{−1, +1} and randomly ﬂipping the sign of pixels with some small probability. An example binary image, together with a noise corrupted image obtained by ﬂipping the sign of the pixels with probability 10%, is shown in Figure 8.30. Given the noisy image, our goal is to recover the original noise-free image.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,388,2015,"Figure 8.30 Illustration of image de-noising using a Markov random ﬁeld. The top row shows the original binary image on the left and the corrupted image after randomly changing 10% of the pixels on the right. The bottom row shows the restored images obtained using iterated conditional models (ICM) on the left and using the graph-cut algorithm on the right. ICM produces an image where 96% of the pixels agree with the original image, whereas the corresponding number for graph-cut is 99%.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,388,2016,"Because the noise level is small, we know that there will be a strong correlation between xi and yi. We also know that neighbouring pixels xi and xj in an image are strongly correlated. This prior knowledge can be captured using the Markov \end{verbatim} egin{verbatim} random ﬁeld model whose undirected graph is shown in Figure 8.31. This graph has two types of cliques, each of which contains two variables. The cliques of the form {xi, yi} have an associated energy function that expresses the correlation between these variables. We choose a very simple energy function for these cliques of the form −ηxiyi where η is a positive constant. This has the desired effect of giving a lower energy (thus encouraging a higher probability) when xi and yi have the same sign and a higher energy when they have the opposite sign.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,388,2017,"The remaining cliques comprise pairs of variables {xi, xj} where i and j are indices of neighbouring pixels. Again, we want the energy to be lower when the pixels have the same sign than when they have the opposite sign, and so we choose an energy given by −βxixj where β is a positive constant.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,389,2018,"Figure 8.31 An undirected graphical model representing a Markov random ﬁeld for image de-noising, in which xi is a binary variable denoting the state of pixel i in the unknown noise-free image, and yi denotes the corresponding value of pixel i in the observed noisy image.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,389,2019,"Because a potential function is an arbitrary, nonnegative function over a maximal clique, we can multiply it by any nonnegative functions of subsets of the clique, or \end{verbatim} egin{verbatim} xi yi equivalently we can add the corresponding energies. In this example, this allows us to add an extra term hxi for each pixel i in the noise-free image. Such a term has the effect of biasing the model towards pixel values that have one particular sign in preference to the other.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,389,2020,"The complete energy function for the model then takes the form E(x, y) = h  i xi −β  {i,j} xixj −η  i xiyi (8.42) which deﬁnes a joint distribution over x and y given by p(x, y) = 1 Z exp{−E(x, y)}.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,389,2021,"We now ﬁx the elements of y to the observed values given by the pixels of the noisy image, which implicitly deﬁnes a conditional distribution p(x|y) over noise- free images. This is an example of the Ising model, which has been widely studied in statistical physics. For the purposes of image restoration, we wish to ﬁnd an image x having a high probability (ideally the maximum probability). To do this we shall use a simple iterative technique called iterated conditional modes, or ICM (Kittler and F¨oglein, 1984), which is simply an application of coordinate-wise gradient ascent.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,389,2022,"The idea is ﬁrst to initialize the variables {xi}, which we do by simply setting xi = yi for all i. Then we take one node xj at a time and we evaluate the total energy for the two possible states xj = +1 and xj = −1, keeping all other node variables ﬁxed, and set xj to whichever state has the lower energy. This will either leave the probability unchanged, if xj is unchanged, or will increase it. Because only one variable is changed, this is a simple local computation that can be performed efﬁciently. We then repeat the update for another site, and so on, until some suitable stopping criterion is satisﬁed. The nodes may be updated in a systematic way, for instance by repeatedly raster scanning through the image, or by choosing nodes at random.",Illustration: Image de-noising
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2023,Figure 8.32 (a) Example of a directed graph.,Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2024,"If we have a sequence of updates in which every site is visited at least once, and in which no changes to the variables are made, then by deﬁnition the algorithm \end{verbatim} egin{verbatim} (b) The equivalent undirected graph.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2025,"will have converged to a local maximum of the probability. This need not, however, correspond to the global maximum.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2026,"For the purposes of this simple illustration, we have ﬁxed the parameters to be β = 1.0, η = 2.1 and h = 0. Note that leaving h = 0 simply means that the prior probabilities of the two states of xi are equal. Starting with the observed noisy image as the initial conﬁguration, we run ICM until convergence, leading to the de-noised image shown in the lower left panel of Figure 8.30. Note that if we set β = 0, which effectively removes the links between neighbouring pixels, then the global most probable solution is given by xi = yi for all i, corresponding to the observed noisy image.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2027,"Later we shall discuss a more effective algorithm for ﬁnding high probability so- lutions called the max-product algorithm, which typically leads to better solutions, although this is still not guaranteed to ﬁnd the global maximum of the posterior dis- tribution. However, for certain classes of model, including the one given by (8.42), there exist efﬁcient algorithms based on graph cuts that are guaranteed to ﬁnd the global maximum (Greig et al., 1989; Boykov et al., 2001; Kolmogorov and Zabih, 2004). The lower right panel of Figure 8.30 shows the result of applying a graph-cut algorithm to the de-noising problem.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2028,"We have introduced two graphical frameworks for representing probability dis- tributions, corresponding to directed and undirected graphs, and it is instructive to discuss the relation between these. Consider ﬁrst the problem of taking a model that is speciﬁed using a directed graph and trying to convert it to an undirected graph. In some cases this is straightforward, as in the simple example in Figure 8.32. Here the joint distribution for the directed graph is given as a product of conditionals in the form p(x) = p(x1)p(x2|x1)p(x3|x2) · · · p(xN|xN−1).",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,390,2029,"Now let us convert this to an undirected graph representation, as shown in Fig- ure 8.32. In the undirected graph, the maximal cliques are simply the pairs of neigh- bouring nodes, and so from (8.39) we wish to write the joint distribution in the form p(x) = 1 Z ψ1,2(x1, x2)ψ2,3(x2, x3) · · · ψN−1,N(xN−1, xN).",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2030,Figure 8.33 Example of a simple directed graph (a) and the corre- sponding moral graph (b).,Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2031,"This is easily done by identifying ψ1,2(x1, x2) = p(x1)p(x2|x1) ψ2,3(x2, x3) = p(x3|x2) ...",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2032,"where we have absorbed the marginal p(x1) for the ﬁrst node into the ﬁrst potential function. Note that in this case, the partition function Z = 1.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2033,"Let us consider how to generalize this construction, so that we can convert any distribution speciﬁed by a factorization over a directed graph into one speciﬁed by a factorization over an undirected graph. This can be achieved if the clique potentials of the undirected graph are given by the conditional distributions of the directed graph. In order for this to be valid, we must ensure that the set of variables that appears in each of the conditional distributions is a member of at least one clique of the undirected graph. For nodes on the directed graph having just one parent, this is achieved simply by replacing the directed link with an undirected link. However, for nodes in the directed graph having more than one parent, this is not sufﬁcient. These are nodes that have ‘head-to-head’ paths encountered in our discussion of conditional independence. Consider a simple directed graph over 4 nodes shown in Figure 8.33.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2034,"The joint distribution for the directed graph takes the form p(x) = p(x1)p(x2)p(x3)p(x4|x1, x2, x3).",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,391,2035,"We see that the factor p(x4|x1, x2, x3) involves the four variables x1, x2, x3, and x4, and so these must all belong to a single clique if this conditional distribution is to be absorbed into a clique potential. To ensure this, we add extra links between all pairs of parents of the node x4. Anachronistically, this process of ‘marrying the parents’ has become known as moralization, and the resulting undirected graph, after dropping the arrows, is called the moral graph. It is important to observe that the moral graph in this example is fully connected and so exhibits no conditional independence properties, in contrast to the original directed graph.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2036,"Figure 8.34 Venn diagram illustrating the set of all distributions P over a given set of variables, together with the set of distributions D that can be represented as a perfect map using a directed graph, and the set U that can be represented as a perfect map using an undirected graph.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2037,"Thus in general to convert a directed graph into an undirected graph, we ﬁrst add additional undirected links between all pairs of parents for each node in the graph and \end{verbatim} egin{verbatim} then drop the arrows on the original links to give the moral graph. Then we initialize all of the clique potentials of the moral graph to 1. We then take each conditional distribution factor in the original directed graph and multiply it into one of the clique potentials. There will always exist at least one maximal clique that contains all of the variables in the factor as a result of the moralization step. Note that in all cases the partition function is given by Z = 1.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2038,The process of converting a directed graph into an undirected graph plays an important role in exact inference techniques such as the junction tree algorithm.,Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2039,Converting from an undirected to a directed representation is much less common and in general presents problems due to the normalization constraints.,Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2040,"We saw that in going from a directed to an undirected representation we had to discard some conditional independence properties from the graph. Of course, we could always trivially convert any distribution over a directed graph into one over an undirected graph by simply using a fully connected undirected graph. This would, however, discard all conditional independence properties and so would be vacuous.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2041,The process of moralization adds the fewest extra links and so retains the maximum number of independence properties.,Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2042,"We have seen that the procedure for determining the conditional independence properties is different between directed and undirected graphs. It turns out that the two types of graph can express different conditional independence properties, and it is worth exploring this issue in more detail. To do so, we return to the view of a speciﬁc (directed or undirected) graph as a ﬁlter, so that the set of all possible distributions over the given variables could be reduced to a subset that respects the conditional independencies implied by the graph. A graph is said to be a D map (for ‘dependency map’) of a distribution if every conditional independence statement satisﬁed by the distribution is reﬂected in the graph. Thus a completely disconnected graph (no links) will be a trivial D map for any distribution.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,392,2043,"Alternatively, we can consider a speciﬁc distribution and ask which graphs have the appropriate conditional independence properties. If every conditional indepen- dence statement implied by a graph is satisﬁed by a speciﬁc distribution, then the graph is said to be an I map (for ‘independence map’) of that distribution. Clearly a fully connected graph will be a trivial I map for any distribution.",Relation to directed graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2044,Figure 8.35 A directed graph whose conditional independence properties cannot be expressed using an undirected graph over the same three variables.,Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2045,Figure 8.36 An undirected graph whose conditional independence properties cannot be expressed in terms of a directed graph over the same variables.,Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2046,"If it is the case that every conditional independence property of the distribution is reﬂected in the graph, and vice versa, then the graph is said to be a perfect map for P U D \end{verbatim} egin{verbatim} C A B that distribution. A perfect map is therefore both an I map and a D map.",Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2047,Consider the set of distributions such that for each distribution there exists a directed graph that is a perfect map. This set is distinct from the set of distributions such that for each distribution there exists an undirected graph that is a perfect map.,Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2048,In addition there are distributions for which neither directed nor undirected graphs offer a perfect map. This is illustrated as a Venn diagram in Figure 8.34.,Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2049,Figure 8.35 shows an example of a directed graph that is a perfect map for a distribution satisfying the conditional independence properties A ⊥⊥B | ∅and A ̸⊥⊥B | C. There is no corresponding undirected graph over the same three vari- ables that is a perfect map.,Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2050,"Conversely, consider the undirected graph over four variables shown in Fig- ure 8.36. This graph exhibits the properties A ̸⊥⊥B | ∅, C ⊥⊥D | A ∪B and A ⊥⊥B | C ∪D. There is no directed graph over four variables that implies the same set of conditional independence properties.",Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,393,2051,"The graphical framework can be extended in a consistent way to graphs that include both directed and undirected links. These are called chain graphs (Lauritzen and Wermuth, 1989; Frydenberg, 1990), and contain the directed and undirected graphs considered so far as special cases. Although such graphs can represent a broader class of distributions than either directed or undirected alone, there remain distributions for which even a chain graph cannot provide a perfect map. Chain graphs are not discussed further in this book.",Inference in Graphical Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2052,Figure 8.37 A graphical representation of Bayes’ theorem.,Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2053,"We turn now to the problem of inference in graphical models, in which some of the nodes in a graph are clamped to observed values, and we wish to compute the posterior distributions of one or more subsets of other nodes. As we shall see, we can exploit the graphical structure both to ﬁnd efﬁcient algorithms for inference, and \end{verbatim} egin{verbatim} See the text for details.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2054,"to make the structure of those algorithms transparent. Speciﬁcally, we shall see that many algorithms can be expressed in terms of the propagation of local messages around the graph. In this section, we shall focus primarily on techniques for exact inference, and in Chapter 10 we shall consider a number of approximate inference algorithms.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2055,"To start with, let us consider the graphical interpretation of Bayes’ theorem. Suppose we decompose the joint distribution p(x, y) over two variables x and y into a product of factors in the form p(x, y) = p(x)p(y|x). This can be represented by the directed graph shown in Figure 8.37(a). Now suppose we observe the value of y, as indicated by the shaded node in Figure 8.37(b). We can view the marginal distribution p(x) as a prior over the latent variable x, and our goal is to infer the corresponding posterior distribution over x. Using the sum and product rules of probability we can evaluate p(y) =  x′ p(y|x′)p(x′) (8.47) which can then be used in Bayes’ theorem to calculate p(x|y) = p(y|x)p(x) p(y) .",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2056,"Thus the joint distribution is now expressed in terms of p(y) and p(x|y). From a graphical perspective, the joint distribution p(x, y) is now represented by the graph shown in Figure 8.37(c), in which the direction of the arrow is reversed. This is the simplest example of an inference problem for a graphical model.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2057,Now consider a more complex problem involving the chain of nodes of the form shown in Figure 8.32. This example will lay the foundation for a discussion of exact inference in more general graphs later in this section.,Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,394,2058,"Speciﬁcally, we shall consider the undirected graph in Figure 8.32(b). We have already seen that the directed chain can be transformed into an equivalent undirected chain. Because the directed graph does not have any nodes with more than one parent, this does not require the addition of any extra links, and the directed and undirected versions of this graph express exactly the same set of conditional inde- pendence statements.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2059,"The joint distribution for this graph takes the form p(x) = 1 Z ψ1,2(x1, x2)ψ2,3(x2, x3) · · · ψN−1,N(xN−1, xN).",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2060,"We shall consider the speciﬁc case in which the N nodes represent discrete vari- ables each having K states, in which case each potential function ψn−1,n(xn−1, xn) comprises an K × K table, and so the joint distribution has (N −1)K2 parameters.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2061,"Let us consider the inference problem of ﬁnding the marginal distribution p(xn) for a speciﬁc node xn that is part way along the chain. Note that, for the moment, there are no observed nodes. By deﬁnition, the required marginal is obtained by summing the joint distribution over all variables except xn, so that p(xn) =  x1 · · ·  xn−1  xn+1 · · ·  xN p(x).",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2062,"In a naive implementation, we would ﬁrst evaluate the joint distribution and then perform the summations explicitly. The joint distribution can be represented as a set of numbers, one for each possible value for x. Because there are N variables each with K states, there are KN values for x and so evaluation and storage of the joint distribution, as well as marginalization to obtain p(xn), all involve storage and computation that scale exponentially with the length N of the chain.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2063,"We can, however, obtain a much more efﬁcient algorithm by exploiting the con- ditional independence properties of the graphical model. If we substitute the factor- ized expression (8.49) for the joint distribution into (8.50), then we can rearrange the order of the summations and the multiplications to allow the required marginal to be evaluated much more efﬁciently. Consider for instance the summation over xN. The potential ψN−1,N(xN−1, xN) is the only one that depends on xN, and so we can perform the summation  xN ψN−1,N(xN−1, xN) (8.51) ﬁrst to give a function of xN−1. We can then use this to perform the summation over xN−1, which will involve only this new function together with the potential ψN−2,N−1(xN−2, xN−1), because this is the only other place that xN−1 appears.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,395,2064,"Similarly, the summation over x1 involves only the potential ψ1,2(x1, x2) and so can be performed separately to give a function of x2, and so on. Because each summation effectively removes a variable from the distribution, this can be viewed as the removal of a node from the graph.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,396,2065,"If we group the potentials and summations together in this way, we can express \end{verbatim} egin{verbatim} the desired marginal in the form p(xn) = 1 Z ⎡ ⎣ xn−1 ψn−1,n(xn−1, xn) · · ·  x2 ψ2,3(x2, x3)  x1 ψ1,2(x1, x2) · · · ⎤ ⎦ ( )* + µα(xn) ⎡ ⎣ xn+1 ψn,n+1(xn, xn+1) · · ·  xN ψN−1,N(xN−1, xN) · · · ⎤ ⎦ ( )* + µβ(xn) .",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,396,2066,"The reader is encouraged to study this re-ordering carefully as the underlying idea forms the basis for the later discussion of the general sum-product algorithm. Here the key concept that we are exploiting is that multiplication is distributive over addi- tion, so that ab + ac = a(b + c) (8.53) in which the left-hand side involves three arithmetic operations whereas the right- hand side reduces this to two operations.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,396,2067,"Let us work out the computational cost of evaluating the required marginal using this re-ordered expression. We have to perform N −1 summations each of which is over K states and each of which involves a function of two variables. For instance, the summation over x1 involves only the function ψ1,2(x1, x2), which is a table of K × K numbers. We have to sum this table over x1 for each value of x2 and so this has O(K2) cost. The resulting vector of K numbers is multiplied by the matrix of numbers ψ2,3(x2, x3) and so is again O(K2). Because there are N −1 summations and multiplications of this kind, the total cost of evaluating the marginal p(xn) is O(NK2). This is linear in the length of the chain, in contrast to the exponential cost of a naive approach. We have therefore been able to exploit the many conditional independence properties of this simple graph in order to obtain an efﬁcient calcula- tion. If the graph had been fully connected, there would have been no conditional independence properties, and we would have been forced to work directly with the full joint distribution.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,396,2068,We now give a powerful interpretation of this calculation in terms of the passing of local messages around on the graph. From (8.52) we see that the expression for the marginal p(xn) decomposes into the product of two factors times the normalization constant p(xn) = 1 Z µα(xn)µβ(xn).,Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2069,"Figure 8.38 The marginal distribution p(xn) for a node xn along the chain is ob- tained by multiplying the two messages µα(xn) and µβ(xn), and then normaliz- ing.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2070,"We shall interpret µα(xn) as a message passed forwards along the chain from node xn−1 to node xn. Similarly, µβ(xn) can be viewed as a message passed backwards \end{verbatim} egin{verbatim} These messages can themselves be evaluated recursively by passing mes- sages from both ends of the chain to- wards node xn.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2071,"along the chain to node xn from node xn+1. Note that each of the messages com- prises a set of K values, one for each choice of xn, and so the product of two mes- sages should be interpreted as the point-wise multiplication of the elements of the two messages to give another set of K values.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2072,"The message µα(xn) can be evaluated recursively because µα(xn) =  xn−1 ψn−1,n(xn−1, xn) ⎡ ⎣ xn−2 · · · ⎤ ⎦ =  xn−1 ψn−1,n(xn−1, xn)µα(xn−1).",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2073,and then apply (8.55) repeatedly until we reach the desired node. Note carefully the structure of the message passing equation. The outgoing message µα(xn) in (8.55) is obtained by multiplying the incoming message µα(xn−1) by the local potential involving the node variable and the outgoing variable and then summing over the node variable.,Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2074,"Similarly, the message µβ(xn) can be evaluated recursively by starting with node xN and using µβ(xn) =  xn+1 ψn+1,n(xn+1, xn) ⎡ ⎣ xn+2 · · · ⎤ ⎦ =  xn+1 ψn+1,n(xn+1, xn)µβ(xn+1).",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2075,"This recursive message passing is illustrated in Figure 8.38. The normalization con- stant Z is easily evaluated by summing the right-hand side of (8.54) over all states of xn, an operation that requires only O(K) computation.",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,397,2076,"Graphs of the form shown in Figure 8.38 are called Markov chains, and the corresponding message passing equations represent an example of the Chapman- Kolmogorov equations for Markov processes (Papoulis, 1984).",Inference on a chain
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2077,"Now suppose we wish to evaluate the marginals p(xn) for every node n ∈ {1, . . . , N} in the chain. Simply applying the above procedure separately for each node will have computational cost that is O(N 2M 2). However, such an approach would be very wasteful of computation. For instance, to ﬁnd p(x1) we need to prop- agate a message µβ(·) from node xN back to node x2. Similarly, to evaluate p(x2) we need to propagate a messages µβ(·) from node xN back to node x3. This will involve much duplicated computation because most of the messages will be identical in the two cases.",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2078,"Suppose instead we ﬁrst launch a message µβ(xN−1) starting from node xN and propagate corresponding messages all the way back to node x1, and suppose we similarly launch a message µα(x2) starting from node x1 and propagate the corre- sponding messages all the way forward to node xN. Provided we store all of the intermediate messages along the way, then any node can evaluate its marginal sim- ply by applying (8.54). The computational cost is only twice that for ﬁnding the marginal of a single node, rather than N times as much. Observe that a message has passed once in each direction across each link in the graph. Note also that the normalization constant Z need be evaluated only once, using any convenient node.",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2079,"If some of the nodes in the graph are observed, then the corresponding variables are simply clamped to their observed values and there is no summation. To see this, note that the effect of clamping a variable xn to an observed value xn can be expressed by multiplying the joint distribution by (one or more copies of) an additional function I(xn, xn), which takes the value 1 when xn = xn and the value 0 otherwise. One such function can then be absorbed into each of the potentials that contain xn. Summations over xn then contain only one term in which xn = xn.",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2080,"Now suppose we wish to calculate the joint distribution p(xn−1, xn) for two neighbouring nodes on the chain. This is similar to the evaluation of the marginal for a single node, except that there are now two variables that are not summed out.",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2081,"A few moments thought will show that the required joint distribution can be written in the form p(xn−1, xn) = 1 Z µα(xn−1)ψn−1,n(xn−1, xn)µβ(xn).",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2082,Thus we can obtain the joint distributions over all of the sets of variables in each of the potentials directly once we have completed the message passing required to obtain the marginals.,Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,398,2083,"This is a useful result because in practice we may wish to use parametric forms for the clique potentials, or equivalently for the conditional distributions if we started from a directed graph. In order to learn the parameters of these potentials in situa- tions where not all of the variables are observed, we can employ the EM algorithm, Chapter 9 and it turns out that the local joint distributions of the cliques, conditioned on any observed data, is precisely what is needed in the E step. We shall consider some examples of this in detail in Chapter 13.",Trees
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2084,"Figure 8.39 Examples of tree- structured graphs, showing (a) an undirected tree, (b) a directed tree, and (c) a directed polytree.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2085,"We have seen that exact inference on a graph comprising a chain of nodes can be performed efﬁciently in time that is linear in the number of nodes, using an algorithm \end{verbatim} egin{verbatim} (a) (b) (c) that can be interpreted in terms of messages passed along the chain. More generally, inference can be performed efﬁciently using local message passing on a broader class of graphs called trees. In particular, we shall shortly generalize the message passing formalism derived above for chains to give the sum-product algorithm, which provides an efﬁcient framework for exact inference in tree-structured graphs.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2086,"In the case of an undirected graph, a tree is deﬁned as a graph in which there is one, and only one, path between any pair of nodes. Such graphs therefore do not have loops. In the case of directed graphs, a tree is deﬁned such that there is a single node, called the root, which has no parents, and all other nodes have one parent. If we convert a directed tree into an undirected graph, we see that the moralization step will not add any links as all nodes have at most one parent, and as a consequence the corresponding moralized graph will be an undirected tree. Examples of undirected and directed trees are shown in Figure 8.39(a) and 8.39(b). Note that a distribution represented as a directed tree can easily be converted into one represented by an undirected tree, and vice versa.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2087,"If there are nodes in a directed graph that have more than one parent, but there is still only one path (ignoring the direction of the arrows) between any two nodes, then the graph is a called a polytree, as illustrated in Figure 8.39(c). Such a graph will have more than one node with the property of having no parents, and furthermore, the corresponding moralized undirected graph will have loops.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2088,"The sum-product algorithm that we derive in the next section is applicable to undirected and directed trees and to polytrees. It can be cast in a particularly simple and general form if we ﬁrst introduce a new graphical construction called a factor graph (Frey, 1998; Kschischnang et al., 2001).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,399,2089,"Both directed and undirected graphs allow a global function of several vari- ables to be expressed as a product of factors over subsets of those variables. Factor graphs make this decomposition explicit by introducing additional nodes for the fac- tors themselves in addition to the nodes representing the variables. They also allow us to be more explicit about the details of the factorization, as we shall see.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2090,"Figure 8.40 Example of a factor graph, which corresponds to the factorization (8.60).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2091,"Figure 8.41 (a) An undirected graph with a single clique potential ψ(x1, x2, x3). (b) A factor graph with factor f(x1, x2, x3) = ψ(x1, x2, x3) representing the same distribution as the undirected graph. (c) A different factor graph representing the same distribution, whose factors satisfy fa(x1, x2, x3)fb(x1, x2) = ψ(x1, x2, x3).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2092,"Let us write the joint distribution over a set of variables in the form of a product of factors p(x) =  s fs(xs) (8.59) where xs denotes a subset of the variables. For convenience, we shall denote the \end{verbatim} egin{verbatim} x1 x2 x3 fa fb fc fd individual variables by xi, however, as in earlier discussions, these can comprise groups of variables (such as vectors or matrices). Each factor fs is a function of a corresponding set of variables xs.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2093,"Directed graphs, whose factorization is deﬁned by (8.5), represent special cases of (8.59) in which the factors fs(xs) are local conditional distributions. Similarly, undirected graphs, given by (8.39), are a special case in which the factors are po- tential functions over the maximal cliques (the normalizing coefﬁcient 1/Z can be viewed as a factor deﬁned over the empty set of variables).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2094,"In a factor graph, there is a node (depicted as usual by a circle) for every variable in the distribution, as was the case for directed and undirected graphs. There are also additional nodes (depicted by small squares) for each factor fs(xs) in the joint dis- tribution. Finally, there are undirected links connecting each factor node to all of the variables nodes on which that factor depends. Consider, for example, a distribution that is expressed in terms of the factorization p(x) = fa(x1, x2)fb(x1, x2)fc(x2, x3)fd(x3).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2095,"This can be expressed by the factor graph shown in Figure 8.40. Note that there are two factors fa(x1, x2) and fb(x1, x2) that are deﬁned over the same set of variables.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,400,2096,"In an undirected graph, the product of two such factors would simply be lumped together into the same clique potential. Similarly, fc(x2, x3) and fd(x3) could be combined into a single potential over x2 and x3. The factor graph, however, keeps such factors explicit and so is able to convey more detailed information about the underlying factorization.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2097,"Figure 8.42 (a) A directed graph with the factorization p(x1)p(x2)p(x3|x1, x2). (b) A factor graph representing the same distribution as the directed graph, whose factor satisﬁes f(x1, x2, x3) = p(x1)p(x2)p(x3|x1, x2). (c) A different factor graph representing the same distribution with factors fa(x1) = p(x1), fb(x2) = p(x2) and fc(x1, x2, x3) = p(x3|x1, x2).",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2098,"Factor graphs are said to be bipartite because they consist of two distinct kinds of nodes, and all links go between nodes of opposite type. In general, factor graphs can therefore always be drawn as two rows of nodes (variable nodes at the top and factor nodes at the bottom) with links between the rows, as shown in the example in Figure 8.40. In some situations, however, other ways of laying out the graph may be more intuitive, for example when the factor graph is derived from a directed or undirected graph, as we shall see.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2099,"If we are given a distribution that is expressed in terms of an undirected graph, then we can readily convert it to a factor graph. To do this, we create variable nodes corresponding to the nodes in the original undirected graph, and then create addi- tional factor nodes corresponding to the maximal cliques xs. The factors fs(xs) are then set equal to the clique potentials. Note that there may be several different factor graphs that correspond to the same undirected graph. These concepts are illustrated in Figure 8.41.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2100,"Similarly, to convert a directed graph to a factor graph, we simply create variable nodes in the factor graph corresponding to the nodes of the directed graph, and then create factor nodes corresponding to the conditional distributions, and then ﬁnally add the appropriate links. Again, there can be multiple factor graphs all of which correspond to the same directed graph. The conversion of a directed graph to a factor graph is illustrated in Figure 8.42.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2101,"We have already noted the importance of tree-structured graphs for performing efﬁcient inference. If we take a directed or undirected tree and convert it into a factor graph, then the result will again be a tree (in other words, the factor graph will have no loops, and there will be one and only one path connecting any two nodes). In the case of a directed polytree, conversion to an undirected graph results in loops due to the moralization step, whereas conversion to a factor graph again results in a tree, as illustrated in Figure 8.43.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,401,2102,"In fact, local cycles in a directed graph due to links connecting parents of a node can be removed on conversion to a factor graph by deﬁning the appropriate factor function, as shown in Figure 8.44.",Factor graphs
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2103,"Figure 8.43 (a) A directed polytree. (b) The result of converting the polytree into an undirected graph showing the creation of loops. (c) The result of converting the polytree into a factor graph, which retains the tree structure.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2104,Figure 8.44 (a) A fragment of a di- rected graph having a lo- cal cycle.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2105,We have seen that multiple different factor graphs can represent the same di- rected or undirected graph. This allows factor graphs to be more speciﬁc about the \end{verbatim} egin{verbatim} (a) (b) (c) precise form of the factorization. Figure 8.45 shows an example of a fully connected undirected graph along with two different factor graphs.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2106,"In (b), the joint distri- bution is given by a general form p(x) = f(x1, x2, x3), whereas in (c), it is given by the more speciﬁc factorization p(x) = fa(x1, x2)fb(x1, x3)fc(x2, x3). It should be emphasized that the factorization in (c) does not correspond to any conditional independence properties.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2107,"We shall now make use of the factor graph framework to derive a powerful class of efﬁcient, exact inference algorithms that are applicable to tree-structured graphs.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2108,"Here we shall focus on the problem of evaluating local marginals over nodes or subsets of nodes, which will lead us to the sum-product algorithm. Later we shall modify the technique to allow the most probable state to be found, giving rise to the max-sum algorithm.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,402,2109,"Also we shall suppose that all of the variables in the model are discrete, and so marginalization corresponds to performing sums. The framework, however, is equally applicable to linear-Gaussian models in which case marginalization involves integration, and we shall consider an example of this in detail when we discuss linear (b) Conversion to a fragment of a factor graph having a tree struc- ture, in which f(x1, x2, x3) = p(x1)p(x2|x1)p(x3|x1, x2).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,403,2110,Figure 8.45 (a) A fully connected undirected graph. (b) and (c) Two factor graphs each of which corresponds to the undirected graph in (a).,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,403,2111,"There is an algorithm for exact inference on directed graphs without loops known as belief propagation (Pearl, 1988; Lauritzen and Spiegelhalter, 1988), and is equiv- alent to a special case of the sum-product algorithm. Here we shall consider only the sum-product algorithm because it is simpler to derive and to apply, as well as being more general.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,403,2112,"We shall assume that the original graph is an undirected tree or a directed tree or polytree, so that the corresponding factor graph has a tree structure. We ﬁrst convert the original graph into a factor graph so that we can deal with both directed and undirected models using the same framework. Our goal is to exploit the structure of the graph to achieve two things: (i) to obtain an efﬁcient, exact inference algorithm for ﬁnding marginals; (ii) in situations where several marginals are required to allow computations to be shared efﬁciently.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2113,Figure 8.46 A fragment of a factor graph illustrating the evaluation of the marginal p(x).,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2114,"Substituting (8.62) into (8.61) and interchanging the sums and products, we ob- tain p(x) =  s∈ne(x)  Xs Fs(x, Xs) =  s∈ne(x) µfs→x(x).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2115,"Here we have introduced a set of functions µfs→x(x), deﬁned by µfs→x(x) ≡  Xs Fs(x, Xs) (8.64) which can be viewed as messages from the factor nodes fs to the variable node x.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2116,We see that the required marginal p(x) is given by the product of all the incoming messages arriving at node x.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2117,"In order to evaluate these messages, we again turn to Figure 8.46 and note that each factor Fs(x, Xs) is described by a factor (sub-)graph and so can itself be fac- torized. In particular, we can write Fs(x, Xs) = fs(x, x1, . . . , xM)G1 (x1, Xs1) . . . GM (xM, XsM) (8.65) where, for convenience, we have denoted the variables associated with factor fx, in addition to x, by x1, . . . , xM. This factorization is illustrated in Figure 8.47. Note that the set of variables {x, x1, . . . , xM} is the set of variables on which the factor fs depends, and so it can also be denoted xs, using the notation of (8.59).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,404,2118,Substituting (8.65) into (8.64) we obtain µfs→x(x) =  x1 . . .,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,405,2119,Figure 8.47 Illustration of the factorization of the subgraph as- sociated with factor node fs.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,405,2120,"We have therefore introduced two distinct kinds of message, those that go from factor nodes to variable nodes denoted µf→x(x), and those that go from variable nodes to factor nodes denoted µx→f(x). In each case, we see that messages passed along a link are always a function of the variable associated with the variable node that link connects to.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,405,2121,"The result (8.66) says that to evaluate the message sent by a factor node to a vari- able node along the link connecting them, take the product of the incoming messages along all other links coming into the factor node, multiply by the factor associated with that node, and then marginalize over all of the variables associated with the incoming messages. This is illustrated in Figure 8.47. It is important to note that a factor node can send a message to a variable node once it has received incoming messages from all other neighbouring variable nodes.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,406,2122,Figure 8.48 Illustration of the evaluation of the message sent by a variable node to an adjacent factor node.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,406,2123,"Figure 8.49 begins with messages sent by the leaf nodes, which de- pend on whether the leaf node is (a) a variable node, or (b) a factor node.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,406,2124,"Finally, we derive an expression for evaluating the messages from variable nodes to factor nodes, again by making use of the (sub-)graph factorization. From Fig- ure 8.48, we see that term Gm(xm, Xsm) associated with node xm is given by a product of terms Fl(xm, Xml) each associated with one of the factor nodes fl that is linked to node xm (excluding node fs), so that Gm(xm, Xsm) =  l∈ne(xm)s Fl(xm, Xml) (8.68) where the product is taken over all neighbours of node xm except for node fs. Note that each of the factors Fl(xm, Xml) represents a subtree of the original graph of precisely the same kind as introduced in (8.62). Substituting (8.68) into (8.67), we \end{verbatim} egin{verbatim} xm fl fL fs Fl(xm, Xml) then obtain µxm→fs(xm) =  l∈ne(xm)s  Xml Fl(xm, Xml) =  l∈ne(xm)s µfl→xm(xm) (8.69) where we have used the deﬁnition (8.64) of the messages passed from factor nodes to variable nodes. Thus to evaluate the message sent by a variable node to an adjacent factor node along the connecting link, we simply take the product of the incoming messages along all of the other links. Note that any variable node that has only two neighbours performs no computation but simply passes messages through un- changed. Also, we note that a variable node can send a message to a factor node once it has received incoming messages from all other neighbouring factor nodes.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,407,2125,"Recall that our goal is to calculate the marginal for variable node x, and that this marginal is given by the product of incoming messages along all of the links arriving at that node. Each of these messages can be computed recursively in terms of other messages. In order to start this recursion, we can view the node x as the root of the tree and begin at the leaf nodes. From the deﬁnition (8.69), we see that if a leaf node is a variable node, then the message that it sends along its one and only link is given by µx→f(x) = 1 (8.70) as illustrated in Figure 8.49(a). Similarly, if the leaf node is a factor node, we see from (8.66) that the message sent should take the form µf→x(x) = f(x) (8.71) x f µx→f(x) = 1 (a) x f µf→x(x) = f(x) (b) \end{verbatim} egin{verbatim} as illustrated in Figure 8.49(b).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,407,2126,"At this point, it is worth pausing to summarize the particular version of the sum- product algorithm obtained so far for evaluating the marginal p(x). We start by viewing the variable node x as the root of the factor graph and initiating messages at the leaves of the graph using (8.70) and (8.71). The message passing steps (8.66) and (8.69) are then applied recursively until messages have been propagated along every link, and the root node has received messages from all of its neighbours. Each node can send a message towards the root once it has received messages from all of its other neighbours. Once the root node has received messages from all of its neighbours, the required marginal can be evaluated using (8.63). We shall illustrate this process shortly.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,407,2127,"To see that each node will always receive enough messages to be able to send out a message, we can use a simple inductive argument as follows. Clearly, for a graph comprising a variable root node connected directly to several factor leaf nodes, the algorithm trivially involves sending messages of the form (8.71) directly from the leaves to the root. Now imagine building up a general graph by adding nodes one at a time, and suppose that for some particular graph we have a valid algorithm. When one more (variable or factor) node is added, it can be connected only by a single link because the overall graph must remain a tree, and so the new node will be a leaf node. It therefore sends a message to the node to which it is linked, which in turn will therefore receive all the messages it requires in order to send its own message towards the root, and so again we have a valid algorithm, thereby completing the proof.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,407,2128,Now suppose we wish to ﬁnd the marginals for every variable node in the graph. This could be done by simply running the above algorithm afresh for each such node.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,408,2129,"Figure 8.50 The sum-product algorithm can be viewed purely in terms of messages sent out by factor nodes to other factor nodes. In this example, the outgoing message shown by the blue arrow is obtained by taking the product of all the in- coming messages shown by green arrows, mul- tiplying by the factor fs, and marginalizing over the variables x1 and x2.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,408,2130,"However, this would be very wasteful as many of the required computations would be repeated. We can obtain a much more efﬁcient procedure by ‘overlaying’ these multiple message passing algorithms to obtain the general sum-product algorithm as follows. Arbitrarily pick any (variable or factor) node and designate it as the root. Propagate messages from the leaves to the root as before. At this point, the root node will have received messages from all of its neighbours. It can therefore send out messages to all of its neighbours. These in turn will then have received messages from all of their neighbours and so can send out messages along the links going away from the root, and so on. In this way, messages are passed outwards from the root all the way to the leaves. By now, a message will have passed in both directions across every link in the graph, and every node will have received a message from all of its neighbours. Again a simple inductive argument can be used to verify the validity of this message passing protocol. Because every variable node will have received messages from all of its neighbours, we can readily calculate the marginal distribution for every variable in the graph. The number of messages that have to be computed is given by twice the number of links in the graph and so involves only twice the computation involved in ﬁnding a single marginal. By comparison, if we had run the sum-product algorithm separately for each node, the amount of computation would grow quadratically with the size of the graph. Note that this algorithm is in fact independent of which node was designated as the root, \end{verbatim} egin{verbatim} fs x1 x2 x3 and indeed the notion of one node having a special status was introduced only as a convenient way to explain the message passing protocol.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,408,2131,"Next suppose we wish to ﬁnd the marginal distributions p(xs) associated with the sets of variables belonging to each of the factors. By a similar argument to that used above, it is easy to see that the marginal associated with a factor is given by the product of messages arriving at the factor node and the local factor at that node p(xs) = fs(xs)  i∈ne(fs) µxi→fs(xi) (8.72) in complete analogy with the marginals at the variable nodes. If the factors are parameterized functions and we wish to learn the values of the parameters using the EM algorithm, then these marginals are precisely the quantities we will need to calculate in the E step, as we shall see in detail when we discuss the hidden Markov model in Chapter 13.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,408,2132,"The message sent by a variable node to a factor node, as we have seen, is simply the product of the incoming messages on other links. We can if we wish view the sum-product algorithm in a slightly different form by eliminating messages from variable nodes to factor nodes and simply considering messages that are sent out by factor nodes. This is most easily seen by considering the example in Figure 8.50.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,408,2133,"So far, we have rather neglected the issue of normalization. If the factor graph was derived from a directed graph, then the joint distribution is already correctly nor- malized, and so the marginals obtained by the sum-product algorithm will similarly be normalized correctly. However, if we started from an undirected graph, then in general there will be an unknown normalization coefﬁcient 1/Z. As with the simple chain example of Figure 8.38, this is easily handled by working with an unnormal- ized version p(x) of the joint distribution, where p(x) = p(x)/Z. We ﬁrst run the sum-product algorithm to ﬁnd the corresponding unnormalized marginals p(xi). The coefﬁcient 1/Z is then easily obtained by normalizing any one of these marginals, and this is computationally efﬁcient because the normalization is done over a single variable rather than over the entire set of variables as would be required to normalize p(x) directly.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,409,2134,Figure 8.51 A simple factor graph used to illustrate the sum-product algorithm.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,409,2135,"At this point, it may be helpful to consider a simple example to illustrate the operation of the sum-product algorithm. Figure 8.51 shows a simple 4-node factor \end{verbatim} egin{verbatim} x1 x2 x3 x4 fa fb fc graph whose unnormalized joint distribution is given by p(x) = fa(x1, x2)fb(x2, x3)fc(x2, x4).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,409,2136,"In order to apply the sum-product algorithm to this graph, let us designate node x3 as the root, in which case there are two leaf nodes x1 and x4. Starting with the leaf nodes, we then have the following sequence of six messages µx1→fa(x1) = 1 (8.74) µfa→x2(x2) =  x1 fa(x1, x2) (8.75) µx4→fc(x4) = 1 (8.76) µfc→x2(x2) =  x4 fc(x2, x4) (8.77) µx2→fb(x2) = µfa→x2(x2)µfc→x2(x2) (8.78) µfb→x3(x3) =  x2 fb(x2, x3)µx2→fb.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,409,2137,"The direction of ﬂow of these messages is illustrated in Figure 8.52. Once this mes- sage propagation is complete, we can then propagate messages from the root node out to the leaf nodes, and these are given by µx3→fb(x3) = 1 (8.80) µfb→x2(x2) =  x3 fb(x2, x3) (8.81) µx2→fa(x2) = µfb→x2(x2)µfc→x2(x2) (8.82) µfa→x1(x1) =  x2 fa(x1, x2)µx2→fa(x2) (8.83) µx2→fc(x2) = µfa→x2(x2)µfb→x2(x2) (8.84) µfc→x4(x4) =  x2 fc(x2, x4)µx2→fc(x2).",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,410,2138,Figure 8.52 Flow of messages for the sum-product algorithm applied to the example graph in Figure 8.51. (a) From the leaf nodes x1 and x4 towards the root node x3. (b) From the root node towards the leaf nodes.,The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,410,2139,"One message has now passed in each direction across each link, and we can now evaluate the marginals. As a simple check, let us verify that the marginal p(x2) is given by the correct expression. Using (8.63) and substituting for the messages using the above results, we have p(x2) = µfa→x2(x2)µfb→x2(x2)µfc→x2(x2) =  x1 fa(x1, x2)  x3 fb(x2, x3)  x4 fc(x2, x4) =  x1  x2  x4 fa(x1, x2)fb(x2, x3)fc(x2, x4) =  x1  x3  x4 p(x) (8.86) as required.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,410,2140,"So far, we have assumed that all of the variables in the graph are hidden. In most practical applications, a subset of the variables will be observed, and we wish to cal- culate posterior distributions conditioned on these observations. Observed nodes are easily handled within the sum-product algorithm as follows. Suppose we partition x into hidden variables h and observed variables v, and that the observed value of v is denoted v. Then we simply multiply the joint distribution p(x) by  i I(vi,vi), where I(v,v) = 1 if v = v and I(v,v) = 0 otherwise. This product corresponds to p(h, v = v) and hence is an unnormalized version of p(h|v = v). By run- ning the sum-product algorithm, we can efﬁciently calculate the posterior marginals p(hi|v = v) up to a normalization coefﬁcient whose value can be found efﬁciently using a local computation. Any summations over variables in v then collapse into a single term.",The sum-product algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,411,2141,Table 8.1 Example of a joint distribution over two binary variables for which the maximum of the joint distribution occurs for dif- ferent variable values compared to the maxima of the two marginals.,Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,411,2142,"We have assumed throughout this section that we are dealing with discrete vari- ables. However, there is nothing speciﬁc to discrete variables either in the graphical framework or in the probabilistic construction of the sum-product algorithm. For \end{verbatim} egin{verbatim} x = 0 x = 1 y = 0 0.3 0.4 y = 1 0.3 0.0 continuous variables the summations are simply replaced by integrations. We shall give an example of the sum-product algorithm applied to a graph of linear-Gaussian variables when we consider linear dynamical systems.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,411,2143,"The sum-product algorithm allows us to take a joint distribution p(x) expressed as a factor graph and efﬁciently ﬁnd marginals over the component variables. Two other common tasks are to ﬁnd a setting of the variables that has the largest prob- ability and to ﬁnd the value of that probability. These can be addressed through a closely related algorithm called max-sum, which can be viewed as an application of dynamic programming in the context of graphical models (Cormen et al., 2001).",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,411,2144,"A simple approach to ﬁnding latent variable values having high probability would be to run the sum-product algorithm to obtain the marginals p(xi) for ev- ery variable, and then, for each marginal in turn, to ﬁnd the value x⋆ i that maximizes that marginal. However, this would give the set of values that are individually the most probable. In practice, we typically wish to ﬁnd the set of values that jointly have the largest probability, in other words the vector xmax that maximizes the joint distribution, so that xmax = arg max x p(x) (8.87) for which the corresponding value of the joint probability will be given by p(xmax) = max x p(x).",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,411,2145,"In general, xmax is not the same as the set of x⋆ i values, as we can easily show using a simple example. Consider the joint distribution p(x, y) over two binary variables x, y ∈{0, 1} given in Table 8.1. The joint distribution is maximized by setting x = 1 and y = 0, corresponding the value 0.4. However, the marginal for p(x), obtained by summing over both values of y, is given by p(x = 0) = 0.6 and p(x = 1) = 0.4, and similarly the marginal for y is given by p(y = 0) = 0.7 and p(y = 1) = 0.3, and so the marginals are maximized by x = 0 and y = 0, which corresponds to a value of 0.3 for the joint distribution. In fact, it is not difﬁcult to construct examples for which the set of individually most probable values has probability zero under the joint distribution.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2146,"We therefore seek an efﬁcient algorithm for ﬁnding the value of x that maxi- mizes the joint distribution p(x) and that will allow us to obtain the value of the joint distribution at its maximum. To address the second of these problems, we shall simply write out the max operator in terms of its components max x p(x) = max x1 . . . max xM p(x) (8.89) \end{verbatim} egin{verbatim} where M is the total number of variables, and then substitute for p(x) using its expansion in terms of a product of factors. In deriving the sum-product algorithm, we made use of the distributive law (8.53) for multiplication. Here we make use of the analogous law for the max operator max(ab, ac) = a max(b, c) (8.90) which holds if a ⩾0 (as will always be the case for the factors in a graphical model).",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2147,"This allows us to exchange products with maximizations. Consider ﬁrst the simple example of a chain of nodes described by (8.49). The evaluation of the probability maximum can be written as max x p(x) = 1 Z max x1 · · · max xN [ψ1,2(x1, x2) · · · ψN−1,N(xN−1, xN)] = 1 Z max x1 ψ1,2(x1, x2) · · · max xN ψN−1,N(xN−1, xN) .",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2148,"As with the calculation of marginals, we see that exchanging the max and product operators results in a much more efﬁcient computation, and one that is easily inter- preted in terms of messages passed from node xN backwards along the chain to node x1.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2149,"We can readily generalize this result to arbitrary tree-structured factor graphs by substituting the expression (8.59) for the factor graph expansion into (8.89) and again exchanging maximizations with products. The structure of this calculation is identical to that of the sum-product algorithm, and so we can simply translate those results into the present context. In particular, suppose that we designate a particular variable node as the ‘root’ of the graph. Then we start a set of messages propagating inwards from the leaves of the tree towards the root, with each node sending its message towards the root once it has received all incoming messages from its other neighbours. The ﬁnal maximization is performed over the product of all messages arriving at the root node, and gives the maximum value for p(x). This could be called the max-product algorithm and is identical to the sum-product algorithm except that summations are replaced by maximizations. Note that at this stage, messages have been sent from leaves to the root, but not in the other direction.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2150,"In practice, products of many small probabilities can lead to numerical under- ﬂow problems, and so it is convenient to work with the logarithm of the joint distri- bution. The logarithm is a monotonic function, so that if a > b then ln a > ln b, and hence the max operator and the logarithm function can be interchanged, so that ln  max x p(x)  = max x ln p(x).",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,412,2151,"The distributive property is preserved because max(a + b, a + c) = a + max(b, c).",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,413,2152,"The initial messages sent by the leaf nodes are obtained by analogy with (8.70) and (8.71) and are given by µx→f(x) = 0 (8.95) µf→x(x) = ln f(x) (8.96) while at the root node the maximum probability can then be computed, by analogy with (8.63), using pmax = max x ⎡ ⎣ s∈ne(x) µfs→x(x) ⎤ ⎦.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,413,2153,"So far, we have seen how to ﬁnd the maximum of the joint distribution by prop- agating messages from the leaves to an arbitrarily chosen root node. The result will be the same irrespective of which node is chosen as the root. Now we turn to the second problem of ﬁnding the conﬁguration of the variables for which the joint dis- tribution attains this maximum value. So far, we have sent messages from the leaves to the root. The process of evaluating (8.97) will also give the value xmax for the most probable value of the root node variable, deﬁned by xmax = arg max x ⎡ ⎣ s∈ne(x) µfs→x(x) ⎤ ⎦.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,413,2154,"At this point, we might be tempted simply to continue with the message passing al- gorithm and send messages from the root back out to the leaves, using (8.93) and (8.94), then apply (8.98) to all of the remaining variable nodes. However, because we are now maximizing rather than summing, it is possible that there may be mul- tiple conﬁgurations of x all of which give rise to the maximum value for p(x). In such cases, this strategy can fail because it is possible for the individual variable values obtained by maximizing the product of messages at each node to belong to different maximizing conﬁgurations, giving an overall conﬁguration that no longer corresponds to a maximum.",Bayesian networks for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,414,2155,"Figure 8.53 A lattice, or trellis, diagram show- ing explicitly the K possible states (one per row of the diagram) for each of the variables xn in the chain model. In this illustration K = 3. The ar- row shows the direction of message passing in the max-product algorithm. For every state k of each variable xn (corresponding to column n of the dia- gram) the function φ(xn) deﬁnes a unique state at the previous variable, indicated by the black lines.",Factor graphs for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,414,2156,"The problem can be resolved by adopting a rather different kind of message passing from the root node to the leaves. To see how this works, let us return once again to the simple chain example of N variables x1, . . . , xN each having K states, \end{verbatim} egin{verbatim} The two paths through the lattice correspond to conﬁgurations that give the global maximum of the joint probability distribution, and either of these can be found by tracing back along the black lines in the opposite direction to the arrow.",Factor graphs for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,414,2157,"corresponding to the graph shown in Figure 8.38. Suppose we take node xN to be the root node. Then in the ﬁrst phase, we propagate messages from the leaf node x1 to the root node using µxn→fn,n+1(xn) = µfn−1,n→xn(xn) µfn−1,n→xn(xn) = max xn−1  ln fn−1,n(xn−1, xn) + µxn−1→fn−1,n(xn) which follow from applying (8.94) and (8.93) to this particular graph. The initial message sent from the leaf node is simply µx1→f1,2(x1) = 0.",Factor graphs for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,414,2158,"The most probable value for xN is then given by xmax N = arg max xN  µfN−1,N→xN(xN) .",Factor graphs for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,414,2159,"Now we need to determine the states of the previous variables that correspond to the same maximizing conﬁguration. This can be done by keeping track of which values of the variables gave rise to the maximum state of each variable, in other words by storing quantities given by φ(xn) = arg max xn−1  ln fn−1,n(xn−1, xn) + µxn−1→fn−1,n(xn) .",Factor graphs for discrete variables
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,415,2160,"To understand better what is happening, it is helpful to represent the chain of vari- ables in terms of a lattice or trellis diagram as shown in Figure 8.53. Note that this is not a probabilistic graphical model because the nodes represent individual states of variables, while each variable corresponds to a column of such states in the di- agram. For each state of a given variable, there is a unique state of the previous variable that maximizes the probability (ties are broken either systematically or at random), corresponding to the function φ(xn) given by (8.101), and this is indicated \end{verbatim} egin{verbatim} by the lines connecting the nodes. Once we know the most probable value of the ﬁ- nal node xN, we can then simply follow the link back to ﬁnd the most probable state of node xN−1 and so on back to the initial node x1. This corresponds to propagating a message back down the chain using xmax n−1 = φ(xmax n ) (8.102) and is known as back-tracking. Note that there could be several values of xn−1 all of which give the maximum value in (8.101). Provided we chose one of these values when we do the back-tracking, we are assured of a globally consistent maximizing conﬁguration.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,415,2161,"In Figure 8.53, we have indicated two paths, each of which we shall suppose corresponds to a global maximum of the joint probability distribution. If k = 2 and k = 3 each represent possible values of xmax N , then starting from either state and tracing back along the black lines, which corresponds to iterating (8.102), we obtain a valid global maximum conﬁguration. Note that if we had run a forward pass of max-sum message passing followed by a backward pass and then applied (8.98) at each node separately, we could end up selecting some states from one path and some from the other path, giving an overall conﬁguration that is not a global maximizer. We see that it is necessary instead to keep track of the maximizing states during the forward pass using the functions φ(xn) and then use back-tracking to ﬁnd a consistent solution.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,415,2162,"The extension to a general tree-structured factor graph should now be clear. If a message is sent from a factor node f to a variable node x, a maximization is performed over all other variable nodes x1, . . . , xM that are neighbours of that fac- tor node, using (8.93). When we perform this maximization, we keep a record of which values of the variables x1, . . . , xM gave rise to the maximum. Then in the back-tracking step, having found xmax, we can then use these stored values to as- sign consistent maximizing states xmax 1 , . . . , xmax M . The max-sum algorithm, with back-tracking, gives an exact maximizing conﬁguration for the variables provided the factor graph is a tree. An important application of this technique is for ﬁnding the most probable sequence of hidden states in a hidden Markov model, in which case it is known as the Viterbi algorithm.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,415,2163,"As with the sum-product algorithm, the inclusion of evidence in the form of observed variables is straightforward. The observed variables are clamped to their observed values, and the maximization is performed over the remaining hidden vari- ables. This can be shown formally by including identity functions for the observed variables into the factor functions, as we did for the sum-product algorithm.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,415,2164,"It is interesting to compare max-sum with the iterated conditional modes (ICM) algorithm described on page 389. Each step in ICM is computationally simpler be- cause the ‘messages’ that are passed from one node to the next comprise a single value consisting of the new state of the node for which the conditional distribution is maximized. The max-sum algorithm is more complex because the messages are functions of node variables x and hence comprise a set of K values for each pos- sible state of x. Unlike max-sum, however, ICM is not guaranteed to ﬁnd a global maximum even for tree-structured graphs.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,416,2165,"The sum-product and max-sum algorithms provide efﬁcient and exact solutions to inference problems in tree-structured graphs. For many practical applications, however, we have to deal with graphs having loops.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,416,2166,"The message passing framework can be generalized to arbitrary graph topolo- gies, giving an exact inference procedure known as the junction tree algorithm (Lau- ritzen and Spiegelhalter, 1988; Jordan, 2007). Here we give a brief outline of the key steps involved. This is not intended to convey a detailed understanding of the algorithm, but rather to give a ﬂavour of the various stages involved. If the starting point is a directed graph, it is ﬁrst converted to an undirected graph by moraliza- tion, whereas if starting from an undirected graph this step is not required. Next the graph is triangulated, which involves ﬁnding chord-less cycles containing four or more nodes and adding extra links to eliminate such chord-less cycles. For instance, in the graph in Figure 8.36, the cycle A–C–B–D–A is chord-less a link could be added between A and B or alternatively between C and D. Note that the joint dis- tribution for the resulting triangulated graph is still deﬁned by a product of the same potential functions, but these are now considered to be functions over expanded sets of variables. Next the triangulated graph is used to construct a new tree-structured undirected graph called a join tree, whose nodes correspond to the maximal cliques of the triangulated graph, and whose links connect pairs of cliques that have vari- ables in common. The selection of which pairs of cliques to connect in this way is important and is done so as to give a maximal spanning tree deﬁned as follows. Of all possible trees that link up the cliques, the one that is chosen is one for which the weight of the tree is largest, where the weight for a link is the number of nodes shared by the two cliques it connects, and the weight for the tree is the sum of the weights for the links. If the tree is condensed, so that any clique that is a subset of another clique is absorbed into the larger clique, this gives a junction tree. As a consequence of the triangulation step, the resulting tree satisﬁes the running intersection property, which means that if a variable is contained in two cliques, then it must also be con- tained in every clique on the path that connects them. This ensures that inference about variables will be consistent across the graph. Finally, a two-stage message passing algorithm, essentially equivalent to the sum-product algorithm, can now be applied to this junction tree in order to ﬁnd marginals and conditionals. Although the junction tree algorithm sounds complicated, at its heart is the simple idea that we have used already of exploiting the factorization properties of the distribution to allow sums and products to be interchanged so that partial summations can be per- formed, thereby avoiding having to work directly with the joint distribution. The role of the junction tree is to provide a precise and efﬁcient way to organize these computations. It is worth emphasizing that this is achieved using purely graphical operations! The junction tree is exact for arbitrary graphs and is efﬁcient in the sense that for a given graph there does not in general exist a computationally cheaper approach.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2167,"Unfortunately, the algorithm must work with the joint distributions within each node (each of which corresponds to a clique of the triangulated graph) and so the compu- tational cost of the algorithm is determined by the number of variables in the largest \end{verbatim} egin{verbatim} clique and will grow exponentially with this number in the case of discrete variables.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2168,"An important concept is the treewidth of a graph (Bodlaender, 1993), which is de- ﬁned in terms of the number of variables in the largest clique. In fact, it is deﬁned to be as one less than the size of the largest clique, to ensure that a tree has a treewidth of 1. Because there in general there can be multiple different junction trees that can be constructed from a given starting graph, the treewidth is deﬁned by the junction tree for which the largest clique has the fewest variables. If the treewidth of the original graph is high, the junction tree algorithm becomes impractical.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2169,"For many problems of practical interest, it will not be feasible to use exact in- ference, and so we need to exploit effective approximation methods. An important class of such approximations, that can broadly be called variational methods, will be discussed in detail in Chapter 10. Complementing these deterministic approaches is a wide range of sampling methods, also called Monte Carlo methods, that are based on stochastic numerical sampling from distributions and that will be discussed at length in Chapter 11.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2170,"Here we consider one simple approach to approximate inference in graphs with loops, which builds directly on the previous discussion of exact inference in trees.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2171,"The idea is simply to apply the sum-product algorithm even though there is no guar- antee that it will yield good results. This approach is known as loopy belief propa- gation (Frey and MacKay, 1998) and is possible because the message passing rules (8.66) and (8.69) for the sum-product algorithm are purely local. However, because the graph now has cycles, information can ﬂow many times around the graph. For some models, the algorithm will converge, whereas for others it will not.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2172,"In order to apply this approach, we need to deﬁne a message passing schedule. Let us assume that one message is passed at a time on any given link and in any given direction. Each message sent from a node replaces any previous message sent in the same direction across the same link and will itself be a function only of the most recent messages received by that node at previous steps of the algorithm.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2173,"We have seen that a message can only be sent across a link from a node when all other messages have been received by that node across its other links. Because there are loops in the graph, this raises the problem of how to initiate the message passing algorithm. To resolve this, we suppose that an initial message given by the unit function has been passed across every link in each direction. Every node is then in a position to send a message.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,417,2174,"There are now many possible ways to organize the message passing schedule. For example, the ﬂooding schedule simultaneously passes a message across every link in both directions at each time step, whereas schedules that pass one message at a time are called serial schedules.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2175,"Following Kschischnang et al. (2001), we will say that a (variable or factor) node a has a message pending on its link to a node b if node a has received any message on any of its other links since the last time it send a message to b. Thus, when a node receives a message on one of its links, this creates pending messages on all of its other links. Only pending messages need to be transmitted because \end{verbatim} egin{verbatim} other messages would simply duplicate the previous message on the same link. For graphs that have a tree structure, any schedule that sends only pending messages will eventually terminate once a message has passed in each direction across every link. At this point, there are no pending messages, and the product of the received messages at every variable give the exact marginal. In graphs having loops, however, the algorithm may never terminate because there might always be pending messages, although in practice it is generally found to converge within a reasonable time for most applications. Once the algorithm has converged, or once it has been stopped if convergence is not observed, the (approximate) local marginals can be computed using the product of the most recently received incoming messages to each variable node or factor node on every link.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2176,"In some applications, the loopy belief propagation algorithm can give poor re- sults, whereas in other applications it has proven to be very effective. In particular, state-of-the-art algorithms for decoding certain kinds of error-correcting codes are equivalent to loopy belief propagation (Gallager, 1963; Berrou et al., 1993; McEliece et al., 1998; MacKay and Neal, 1999; Frey, 1998).",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2177,"In our discussion of inference in graphical models, we have assumed that the structure of the graph is known and ﬁxed. However, there is also interest in go- ing beyond the inference problem and learning the graph structure itself from data (Friedman and Koller, 2003). This requires that we deﬁne a space of possible struc- tures as well as a measure that can be used to score each structure.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2178,"From a Bayesian viewpoint, we would ideally like to compute a posterior dis- tribution over graph structures and to make predictions by averaging with respect to this distribution. If we have a prior p(m) over graphs indexed by m, then the posterior distribution is given by p(m|D) ∝p(m)p(D|m) (8.103) where D is the observed data set. The model evidence p(D|m) then provides the score for each model. However, evaluation of the evidence involves marginalization over the latent variables and presents a challenging computational problem for many models.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2179,"Exploring the space of structures can also be problematic. Because the number of different graph structures grows exponentially with the number of nodes, it is often necessary to resort to heuristics to ﬁnd good candidates.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2180,"By marginalizing out the variables in order, show that the representation (8.5) for the joint distribution of a directed graph is correctly normalized, provided each of the conditional distributions is normalized.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,418,2181,Show that the property of there being no directed cycles in a directed graph follows from the statement that there exists an ordered numbering of the nodes such that for each node there are no links going to a lower-numbered node.,The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2182,Table 8.2 The joint distribution over three binary variables.,The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2183,"Consider three binary variables a, b, c ∈{0, 1} having the joint distribution given in Table 8.2. Show by direct evaluation that this distribution has the property that a and b are marginally dependent, so that p(a, b) ̸= p(a)p(b), but that they become independent when conditioned on c, so that p(a, b|c) = p(a|c)p(b|c) for both c = 0 and c = 1.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2184,"Evaluate the distributions p(a), p(b|c), and p(c|a) corresponding to the joint distribution given in Table 8.2. Hence show by direct evaluation that p(a, b, c) = p(a)p(c|a)p(b|c). Draw the corresponding directed graph.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2185,Draw a directed probabilistic graphical model corresponding to the relevance vector machine described by (7.79) and (7.80).,The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2186,"(⋆) For the model shown in Figure 8.13, we have seen that the number of parameters required to specify the conditional distribution p(y|x1, . . . , xM), where xi ∈{0, 1}, could be reduced from 2M to M +1 by making use of the logistic sigmoid represen- tation (8.10). An alternative representation (Pearl, 1988) is given by p(y = 1|x1, . . . , xM) = 1 −(1 −µ0) M  i=1 (1 −µi)xi (8.104) where the parameters µi represent the probabilities p(xi = 1), and µ0 is an additional parameters satisfying 0 ⩽µ0 ⩽1. The conditional distribution (8.104) is known as the noisy-OR. Show that this can be interpreted as a ‘soft’ (probabilistic) form of the logical OR function (i.e., the function that gives y = 1 whenever at least one of the xi = 1). Discuss the interpretation of µ0.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2187,"(⋆⋆) Using the recursion relations (8.15) and (8.16), show that the mean and covari- ance of the joint distribution for the graph shown in Figure 8.14 are given by (8.17) and (8.18), respectively.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,419,2188,"Show that a ⊥⊥b, c | d implies a ⊥⊥b | d. 8.9 (⋆) www Using the d-separation criterion, show that the conditional distribution for a node x in a directed graph, conditioned on all of the nodes in the Markov blanket, is independent of the remaining variables in the graph.",The junction tree algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2189,"Figure 8.54 Example of a graphical model used to explore the con- ditional independence properties of the head-to-head path a–c–b when a descendant of c, namely the node d, is observed.",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2190,(⋆) Consider the directed graph shown in Figure 8.54 in which none of the variables is observed. Show that a ⊥⊥b | ∅. Suppose we now observe the variable d. Show that in general a ̸⊥⊥b | d.,Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2191,"(⋆⋆) Consider the example of the car fuel system shown in Figure 8.21, and suppose that instead of observing the state of the fuel gauge G directly, the gauge is seen by the driver D who reports to us the reading on the gauge. This report is either that the gauge shows full D = 1 or that it shows empty D = 0. Our driver is a bit unreliable, as expressed through the following probabilities p(D = 1|G = 1) = 0.9 (8.105) p(D = 0|G = 0) = 0.9.",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2192,"Suppose that the driver tells us that the fuel gauge shows empty, in other words that we observe D = 0. Evaluate the probability that the tank is empty given only this observation. Similarly, evaluate the corresponding probability given also the observation that the battery is ﬂat, and note that this second probability is lower.",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2193,"Discuss the intuition behind this result, and relate the result to Figure 8.54. 8.12 (⋆) www Show that there are 2M(M−1)/2 distinct undirected graphs over a set of M distinct random variables. Draw the 8 possibilities for the case of M = 3.",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2194,"Consider the use of iterated conditional modes (ICM) to minimize the energy function given by (8.42). Write down an expression for the difference in the values of the energy associated with the two states of a particular variable xj, with all other variables held ﬁxed, and show that it depends only on quantities that are local to xj in the graph.",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2195,Consider a particular case of the energy function given by (8.42) in which the coefﬁcients β = h = 0. Show that the most probable conﬁguration of the latent variables is given by xi = yi for all i.,Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,420,2196,"Show that the joint distribution p(xn−1, xn) for two neighbouring nodes in the graph shown in Figure 8.38 is given by an expression of the form (8.58).",Markov chain Monte Carlo methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2197,"Consider the inference problem of evaluating p(xn|xN) for the graph shown in Figure 8.38, for all nodes n ∈{1, . . . , N −1}. Show that the message passing algorithm discussed in Section 8.4.1 can be used to solve this efﬁciently, and discuss which messages are modiﬁed and in what way.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2198,"Consider a graph of the form shown in Figure 8.38 having N = 5 nodes, in which nodes x3 and x5 are observed. Use d-separation to show that x2 ⊥⊥x5 | x3.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2199,"Show that if the message passing algorithm of Section 8.4.1 is applied to the evalu- ation of p(x2|x3, x5), the result will be independent of the value of x5.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2200,"Show that a distribution represented by a directed tree can trivially be written as an equivalent distribution over the corresponding undirected tree. Also show that a distribution expressed as an undirected tree can, by suitable normaliza- tion of the clique potentials, be written as a directed tree. Calculate the number of distinct directed trees that can be constructed from a given undirected tree.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2201,"Apply the sum-product algorithm derived in Section 8.4.4 to the chain-of- nodes model discussed in Section 8.4.1 and show that the results (8.54), (8.55), and (8.57) are recovered as a special case.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2202,"Consider the message passing protocol for the sum-product algorithm on a tree-structured factor graph in which messages are ﬁrst propagated from the leaves to an arbitrarily chosen root node and then from the root node out to the leaves. Use proof by induction to show that the messages can be passed in such an order that at every step, each node that must send a message has received all of the incoming messages necessary to construct its outgoing messages.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2203,Show that the marginal distributions p(xs) over the sets of variables xs associated with each of the factors fx(xs) in a factor graph can be found by ﬁrst running the sum-product message passing algorithm and then evaluating the required marginals using (8.72).,Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2204,"Consider a tree-structured factor graph, in which a given subset of the variable nodes form a connected subgraph (i.e., any variable node of the subset is connected to at least one of the other variable nodes via a single factor node). Show how the sum-product algorithm can be used to compute the marginal distribution over that subset.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2205,"In Section 8.4.4, we showed that the marginal distribution p(xi) for a variable node xi in a factor graph is given by the product of the messages arriving at this node from neighbouring factor nodes in the form (8.63). Show that the marginal p(xi) can also be written as the product of the incoming message along any one of the links with the outgoing message along the same link.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,421,2206,"Show that the marginal distribution for the variables xs in a factor fs(xs) in a tree-structured factor graph, after running the sum-product message passing algo- rithm, can be written as the product of the message arriving at the factor node along all its links, times the local factor f(xs), in the form (8.72).",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,422,2207,"In (8.86), we veriﬁed that the sum-product algorithm run on the graph in Figure 8.51 with node x3 designated as the root node gives the correct marginal for x2. Show that the correct marginals are obtained also for x1 and x3. Similarly, show that the use of the result (8.72) after running the sum-product algorithm on this graph gives the correct joint distribution for x1, x2.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,422,2208,"(⋆) Consider a tree-structured factor graph over discrete variables, and suppose we wish to evaluate the joint distribution p(xa, xb) associated with two variables xa and xb that do not belong to a common factor. Deﬁne a procedure for using the sum- product algorithm to evaluate this joint distribution in which one of the variables is successively clamped to each of its allowed values.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,422,2209,"(⋆⋆) Consider two discrete variables x and y each having three possible states, for example x, y ∈{0, 1, 2}. Construct a joint distribution p(x, y) over these variables having the property that the value x that maximizes the marginal p(x), along with the value y that maximizes the marginal p(y), together have probability zero under the joint distribution, so that p(x,y) = 0.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,422,2210,"The concept of a pending message in the sum-product algorithm for a factor graph was deﬁned in Section 8.4.7. Show that if the graph has one or more cycles, there will always be at least one pending message irrespective of how long the algorithm runs.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Graphical Models,8,422,2211,"Show that if the sum-product algorithm is run on a factor graph with a tree structure (no loops), then after a ﬁnite number of messages have been sent, there will be no pending messages.",Samples from standard distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,423,2212,"If we deﬁne a joint distribution over observed and latent variables, the correspond- ing distribution of the observed variables alone is obtained by marginalization. This allows relatively complex marginal distributions over observed variables to be ex- pressed in terms of more tractable joint distributions over the expanded space of observed and latent variables. The introduction of latent variables thereby allows complicated distributions to be formed from simpler components. In this chapter, we shall see that mixture distributions, such as the Gaussian mixture discussed in Section 2.3.9, can be interpreted in terms of discrete latent variables. Continuous latent variables will form the subject of Chapter 12.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,424,2213,"As well as providing a framework for building more complex probability dis- tributions, mixture models can also be used to cluster data. We therefore begin our discussion of mixture distributions by considering the problem of ﬁnding clusters in a set of data points, which we approach ﬁrst using a nonprobabilistic technique called the K-means algorithm (Lloyd, 1982). Then we introduce the latent variable \end{verbatim} egin{verbatim} view of mixture distributions in which the discrete latent variables can be interpreted as deﬁning assignments of data points to speciﬁc components of the mixture. A gen- eral technique for ﬁnding maximum likelihood estimators in latent variable models is the expectation-maximization (EM) algorithm. We ﬁrst of all use the Gaussian mixture distribution to motivate the EM algorithm in a fairly informal way, and then we give a more careful treatment based on the latent variable viewpoint. We shall see that the K-means algorithm corresponds to a particular nonprobabilistic limit of EM applied to mixtures of Gaussians. Finally, we discuss EM in some generality.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,424,2214,"Gaussian mixture models are widely used in data mining, pattern recognition, machine learning, and statistical analysis. In many applications, their parameters are determined by maximum likelihood, typically using the EM algorithm. However, as we shall see there are some signiﬁcant limitations to the maximum likelihood ap- proach, and in Chapter 10 we shall show that an elegant Bayesian treatment can be given using the framework of variational inference. This requires little additional computation compared with EM, and it resolves the principal difﬁculties of maxi- mum likelihood while also allowing the number of components in the mixture to be inferred automatically from the data.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,424,2215,"We begin by considering the problem of identifying groups, or clusters, of data points in a multidimensional space. Suppose we have a data set {x1, . . . , xN} consisting of N observations of a random D-dimensional Euclidean variable x. Our goal is to partition the data set into some number K of clusters, where we shall suppose for the moment that the value of K is given. Intuitively, we might think of a cluster as comprising a group of data points whose inter-point distances are small compared with the distances to points outside of the cluster. We can formalize this notion by ﬁrst introducing a set of D-dimensional vectors µk, where k = 1, . . . , K, in which µk is a prototype associated with the kth cluster. As we shall see shortly, we can think of the µk as representing the centres of the clusters. Our goal is then to ﬁnd an assignment of data points to clusters, as well as a set of vectors {µk}, such that the sum of the squares of the distances of each data point to its closest vector µk, is a minimum.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2216,"It is convenient at this point to deﬁne some notation to describe the assignment of data points to clusters. For each data point xn, we introduce a corresponding set of binary indicator variables rnk ∈{0, 1}, where k = 1, . . . , K describing which of the K clusters the data point xn is assigned to, so that if data point xn is assigned to cluster k then rnk = 1, and rnj = 0 for j ̸= k. This is known as the 1-of-K coding scheme. We can then deﬁne an objective function, sometimes called a distortion measure, given by J = N  n=1 K  k=1 rnk∥xn −µk∥2 (9.1) which represents the sum of the squares of the distances of each data point to its \end{verbatim} egin{verbatim} assigned vector µk. Our goal is to ﬁnd values for the {rnk} and the {µk} so as to minimize J. We can do this through an iterative procedure in which each iteration involves two successive steps corresponding to successive optimizations with respect to the rnk and the µk. First we choose some initial values for the µk. Then in the ﬁrst phase we minimize J with respect to the rnk, keeping the µk ﬁxed. In the second phase we minimize J with respect to the µk, keeping rnk ﬁxed. This two-stage optimization is then repeated until convergence. We shall see that these two stages of updating rnk and updating µk correspond respectively to the E (expectation) and M (maximization) steps of the EM algorithm, and to emphasize this we shall use the terms E step and M step in the context of the K-means algorithm.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2217,"Consider ﬁrst the determination of the rnk. Because J in (9.1) is a linear func- tion of rnk, this optimization can be performed easily to give a closed form solution.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2218,"The terms involving different n are independent and so we can optimize for each n separately by choosing rnk to be 1 for whichever value of k gives the minimum value of ∥xn −µk∥2. In other words, we simply assign the nth data point to the closest cluster centre. More formally, this can be expressed as rnk = 1 if k = arg minj ∥xn −µj∥2 0 otherwise.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2219,"Now consider the optimization of the µk with the rnk held ﬁxed. The objective function J is a quadratic function of µk, and it can be minimized by setting its derivative with respect to µk to zero giving 2 N  n=1 rnk(xn −µk) = 0 (9.3) which we can easily solve for µk to give µk =  n rnkxn  n rnk .",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2220,"The denominator in this expression is equal to the number of points assigned to cluster k, and so this result has a simple interpretation, namely set µk equal to the mean of all of the data points xn assigned to cluster k. For this reason, the procedure is known as the K-means algorithm.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,425,2221,"The two phases of re-assigning data points to clusters and re-computing the clus- ter means are repeated in turn until there is no further change in the assignments (or until some maximum number of iterations is exceeded). Because each phase reduces the value of the objective function J, convergence of the algorithm is assured. How- ever, it may converge to a local rather than global minimum of J. The convergence properties of the K-means algorithm were studied by MacQueen (1967).",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,426,2222,"Figure 9.1 Illustration of the K-means algorithm using the re-scaled Old Faithful data set. (a) Green points denote the data set in a two-dimensional Euclidean space. The initial choices for centres µ1 and µ2 are shown by the red and blue crosses, respectively. (b) In the initial E step, each data point is assigned either to the red cluster or to the blue cluster, according to which cluster centre is nearer. This is equivalent to classifying the points according to which side of the perpendicular bisector of the two cluster centres, shown by the magenta line, they lie on. (c) In the subsequent M step, each cluster centre is re-computed to be the mean of the points assigned to the corresponding cluster. (d)–(i) show successive E and M steps through to ﬁnal convergence of the algorithm.",Monte Carlo integration
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2223,Figure 9.2 Plot of the cost function J given by (9.1) after each E step (blue points) and M step (red points) of the K- means algorithm for the example shown in Figure 9.1.,Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2224,"The K-means algorithm is illustrated using the Old Faithful data set in Fig- Appendix A ure 9.1. For the purposes of this example, we have made a linear re-scaling of the data, known as standardizing, such that each of the variables has zero mean and unit standard deviation. For this example, we have chosen K = 2, and so in this \end{verbatim} egin{verbatim} (a) −2 0 2 −2 0 2 (b) −2 0 2 −2 0 2 (c) −2 0 2 −2 0 2 (d) −2 0 2 −2 0 2 (e) −2 0 2 −2 0 2 (f) −2 0 2 −2 0 2 (g) −2 0 2 −2 0 2 (h) −2 0 2 −2 0 2 (i) −2 0 2 −2 0 2 \end{verbatim} egin{verbatim} The algo- rithm has converged after the third M step, and the ﬁnal EM cycle pro- duces no changes in either the as- signments or the prototype vectors.",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2225,"case, the assignment of each data point to the nearest cluster centre is equivalent to a classiﬁcation of the data points according to which side they lie of the perpendicular bisector of the two cluster centres. A plot of the cost function J given by (9.1) for the Old Faithful example is shown in Figure 9.2.",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2226,"Note that we have deliberately chosen poor initial values for the cluster centres so that the algorithm takes several steps before convergence. In practice, a better initialization procedure would be to choose the cluster centres µk to be equal to a random subset of K data points. It is also worth noting that the K-means algorithm itself is often used to initialize the parameters in a Gaussian mixture model before applying the EM algorithm.",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2227,"A direct implementation of the K-means algorithm as discussed here can be relatively slow, because in each E step it is necessary to compute the Euclidean dis- tance between every prototype vector and every data point. Various schemes have been proposed for speeding up the K-means algorithm, some of which are based on precomputing a data structure such as a tree such that nearby points are in the same subtree (Ramasubramanian and Paliwal, 1990; Moore, 2000). Other approaches make use of the triangle inequality for distances, thereby avoiding unnecessary dis- tance calculations (Hodgson, 1998; Elkan, 2003).",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,427,2228,"So far, we have considered a batch version of K-means in which the whole data set is used together to update the prototype vectors. We can also derive an on-line stochastic algorithm (MacQueen, 1967) by applying the Robbins-Monro procedure to the problem of ﬁnding the roots of the regression function given by the derivatives of J in (9.1) with respect to µk. This leads to a sequential update in which, for each data point xn in turn, we update the nearest prototype µk using µnew k = µold k + ηn(xn −µold k ) (9.5) where ηn is the learning rate parameter, which is typically made to decrease mono- tonically as more data points are considered.",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,428,2229,"The K-means algorithm is based on the use of squared Euclidean distance as the measure of dissimilarity between a data point and a prototype vector. Not only does this limit the type of data variables that can be considered (it would be inappropriate for cases where some or all of the variables represent categorical labels for instance), \end{verbatim} egin{verbatim} but it can also make the determination of the cluster means nonrobust to outliers. We can generalize the K-means algorithm by introducing a more general dissimilarity measure V(x, x′) between two vectors x and x′ and then minimizing the following distortion measure J = N  n=1 K  k=1 rnkV(xn, µk) (9.6) which gives the K-medoids algorithm. The E step again involves, for given cluster prototypes µk, assigning each data point to the cluster for which the dissimilarity to the corresponding prototype is smallest. The computational cost of this is O(KN), as is the case for the standard K-means algorithm. For a general choice of dissimi- larity measure, the M step is potentially more complex than for K-means, and so it is common to restrict each cluster prototype to be equal to one of the data vectors as- signed to that cluster, as this allows the algorithm to be implemented for any choice of dissimilarity measure V(·, ·) so long as it can be readily evaluated. Thus the M step involves, for each cluster k, a discrete search over the Nk points assigned to that cluster, which requires O(N 2 k) evaluations of V(·, ·).",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,428,2230,"One notable feature of the K-means algorithm is that at each iteration, every data point is assigned uniquely to one, and only one, of the clusters. Whereas some data points will be much closer to a particular centre µk than to any other centre, there may be other data points that lie roughly midway between cluster centres. In the latter case, it is not clear that the hard assignment to the nearest cluster is the most appropriate. We shall see in the next section that by adopting a probabilistic approach, we obtain ‘soft’ assignments of data points to clusters in a way that reﬂects the level of uncertainty over the most appropriate assignment. This probabilistic formulation brings with it numerous beneﬁts.",Importance sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,429,2231,"Figure 9.3 Two examples of the application of the K-means clustering algorithm to image segmentation show- ing the initial images together with their K-means segmentations obtained using various values of K. This also illustrates of the use of vector quantization for data compression, in which smaller values of K give higher compression at the expense of poorer image quality.",Re-sampling methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,429,2232,"As an illustration of the application of the K-means algorithm, we consider the related problems of image segmentation and image compression. The goal of segmentation is to partition an image into regions each of which has a reasonably homogeneous visual appearance or which corresponds to objects or parts of objects (Forsyth and Ponce, 2003). Each pixel in an image is a point in a 3-dimensional space comprising the intensities of the red, blue, and green channels, and our segmentation algorithm simply treats each pixel in the image as a separate data point. Note that strictly this space is not Euclidean because the channel intensities are bounded by the interval [0, 1]. Nevertheless, we can apply the K-means algorithm without difﬁ- culty. We illustrate the result of running K-means to convergence, for any particular value of K, by re-drawing the image replacing each pixel vector with the {R, G, B} intensity triplet given by the centre µk to which that pixel has been assigned. Results for various values of K are shown in Figure 9.3. We see that for a given value of K, the algorithm is representing the image using a palette of only K colours. It should be emphasized that this use of K-means is not a particularly sophisticated approach to image segmentation, not least because it takes no account of the spatial proximity of different pixels. The image segmentation problem is in general extremely difﬁcult \end{verbatim} egin{verbatim} K = 2 K = 3 K = 10 Original image and remains the subject of active research and is introduced here simply to illustrate the behaviour of the K-means algorithm.",Re-sampling methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,429,2233,"We can also use the result of a clustering algorithm to perform data compres- sion. It is important to distinguish between lossless data compression, in which the goal is to be able to reconstruct the original data exactly from the compressed representation, and lossy data compression, in which we accept some errors in the reconstruction in return for higher levels of compression than can be achieved in the lossless case. We can apply the K-means algorithm to the problem of lossy data compression as follows. For each of the N data points, we store only the identity k of the cluster to which it is assigned. We also store the values of the K clus- ter centres µk, which typically requires signiﬁcantly less data, provided we choose K ≪N. Each data point is then approximated by its nearest centre µk. New data points can similarly be compressed by ﬁrst ﬁnding the nearest µk and then storing the label k instead of the original data vector. This framework is often called vector quantization, and the vectors µk are called code-book vectors.",Re-sampling methods
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,430,2234,"The image segmentation problem discussed above also provides an illustration of the use of clustering for data compression. Suppose the original image has N pixels comprising {R, G, B} values each of which is stored with 8 bits of precision.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,430,2235,"Then to transmit the whole image directly would cost 24N bits. Now suppose we ﬁrst run K-means on the image data, and then instead of transmitting the original pixel intensity vectors we transmit the identity of the nearest vector µk. Because there are K such vectors, this requires log2 K bits per pixel. We must also transmit the K code book vectors µk, which requires 24K bits, and so the total number of bits required to transmit the image is 24K + N log2 K (rounding up to the nearest integer). The original image shown in Figure 9.3 has 240 × 180 = 43, 200 pixels and so requires 24 × 43, 200 = 1, 036, 800 bits to transmit directly. By comparison, the compressed images require 43, 248 bits (K = 2), 86, 472 bits (K = 3), and 173, 040 bits (K = 10), respectively, to transmit. These represent compression ratios compared to the original image of 4.2%, 8.3%, and 16.7%, respectively. We see that there is a trade-off between degree of compression and image quality. Note that our aim in this example is to illustrate the K-means algorithm. If we had been aiming to produce a good image compressor, then it would be more fruitful to consider small blocks of adjacent pixels, for instance 5×5, and thereby exploit the correlations that exist in natural images between nearby pixels.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,430,2236,"In Section 2.3.9 we motivated the Gaussian mixture model as a simple linear super- position of Gaussian components, aimed at providing a richer class of density mod- els than the single Gaussian. We now turn to a formulation of Gaussian mixtures in terms of discrete latent variables. This will provide us with a deeper insight into this important distribution, and will also serve to motivate the expectation-maximization algorithm.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,430,2237,"Recall from (2.188) that the Gaussian mixture distribution can be written as a linear superposition of Gaussians in the form p(x) = K  k=1 πkN(x|µk, Σk).",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,431,2238,"Figure 9.4 Graphical representation of a mixture model, in which the joint distribution is expressed in the form p(x, z) = p(z)p(x|z).",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,431,2239,"Let us introduce a K-dimensional binary random variable z having a 1-of-K repre- sentation in which a particular element zk is equal to 1 and all other elements are equal to 0. The values of zk therefore satisfy zk ∈{0, 1} and  k zk = 1, and we see that there are K possible states for the vector z according to which element is nonzero. We shall deﬁne the joint distribution p(x, z) in terms of a marginal dis- tribution p(z) and a conditional distribution p(x|z), corresponding to the graphical model in Figure 9.4. The marginal distribution over z is speciﬁed in terms of the mixing coefﬁcients πk, such that p(zk = 1) = πk \end{verbatim} egin{verbatim} x z where the parameters {πk} must satisfy 0 ⩽πk ⩽1 (9.8) together with K  k=1 πk = 1 (9.9) in order to be valid probabilities. Because z uses a 1-of-K representation, we can also write this distribution in the form p(z) = K  k=1 πzk k .",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,431,2240,"Similarly, the conditional distribution of x given a particular value for z is a Gaussian p(x|zk = 1) = N(x|µk, Σk) which can also be written in the form p(x|z) = K  k=1 N(x|µk, Σk)zk.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,431,2241,"The joint distribution is given by p(z)p(x|z), and the marginal distribution of x is then obtained by summing the joint distribution over all possible states of z to give p(x) =  z p(z)p(x|z) = K  k=1 πkN(x|µk, Σk) (9.12) where we have made use of (9.10) and (9.11). Thus the marginal distribution of x is a Gaussian mixture of the form (9.7). If we have several observations x1, . . . , xN, then, because we have represented the marginal distribution in the form p(x) =  z p(x, z), it follows that for every observed data point xn there is a corresponding latent variable zn.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2242,"We have therefore found an equivalent formulation of the Gaussian mixture in- volving an explicit latent variable. It might seem that we have not gained much by doing so. However, we are now able to work with the joint distribution p(x, z) \end{verbatim} egin{verbatim} instead of the marginal distribution p(x), and this will lead to signiﬁcant simpliﬁca- tions, most notably through the introduction of the expectation-maximization (EM) algorithm.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2243,"Another quantity that will play an important role is the conditional probability of z given x. We shall use γ(zk) to denote p(zk = 1|x), whose value can be found using Bayes’ theorem γ(zk) ≡p(zk = 1|x) = p(zk = 1)p(x|zk = 1) K  j=1 p(zj = 1)p(x|zj = 1) = πkN(x|µk, Σk) K  j=1 πjN(x|µj, Σj) .",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2244,"We shall view πk as the prior probability of zk = 1, and the quantity γ(zk) as the corresponding posterior probability once we have observed x. As we shall see later, γ(zk) can also be viewed as the responsibility that component k takes for ‘explain- ing’ the observation x.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2245,"We can use the technique of ancestral sampling to generate random samples distributed according to the Gaussian mixture model. To do this, we ﬁrst generate a value for z, which we denote z, from the marginal distribution p(z) and then generate a value for x from the conditional distribution p(x|z). Techniques for sampling from standard distributions are discussed in Chapter 11. We can depict samples from the joint distribution p(x, z) by plotting points at the corresponding values of x and then colouring them according to the value of z, in other words according to which Gaussian component was responsible for generating them, as shown in Figure 9.5(a).",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2246,Similarly samples from the marginal distribution p(x) are obtained by taking the samples from the joint distribution and ignoring the values of z. These are illustrated in Figure 9.5(b) by plotting the x values without any coloured labels.,Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,432,2247,"We can also use this synthetic data set to illustrate the ‘responsibilities’ by eval- uating, for every data point, the posterior probability for each component in the mixture distribution from which this data set was generated. In particular, we can represent the value of the responsibilities γ(znk) associated with data point xn by plotting the corresponding point using proportions of red, blue, and green ink given by γ(znk) for k = 1, 2, 3, respectively, as shown in Figure 9.5(c). So, for instance, a data point for which γ(zn1) = 1 will be coloured red, whereas one for which γ(zn2) = γ(zn3) = 0.5 will be coloured with equal proportions of blue and green ink and so will appear cyan. This should be compared with Figure 9.5(a) in which the data points were labelled using the true identity of the component from which they were generated.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,433,2248,"Figure 9.5 Example of 500 points drawn from the mixture of 3 Gaussians shown in Figure 2.23. (a) Samples from the joint distribution p(z)p(x|z) in which the three states of z, corresponding to the three components of the mixture, are depicted in red, green, and blue, and (b) the corresponding samples from the marginal distribution p(x), which is obtained by simply ignoring the values of z and just plotting the x values. The data set in (a) is said to be complete, whereas that in (b) is incomplete. (c) The same samples in which the colours represent the value of the responsibilities γ(znk) associated with data point xn, obtained by plotting the corresponding point using proportions of red, blue, and green ink given by γ(znk) for k = 1, 2, 3, respectively matrix X in which the nth row is given by xT n. Similarly, the corresponding latent variables will be denoted by an N × K matrix Z with rows zT n. If we assume that the data points are drawn independently from the distribution, then we can express the Gaussian mixture model for this i.i.d. data set using the graphical representation shown in Figure 9.6. From (9.7) the log of the likelihood function is given by ln p(X|π, µ, Σ) = N  n=1 ln  K  k=1 πkN(xn|µk, Σk)  .",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,433,2249,"Figure 9.6 Graphical representation of a Gaussian mixture model for a set of N i.i.d. data points {xn}, with corresponding latent points {zn}, where n = 1, . . . , N.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,434,2250,Figure 9.7 Illustration of how singularities in the likelihood function arise with mixtures of Gaussians.,Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,434,2251,"Suppose we have a data set of observations {x1, . . . , xN}, and we wish to model this data using a mixture of Gaussians. We can represent this data set as an N × D \end{verbatim} egin{verbatim} (a) 0 0.5 1 0 0.5 1 (b) 0 0.5 1 0 0.5 1 (c) 0 0.5 1 0 0.5 1 (9.14) Before discussing how to maximize this function, it is worth emphasizing that there is a signiﬁcant problem associated with the maximum likelihood framework applied to Gaussian mixture models, due to the presence of singularities. For sim- plicity, consider a Gaussian mixture whose components have covariance matrices given by Σk = σ2 kI, where I is the unit matrix, although the conclusions will hold for general covariance matrices. Suppose that one of the components of the mixture model, let us say the jth component, has its mean µj exactly equal to one of the data xn zn N µ Σ π \end{verbatim} egin{verbatim} This should be com- pared with the case of a single Gaus- sian shown in Figure 1.14 for which no singularities arise.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,434,2252,"points so that µj = xn for some value of n. This data point will then contribute a term in the likelihood function of the form N(xn|xn, σ2 jI) = 1 (2π)1/2 1 σj .",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,434,2253,"If we consider the limit σj →0, then we see that this term goes to inﬁnity and so the log likelihood function will also go to inﬁnity. Thus the maximization of the log likelihood function is not a well posed problem because such singularities will always be present and will occur whenever one of the Gaussian components ‘collapses’ onto a speciﬁc data point. Recall that this problem did not arise in the case of a single Gaussian distribution. To understand the difference, note that if a single Gaussian collapses onto a data point it will contribute multiplicative factors to the likelihood function arising from the other data points and these factors will go to zero exponentially fast, giving an overall likelihood that goes to zero rather than inﬁnity. However, once we have (at least) two components in the mixture, one of the components can have a ﬁnite variance and therefore assign ﬁnite probability to all of the data points while the other component can shrink onto one speciﬁc data point and thereby contribute an ever increasing additive value to the log likelihood.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,434,2254,"This is illustrated in Figure 9.7. These singularities provide another example of the severe over-ﬁtting that can occur in a maximum likelihood approach. We shall see that this difﬁculty does not occur if we adopt a Bayesian approach. For the moment, however, we simply note that in applying maximum likelihood to Gaussian mixture models we must take steps to avoid ﬁnding such pathological solutions and instead seek local maxima of the likelihood function that are well behaved. We can hope to avoid the singularities by using suitable heuristics, for instance by detecting when a Gaussian component is collapsing and resetting its mean to a randomly chosen value while also resetting its covariance to some large value, and then continuing with the optimization.",Markov chains
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,435,2255,"A further issue in ﬁnding maximum likelihood solutions arises from the fact that for any given maximum likelihood solution, a K-component mixture will have a total of K! equivalent solutions corresponding to the K! ways of assigning K sets of parameters to K components. In other words, for any given (nondegenerate) point in the space of parameter values there will be a further K!−1 additional points all of which give rise to exactly the same distribution. This problem is known as \end{verbatim} egin{verbatim} identiﬁability (Casella and Berger, 2002) and is an important issue when we wish to interpret the parameter values discovered by a model. Identiﬁability will also arise when we discuss models having continuous latent variables in Chapter 12. However, for the purposes of ﬁnding a good density model, it is irrelevant because any of the equivalent solutions is as good as any other.",Gibbs sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,435,2256,"Maximizing the log likelihood function (9.14) for a Gaussian mixture model turns out to be a more complex problem than for the case of a single Gaussian. The difﬁculty arises from the presence of the summation over k that appears inside the logarithm in (9.14), so that the logarithm function no longer acts directly on the Gaussian. If we set the derivatives of the log likelihood to zero, we will no longer obtain a closed form solution, as we shall see shortly.",Gibbs sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,435,2257,"One approach is to apply gradient-based optimization techniques (Fletcher, 1987; Nocedal and Wright, 1999; Bishop and Nabney, 2008). Although gradient-based techniques are feasible, and indeed will play an important role when we discuss mixture density networks in Chapter 5, we now consider an alternative approach known as the EM algorithm which has broad applicability and which will lay the foundations for a discussion of variational inference techniques in Chapter 10.",Gibbs sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,435,2258,"An elegant and powerful method for ﬁnding maximum likelihood solutions for models with latent variables is called the expectation-maximization algorithm, or EM algorithm (Dempster et al., 1977; McLachlan and Krishnan, 1997). Later we shall give a general treatment of EM, and we shall also show how EM can be generalized to obtain the variational inference framework. Initially, we shall motivate the EM algorithm by giving a relatively informal treatment in the context of the Gaussian mixture model. We emphasize, however, that EM has broad applicability, and indeed it will be encountered in the context of a variety of different models in this book.",Gibbs sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,435,2259,"Let us begin by writing down the conditions that must be satisﬁed at a maximum of the likelihood function. Setting the derivatives of ln p(X|π, µ, Σ) in (9.14) with respect to the means µk of the Gaussian components to zero, we obtain 0 = − N  n=1 πkN(xn|µk, Σk)  j πjN(xn|µj, Σj) ( )* + γ(znk) Σk(xn −µk) (9.16) where we have made use of the form (2.43) for the Gaussian distribution. Note that the posterior probabilities, or responsibilities, given by (9.13) appear naturally on the right-hand side. Multiplying by Σ−1 k (which we assume to be nonsingular) and rearranging we obtain µk = 1 Nk N  n=1 γ(znk)xn (9.17) where we have deﬁned Nk = N  n=1 γ(znk).",Gibbs sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2260,"We can interpret Nk as the effective number of points assigned to cluster k. Note carefully the form of this solution. We see that the mean µk for the kth Gaussian component is obtained by taking a weighted mean of all of the points in the data set, in which the weighting factor for data point xn is given by the posterior probability γ(znk) that component k was responsible for generating xn.",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2261,"If we set the derivative of ln p(X|π, µ, Σ) with respect to Σk to zero, and follow a similar line of reasoning, making use of the result for the maximum likelihood solution for the covariance matrix of a single Gaussian, we obtain Σk = 1 Nk N  n=1 γ(znk)(xn −µk)(xn −µk)T (9.19) which has the same form as the corresponding result for a single Gaussian ﬁtted to the data set, but again with each data point weighted by the corresponding poste- rior probability and with the denominator given by the effective number of points associated with the corresponding component.",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2262,"Finally, we maximize ln p(X|π, µ, Σ) with respect to the mixing coefﬁcients πk. Here we must take account of the constraint (9.9), which requires the mixing coefﬁcients to sum to one. This can be achieved using a Lagrange multiplier and Appendix E maximizing the following quantity ln p(X|π, µ, Σ) + λ  K  k=1 πk −1  (9.20) which gives 0 = N  n=1 N(xn|µk, Σk)  j πjN(xn|µj, Σj) + λ (9.21) where again we see the appearance of the responsibilities. If we now multiply both sides by πk and sum over k making use of the constraint (9.9), we ﬁnd λ = −N.",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2263,Using this to eliminate λ and rearranging we obtain πk = Nk N (9.22) so that the mixing coefﬁcient for the kth component is given by the average respon- sibility which that component takes for explaining the data points.,Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2264,"It is worth emphasizing that the results (9.17), (9.19), and (9.22) do not con- stitute a closed-form solution for the parameters of the mixture model because the responsibilities γ(znk) depend on those parameters in a complex way through (9.13).",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,436,2265,"However, these results do suggest a simple iterative scheme for ﬁnding a solution to the maximum likelihood problem, which as we shall see turns out to be an instance of the EM algorithm for the particular case of the Gaussian mixture model. We ﬁrst choose some initial values for the means, covariances, and mixing coefﬁcients.",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,437,2266,Figure 9.8 Illustration of the EM algorithm using the Old Faithful set as used for the illustration of the K-means algorithm in Figure 9.1. See the text for details.,Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,437,2267,"Then we alternate between the following two updates that we shall call the E step \end{verbatim} egin{verbatim} (a) −2 0 2 −2 0 2 (b) −2 0 2 −2 0 2 (c) L = 1 −2 0 2 −2 0 2 (d) L = 2 −2 0 2 −2 0 2 (e) L = 5 −2 0 2 −2 0 2 (f) L = 20 −2 0 2 −2 0 2 and the M step, for reasons that will become apparent shortly. In the expectation step, or E step, we use the current values for the parameters to evaluate the posterior probabilities, or responsibilities, given by (9.13). We then use these probabilities in the maximization step, or M step, to re-estimate the means, covariances, and mix- ing coefﬁcients using the results (9.17), (9.19), and (9.22). Note that in so doing we ﬁrst evaluate the new means using (9.17) and then use these new values to ﬁnd the covariances using (9.19), in keeping with the corresponding result for a single Gaussian distribution. We shall show that each update to the parameters resulting from an E step followed by an M step is guaranteed to increase the log likelihood function. In practice, the algorithm is deemed to have converged when the change in the log likelihood function, or alternatively in the parameters, falls below some threshold. We illustrate the EM algorithm for a mixture of two Gaussians applied to the rescaled Old Faithful data set in Figure 9.8.",Slice sampling
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2268,"Here a mixture of two Gaussians is used, with centres initialized using the same values as for the K-means algorithm in Figure 9.1, and with precision matrices initialized to be proportional to the unit matrix. Plot (a) shows the data points in green, together with the initial conﬁgura- tion of the mixture model in which the one standard-deviation contours for the two \end{verbatim} egin{verbatim} Gaussian components are shown as blue and red circles. Plot (b) shows the result of the initial E step, in which each data point is depicted using a proportion of blue ink equal to the posterior probability of having been generated from the blue com- ponent, and a corresponding proportion of red ink given by the posterior probability of having been generated by the red component. Thus, points that have a signiﬁcant probability for belonging to either cluster appear purple. The situation after the ﬁrst M step is shown in plot (c), in which the mean of the blue Gaussian has moved to the mean of the data set, weighted by the probabilities of each data point belonging to the blue cluster, in other words it has moved to the centre of mass of the blue ink.",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2269,"Similarly, the covariance of the blue Gaussian is set equal to the covariance of the blue ink. Analogous results hold for the red component. Plots (d), (e), and (f) show the results after 2, 5, and 20 complete cycles of EM, respectively. In plot (f) the algorithm is close to convergence.",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2270,"Note that the EM algorithm takes many more iterations to reach (approximate) convergence compared with the K-means algorithm, and that each cycle requires signiﬁcantly more computation. It is therefore common to run the K-means algo- rithm in order to ﬁnd a suitable initialization for a Gaussian mixture model that is subsequently adapted using EM. The covariance matrices can conveniently be ini- tialized to the sample covariances of the clusters found by the K-means algorithm, and the mixing coefﬁcients can be set to the fractions of data points assigned to the respective clusters. As with gradient-based approaches for maximizing the log like- lihood, techniques must be employed to avoid singularities of the likelihood function in which a Gaussian component collapses onto a particular data point. It should be emphasized that there will generally be multiple local maxima of the log likelihood function, and that EM is not guaranteed to ﬁnd the largest of these maxima. Because the EM algorithm for Gaussian mixtures plays such an important role, we summarize it below.",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2271,"Given a Gaussian mixture model, the goal is to maximize the likelihood function with respect to the parameters (comprising the means and covariances of the components and the mixing coefﬁcients).",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2272,"1. Initialize the means µk, covariances Σk and mixing coefﬁcients πk, and evaluate the initial value of the log likelihood.",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,438,2273,"2. E step. Evaluate the responsibilities using the current parameter values γ(znk) = πkN(xn|µk, Σk) K  j=1 πjN(xn|µj, Σj) .",The EM Algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,439,2274,3. M step. Re-estimate the parameters using the current responsibilities µnew k = 1 Nk N  n=1 γ(znk)xn (9.24) Σnew k = 1 Nk N  n=1 γ(znk) (xn −µnew k ) (xn −µnew k )T (9.25) πnew k = Nk N (9.26) where Nk = N  n=1 γ(znk).,Gaussian mixtures
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,439,2275,"4. Evaluate the log likelihood ln p(X|µ, Σ, π) = N  n=1 ln  K  k=1 πkN(xn|µk, Σk)  (9.28) and check for convergence of either the parameters or the log likelihood. If the convergence criterion is not satisﬁed return to step 2.",Gaussian mixtures
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,439,2276,"In this section, we present a complementary view of the EM algorithm that recog- nizes the key role played by latent variables. We discuss this approach ﬁrst of all in an abstract setting, and then for illustration we consider once again the case of Gaussian mixtures.",Gaussian mixtures
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,439,2277,"The goal of the EM algorithm is to ﬁnd maximum likelihood solutions for mod- els having latent variables. We denote the set of all observed data by X, in which the nth row represents xT n, and similarly we denote the set of all latent variables by Z, with a corresponding row zT n. The set of all model parameters is denoted by θ, and so the log likelihood function is given by ln p(X|θ) = ln  Z p(X, Z|θ)  .",Gaussian mixtures
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,439,2278,Note that our discussion will apply equally well to continuous latent variables simply by replacing the sum over Z with an integral.,Gaussian mixtures
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2279,"A key observation is that the summation over the latent variables appears inside the logarithm. Even if the joint distribution p(X, Z|θ) belongs to the exponential \end{verbatim} egin{verbatim} family, the marginal distribution p(X|θ) typically does not as a result of this sum- mation. The presence of the sum prevents the logarithm from acting directly on the joint distribution, resulting in complicated expressions for the maximum likelihood solution.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2280,"Now suppose that, for each observation in X, we were told the corresponding value of the latent variable Z. We shall call {X, Z} the complete data set, and we shall refer to the actual observed data X as incomplete, as illustrated in Figure 9.5.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2281,"The likelihood function for the complete data set simply takes the form ln p(X, Z|θ), and we shall suppose that maximization of this complete-data log likelihood function is straightforward.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2282,"In practice, however, we are not given the complete data set {X, Z}, but only the incomplete data X. Our state of knowledge of the values of the latent variables in Z is given only by the posterior distribution p(Z|X, θ). Because we cannot use the complete-data log likelihood, we consider instead its expected value under the posterior distribution of the latent variable, which corresponds (as we shall see) to the E step of the EM algorithm. In the subsequent M step, we maximize this expectation.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2283,"If the current estimate for the parameters is denoted θold, then a pair of successive E and M steps gives rise to a revised estimate θnew. The algorithm is initialized by choosing some starting value for the parameters θ0. The use of the expectation may seem somewhat arbitrary. However, we shall see the motivation for this choice when we give a deeper treatment of EM in Section 9.4.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2284,"In the E step, we use the current parameter values θold to ﬁnd the posterior distribution of the latent variables given by p(Z|X, θold). We then use this posterior distribution to ﬁnd the expectation of the complete-data log likelihood evaluated for some general parameter value θ. This expectation, denoted Q(θ, θold), is given by Q(θ, θold) =  Z p(Z|X, θold) ln p(X, Z|θ).",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2285,"In the M step, we determine the revised parameter estimate θnew by maximizing this function θnew = arg max θ Q(θ, θold).",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2286,"Note that in the deﬁnition of Q(θ, θold), the logarithm acts directly on the joint distribution p(X, Z|θ), and so the corresponding M-step maximization will, by sup- position, be tractable.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2287,"The general EM algorithm is summarized below. It has the property, as we shall show later, that each cycle of EM will increase the incomplete-data log likelihood (unless it is already at a local maximum).",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,440,2288,"Given a joint distribution p(X, Z|θ) over observed variables X and latent vari- ables Z, governed by parameters θ, the goal is to maximize the likelihood func- tion p(X|θ) with respect to θ.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2289,"1. Choose an initial setting for the parameters θold. \end{verbatim} egin{verbatim} 2. E step Evaluate p(Z|X, θold).",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2290,"3. M step Evaluate θnew given by θnew = arg max θ Q(θ, θold) (9.32) where Q(θ, θold) =  Z p(Z|X, θold) ln p(X, Z|θ).",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2291,"4. Check for convergence of either the log likelihood or the parameter values. If the convergence criterion is not satisﬁed, then let θold ←θnew (9.34) and return to step 2.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2292,"The EM algorithm can also be used to ﬁnd MAP (maximum posterior) solutions for models in which a prior p(θ) is deﬁned over the parameters. In this case the E step remains the same as in the maximum likelihood case, whereas in the M step the quantity to be maximized is given by Q(θ, θold) + ln p(θ). Suitable choices for the prior will remove the singularities of the kind illustrated in Figure 9.7.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2293,"Here we have considered the use of the EM algorithm to maximize a likelihood function when there are discrete latent variables. However, it can also be applied when the unobserved variables correspond to missing values in the data set. The distribution of the observed values is obtained by taking the joint distribution of all the variables and then marginalizing over the missing ones. EM can then be used to maximize the corresponding likelihood function. We shall show an example of the application of this technique in the context of principal component analysis in Figure 12.11. This will be a valid procedure if the data values are missing at random, meaning that the mechanism causing values to be missing does not depend on the unobserved values. In many situations this will not be the case, for instance if a sensor fails to return a value whenever the quantity it is measuring exceeds some threshold.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,441,2294,"We now consider the application of this latent variable view of EM to the spe- ciﬁc case of a Gaussian mixture model. Recall that our goal is to maximize the log likelihood function (9.14), which is computed using the observed data set X, and we saw that this was more difﬁcult than for the case of a single Gaussian distribution due to the presence of the summation over k that occurs inside the logarithm. Sup- pose then that in addition to the observed data set X, we were also given the values of the corresponding discrete variables Z. Recall that Figure 9.5(a) shows a ‘com- plete’ data set (i.e., one that includes labels showing which component generated each data point) while Figure 9.5(b) shows the corresponding ‘incomplete’ data set.",Alternative view of the EM algorithm
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,442,2295,"Figure 9.9 This shows the same graph as in Figure 9.6 except that we now suppose that the discrete variables zn are ob- served, as well as the data variables xn.",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,442,2296,"The graphical model for the complete data is shown in Figure 9.9. \end{verbatim} egin{verbatim} xn zn N µ Σ π Now consider the problem of maximizing the likelihood for the complete data set {X, Z}. From (9.10) and (9.11), this likelihood function takes the form p(X, Z|µ, Σ, π) = N  n=1 K  k=1 πznk k N(xn|µk, Σk)znk (9.35) where znk denotes the kth component of zn. Taking the logarithm, we obtain ln p(X, Z|µ, Σ, π) = N  n=1 K  k=1 znk {ln πk + ln N(xn|µk, Σk)} .",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,442,2297,"Comparison with the log likelihood function (9.14) for the incomplete data shows that the summation over k and the logarithm have been interchanged. The loga- rithm now acts directly on the Gaussian distribution, which itself is a member of the exponential family. Not surprisingly, this leads to a much simpler solution to the maximum likelihood problem, as we now show. Consider ﬁrst the maximization with respect to the means and covariances. Because zn is a K-dimensional vec- tor with all elements equal to 0 except for a single element having the value 1, the complete-data log likelihood function is simply a sum of K independent contribu- tions, one for each mixture component. Thus the maximization with respect to a mean or a covariance is exactly as for a single Gaussian, except that it involves only the subset of data points that are ‘assigned’ to that component. For the maximization with respect to the mixing coefﬁcients, we note that these are coupled for different values of k by virtue of the summation constraint (9.9). Again, this can be enforced using a Lagrange multiplier as before, and leads to the result πk = 1 N N  n=1 znk (9.37) so that the mixing coefﬁcients are equal to the fractions of data points assigned to the corresponding components.",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,442,2298,"Thus we see that the complete-data log likelihood function can be maximized trivially in closed form. In practice, however, we do not have values for the latent variables so, as discussed earlier, we consider the expectation, with respect to the posterior distribution of the latent variables, of the complete-data log likelihood.",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,443,2299,"Using (9.10) and (9.11) together with Bayes’ theorem, we see that this posterior distribution takes the form p(Z|X, µ, Σ, π) ∝ N  n=1 K  k=1 [πkN(xn|µk, Σk)]znk .",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,443,2300,"and hence factorizes over n so that under the posterior distribution the {zn} are independent. This is easily veriﬁed by inspection of the directed graph in Figure 9.6 and making use of the d-separation criterion. The expected value of the indicator variable znk under this posterior distribution is then given by E[znk] =  znk znk [πkN(xn|µk, Σk)]znk  znj  πjN(xn|µj, Σj)	znj = πkN(xn|µk, Σk) K  j=1 πjN(xn|µj, Σj) = γ(znk) (9.39) which is just the responsibility of component k for data point xn. The expected value of the complete-data log likelihood function is therefore given by EZ[ln p(X, Z|µ, Σ, π)] = N  n=1 K  k=1 γ(znk) {ln πk + ln N(xn|µk, Σk)} .",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,443,2301,"We can now proceed as follows. First we choose some initial values for the param- eters µold, Σold and πold, and use these to evaluate the responsibilities (the E step).",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,443,2302,"We then keep the responsibilities ﬁxed and maximize (9.40) with respect to µk, Σk and πk (the M step). This leads to closed form solutions for µnew, Σnew and πnew given by (9.17), (9.19), and (9.22) as before. This is precisely the EM algorithm for Gaussian mixtures as derived earlier. We shall gain more insight into the role of the expected complete-data log likelihood function when we give a proof of convergence of the EM algorithm in Section 9.4.",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,443,2303,"Comparison of the K-means algorithm with the EM algorithm for Gaussian mixtures shows that there is a close similarity. Whereas the K-means algorithm performs a hard assignment of data points to clusters, in which each data point is associated uniquely with one cluster, the EM algorithm makes a soft assignment based on the posterior probabilities. In fact, we can derive the K-means algorithm as a particular limit of EM for Gaussian mixtures as follows.",Relation to K-means
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2304,"Consider a Gaussian mixture model in which the covariance matrices of the mixture components are given by ϵI, where ϵ is a variance parameter that is shared \end{verbatim} egin{verbatim} by all of the components, and I is the identity matrix, so that p(x|µk, Σk) = 1 (2πϵ)1/2 exp −1 2ϵ∥x −µk∥2 .",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2305,"We now consider the EM algorithm for a mixture of K Gaussians of this form in which we treat ϵ as a ﬁxed constant, instead of a parameter to be re-estimated. From (9.13) the posterior probabilities, or responsibilities, for a particular data point xn, are given by γ(znk) = πk exp {−∥xn −µk∥2/2ϵ}  j πj exp  −∥xn −µj∥2/2ϵ.",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2306,"If we consider the limit ϵ →0, we see that in the denominator the term for which ∥xn −µj∥2 is smallest will go to zero most slowly, and hence the responsibilities γ(znk) for the data point xn all go to zero except for term j, for which the responsi- bility γ(znj) will go to unity. Note that this holds independently of the values of the πk so long as none of the πk is zero. Thus, in this limit, we obtain a hard assignment of data points to clusters, just as in the K-means algorithm, so that γ(znk) →rnk where rnk is deﬁned by (9.2). Each data point is thereby assigned to the cluster having the closest mean.",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2307,"The EM re-estimation equation for the µk, given by (9.17), then reduces to the K-means result (9.4). Note that the re-estimation formula for the mixing coefﬁcients (9.22) simply re-sets the value of πk to be equal to the fraction of data points assigned to cluster k, although these parameters no longer play an active role in the algorithm.",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2308,"Finally, in the limit ϵ →0 the expected complete-data log likelihood, given by (9.40), becomes EZ[ln p(X, Z|µ, Σ, π)] →−1 2 N  n=1 K  k=1 rnk∥xn −µk∥2 + const.",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2309,"Thus we see that in this limit, maximizing the expected complete-data log likelihood is equivalent to minimizing the distortion measure J for the K-means algorithm given by (9.1).",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2310,"Note that the K-means algorithm does not estimate the covariances of the clus- ters but only the cluster means. A hard-assignment version of the Gaussian mixture model with general covariance matrices, known as the elliptical K-means algorithm, has been considered by Sung and Poggio (1994).",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,444,2311,"So far in this chapter, we have focussed on distributions over continuous vari- ables described by mixtures of Gaussians. As a further example of mixture mod- elling, and to illustrate the EM algorithm in a different context, we now discuss mix- tures of discrete binary variables described by Bernoulli distributions. This model is also known as latent class analysis (Lazarsfeld and Henry, 1968; McLachlan and Peel, 2000). As well as being of practical importance in its own right, our discus- sion of Bernoulli mixtures will also lay the foundation for a consideration of hidden Markov models over discrete variables.",Mixtures of Bernoulli distributions
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,445,2312,"Consider a set of D binary variables xi, where i = 1, . . . , D, each of which is governed by a Bernoulli distribution with parameter µi, so that p(x|µ) = D  i=1 µxi i (1 −µi)(1−xi) (9.44) where x = (x1, . . . , xD)T and µ = (µ1, . . . , µD)T. We see that the individual variables xi are independent, given µ. The mean and covariance of this distribution are easily seen to be E[x] = µ (9.45) cov[x] = diag{µi(1 −µi)}.",Bayesian mixture models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,445,2313,"Now let us consider a ﬁnite mixture of these distributions given by p(x|µ, π) = K  k=1 πkp(x|µk) (9.47) where µ = {µ1, . . . , µK}, π = {π1, . . . , πK}, and p(x|µk) = D  i=1 µxi ki(1 −µki)(1−xi).",Bayesian mixture models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,445,2314,"The mean and covariance of this mixture distribution are given by E[x] = K  k=1 πkµk (9.49) cov[x] = K  k=1 πk  Σk + µkµT k  −E[x]E[x]T (9.50) where Σk = diag {µki(1 −µki)}. Because the covariance matrix cov[x] is no longer diagonal, the mixture distribution can capture correlations between the vari- ables, unlike a single Bernoulli distribution.",Bayesian mixture models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,445,2315,"If we are given a data set X = {x1, . . . , xN} then the log likelihood function for this model is given by ln p(X|µ, π) = N  n=1 ln  K  k=1 πkp(xn|µk)  .",Bayesian mixture models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,445,2316,"Again we see the appearance of the summation inside the logarithm, so that the maximum likelihood solution no longer has closed form.",Bayesian mixture models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,446,2317,"We now derive the EM algorithm for maximizing the likelihood function for the mixture of Bernoulli distributions. To do this, we ﬁrst introduce an explicit latent \end{verbatim} egin{verbatim} variable z associated with each instance of x. As in the case of the Gaussian mixture, z = (z1, . . . , zK)T is a binary K-dimensional variable having a single component equal to 1, with all other components equal to 0. We can then write the conditional distribution of x, given the latent variable, as p(x|z, µ) = K  k=1 p(x|µk)zk (9.52) while the prior distribution for the latent variables is the same as for the mixture of Gaussians model, so that p(z|π) = K  k=1 πzk k .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,446,2318,"If we form the product of p(x|z, µ) and p(z|π) and then marginalize over z, then we recover (9.47).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,446,2319,"In order to derive the EM algorithm, we ﬁrst write down the complete-data log likelihood function, which is given by ln p(X, Z|µ, π) = N  n=1 K  k=1 znk  ln πk + D  i=1 [xni ln µki + (1 −xni) ln(1 −µki)]  (9.54) where X = {xn} and Z = {zn}. Next we take the expectation of the complete-data log likelihood with respect to the posterior distribution of the latent variables to give EZ[ln p(X, Z|µ, π)] = N  n=1 K  k=1 γ(znk)  ln πk + D  i=1 [xni ln µki + (1 −xni) ln(1 −µki)]  (9.55) where γ(znk) = E[znk] is the posterior probability, or responsibility, of component k given data point xn. In the E step, these responsibilities are evaluated using Bayes’ theorem, which takes the form γ(znk) = E[znk] =  znk znk [πkp(xn|µk)]znk  znj  πjp(xn|µj) znj = πkp(xn|µk) K  j=1 πjp(xn|µj) .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,447,2320,"If we consider the sum over n in (9.55), we see that the responsibilities enter only through two terms, which can be written as Nk = N  n=1 γ(znk) (9.57) xk = 1 Nk N  n=1 γ(znk)xn (9.58) where Nk is the effective number of data points associated with component k. In the M step, we maximize the expected complete-data log likelihood with respect to the parameters µk and π. If we set the derivative of (9.55) with respect to µk equal to zero and rearrange the terms, we obtain µk = xk.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,447,2321,"We see that this sets the mean of component k equal to a weighted mean of the data, with weighting coefﬁcients given by the responsibilities that component k takes for data points. For the maximization with respect to πk, we need to introduce a Lagrange multiplier to enforce the constraint  k πk = 1. Following analogous steps to those used for the mixture of Gaussians, we then obtain πk = Nk N (9.60) which represents the intuitively reasonable result that the mixing coefﬁcient for com- ponent k is given by the effective fraction of points in the data set explained by that component.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,447,2322,"Note that in contrast to the mixture of Gaussians, there are no singularities in which the likelihood function goes to inﬁnity. This can be seen by noting that the likelihood function is bounded above because 0 ⩽p(xn|µk) ⩽1. There exist singularities at which the likelihood function goes to zero, but these will not be found by EM provided it is not initialized to a pathological starting point, because the EM algorithm always increases the value of the likelihood function, until a local maximum is found. We illustrate the Bernoulli mixture model in Figure 9.10 by using it to model handwritten digits. Here the digit images have been turned into binary vectors by setting all elements whose values exceed 0.5 to 1 and setting the remaining elements to 0. We now ﬁt a data set of N = 600 such digits, comprising the digits ‘2’, ‘3’, and ‘4’, with a mixture of K = 3 Bernoulli distributions by running 10 iterations of the EM algorithm. The mixing coefﬁcients were initialized to πk = 1/K, and the parameters µkj were set to random values chosen uniformly in the range (0.25, 0.75) and then normalized to satisfy the constraint that  j µkj = 1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,447,2323,We see that a mixture of 3 Bernoulli distributions is able to ﬁnd the three clusters in the data set corresponding to the different digits.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,448,2324,"Figure 9.10 Illustration of the Bernoulli mixture model in which the top row shows examples from the digits data set after converting the pixel values from grey scale to binary using a threshold of 0.5. On the bottom row the ﬁrst three images show the parameters µki for each of the three components in the mixture model. As a comparison, we also ﬁt the same data set using a single multivariate Bernoulli distribution, again using maximum likelihood.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,448,2325,"The conjugate prior for the parameters of a Bernoulli distribution is given by the beta distribution, and we have seen that a beta prior is equivalent to introducing \end{verbatim} egin{verbatim} This amounts to simply averaging the counts in each pixel and is shown by the right-most image on the bottom row.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,448,2326,"additional effective observations of x. We can similarly introduce priors into the Bernoulli mixture model, and use EM to maximize the posterior probability distri- butions.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,448,2327,"It is straightforward to extend the analysis of Bernoulli mixtures to the case of multinomial binary variables having M > 2 states by making use of the discrete dis- tribution (2.26). Again, we can introduce Dirichlet priors over the model parameters if desired.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,448,2328,"As a third example of the application of EM, we return to the evidence ap- proximation for Bayesian linear regression. In Section 3.5.2, we obtained the re- estimation equations for the hyperparameters α and β by evaluation of the evidence and then setting the derivatives of the resulting expression to zero. We now turn to an alternative approach for ﬁnding α and β based on the EM algorithm. Recall that our goal is to maximize the evidence function p(t|α, β) given by (3.77) with respect to α and β. Because the parameter vector w is marginalized out, we can regard it as a latent variable, and hence we can optimize this marginal likelihood function using EM. In the E step, we compute the posterior distribution of w given the current set- ting of the parameters α and β and then use this to ﬁnd the expected complete-data log likelihood. In the M step, we maximize this quantity with respect to α and β. We have already derived the posterior distribution of w because this is given by (3.49).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2329,"The complete-data log likelihood function is then given by ln p(t, w|α, β) = ln p(t|w, β) + ln p(w|α) (9.61) \end{verbatim} egin{verbatim} where the likelihood p(t|w, β) and the prior p(w|α) are given by (3.10) and (3.52), respectively, and y(x, w) is given by (3.3). Taking the expectation with respect to the posterior distribution of w then gives E [ln p(t, w|α, β)] = M 2 ln  α 2π  −α 2 E  wTw + N 2 ln  β 2π  −β 2 N  n=1 E  (tn −wTφn)2 .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2330,"Setting the derivatives with respect to α to zero, we obtain the M step re-estimation equation α = M E [wTw] = M mT NmN + Tr(SN).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2331,An analogous result holds for β. Note that this re-estimation equation takes a slightly different form from the corresponding result (3.92) derived by direct evaluation of the evidence function.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2332,"However, they each involve computation and inversion (or eigen decomposition) of an M × M matrix and hence will have comparable computational cost per iteration.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2333,These two approaches to determining α should of course converge to the same result (assuming they ﬁnd the same local maximum of the evidence function). This can be veriﬁed by ﬁrst noting that the quantity γ is deﬁned by γ = M −α M  i=1 1 λi + α = M −αTr(SN).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,449,2334,"At a stationary point of the evidence function, the re-estimation equation (3.92) will be self-consistently satisﬁed, and hence we can substitute for γ to give αmT NmN = γ = M −αTr(SN) (9.65) and solving for α we obtain (9.63), which is precisely the EM re-estimation equation.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2335,"As a ﬁnal example, we consider a closely related model, namely the relevance vector machine for regression discussed in Section 7.2.1. There we used direct max- imization of the marginal likelihood to derive re-estimation equations for the hyper- parameters α and β. Here we consider an alternative approach in which we view the weight vector w as a latent variable and apply the EM algorithm. The E step involves ﬁnding the posterior distribution over the weights, and this is given by (7.81). In the M step we maximize the expected complete-data log likelihood, which is deﬁned by Ew [ln p(t|X, w, β)p(w|α)] (9.66) where the expectation is taken with respect to the posterior distribution computed using the ‘old’ parameter values. To compute the new parameter values we maximize with respect to α and β to give \end{verbatim} egin{verbatim} αnew i = 1 m2 i + Σii (9.67) (βnew)−1 = ∥t −ΦmN∥2 + β−1  i γi N (9.68) These re-estimation equations are formally equivalent to those obtained by direct maxmization.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2336,"The expectation maximization algorithm, or EM algorithm, is a general technique for ﬁnding maximum likelihood solutions for probabilistic models having latent vari- ables (Dempster et al., 1977; McLachlan and Krishnan, 1997). Here we give a very general treatment of the EM algorithm and in the process provide a proof that the EM algorithm derived heuristically in Sections 9.2 and 9.3 for Gaussian mixtures does indeed maximize the likelihood function (Csisz`ar and Tusn`ady, 1984; Hath- away, 1986; Neal and Hinton, 1999). Our discussion will also form the basis for the derivation of the variational inference framework.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2337,"Consider a probabilistic model in which we collectively denote all of the ob- served variables by X and all of the hidden variables by Z. The joint distribution p(X, Z|θ) is governed by a set of parameters denoted θ. Our goal is to maximize the likelihood function that is given by p(X|θ) =  Z p(X, Z|θ).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2338,"Here we are assuming Z is discrete, although the discussion is identical if Z com- prises continuous variables or a combination of discrete and continuous variables, with summation replaced by integration as appropriate.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2339,"We shall suppose that direct optimization of p(X|θ) is difﬁcult, but that opti- mization of the complete-data likelihood function p(X, Z|θ) is signiﬁcantly easier.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,450,2340,"Next we introduce a distribution q(Z) deﬁned over the latent variables, and we ob- serve that, for any choice of q(Z), the following decomposition holds ln p(X|θ) = L(q, θ) + KL(q∥p) (9.70) where we have deﬁned L(q, θ) =  Z q(Z) ln p(X, Z|θ) q(Z) (9.71) KL(q∥p) = −  Z q(Z) ln p(Z|X, θ) q(Z) .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2341,"Figure 9.11 Illustration of the decomposition given by (9.70), which holds for any choice of distribution q(Z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2342,"Note that L(q, θ) is a functional (see Appendix D for a discussion of functionals) of the distribution q(Z), and a function of the parameters θ. It is worth studying \end{verbatim} egin{verbatim} Because the Kullback-Leibler divergence satisﬁes KL(q∥p) ⩾0, we see that the quan- tity L(q, θ) is a lower bound on the log likelihood function ln p(X|θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2343,"carefully the forms of the expressions (9.71) and (9.72), and in particular noting that they differ in sign and also that L(q, θ) contains the joint distribution of X and Z while KL(q∥p) contains the conditional distribution of Z given X. To verify the decomposition (9.70), we ﬁrst make use of the product rule of probability to give ln p(X, Z|θ) = ln p(Z|X, θ) + ln p(X|θ) (9.73) which we then substitute into the expression for L(q, θ). This gives rise to two terms, one of which cancels KL(q∥p) while the other gives the required log likelihood ln p(X|θ) after noting that q(Z) is a normalized distribution that sums to 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2344,"From (9.72), we see that KL(q∥p) is the Kullback-Leibler divergence between q(Z) and the posterior distribution p(Z|X, θ). Recall that the Kullback-Leibler di- vergence satisﬁes KL(q∥p) ⩾0, with equality if, and only if, q(Z) = p(Z|X, θ). It therefore follows from (9.70) that L(q, θ) ⩽ln p(X|θ), in other words that L(q, θ) is a lower bound on ln p(X|θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2345,The decomposition (9.70) is illustrated in Fig- ure 9.11.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2346,The EM algorithm is a two-stage iterative optimization technique for ﬁnding maximum likelihood solutions. We can use the decomposition (9.70) to deﬁne the EM algorithm and to demonstrate that it does indeed maximize the log likelihood.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2347,"Suppose that the current value of the parameter vector is θold. In the E step, the lower bound L(q, θold) is maximized with respect to q(Z) while holding θold ﬁxed.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,451,2348,"The solution to this maximization problem is easily seen by noting that the value of ln p(X|θold) does not depend on q(Z) and so the largest value of L(q, θold) will occur when the Kullback-Leibler divergence vanishes, in other words when q(Z) is equal to the posterior distribution p(Z|X, θold). In this case, the lower bound will equal the log likelihood, as illustrated in Figure 9.12.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,452,2349,Figure 9.12 Illustration of the E step of the EM algorithm.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,452,2350,Figure 9.13 Illustration of the M step of the EM algorithm.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,452,2351,"In the subsequent M step, the distribution q(Z) is held ﬁxed and the lower bound L(q, θ) is maximized with respect to θ to give some new value θnew. This will cause the lower bound L to increase (unless it is already at a maximum), which will necessarily cause the corresponding log likelihood function to increase. Because the distribution q is determined using the old parameter values rather than the new values and is held ﬁxed during the M step, it will not equal the new posterior distribution p(Z|X, θnew), and hence there will be a nonzero KL divergence. The increase in the log likelihood function is therefore greater than the increase in the lower bound, as \end{verbatim} egin{verbatim} The q distribution is set equal to the posterior distribution for the current parameter val- ues θold, causing the lower bound to move up to the same value as the log like- lihood function, with the KL divergence vanishing.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,452,2352,"shown in Figure 9.13. If we substitute q(Z) = p(Z|X, θold) into (9.71), we see that, after the E step, the lower bound takes the form L(q, θ) =  Z p(Z|X, θold) ln p(X, Z|θ) −  Z p(Z|X, θold) ln p(Z|X, θold) = Q(θ, θold) + const (9.74) where the constant is simply the negative entropy of the q distribution and is there- fore independent of θ. Thus in the M step, the quantity that is being maximized is the expectation of the complete-data log likelihood, as we saw earlier in the case of mix- tures of Gaussians. Note that the variable θ over which we are optimizing appears only inside the logarithm. If the joint distribution p(Z, X|θ) comprises a member of the exponential family, or a product of such members, then we see that the logarithm will cancel the exponential and lead to an M step that will be typically much simpler than the maximization of the corresponding incomplete-data log likelihood function p(X|θ).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,452,2353,"The operation of the EM algorithm can also be viewed in the space of parame- ters, as illustrated schematically in Figure 9.14. Here the red curve depicts the (in- The distribution q(Z) is held ﬁxed and the lower bound L(q, θ) is maximized with respect to the parameter vector θ to give a revised value θnew. Because the KL divergence is nonnegative, this causes the log likelihood ln p(X|θ) to increase by at least as much as the lower bound does.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,453,2354,Figure 9.14 The EM algorithm involves alter- nately computing a lower bound on the log likelihood for the cur- rent parameter values and then maximizing this bound to obtain the new parameter values.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,453,2355,"the text for a full discussion. θold θnew L (q, θ) ln p(X|θ) complete data) log likelihood function whose value we wish to maximize. We start with some initial parameter value θold, and in the ﬁrst E step we evaluate the poste- rior distribution over latent variables, which gives rise to a lower bound L(θ, θ(old)) whose value equals the log likelihood at θ(old), as shown by the blue curve. Note that the bound makes a tangential contact with the log likelihood at θ(old), so that both curves have the same gradient. This bound is a convex function having a unique maximum (for mixture components from the exponential family). In the M step, the bound is maximized giving the value θ(new), which gives a larger value of log likeli- hood than θ(old). The subsequent E step then constructs a bound that is tangential at θ(new) as shown by the green curve.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,453,2356,"For the particular case of an independent, identically distributed data set, X will comprise N data points {xn} while Z will comprise N corresponding latent variables {zn}, where n = 1, . . . , N. From the independence assumption, we have p(X, Z) =  n p(xn, zn) and, by marginalizing over the {zn} we have p(X) =  n p(xn). Using the sum and product rules, we see that the posterior probability that is evaluated in the E step takes the form p(Z|X, θ) = p(X, Z|θ)  Z p(X, Z|θ) = N  n=1 p(xn, zn|θ)  Z N  n=1 p(xn, zn|θ) = N  n=1 p(zn|xn, θ) (9.75) and so the posterior distribution also factorizes with respect to n. In the case of the Gaussian mixture model this simply says that the responsibility that each of the mixture components takes for a particular data point xn depends only on the value of xn and on the parameters θ of the mixture components, not on the values of the other data points.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2357,"We have seen that both the E and the M steps of the EM algorithm are increas- ing the value of a well-deﬁned bound on the log likelihood function and that the \end{verbatim} egin{verbatim} complete EM cycle will change the model parameters in such a way as to cause the log likelihood to increase (unless it is already at a maximum, in which case the parameters remain unchanged).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2358,"We can also use the EM algorithm to maximize the posterior distribution p(θ|X) for models in which we have introduced a prior p(θ) over the parameters. To see this, we note that as a function of θ, we have p(θ|X) = p(θ, X)/p(X) and so ln p(θ|X) = ln p(θ, X) −ln p(X).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2359,"Making use of the decomposition (9.70), we have ln p(θ|X) = L(q, θ) + KL(q∥p) + ln p(θ) −ln p(X) ⩾ L(q, θ) + ln p(θ) −ln p(X).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2360,"where ln p(X) is a constant. We can again optimize the right-hand side alternately with respect to q and θ. The optimization with respect to q gives rise to the same E- step equations as for the standard EM algorithm, because q only appears in L(q, θ).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2361,"The M-step equations are modiﬁed through the introduction of the prior term ln p(θ), which typically requires only a small modiﬁcation to the standard maximum likeli- hood M-step equations.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2362,"The EM algorithm breaks down the potentially difﬁcult problem of maximizing the likelihood function into two stages, the E step and the M step, each of which will often prove simpler to implement. Nevertheless, for complex models it may be the case that either the E step or the M step, or indeed both, remain intractable. This leads to two possible extensions of the EM algorithm, as follows.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,454,2363,"The generalized EM, or GEM, algorithm addresses the problem of an intractable M step. Instead of aiming to maximize L(q, θ) with respect to θ, it seeks instead to change the parameters in such a way as to increase its value. Again, because L(q, θ) is a lower bound on the log likelihood function, each complete EM cycle of the GEM algorithm is guaranteed to increase the value of the log likelihood (unless the parameters already correspond to a local maximum). One way to exploit the GEM approach would be to use one of the nonlinear optimization strategies, such as the conjugate gradients algorithm, during the M step. Another form of GEM algorithm, known as the expectation conditional maximization, or ECM, algorithm, involves making several constrained optimizations within each M step (Meng and Rubin, 1993). For instance, the parameters might be partitioned into groups, and the M step is broken down into multiple steps each of which involves optimizing one of the subset with the remainder held ﬁxed.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2364,"We can similarly generalize the E step of the EM algorithm by performing a partial, rather than complete, optimization of L(q, θ) with respect to q(Z) (Neal and Hinton, 1999). As we have seen, for any given value of θ there is a unique maximum of L(q, θ) with respect to q(Z) that corresponds to the posterior distribution qθ(Z) = p(Z|X, θ) and that for this choice of q(Z) the bound L(q, θ) is equal to the log likelihood function ln p(X|θ). It follows that any algorithm that converges to the global maximum of L(q, θ) will ﬁnd a value of θ that is also a global maximum of the log likelihood ln p(X|θ). Provided p(X, Z|θ) is a continuous function of θ \end{verbatim} egin{verbatim} then, by continuity, any local maximum of L(q, θ) will also be a local maximum of ln p(X|θ).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2365,"Consider the case of N independent data points x1, . . . , xN with corresponding latent variables z1, . . . , zN. The joint distribution p(X, Z|θ) factorizes over the data points, and this structure can be exploited in an incremental form of EM in which at each EM cycle only one data point is processed at a time. In the E step, instead of recomputing the responsibilities for all of the data points, we just re-evaluate the responsibilities for one data point. It might appear that the subsequent M step would require computation involving the responsibilities for all of the data points. How- ever, if the mixture components are members of the exponential family, then the responsibilities enter only through simple sufﬁcient statistics, and these can be up- dated efﬁciently. Consider, for instance, the case of a Gaussian mixture, and suppose we perform an update for data point m in which the corresponding old and new values of the responsibilities are denoted γold(zmk) and γnew(zmk). In the M step, the required sufﬁcient statistics can be updated incrementally. For instance, for the means the sufﬁcient statistics are deﬁned by (9.17) and (9.18) from which we obtain µnew k = µold k + γnew(zmk) −γold(zmk) N new k  xm −µold k (9.78) together with N new k = N old k + γnew(zmk) −γold(zmk).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2366,The corresponding results for the covariances and the mixing coefﬁcients are analo- gous.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2367,"Thus both the E step and the M step take ﬁxed time that is independent of the total number of data points. Because the parameters are revised after each data point, rather than waiting until after the whole data set is processed, this incremental ver- sion can converge faster than the batch version. Each E or M step in this incremental algorithm is increasing the value of L(q, θ) and, as we have shown above, if the algorithm converges to a local (or global) maximum of L(q, θ), this will correspond to a local (or global) maximum of the log likelihood function ln p(X|θ).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2368,"Consider the K-means algorithm discussed in Section 9.1. Show that as a consequence of there being a ﬁnite number of possible assignments for the set of discrete indicator variables rnk, and that for each such assignment there is a unique optimum for the {µk}, the K-means algorithm must converge after a ﬁnite number of iterations.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,455,2369,"Apply the Robbins-Monro sequential estimation procedure described in Sec- tion 2.3.5 to the problem of ﬁnding the roots of the regression function given by the derivatives of J in (9.1) with respect to µk. Show that this leads to a stochastic K-means algorithm in which, for each data point xn, the nearest prototype µk is updated using (9.5).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2370,"Consider a Gaussian mixture model in which the marginal distribution p(z) for the latent variable is given by (9.10), and the conditional distribution p(x|z) for the observed variable is given by (9.11). Show that the marginal distribution p(x), obtained by summing p(z)p(x|z) over all possible values of z, is a Gaussian mixture of the form (9.7).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2371,"Suppose we wish to use the EM algorithm to maximize the posterior distri- bution over parameters p(θ|X) for a model containing latent variables, where X is the observed data set. Show that the E step remains the same as in the maximum likelihood case, whereas in the M step the quantity to be maximized is given by Q(θ, θold) + ln p(θ) where Q(θ, θold) is deﬁned by (9.30).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2372,"(⋆) Consider the directed graph for a Gaussian mixture model shown in Figure 9.6. By making use of the d-separation criterion discussed in Section 8.2, show that the posterior distribution of the latent variables factorizes with respect to the different data points so that p(Z|X, µ, Σ, π) = N  n=1 p(zn|xn, µ, Σ, π).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2373,Consider a special case of a Gaussian mixture model in which the covari- ance matrices Σk of the components are all constrained to have a common value Σ. Derive the EM equations for maximizing the likelihood function under such a model.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2374,"Verify that maximization of the complete-data log likelihood (9.36) for a Gaussian mixture model leads to the result that the means and covariances of each component are ﬁtted independently to the corresponding group of data points, and the mixing coefﬁcients are given by the fractions of points in each group.",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2375,"Show that if we maximize (9.40) with respect to µk while keeping the responsibilities γ(znk) ﬁxed, we obtain the closed form solution given by (9.17).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2376,"Show that if we maximize (9.40) with respect to Σk and πk while keeping the responsibilities γ(znk) ﬁxed, we obtain the closed form solutions given by (9.19) and (9.22).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2377,"(⋆⋆) Consider a density model given by a mixture distribution p(x) = K  k=1 πkp(x|k) (9.81) and suppose that we partition the vector x into two parts so that x = (xa, xb).",Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,456,2378,Show that the conditional density p(xb|xa) is itself a mixture distribution and ﬁnd expressions for the mixing coefﬁcients and for the component densities.,Latent Variable Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2379,"In Section 9.3.2, we obtained a relationship between K means and EM for Gaussian mixtures by considering a mixture model in which all components have covariance ϵI. Show that in the limit ϵ →0, maximizing the expected complete- data log likelihood for this model, given by (9.40), is equivalent to minimizing the distortion measure J for the K-means algorithm given by (9.1).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2380,Consider a mixture distribution of the form p(x) = K  k=1 πkp(x|k) (9.82) where the elements of x could be discrete or continuous or a combination of these.,Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2381,"Denote the mean and covariance of p(x|k) by µk and Σk, respectively. Show that the mean and covariance of the mixture distribution are given by (9.49) and (9.50).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2382,"Using the re-estimation equations for the EM algorithm, show that a mix- ture of Bernoulli distributions, with its parameters set to values corresponding to a maximum of the likelihood function, has the property that E[x] = 1 N N  n=1 xn ≡x.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2383,"Hence show that if the parameters of this model are initialized such that all compo- nents have the same mean µk = µ for k = 1, . . . , K, then the EM algorithm will converge after one iteration, for any choice of the initial mixing coefﬁcients, and that this solution has the property µk = x. Note that this represents a degenerate case of the mixture model in which all of the components are identical, and in practice we try to avoid such solutions by using an appropriate initialization.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2384,"(⋆) Consider the joint distribution of latent and observed variables for the Bernoulli distribution obtained by forming the product of p(x|z, µ) given by (9.52) and p(z|π) given by (9.53). Show that if we marginalize this joint distribution with respect to z, then we obtain (9.47).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2385,"Show that if we maximize the expected complete-data log likelihood function (9.55) for a mixture of Bernoulli distributions with respect to µk, we obtain the M step equation (9.59).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2386,"Show that if we maximize the expected complete-data log likelihood function (9.55) for a mixture of Bernoulli distributions with respect to the mixing coefﬁcients πk, using a Lagrange multiplier to enforce the summation constraint, we obtain the M step equation (9.60).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,457,2387,"Show that as a consequence of the constraint 0 ⩽p(xn|µk) ⩽1 for the discrete variable xn, the incomplete-data log likelihood function for a mixture of Bernoulli distributions is bounded above, and hence that there are no singularities for which the likelihood goes to inﬁnity.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2388,"Consider a Bernoulli mixture model as discussed in Section 9.3.3, together with a prior distribution p(µk|ak, bk) over each of the parameter vectors µk given by the beta distribution (2.13), and a Dirichlet prior p(π|α) given by (2.38). Derive the EM algorithm for maximizing the posterior probability p(µ, π|X).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2389,"Consider a D-dimensional variable x each of whose components i is itself a multinomial variable of degree M so that x is a binary vector with components xij where i = 1, . . . , D and j = 1, . . . , M, subject to the constraint that  j xij = 1 for all i. Suppose that the distribution of these variables is described by a mixture of the discrete multinomial distributions considered in Section 2.2 so that p(x) = K  k=1 πkp(x|µk) (9.84) where p(x|µk) = D  i=1 M  j=1 µxij kij.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2390,The parameters µkij represent the probabilities p(xij = 1|µk) and must satisfy 0 ⩽µkij ⩽1 together with the constraint  j µkij = 1 for all values of k and i.,Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2391,"Given an observed data set {xn}, where n = 1, . . . , N, derive the E and M step equations of the EM algorithm for optimizing the mixing coefﬁcients πk and the component parameters µkij of this distribution by maximum likelihood.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2392,Show that maximization of the expected complete-data log likelihood function (9.62) for the Bayesian linear regression model leads to the M step re- estimation result (9.63) for α.,Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2393,"(⋆⋆) Using the evidence framework of Section 3.5, derive the M-step re-estimation equations for the parameter β in the Bayesian linear regression model, analogous to the result (9.63) for α.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2394,"By maximization of the expected complete-data log likelihood deﬁned by (9.66), derive the M step equations (9.67) and (9.68) for re-estimating the hyperpa- rameters of the relevance vector machine for regression.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2395,"In Section 7.2.1 we used direct maximization of the marginal like- lihood to derive the re-estimation equations (7.87) and (7.88) for ﬁnding values of the hyperparameters α and β for the regression RVM. Similarly, in Section 9.3.4 we used the EM algorithm to maximize the same marginal likelihood, giving the re-estimation equations (9.67) and (9.68). Show that these two sets of re-estimation equations are formally equivalent.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,458,2396,"Verify the relation (9.70) in which L(q, θ) and KL(q∥p) are deﬁned by (9.71) and (9.72), respectively.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,459,2397,"Show that the lower bound L(q, θ) given by (9.71), with q(Z) = p(Z|X, θ(old)), has the same gradient with respect to θ as the log likelihood function ln p(X|θ) at the point θ = θ(old).",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,459,2398,"Consider the incremental form of the EM algorithm for a mixture of Gaussians, in which the responsibilities are recomputed only for a speciﬁc data point xm. Starting from the M-step formulae (9.17) and (9.18), derive the results (9.78) and (9.79) for updating the component means.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Mixture Models and EM,9,459,2399,"Derive M-step formulae for updating the covariance matrices and mixing coefﬁcients in a Gaussian mixture model when the responsibilities are updated in- crementally, analogous to the result (9.78) for updating the means.",Principal Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,462,2400,"A central task in the application of probabilistic models is the evaluation of the pos- terior distribution p(Z|X) of the latent variables Z given the observed (visible) data variables X, and the evaluation of expectations computed with respect to this dis- tribution. The model might also contain some deterministic parameters, which we will leave implicit for the moment, or it may be a fully Bayesian model in which any unknown parameters are given prior distributions and are absorbed into the set of latent variables denoted by the vector Z. For instance, in the EM algorithm we need to evaluate the expectation of the complete-data log likelihood with respect to the posterior distribution of the latent variables. For many models of practical interest, it will be infeasible to evaluate the posterior distribution or indeed to compute expec- tations with respect to this distribution. This could be because the dimensionality of the latent space is too high to work with directly or because the posterior distribution has a highly complex form for which expectations are not analytically tractable. In the case of continuous variables, the required integrations may not have closed-form \end{verbatim} egin{verbatim} analytical solutions, while the dimensionality of the space and the complexity of the integrand may prohibit numerical integration. For discrete variables, the marginal- izations involve summing over all possible conﬁgurations of the hidden variables, and though this is always possible in principle, we often ﬁnd in practice that there may be exponentially many hidden states so that exact calculation is prohibitively expensive.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,462,2401,"In such situations, we need to resort to approximation schemes, and these fall broadly into two classes, according to whether they rely on stochastic or determin- istic approximations. Stochastic techniques such as Markov chain Monte Carlo, de- scribed in Chapter 11, have enabled the widespread use of Bayesian methods across many domains. They generally have the property that given inﬁnite computational resource, they can generate exact results, and the approximation arises from the use of a ﬁnite amount of processor time. In practice, sampling methods can be compu- tationally demanding, often limiting their use to small-scale problems. Also, it can be difﬁcult to know whether a sampling scheme is generating independent samples from the required distribution.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,462,2402,"In this chapter, we introduce a range of deterministic approximation schemes, some of which scale well to large applications. These are based on analytical ap- proximations to the posterior distribution, for example by assuming that it factorizes in a particular way or that it has a speciﬁc parametric form such as a Gaussian. As such, they can never generate exact results, and so their strengths and weaknesses are complementary to those of sampling methods.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,462,2403,"In Section 4.4, we discussed the Laplace approximation, which is based on a local Gaussian approximation to a mode (i.e., a maximum) of the distribution. Here we turn to a family of approximation techniques called variational inference or vari- ational Bayes, which use more global criteria and which have been widely applied.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,462,2404,We conclude with a brief introduction to an alternative variational framework known as expectation propagation.,Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,463,2405,"Variational methods have their origins in the 18th century with the work of Euler, Lagrange, and others on the calculus of variations. Standard calculus is concerned with ﬁnding derivatives of functions. We can think of a function as a mapping that takes the value of a variable as the input and returns the value of the function as the output. The derivative of the function then describes how the output value varies as we make inﬁnitesimal changes to the input value. Similarly, we can deﬁne a functional as a mapping that takes a function as the input and that returns the value of the functional as the output. An example would be the entropy H[p], which takes a probability distribution p(x) as the input and returns the quantity H[p] =  p(x) ln p(x) dx (10.1) \end{verbatim} egin{verbatim} as the output. We can the introduce the concept of a functional derivative, which ex- presses how the value of the functional changes in response to inﬁnitesimal changes to the input function (Feynman et al., 1964). The rules for the calculus of variations mirror those of standard calculus and are discussed in Appendix D. Many problems can be expressed in terms of an optimization problem in which the quantity being optimized is a functional. The solution is obtained by exploring all possible input functions to ﬁnd the one that maximizes, or minimizes, the functional. Variational methods have broad applicability and include such areas as ﬁnite element methods (Kapur, 1989) and maximum entropy (Schwarz, 1988).",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,463,2406,"Although there is nothing intrinsically approximate about variational methods, they do naturally lend themselves to ﬁnding approximate solutions. This is done by restricting the range of functions over which the optimization is performed, for instance by considering only quadratic functions or by considering functions com- posed of a linear combination of ﬁxed basis functions in which only the coefﬁcients of the linear combination can vary. In the case of applications to probabilistic in- ference, the restriction may for example take the form of factorization assumptions (Jordan et al., 1999; Jaakkola, 2001).",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,463,2407,"Now let us consider in more detail how the concept of variational optimization can be applied to the inference problem. Suppose we have a fully Bayesian model in which all parameters are given prior distributions. The model may also have latent variables as well as parameters, and we shall denote the set of all latent variables and parameters by Z. Similarly, we denote the set of all observed variables by X.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,463,2408,"For example, we might have a set of N independent, identically distributed data, for which X = {x1, . . . , xN} and Z = {z1, . . . , zN}. Our probabilistic model speciﬁes the joint distribution p(X, Z), and our goal is to ﬁnd an approximation for the posterior distribution p(Z|X) as well as for the model evidence p(X). As in our discussion of EM, we can decompose the log marginal probability using ln p(X) = L(q) + KL(q∥p) (10.2) where we have deﬁned L(q) =  q(Z) ln p(X, Z) q(Z) dZ (10.3) KL(q∥p) = −  q(Z) ln p(Z|X) q(Z) dZ.",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,463,2409,"This differs from our discussion of EM only in that the parameter vector θ no longer appears, because the parameters are now stochastic variables and are absorbed into Z. Since in this chapter we will mainly be interested in continuous variables we have used integrations rather than summations in formulating this decomposition. How- ever, the analysis goes through unchanged if some or all of the variables are discrete simply by replacing the integrations with summations as required. As before, we can maximize the lower bound L(q) by optimization with respect to the distribution q(Z), which is equivalent to minimizing the KL divergence. If we allow any possible choice for q(Z), then the maximum of the lower bound occurs when the KL diver- gence vanishes, which occurs when q(Z) equals the posterior distribution p(Z|X).",Exponential family PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,464,2410,"Figure 10.1 Illustration of the variational approximation for the example considered earlier in Figure 4.14. The left-hand plot shows the original distribution (yellow) along with the Laplace (red) and variational (green) approx- imations, and the right-hand plot shows the negative logarithms of the corresponding curves.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,464,2411,"However, we shall suppose the model is such that working with the true posterior distribution is intractable.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,464,2412,"We therefore consider instead a restricted family of distributions q(Z) and then seek the member of this family for which the KL divergence is minimized. Our goal is to restrict the family sufﬁciently that they comprise only tractable distributions, while at the same time allowing the family to be sufﬁciently rich and ﬂexible that it can provide a good approximation to the true posterior distribution. It is important to emphasize that the restriction is imposed purely to achieve tractability, and that sub- ject to this requirement we should use as rich a family of approximating distributions as possible. In particular, there is no ‘over-ﬁtting’ associated with highly ﬂexible dis- tributions. Using more ﬂexible approximations simply allows us to approach the true posterior distribution more closely.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,464,2413,"One way to restrict the family of approximating distributions is to use a paramet- ric distribution q(Z|ω) governed by a set of parameters ω. The lower bound L(q) then becomes a function of ω, and we can exploit standard nonlinear optimization techniques to determine the optimal values for the parameters. An example of this approach, in which the variational distribution is a Gaussian and we have optimized with respect to its mean and variance, is shown in Figure 10.1.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,464,2414,"Here we consider an alternative way in which to restrict the family of distri- butions q(Z). Suppose we partition the elements of Z into disjoint groups that we denote by Zi where i = 1, . . . , M. We then assume that the q distribution factorizes with respect to these groups, so that q(Z) = M  i=1 qi(Zi).",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2415,"It should be emphasized that we are making no further assumptions about the distri- bution. In particular, we place no restriction on the functional forms of the individual factors qi(Zi). This factorized form of variational inference corresponds to an ap- proximation framework developed in physics called mean ﬁeld theory (Parisi, 1988).",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2416,"Amongst all distributions q(Z) having the form (10.5), we now seek that distri- bution for which the lower bound L(q) is largest. We therefore wish to make a free form (variational) optimization of L(q) with respect to all of the distributions qi(Zi), which we do by optimizing with respect to each of the factors in turn. To achieve this, we ﬁrst substitute (10.5) into (10.3) and then dissect out the dependence on one of the factors qj(Zj). Denoting qj(Zj) by simply qj to keep the notation uncluttered, we then obtain L(q) =   i qi  ln p(X, Z) −  i ln qi  dZ =  qj  ln p(X, Z)  i̸=j qi dZi  dZj −  qj ln qj dZj + const =  qj lnp(X, Zj) dZj −  qj ln qj dZj + const (10.6) where we have deﬁned a new distribution p(X, Zj) by the relation lnp(X, Zj) = Ei̸=j[ln p(X, Z)] + const.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2417,"Here the notation Ei̸=j[· · · ] denotes an expectation with respect to the q distributions over all variables zi for i ̸= j, so that Ei̸=j[ln p(X, Z)] =  ln p(X, Z)  i̸=j qi dZi.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2418,"Now suppose we keep the {qi̸=j} ﬁxed and maximize L(q) in (10.6) with re- spect to all possible forms for the distribution qj(Zj). This is easily done by rec- ognizing that (10.6) is a negative Kullback-Leibler divergence between qj(Zj) and p(X, Zj). Thus maximizing (10.6) is equivalent to minimizing the Kullback-Leibler Leonhard Euler 1707–1783 Euler was a Swiss mathematician and physicist who worked in St.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2419,Petersburg and Berlin and who is widely considered to be one of the greatest mathematicians of all time.,Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,465,2420,"He is certainly the most proliﬁc, and his collected works ﬁll 75 volumes. Amongst his many contributions, he formulated the modern theory of the function, he developed (together with Lagrange) the calculus of variations, and he discovered the formula eiπ = −1, which relates four of the most important numbers in mathematics. During the last 17 years of his life, he was almost totally blind, and yet he pro- duced nearly half of his results during this period.",Kernel PCA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2421,"divergence, and the minimum occurs when qj(Zj) = p(X, Zj). Thus we obtain a general expression for the optimal solution q⋆ j (Zj) given by ln q⋆ j (Zj) = Ei̸=j[ln p(X, Z)] + const.",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2422,It is worth taking a few moments to study the form of this solution as it provides the basis for applications of variational methods. It says that the log of the optimal so- lution for factor qj is obtained simply by considering the log of the joint distribution over all hidden and visible variables and then taking the expectation with respect to all of the other factors {qi} for i ̸= j.,Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2423,The additive constant in (10.9) is set by normalizing the distribution q⋆ j (Zj).,Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2424,"Thus if we take the exponential of both sides and normalize, we have q⋆ j (Zj) = exp (Ei̸=j[ln p(X, Z)])  exp (Ei̸=j[ln p(X, Z)]) dZj .",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2425,"In practice, we shall ﬁnd it more convenient to work with the form (10.9) and then re- instate the normalization constant (where required) by inspection. This will become clear from subsequent examples.",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,466,2426,"The set of equations given by (10.9) for j = 1, . . . , M represent a set of con- sistency conditions for the maximum of the lower bound subject to the factorization constraint. However, they do not represent an explicit solution because the expres- sion on the right-hand side of (10.9) for the optimum q⋆ j (Zj) depends on expectations computed with respect to the other factors qi(Zi) for i ̸= j. We will therefore seek a consistent solution by ﬁrst initializing all of the factors qi(Zi) appropriately and then cycling through the factors and replacing each in turn with a revised estimate given by the right-hand side of (10.9) evaluated using the current estimates for all of the other factors. Convergence is guaranteed because bound is convex with respect to each of the factors qi(Zi) (Boyd and Vandenberghe, 2004).",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,467,2427,"Our approach to variational inference is based on a factorized approximation to the true posterior distribution. Let us consider for a moment the problem of approx- imating a general distribution by a factorized distribution. To begin with, we discuss the problem of approximating a Gaussian distribution using a factorized Gaussian, which will provide useful insight into the types of inaccuracy introduced in using factorized approximations. Consider a Gaussian distribution p(z) = N(z|µ, Λ−1) over two correlated variables z = (z1, z2) in which the mean and precision have elements µ =  µ1 µ2  , Λ =  Λ11 Λ12 Λ21 Λ22  (10.10) and Λ21 = Λ12 due to the symmetry of the precision matrix. Now suppose we wish to approximate this distribution using a factorized Gaussian of the form q(z) = q1(z1)q2(z2). We ﬁrst apply the general result (10.9) to ﬁnd an expression for the \end{verbatim} egin{verbatim} optimal factor q⋆ 1(z1). In doing so it is useful to note that on the right-hand side we only need to retain those terms that have some functional dependence on z1 because all other terms can be absorbed into the normalization constant. Thus we have ln q⋆ 1(z1) = Ez2[ln p(z)] + const = Ez2 −1 2(z1 −µ1)2Λ11 −(z1 −µ1)Λ12(z2 −µ2) + const = −1 2z2 1Λ11 + z1µ1Λ11 −z1Λ12 (E[z2] −µ2) + const.",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,467,2428,"Next we observe that the right-hand side of this expression is a quadratic function of z1, and so we can identify q⋆(z1) as a Gaussian distribution. It is worth emphasizing that we did not assume that q(zi) is Gaussian, but rather we derived this result by variational optimization of the KL divergence over all possible distributions q(zi).",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,467,2429,"Note also that we do not need to consider the additive constant in (10.9) explicitly because it represents the normalization constant that can be found at the end by inspection if required. Using the technique of completing the square, we can identify the mean and precision of this Gaussian, giving q⋆(z1) = N(z1|m1, Λ−1 11 ) (10.12) where m1 = µ1 −Λ−1 11 Λ12 (E[z2] −µ2) .",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,467,2430,"2(z2) is also Gaussian and can be written as q⋆ 2(z2) = N(z2|m2, Λ−1 22 ) (10.14) in which m2 = µ2 −Λ−1 22 Λ21 (E[z1] −µ1) .",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,467,2431,"Note that these solutions are coupled, so that q⋆(z1) depends on expectations com- puted with respect to q⋆(z2) and vice versa. In general, we address this by treating the variational solutions as re-estimation equations and cycling through the variables in turn updating them until some convergence criterion is satisﬁed. We shall see an example of this shortly. Here, however, we note that the problem is sufﬁciently simple that a closed form solution can be found. In particular, because E[z1] = m1 and E[z2] = m2, we see that the two equations are satisﬁed if we take E[z1] = µ1 and E[z2] = µ2, and it is easily shown that this is the only solution provided the dis- tribution is nonsingular. This result is illustrated in Figure 10.2(a). We see that the mean is correctly captured but that the variance of q(z) is controlled by the direction of smallest variance of p(z), and that the variance along the orthogonal direction is signiﬁcantly under-estimated. It is a general result that a factorized variational ap- proximation tends to give approximations to the posterior distribution that are too compact.",Independent Component Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2432,Figure 10.2 Comparison of the two alternative forms for the Kullback-Leibler divergence.,Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2433,"By way of comparison, suppose instead that we had been minimizing the reverse Kullback-Leibler divergence KL(p∥q). As we shall see, this form of KL divergence \end{verbatim} egin{verbatim} The green contours corresponding to 1, 2, and 3 standard deviations for a correlated Gaussian distribution p(z) over two variables z1 and z2, and the red contours represent the corresponding levels for an approximating distribution q(z) over the same variables given by the product of two independent univariate Gaussian distributions whose parameters are obtained by minimization of (a) the Kullback- Leibler divergence KL(q∥p), and (b) the reverse Kullback-Leibler divergence KL(p∥q).",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2434,"is used in an alternative approximate inference framework called expectation prop- agation. We therefore consider the general problem of minimizing KL(p∥q) when q(Z) is a factorized approximation of the form (10.5). The KL divergence can then be written in the form KL(p∥q) = −  p(Z) M  i=1 ln qi(Zi) dZ + const (10.16) where the constant term is simply the entropy of p(Z) and so does not depend on q(Z). We can now optimize with respect to each of the factors qj(Zj), which is easily done using a Lagrange multiplier to give q⋆ j (Zj) =  p(Z)  i̸=j dZi = p(Zj).",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2435,"In this case, we ﬁnd that the optimal solution for qj(Zj) is just given by the corre- sponding marginal distribution of p(Z). Note that this is a closed-form solution and so does not require iteration.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2436,"To apply this result to the illustrative example of a Gaussian distribution p(z) over a vector z we can use (2.98), which gives the result shown in Figure 10.2(b).",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,468,2437,"We see that once again the mean of the approximation is correct, but that it places signiﬁcant probability mass in regions of variable space that have very low probabil- ity.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,469,2438,"Figure 10.3 Another comparison of the two alternative forms for the Kullback-Leibler divergence. (a) The blue contours show a bimodal distribution p(Z) given by a mixture of two Gaussians, and the red contours correspond to the single Gaussian distribution q(Z) that best approximates p(Z) in the sense of minimizing the Kullback- Leibler divergence KL(p∥q). (b) As in (a) but now the red contours correspond to a Gaussian distribution q(Z) found by numerical minimization of the Kullback-Leibler divergence KL(q∥p). (c) As in (b) but showing a different local minimum of the Kullback-Leibler divergence.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,469,2439,"The difference between these two results can be understood by noting that there is a large positive contribution to the Kullback-Leibler divergence KL(q∥p) = −  q(Z) ln p(Z) q(Z) dZ (10.18) \end{verbatim} egin{verbatim} (a) (b) (c) from regions of Z space in which p(Z) is near zero unless q(Z) is also close to zero. Thus minimizing this form of KL divergence leads to distributions q(Z) that avoid regions in which p(Z) is small. Conversely, the Kullback-Leibler divergence KL(p∥q) is minimized by distributions q(Z) that are nonzero in regions where p(Z) is nonzero.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,469,2440,"We can gain further insight into the different behaviour of the two KL diver- gences if we consider approximating a multimodal distribution by a unimodal one, as illustrated in Figure 10.3.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,469,2441,"In practical applications, the true posterior distri- bution will often be multimodal, with most of the posterior mass concentrated in some number of relatively small regions of parameter space. These multiple modes may arise through nonidentiﬁability in the latent space or through complex nonlin- ear dependence on the parameters. Both types of multimodality were encountered in Chapter 9 in the context of Gaussian mixtures, where they manifested themselves as multiple maxima in the likelihood function, and a variational treatment based on the minimization of KL(q∥p) will tend to ﬁnd one of these modes. By contrast, if we were to minimize KL(p∥q), the resulting approximations would average across all of the modes and, in the context of the mixture model, would lead to poor predictive distributions (because the average of two good parameter values is typically itself not a good parameter value). It is possible to make use of KL(p∥q) to deﬁne a useful inference procedure, but this requires a rather different approach to the one discussed here, and will be considered in detail when we discuss expectation propagation.",Non-negative Matrix Factorization
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,470,2442,"The two forms of Kullback-Leibler divergence are members of the alpha family \end{verbatim} egin{verbatim} of divergences (Ali and Silvey, 1966; Amari, 1985; Minka, 2005) deﬁned by Dα(p∥q) = 4 1 −α2  1 −  p(x)(1+α)/2q(x)(1−α)/2 dx  (10.19) where −∞< α < ∞is a continuous parameter. The Kullback-Leibler divergence KL(p∥q) corresponds to the limit α →1, whereas KL(q∥p) corresponds to the limit α →−1. For all values of α we have Dα(p∥q) ⩾0, with equality if, and only if, p(x) = q(x). Suppose p(x) is a ﬁxed distribution, and we minimize Dα(p∥q) with respect to some set of distributions q(x). Then for α ⩽−1 the divergence is zero forcing, so that any values of x for which p(x) = 0 will have q(x) = 0, and typically q(x) will under-estimate the support of p(x) and will tend to seek the mode with the largest mass. Conversely for α ⩾1 the divergence is zero-avoiding, so that values of x for which p(x) > 0 will have q(x) > 0, and typically q(x) will stretch to cover all of p(x), and will over-estimate the support of p(x). When α = 0 we obtain a symmetric divergence that is linearly related to the Hellinger distance given by DH(p∥q) =  p(x)1/2 −q(x)1/2 dx.",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,470,2443,"The square root of the Hellinger distance is a valid distance metric. 10.1.3 Example: The univariate Gaussian We now illustrate the factorized variational approximation using a Gaussian dis- tribution over a single variable x (MacKay, 2003). Our goal is to infer the posterior distribution for the mean µ and precision τ, given a data set D = {x1, . . . , xN} of observed values of x which are assumed to be drawn independently from the Gaus- sian. The likelihood function is given by p(D|µ, τ) =  τ 2π N/2 exp  −τ 2 N  n=1 (xn −µ)2  .",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,470,2444,"We now introduce conjugate prior distributions for µ and τ given by p(µ|τ) = N µ|µ0, (λ0τ)−1 (10.22) p(τ) = Gam(τ|a0, b0) (10.23) where Gam(τ|a0, b0) is the gamma distribution deﬁned by (2.146). Together these distributions constitute a Gaussian-Gamma conjugate prior distribution.",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,470,2445,"For this simple problem the posterior distribution can be found exactly, and again takes the form of a Gaussian-gamma distribution. However, for tutorial purposes we will consider a factorized variational approximation to the posterior distribution given by q(µ, τ) = qµ(µ)qτ(τ).",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2446,Note that the true posterior distribution does not factorize in this way. The optimum factors qµ(µ) and qτ(τ) can be obtained from the general result (10.9) as follows.,Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2447,"Eτ [ln p(D|µ, τ) + ln p(µ|τ)] + const = −E[τ] 2  λ0(µ −µ0)2 + N  n=1 (xn −µ)2  + const. (10.25) Completing the square over µ we see that qµ(µ) is a Gaussian N µ|µN, λ−1 N with mean and precision given by µN = λ0µ0 + Nx λ0 + N (10.26) λN = (λ0 + N)E[τ].",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2448,Note that for N →∞this gives the maximum likelihood result in which µN = x and the precision is inﬁnite.,Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2449,"Similarly, the optimal solution for the factor qτ(τ) is given by ln q⋆ τ(τ) = Eµ [ln p(D|µ, τ) + ln p(µ|τ)] + ln p(τ) + const = (a0 −1) ln τ −b0τ + N 2 ln τ −τ 2Eµ N  n=1 (xn −µ)2 + λ0(µ −µ0)2 + const (10.28) and hence qτ(τ) is a gamma distribution Gam(τ|aN, bN) with parameters aN = a0 + N 2 (10.29) bN = b0 + 1 2Eµ N  n=1 (xn −µ)2 + λ0(µ −µ0)2 .",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2450,Again this exhibits the expected behaviour when N →∞. It should be emphasized that we did not assume these speciﬁc functional forms for the optimal distributions qµ(µ) and qτ(τ). They arose naturally from the structure of the likelihood function and the corresponding conjugate priors.,Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,471,2451,"Thus we have expressions for the optimal distributions qµ(µ) and qτ(τ) each of which depends on moments evaluated with respect to the other distribution. One ap- proach to ﬁnding a solution is therefore to make an initial guess for, say, the moment E[τ] and use this to re-compute the distribution qµ(µ). Given this revised distri- bution we can then extract the required moments E[µ] and E[µ2], and use these to recompute the distribution qτ(τ), and so on. Since the space of hidden variables for this example is only two dimensional, we can illustrate the variational approxima- tion to the posterior distribution by plotting contours of both the true posterior and the factorized approximation, as illustrated in Figure 10.4.",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,472,2452,"Figure 10.4 Illustration of variational inference for the mean µ and precision τ of a univariate Gaussian distribu- tion. Contours of the true posterior distribution p(µ, τ|D) are shown in green. (a) Contours of the initial factorized approximation qµ(µ)qτ(τ) are shown in blue. (b) After re-estimating the factor qµ(µ). (c) After re-estimating the factor qτ(τ). (d) Contours of the optimal factorized approximation, to which the iterative scheme converges, are shown in red.",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,472,2453,"In general, we will need to use an iterative approach such as this in order to solve for the optimal factorized posterior distribution. For the very simple example we are considering here, however, we can ﬁnd an explicit solution by solving the simultaneous equations for the optimal factors qµ(µ) and qτ(τ). Before doing this, we can simplify these expressions by considering broad, noninformative priors in which µ0 = a0 = b0 = λ0 = 0. Although these parameter settings correspond to improper priors, we see that the posterior distribution is still well deﬁned. Using the standard result E[τ] = aN/bN for the mean of a gamma distribution, together with Appendix B (10.29) and (10.30), we have 1 E[τ] = E 1 N N  n=1 (xn −µ)2 = x2 −2xE[µ] + E[µ2].",Factor Analysis
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,473,2454,"Then, using (10.26) and (10.27), we obtain the ﬁrst and second order moments of \end{verbatim} egin{verbatim} qµ(µ) in the form E[µ] = x, E[µ2] = x2 + 1 NE[τ].",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,473,2455,We can now substitute these moments into (10.31) and then solve for E[τ] to give 1 E[τ] = 1 N −1(x2 −x2) = 1 N −1 N  n=1 (xn −x)2.,Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,473,2456,"We recognize the right-hand side as the familiar unbiased estimator for the variance of a univariate Gaussian distribution, and so we see that the use of a Bayesian ap- proach has avoided the bias of the maximum likelihood solution.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,473,2457,"As well as performing inference over the hidden variables Z, we may also wish to compare a set of candidate models, labelled by the index m, and having prior probabilities p(m). Our goal is then to approximate the posterior probabilities p(m|X), where X is the observed data. This is a slightly more complex situation than that considered so far because different models may have different structure and indeed different dimensionality for the hidden variables Z. We cannot there- fore simply consider a factorized approximation q(Z)q(m), but must instead recog- nize that the posterior over Z must be conditioned on m, and so we must consider q(Z, m) = q(Z|m)q(m). We can readily verify the following decomposition based on this variational distribution ln p(X) = Lm −  m  Z q(Z|m)q(m) ln p(Z, m|X) q(Z|m)q(m) (10.34) where the Lm is a lower bound on ln p(X) and is given by Lm =  m  Z q(Z|m)q(m) ln p(Z, X, m) q(Z|m)q(m) .",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,473,2458,"Here we are assuming discrete Z, but the same analysis applies to continuous latent variables provided the summations are replaced with integrations. We can maximize Lm with respect to the distribution q(m) using a Lagrange multiplier, with the result q(m) ∝p(m) exp{Lm}.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,474,2459,"However, if we maximize Lm with respect to the q(Z|m), we ﬁnd that the solutions for different m are coupled, as we expect because they are conditioned on m. We proceed instead by ﬁrst optimizing each of the q(Z|m) individually by optimization \end{verbatim} egin{verbatim} of (10.35), and then subsequently determining the q(m) using (10.36). After nor- malization the resulting values for q(m) can be used for model selection or model averaging in the usual way.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,474,2460,"We now return to our discussion of the Gaussian mixture model and apply the vari- ational inference machinery developed in the previous section. This will provide a good illustration of the application of variational methods and will also demonstrate how a Bayesian treatment elegantly resolves many of the difﬁculties associated with the maximum likelihood approach (Attias, 1999b). The reader is encouraged to work through this example in detail as it provides many insights into the practical appli- cation of variational methods. Many Bayesian models, corresponding to much more sophisticated distributions, can be solved by straightforward extensions and general- izations of this analysis.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,474,2461,"Our starting point is the likelihood function for the Gaussian mixture model, il- lustrated by the graphical model in Figure 9.6. For each observation xn we have a corresponding latent variable zn comprising a 1-of-K binary vector with ele- ments znk for k = 1, . . . , K. As before we denote the observed data set by X = {x1, . . . , xN}, and similarly we denote the latent variables by Z = {z1, . . . , zN}.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,474,2462,"From (9.10) we can write down the conditional distribution of Z, given the mixing coefﬁcients π, in the form p(Z|π) = N  n=1 K  k=1 πznk k .",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,474,2463,"Similarly, from (9.11), we can write down the conditional distribution of the ob- served data vectors, given the latent variables and the component parameters p(X|Z, µ, Λ) = N  n=1 K  k=1 N xn|µk, Λ−1 k znk (10.38) where µ = {µk} and Λ = {Λk}. Note that we are working in terms of precision matrices rather than covariance matrices as this somewhat simpliﬁes the mathemat- ics.",Probabilistic FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2464,"Figure 10.5 Directed acyclic graph representing the Bayesian mix- ture of Gaussians model, in which the box (plate) de- notes a set of N i.i.d. observations. Here µ denotes {µk} and Λ denotes {Λk}.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2465,"Next we introduce priors over the parameters µ, Λ and π. The analysis is con- siderably simpliﬁed if we use conjugate prior distributions. We therefore choose a Dirichlet distribution over the mixing coefﬁcients π p(π) = Dir(π|α0) = C(α0) K  k=1 πα0−1 k (10.39) where by symmetry we have chosen the same parameter α0 for each of the compo- nents, and C(α0) is the normalization constant for the Dirichlet distribution deﬁned \end{verbatim} egin{verbatim} xn zn N π µ Λ by (B.23). As we have seen, the parameter α0 can be interpreted as the effective prior number of observations associated with each component of the mixture. If the value of α0 is small, then the posterior distribution will be inﬂuenced primarily by the data rather than by the prior.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2466,"Similarly, we introduce an independent Gaussian-Wishart prior governing the mean and precision of each Gaussian component, given by p(µ, Λ) = p(µ|Λ)p(Λ) = K  k=1 N µk|m0, (β0Λk)−1 W(Λk|W0, ν0) (10.40) because this represents the conjugate prior distribution when both the mean and pre- cision are unknown. Typically we would choose m0 = 0 by symmetry.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2467,The resulting model can be represented as a directed graph as shown in Fig- ure 10.5. Note that there is a link from Λ to µ since the variance of the distribution over µ in (10.40) is a function of Λ.,PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2468,"This example provides a nice illustration of the distinction between latent vari- ables and parameters. Variables such as zn that appear inside the plate are regarded as latent variables because the number of such variables grows with the size of the data set. By contrast, variables such as µ that are outside the plate are ﬁxed in number independently of the size of the data set, and so are regarded as parameters.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2469,"From the perspective of graphical models, however, there is really no fundamental difference between them.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,475,2470,"In order to formulate a variational treatment of this model, we next write down the joint distribution of all of the random variables, which is given by p(X, Z, π, µ, Λ) = p(X|Z, µ, Λ)p(Z|π)p(π)p(µ|Λ)p(Λ) (10.41) in which the various factors are deﬁned above. The reader should take a moment to verify that this decomposition does indeed correspond to the probabilistic graphical model shown in Figure 10.5. Note that only the variables X = {x1, . . . , xN} are observed.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,476,2471,"We now consider a variational distribution which factorizes between the latent variables and the parameters so that q(Z, π, µ, Λ) = q(Z)q(π, µ, Λ).",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,476,2472,"It is remarkable that this is the only assumption that we need to make in order to obtain a tractable practical solution to our Bayesian mixture model. In particular, the functional form of the factors q(Z) and q(π, µ, Λ) will be determined automatically by optimization of the variational distribution. Note that we are omitting the sub- scripts on the q distributions, much as we do with the p distributions in (10.41), and are relying on the arguments to distinguish the different distributions.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,476,2473,"The corresponding sequential update equations for these factors can be easily derived by making use of the general result (10.9). Let us consider the derivation of the update equation for the factor q(Z). The log of the optimized factor is given by ln q⋆(Z) = Eπ,µ,Λ[ln p(X, Z, π, µ, Λ)] + const.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,476,2474,"We now make use of the decomposition (10.41). Note that we are only interested in the functional dependence of the right-hand side on the variable Z. Thus any terms that do not depend on Z can be absorbed into the additive normalization constant, giving ln q⋆(Z) = Eπ[ln p(Z|π)] + Eµ,Λ[ln p(X|Z, µ, Λ)] + const.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,476,2475,"Substituting for the two conditional distributions on the right-hand side, and again absorbing any terms that are independent of Z into the additive constant, we have ln q⋆(Z) = N  n=1 K  k=1 znk ln ρnk + const (10.45) where we have deﬁned ln ρnk = E[ln πk] + 1 2E [ln |Λk| ] −D 2 ln(2π) −1 2Eµk,Λk  (xn −µk)TΛk(xn −µk) (10.46) where D is the dimensionality of the data variable x. Taking the exponential of both sides of (10.45) we obtain q⋆(Z) ∝ N  n=1 K  k=1 ρznk nk .",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2476,"Requiring that this distribution be normalized, and noting that for each value of n the quantities znk are binary and sum to 1 over all values of k, we obtain q⋆(Z) = N  n=1 K  k=1 rznk nk (10.48) \end{verbatim} egin{verbatim} where rnk = ρnk K  j=1 ρnj .",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2477,"We see that the optimal solution for the factor q(Z) takes the same functional form as the prior p(Z|π). Note that because ρnk is given by the exponential of a real quantity, the quantities rnk will be nonnegative and will sum to one, as required.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2478,For the discrete distribution q⋆(Z) we have the standard result E[znk] = rnk (10.50) from which we see that the quantities rnk are playing the role of responsibilities.,PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2479,"Note that the optimal solution for q⋆(Z) depends on moments evaluated with respect to the distributions of other variables, and so again the variational update equations are coupled and must be solved iteratively.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2480,"At this point, we shall ﬁnd it convenient to deﬁne three statistics of the observed data set evaluated with respect to the responsibilities, given by Nk = N  n=1 rnk (10.51) xk = 1 Nk N  n=1 rnkxn (10.52) Sk = 1 Nk N  n=1 rnk(xn −xk)(xn −xk)T.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2481,Note that these are analogous to quantities evaluated in the maximum likelihood EM algorithm for the Gaussian mixture model.,PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2482,"Now let us consider the factor q(π, µ, Λ) in the variational posterior distribu- tion. Again using the general result (10.9) we have ln q⋆(π, µ, Λ) = ln p(π) + K  k=1 ln p(µk, Λk) + EZ [ln p(Z|π)] + K  k=1 N  n=1 E[znk] ln N xn|µk, Λ−1 k + const.",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,477,2483,"We observe that the right-hand side of this expression decomposes into a sum of terms involving only π together with terms only involving µ and Λ, which implies that the variational posterior q(π, µ, Λ) factorizes to give q(π)q(µ, Λ). Further- more, the terms involving µ and Λ themselves comprise a sum over k of terms involving µk and Λk leading to the further factorization q(π, µ, Λ) = q(π) K  k=1 q(µk, Λk).",PPCA and FA
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,478,2484,"Identifying the terms on the right-hand side of (10.54) that depend on π, we have ln q⋆(π) = (α0 −1) K  k=1 ln πk + K  k=1 N  n=1 rnk ln πk + const (10.56) where we have used (10.50). Taking the exponential of both sides, we recognize q⋆(π) as a Dirichlet distribution q⋆(π) = Dir(π|α) (10.57) where α has components αk given by αk = α0 + Nk.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,478,2485,"Finally, the variational posterior distribution q⋆(µk, Λk) does not factorize into the product of the marginals, but we can always use the product rule to write it in the form q⋆(µk, Λk) = q⋆(µk|Λk)q⋆(Λk). The two factors can be found by inspecting (10.54) and reading off those terms that involve µk and Λk. The result, as expected, is a Gaussian-Wishart distribution and is given by q⋆(µk, Λk) = N µk|mk, (βkΛk)−1 W(Λk|Wk, νk) (10.59) where we have deﬁned βk = β0 + Nk (10.60) mk = 1 βk (β0m0 + Nkxk) (10.61) W−1 k = W−1 0 + NkSk + β0Nk β0 + Nk (xk −m0)(xk −m0)T (10.62) νk = ν0 + Nk.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,478,2486,"These update equations are analogous to the M-step equations of the EM algorithm for the maximum likelihood solution of the mixture of Gaussians. We see that the computations that must be performed in order to update the variational posterior distribution over the model parameters involve evaluation of the same sums over the data set, as arose in the maximum likelihood treatment.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2487,"In order to perform this variational M step, we need the expectations E[znk] = rnk representing the responsibilities. These are obtained by normalizing the ρnk that are given by (10.46). We see that this expression involves expectations with respect to the variational distributions of the parameters, and these are easily evaluated to give Eµk,Λk  (xn −µk)TΛk(xn −µk) = Dβ−1 k + νk(xn −mk)TWk(xn −mk) (10.64) ln Λk ≡E [ln |Λk| ] = D  i=1 ψ νk + 1 −i 2  + D ln 2 + ln |Wk| (10.65) ln πk ≡E [ln πk] = ψ(αk) −ψ(α) (10.66) \end{verbatim} egin{verbatim} where we have introduced deﬁnitions of Λk and πk, and ψ(·) is the digamma function deﬁned by (B.25), with α =  k αk. The results (10.65) and (10.66) follow from the standard properties of the Wishart and Dirichlet distributions.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2488,"If we substitute (10.64), (10.65), and (10.66) into (10.46) and make use of (10.49), we obtain the following result for the responsibilities rnk ∝πkΛ1/2 k exp −D 2βk −νk 2 (xn −mk)TWk(xn −mk) .",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2489,"Notice the similarity to the corresponding result for the responsibilities in maximum likelihood EM, which from (9.13) can be written in the form rnk ∝πk|Λk|1/2 exp −1 2(xn −µk)TΛk(xn −µk) (10.68) where we have used the precision in place of the covariance to highlight the similarity to (10.67).",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2490,"Thus the optimization of the variational posterior distribution involves cycling between two stages analogous to the E and M steps of the maximum likelihood EM algorithm. In the variational equivalent of the E step, we use the current distributions over the model parameters to evaluate the moments in (10.64), (10.65), and (10.66) and hence evaluate E[znk] = rnk. Then in the subsequent variational equivalent of the M step, we keep these responsibilities ﬁxed and use them to re-compute the variational distribution over the parameters using (10.57) and (10.59). In each case, we see that the variational posterior distribution has the same functional form as the corresponding factor in the joint distribution (10.41). This is a general result and is a consequence of the choice of conjugate distributions.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2491,"Figure 10.6 shows the results of applying this approach to the rescaled Old Faith- ful data set for a Gaussian mixture model having K = 6 components. We see that after convergence, there are only two components for which the expected values of the mixing coefﬁcients are numerically distinguishable from their prior values.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,479,2492,"This effect can be understood qualitatively in terms of the automatic trade-off in a Bayesian model between ﬁtting the data and the complexity of the model, in which the complexity penalty arises from components whose parameters are pushed away from their prior values. Components that take essentially no responsibility for ex- plaining the data points have rnk ≃0 and hence Nk ≃0. From (10.58), we see that αk ≃α0 and from (10.60)–(10.63) we see that the other parameters revert to their prior values. In principle such components are ﬁtted slightly to the data points, but for broad priors this effect is too small to be seen numerically. For the varia- tional Gaussian mixture model the expected values of the mixing coefﬁcients in the posterior distribution are given by E[πk] = αk + Nk Kα0 + N .",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2493,"Figure 10.6 Variational Bayesian mixture of K = 6 Gaussians ap- plied to the Old Faithful data set, in which the ellipses denote the one standard-deviation density contours for each of the components, and the density of red ink inside each ellipse corresponds to the mean value of the mixing coefﬁcient for each com- ponent. The number in the top left of each diagram shows the num- ber of iterations of variational infer- ence. Components whose expected mixing coefﬁcient are numerically in- distinguishable from zero are not plotted.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2494,"Consider a component for which Nk ≃0 and αk ≃α0. If the prior is broad so that α0 →0, then E[πk] →0 and the component plays no role in the model, whereas if \end{verbatim} egin{verbatim} 0 15 60 120 the prior tightly constrains the mixing coefﬁcients so that α0 →∞, then E[πk] → 1/K.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2495,"In Figure 10.6, the prior over the mixing coefﬁcients is a Dirichlet of the form (10.39). Recall from Figure 2.5 that for α0 < 1 the prior favours solutions in which some of the mixing coefﬁcients are zero. Figure 10.6 was obtained using α0 = 10−3, and resulted in two components having nonzero mixing coefﬁcients. If instead we choose α0 = 1 we obtain three components with nonzero mixing coefﬁcients, and for α = 10 all six components have nonzero mixing coefﬁcients.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2496,As we have seen there is a close similarity between the variational solution for the Bayesian mixture of Gaussians and the EM algorithm for maximum likelihood.,Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2497,"In fact if we consider the limit N →∞then the Bayesian treatment converges to the maximum likelihood EM algorithm. For anything other than very small data sets, the dominant computational cost of the variational algorithm for Gaussian mixtures arises from the evaluation of the responsibilities, together with the evaluation and inversion of the weighted data covariance matrices. These computations mirror pre- cisely those that arise in the maximum likelihood EM algorithm, and so there is little computational overhead in using this Bayesian approach as compared to the tradi- tional maximum likelihood one. There are, however, some substantial advantages.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,480,2498,"First of all, the singularities that arise in maximum likelihood when a Gaussian com- ponent ‘collapses’ onto a speciﬁc data point are absent in the Bayesian treatment.",Generative Topographic Mapping
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,481,2499,"Indeed, these singularities are removed if we simply introduce a prior and then use a MAP estimate instead of maximum likelihood. Furthermore, there is no over-ﬁtting if we choose a large number K of components in the mixture, as we saw in Fig- ure 10.6. Finally, the variational treatment opens up the possibility of determining the optimal number of components in the mixture without resorting to techniques such as cross validation.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,481,2500,"We can also straightforwardly evaluate the lower bound (10.3) for this model. In practice, it is useful to be able to monitor the bound during the re-estimation in order to test for convergence. It can also provide a valuable check on both the math- ematical expressions for the solutions and their software implementation, because at each step of the iterative re-estimation procedure the value of this bound should not decrease. We can take this a stage further to provide a deeper test of the correctness of both the mathematical derivation of the update equations and of their software im- plementation by using ﬁnite differences to check that each update does indeed give a (constrained) maximum of the bound (Svens´en and Bishop, 2004).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,482,2501,"For the variational mixture of Gaussians, the lower bound (10.3) is given by L =  Z  q(Z, π, µ, Λ) ln p(X, Z, π, µ, Λ) q(Z, π, µ, Λ) dπ dµ dΛ = E[ln p(X, Z, π, µ, Λ)] −E[ln q(Z, π, µ, Λ)] = E[ln p(X|Z, µ, Λ)] + E[ln p(Z|π)] + E[ln p(π)] + E[ln p(µ, Λ)] −E[ln q(Z)] −E[ln q(π)] −E[ln q(µ, Λ)] (10.70) where, to keep the notation uncluttered, we have omitted the ⋆superscript on the q distributions, along with the subscripts on the expectation operators because each expectation is taken with respect to all of the random variables in its argument. The various terms in the bound are easily evaluated to give the following results E[ln p(X|Z, µ, Λ)] = 1 2 K  k=1 Nk ln Λk −Dβ−1 k −νkTr(SkWk) −νk(xk −mk)TWk(xk −mk) −D ln(2π) (10.71) E[ln p(Z|π)] = N  n=1 K  k=1 rnk ln πk (10.72) E[ln p(π)] = ln C(α0) + (α0 −1) K  k=1 ln πk (10.73) \end{verbatim} egin{verbatim} E[ln p(µ, Λ)] = 1 2 K  k=1 D ln(β0/2π) + ln Λk −Dβ0 βk −β0νk(mk −m0)TWk(mk −m0) + K ln B(W0, ν0) +(ν0 −D −1) 2 K  k=1 ln Λk −1 2 K  k=1 νkTr(W−1 0 Wk) (10.74) E[ln q(Z)] = N  n=1 K  k=1 rnk ln rnk (10.75) E[ln q(π)] = K  k=1 (αk −1) ln πk + ln C(α) (10.76) E[ln q(µ, Λ)] = K  k=1 1 2 ln Λk + D 2 ln βk 2π  −D 2 −H [q(Λk)] (10.77) where D is the dimensionality of x, H[q(Λk)] is the entropy of the Wishart distribu- tion given by (B.82), and the coefﬁcients C(α) and B(W, ν) are deﬁned by (B.23) and (B.79), respectively. Note that the terms involving expectations of the logs of the q distributions simply represent the negative entropies of those distributions. Some simpliﬁcations and combination of terms can be performed when these expressions are summed to give the lower bound. However, we have kept the expressions sepa- rate for ease of understanding.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,482,2502,"Finally, it is worth noting that the lower bound provides an alternative approach for deriving the variational re-estimation equations obtained in Section 10.2.1. To do this we use the fact that, since the model has conjugate priors, the functional form of the factors in the variational posterior distribution is known, namely discrete for Z, Dirichlet for π, and Gaussian-Wishart for (µk, Λk). By taking general parametric forms for these distributions we can derive the form of the lower bound as a function of the parameters of the distributions. Maximizing the bound with respect to these parameters then gives the required re-estimation equations.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,483,2503,"In applications of the Bayesian mixture of Gaussians model we will often be interested in the predictive density for a new value x of the observed variable. As- sociated with this observation will be a corresponding latent variable z, and the pre- dictive density is then given by p(x|X) =  bz  p(x|z, µ, Λ)p(z|π)p(π, µ, Λ|X) dπ dµ dΛ (10.78) \end{verbatim} egin{verbatim} where p(π, µ, Λ|X) is the (unknown) true posterior distribution of the parameters.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,483,2504,"Using (10.37) and (10.38) we can ﬁrst perform the summation over z to give p(x|X) = K  k=1  πkN x|µk, Λ−1 k p(π, µ, Λ|X) dπ dµ dΛ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,483,2505,"Because the remaining integrations are intractable, we approximate the predictive density by replacing the true posterior distribution p(π, µ, Λ|X) with its variational approximation q(π)q(µ, Λ) to give p(x|X) = K  k=1  πkN x|µk, Λ−1 k q(π)q(µk, Λk) dπ dµk dΛk (10.80) where we have made use of the factorization (10.55) and in each term we have im- plicitly integrated out all variables {µj, Λj} for j ̸= k The remaining integrations can now be evaluated analytically giving a mixture of Student’s t-distributions p(x|X) = 1 α K  k=1 αkSt(x|mk, Lk, νk + 1 −D) (10.81) in which the kth component has mean mk, and the precision is given by Lk = (νk + 1 −D)βk (1 + βk) Wk (10.82) in which νk is given by (10.63). When the size N of the data set is large the predictive distribution (10.81) reduces to a mixture of Gaussians.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,483,2506,"We have seen that the variational lower bound can be used to determine a pos- terior distribution over the number K of components in the mixture model. There is, however, one subtlety that needs to be addressed. For any given setting of the parameters in a Gaussian mixture model (except for speciﬁc degenerate settings), there will exist other parameter settings for which the density over the observed vari- ables will be identical. These parameter values differ only through a re-labelling of the components. For instance, consider a mixture of two Gaussians and a single ob- served variable x, in which the parameters have the values π1 = a, π2 = b, µ1 = c, µ2 = d, σ1 = e, σ2 = f. Then the parameter values π1 = b, π2 = a, µ1 = d, µ2 = c, σ1 = f, σ2 = e, in which the two components have been exchanged, will by symmetry give rise to the same value of p(x). If we have a mixture model com- prising K components, then each parameter setting will be a member of a family of K! equivalent settings.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,484,2507,"Figure 10.7 Plot of the variational lower bound L versus the number K of com- ponents in the Gaussian mixture model, for the Old Faithful data, showing a distinct peak at K = 2 components.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,484,2508,"In the context of maximum likelihood, this redundancy is irrelevant because the parameter optimization algorithm (for example EM) will, depending on the initial- ization of the parameters, ﬁnd one speciﬁc solution, and the other equivalent solu- tions play no role. In a Bayesian setting, however, we marginalize over all possible \end{verbatim} egin{verbatim} For each value of K, the model is trained from 100 different random starts, and the results shown as ‘+’ symbols plotted with small random hori- zontal perturbations so that they can be distinguished.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,484,2509,"local maxima, but that this hap- pens infrequently.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,484,2510,"parameter values. We have seen in Figure 10.2 that if the true posterior distribution is multimodal, variational inference based on the minimization of KL(q∥p) will tend to approximate the distribution in the neighbourhood of one of the modes and ignore the others. Again, because equivalent modes have equivalent predictive densities, this is of no concern provided we are considering a model having a speciﬁc number K of components. If, however, we wish to compare different values of K, then we need to take account of this multimodality. A simple approximate solution is to add a term ln K! onto the lower bound when used for model comparison and averaging.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,484,2511,"Figure 10.7 shows a plot of the lower bound, including the multimodality fac- tor, versus the number K of components for the Old Faithful data set. It is worth emphasizing once again that maximum likelihood would lead to values of the likeli- hood function that increase monotonically with K (assuming the singular solutions have been avoided, and discounting the effects of local maxima) and so cannot be used to determine an appropriate model complexity. By contrast, Bayesian inference automatically makes the trade-off between model complexity and ﬁtting the data.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,485,2512,"This approach to the determination of K requires that a range of models having different K values be trained and compared. An alternative approach to determining a suitable value for K is to treat the mixing coefﬁcients π as parameters and make point estimates of their values by maximizing the lower bound (Corduneanu and Bishop, 2001) with respect to π instead of maintaining a probability distribution over them as in the fully Bayesian approach. This leads to the re-estimation equation πk = 1 N N  n=1 rnk (10.83) and this maximization is interleaved with the variational updates for the q distribution over the remaining parameters. Components that provide insufﬁcient contribution \end{verbatim} egin{verbatim} to explaining the data will have their mixing coefﬁcients driven to zero during the optimization, and so they are effectively removed from the model through automatic relevance determination. This allows us to make a single training run in which we start with a relatively large initial value of K, and allow surplus components to be pruned out of the model. The origins of the sparsity when optimizing with respect to hyperparameters is discussed in detail in the context of the relevance vector machine.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,485,2513,"In deriving these variational update equations for the Gaussian mixture model, we assumed a particular factorization of the variational posterior distribution given by (10.42). However, the optimal solutions for the various factors exhibit additional factorizations. In particular, the solution for q⋆(µ, Λ) is given by the product of an independent distribution q⋆(µk, Λk) over each of the components k of the mixture, whereas the variational posterior distribution q⋆(Z) over the latent variables, given by (10.48), factorizes into an independent distribution q⋆(zn) for each observation n (note that it does not further factorize with respect to k because, for each value of n, the znk are constrained to sum to one over k). These additional factorizations are a consequence of the interaction between the assumed factorization and the conditional independence properties of the true distribution, as characterized by the directed graph in Figure 10.5.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,485,2514,"We shall refer to these additional factorizations as induced factorizations be- cause they arise from an interaction between the factorization assumed in the varia- tional posterior distribution and the conditional independence properties of the true joint distribution. In a numerical implementation of the variational approach it is important to take account of such additional factorizations. For instance, it would be very inefﬁcient to maintain a full precision matrix for the Gaussian distribution over a set of variables if the optimal form for that distribution always had a diago- nal precision matrix (corresponding to a factorization with respect to the individual variables described by that Gaussian).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,485,2515,"Such induced factorizations can easily be detected using a simple graphical test based on d-separation as follows. We partition the latent variables into three disjoint groups A, B, C and then let us suppose that we are assuming a factorization between C and the remaining latent variables, so that q(A, B, C) = q(A, B)q(C).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,485,2516,"Using the general result (10.9), together with the product rule for probabilities, we see that the optimal solution for q(A, B) is given by ln q⋆(A, B) = EC[ln p(X, A, B, C)] + const = EC[ln p(A, B|X, C)] + const.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,486,2517,"We now ask whether this resulting solution will factorize between A and B, in other words whether q⋆(A, B) = q⋆(A)q⋆(B). This will happen if, and only if, ln p(A, B|X, C) = ln p(A|X, C) + ln p(B|X, C), that is, if the conditional inde- pendence relation A ⊥⊥B | X, C (10.86) \end{verbatim} egin{verbatim} is satisﬁed. We can test to see if this relation does hold, for any choice of A and B by making use of the d-separation criterion.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,486,2518,"To illustrate this, consider again the Bayesian mixture of Gaussians represented by the directed graph in Figure 10.5, in which we are assuming a variational fac- torization given by (10.42). We can see immediately that the variational posterior distribution over the parameters must factorize between π and the remaining param- eters µ and Λ because all paths connecting π to either µ or Λ must pass through one of the nodes zn all of which are in the conditioning set for our conditional inde- pendence test and all of which are head-to-tail with respect to such paths.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,486,2519,"As a second illustration of variational inference, we return to the Bayesian linear regression model of Section 3.3. In the evidence framework, we approximated the integration over α and β by making point estimates obtained by maximizing the log marginal likelihood. A fully Bayesian approach would integrate over the hyperpa- rameters as well as over the parameters. Although exact integration is intractable, we can use variational methods to ﬁnd a tractable approximation. In order to sim- plify the discussion, we shall suppose that the noise precision parameter β is known, and is ﬁxed to its true value, although the framework is easily extended to include the distribution over β. For the linear regression model, the variational treatment will turn out to be equivalent to the evidence framework. Nevertheless, it provides a good exercise in the use of variational methods and will also lay the foundation for variational treatment of Bayesian logistic regression in Section 10.6.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,486,2520,"Recall that the likelihood function for w, and the prior over w, are given by p(t|w) = N  n=1 N(tn|wTφn, β−1) (10.87) p(w|α) = N(w|0, α−1I) (10.88) where φn = φ(xn). We now introduce a prior distribution over α. From our dis- cussion in Section 2.3.6, we know that the conjugate prior for the precision of a Gaussian is given by a gamma distribution, and so we choose p(α) = Gam(α|a0, b0) (10.89) where Gam(·|·, ·) is deﬁned by (B.26). Thus the joint distribution of all the variables is given by p(t, w, α) = p(t|w)p(w|α)p(α).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,486,2521,"This can be represented as a directed graphical model as shown in Figure 10.8. 10.3.1 Our ﬁrst goal is to ﬁnd an approximation to the posterior distribution p(w, α|t).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,487,2522,Figure 10.8 Probabilistic graphical model representing the joint dis- tribution (10.90) for the Bayesian linear regression model.,Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,487,2523,"To do this, we employ the variational framework of Section 10.1, with a variational \end{verbatim} egin{verbatim} tn φn N w α β posterior distribution given by the factorized expression q(w, α) = q(w)q(α).",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,487,2524,"We can ﬁnd re-estimation equations for the factors in this distribution by making use of the general result (10.9). Recall that for each factor, we take the log of the joint distribution over all variables and then average with respect to those variables not in that factor. Consider ﬁrst the distribution over α. Keeping only terms that have a functional dependence on α, we have ln q⋆(α) = ln p(α) + Ew [ln p(w|α)] + const = (a0 −1) ln α −b0α + M 2 ln α −α 2 E[wTw] + const.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,487,2525,"We recognize this as the log of a gamma distribution, and so identifying the coefﬁ- cients of α and ln α we obtain q⋆(α) = Gam(α|aN, bN) (10.93) where aN = a0 + M 2 (10.94) bN = b0 + 1 2E[wTw].",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,487,2526,"Similarly, we can ﬁnd the variational re-estimation equation for the posterior distribution over w. Again, using the general result (10.9), and keeping only those terms that have a functional dependence on w, we have ln q⋆(w) = ln p(t|w) + Eα [ln p(w|α)] + const (10.96) = −β 2 N  n=1 {wTφn −tn}2 −1 2E[α]wTw + const (10.97) = −1 2wT E[α]I + βΦTΦ w + βwTΦTt + const.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2527,"Because this is a quadratic form, the distribution q⋆(w) is Gaussian, and so we can complete the square in the usual way to identify the mean and covariance, giving q⋆(w) = N(w|mN, SN) (10.99) \end{verbatim} egin{verbatim} where mN = βSNΦTt (10.100) SN = E[α]I + βΦTΦ−1 .",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2528,"Note the close similarity to the posterior distribution (3.52) obtained when α was treated as a ﬁxed parameter. The difference is that here α is replaced by its expecta- tion E[α] under the variational distribution. Indeed, we have chosen to use the same notation for the covariance matrix SN in both cases.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2529,"Using the standard results (B.27), (B.38), and (B.39), we can obtain the required moments as follows E[α] = aN/bN (10.102) E[wwT] = mNmT N + SN.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2530,"The evaluation of the variational posterior distribution begins by initializing the pa- rameters of one of the distributions q(w) or q(α), and then alternately re-estimates these factors in turn until a suitable convergence criterion is satisﬁed (usually speci- ﬁed in terms of the lower bound to be discussed shortly).",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2531,"It is instructive to relate the variational solution to that found using the evidence framework in Section 3.5. To do this consider the case a0 = b0 = 0, corresponding to the limit of an inﬁnitely broad prior over α. The mean of the variational posterior distribution q(α) is then given by E[α] = aN bN = M/2 E[wTw]/2 = M mT NmN + Tr(SN).",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,488,2532,"Comparison with (9.63) shows that in the case of this particularly simple model, the variational approach gives precisely the same expression as that obtained by maximizing the evidence function using EM except that the point estimate for α is replaced by its expected value. Because the distribution q(w) depends on q(α) only through the expectation E[α], we see that the two approaches will give identical results for the case of an inﬁnitely broad prior.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,489,2533,"The predictive distribution over t, given a new input x, is easily evaluated for this model using the Gaussian variational posterior for the parameters p(t|x, t) =  p(t|x, w)p(w|t) dw ≃  p(t|x, w)q(w) dw =  N(t|wTφ(x), β−1)N(w|mN, SN) dw = N(t|mT Nφ(x), σ2(x)) (10.105) \end{verbatim} egin{verbatim} where we have evaluated the integral by making use of the result (2.115) for the linear-Gaussian model. Here the input-dependent variance is given by σ2(x) = 1 β + φ(x)TSNφ(x).",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,489,2534,Note that this takes the same form as the result (3.59) obtained with ﬁxed α except that now the expected value E[α] appears in the deﬁnition of SN.,Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,489,2535,"Another quantity of importance is the lower bound L deﬁned by L(q) = E[ln p(w, α, t)] −E[ln q(w, α)] = Ew[ln p(t|w)] + Ew,α[ln p(w|α)] + Eα[ln p(α)] −Eα[ln q(w)]w −E[ln q(α)].",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,489,2536,"Evaluation of the various terms is straightforward, making use of results obtained in previous chapters, and gives E[ln p(t|w)]w = N 2 ln  β 2π  −β 2 tTt + βmT NΦTt −β 2 Tr  ΦTΦ(mNmT N + SN) (10.108) E[ln p(w|α)]w,α = −M 2 ln(2π) + M 2 (ψ(aN) −ln bN) −aN 2bN  mT NmN + Tr(SN) (10.109) E[ln p(α)]α = a0 ln b0 + (a0 −1) [ψ(aN) −ln bN] −b0 aN bN −ln Γ(aN) (10.110) −E[ln q(w)]w = 1 2 ln |SN| + M 2 [1 + ln(2π)] (10.111) −E[ln q(α)]α = ln Γ(aN) −(aN −1)ψ(aN) −ln bN + aN. (10.112) Figure 10.9 shows a plot of the lower bound L(q) versus the degree of a polynomial model for a synthetic data set generated from a degree three polynomial. Here the prior parameters have been set to a0 = b0 = 0, corresponding to the noninformative prior p(α) ∝1/α, which is uniform over ln α as discussed in Section 2.3.6. As we saw in Section 10.1, the quantity L represents lower bound on the log marginal likelihood p(t|M) for the model. If we assign equal prior probabilities p(M) to the different values of M, then we can interpret L as an approximation to the poste- rior model probability p(M|t). Thus the variational framework assigns the highest probability to the model with M = 3. This should be contrasted with the maximum likelihood result, which assigns ever smaller residual error to models of increasing complexity until the residual error is driven to zero, causing maximum likelihood to favour severely over-ﬁtted models.",Sequential Data
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,490,2537,"Figure 10.9 Plot of the lower bound L ver- sus the order M of the polyno- mial, for a polynomial model, in which a set of 10 data points is generated from a polynomial with M = 3 sampled over the inter- val (−5, 5) with additive Gaussian noise of variance 0.09. The value of the bound gives the log prob- ability of the model, and we see that the value of the bound peaks at M = 3, corresponding to the true model from which the data set was generated.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,490,2538,"In Chapter 2, we discussed the important role played by the exponential family of distributions and their conjugate priors. For many of the models discussed in this book, the complete-data likelihood is drawn from the exponential family. However, in general this will not be the case for the marginal likelihood function for the ob- served data. For example, in a mixture of Gaussians, the joint distribution of obser- vations xn and corresponding hidden variables zn is a member of the exponential family, whereas the marginal distribution of xn is a mixture of Gaussians and hence is not.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,490,2539,"Up to now we have grouped the variables in the model into observed variables and hidden variables. We now make a further distinction between latent variables, denoted Z, and parameters, denoted θ, where parameters are intensive (ﬁxed in num- ber independent of the size of the data set), whereas latent variables are extensive (scale in number with the size of the data set). For example, in a Gaussian mixture model, the indicator variables zkn (which specify which component k is responsible for generating data point xn) represent the latent variables, whereas the means µk, precisions Λk and mixing proportions πk represent the parameters.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,490,2540,"Consider the case of independent identically distributed data. We denote the data values by X = {xn}, where n = 1, . . . N, with corresponding latent variables Z = {zn}. Now suppose that the joint distribution of observed and latent variables is a member of the exponential family, parameterized by natural parameters η so that p(X, Z|η) = N  n=1 h(xn, zn)g(η) exp  ηTu(xn, zn)  .",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,490,2541,"We shall also use a conjugate prior for η, which can be written as p(η|ν0, v0) = f(ν0, χ0)g(η)ν0 exp  νoηTχ0  .",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,491,2542,"Recall that the conjugate prior distribution can be interpreted as a prior number ν0 of observations all having the value χ0 for the u vector. Now consider a variational \end{verbatim} egin{verbatim} distribution that factorizes between the latent variables and the parameters, so that q(Z, η) = q(Z)q(η). Using the general result (10.9), we can solve for the two factors as follows ln q⋆(Z) = Eη[ln p(X, Z|η)] + const = N  n=1  ln h(xn, zn) + E[ηT]u(xn, zn)  + const. (10.115) Thus we see that this decomposes into a sum of independent terms, one for each value of n, and hence the solution for q⋆(Z) will factorize over n so that q⋆(Z) =  n q⋆(zn). This is an example of an induced factorization. Taking the exponential of both sides, we have q⋆(zn) = h(xn, zn)g (E[η]) exp  E[ηT]u(xn, zn) (10.116) where the normalization coefﬁcient has been re-instated by comparison with the standard form for the exponential family.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,491,2543,"Similarly, for the variational distribution over the parameters, we have ln q⋆(η) = ln p(η|ν0, χ0) + EZ[ln p(X, Z|η)] + const (10.117) = ν0 ln g(η) + ηTχ0 + N  n=1  ln g(η) + ηTEzn[u(xn, zn)] + const. (10.118) Again, taking the exponential of both sides, and re-instating the normalization coef- ﬁcient by inspection, we have q⋆(η) = f(νN, χN)g(η)νN exp  ηTχN  (10.119) where we have deﬁned νN = ν0 + N (10.120) χN = χ0 + N  n=1 Ezn[u(xn, zn)].",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,491,2544,"Note that the solutions for q⋆(zn) and q⋆(η) are coupled, and so we solve them iter- atively in a two-stage procedure. In the variational E step, we evaluate the expected sufﬁcient statistics E[u(xn, zn)] using the current posterior distribution q(zn) over the latent variables and use this to compute a revised posterior distribution q(η) over the parameters. Then in the subsequent variational M step, we use this revised pa- rameter posterior distribution to ﬁnd the expected natural parameters E[ηT], which gives rise to a revised variational distribution over the latent variables.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2545,"We have illustrated the application of variational methods by considering a spe- ciﬁc model, the Bayesian mixture of Gaussians, in some detail. This model can be \end{verbatim} egin{verbatim} described by the directed graph shown in Figure 10.5. Here we consider more gen- erally the use of variational methods for models described by directed graphs and derive a number of widely applicable results.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2546,"The joint distribution corresponding to a directed graph can be written using the decomposition p(x) =  i p(xi|pai) (10.122) where xi denotes the variable(s) associated with node i, and pai denotes the parent set corresponding to node i. Note that xi may be a latent variable or it may belong to the set of observed variables. Now consider a variational approximation in which the distribution q(x) is assumed to factorize with respect to the xi so that q(x) =  i qi(xi).",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2547,"Note that for observed nodes, there is no factor q(xi) in the variational distribution. We now substitute (10.122) into our general result (10.9) to give ln q⋆ j (xj) = Ei̸=j  i ln p(xi|pai) + const.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2548,"Any terms on the right-hand side that do not depend on xj can be absorbed into the additive constant. In fact, the only terms that do depend on xj are the con- ditional distribution for xj given by p(xj|paj) together with any other conditional distributions that have xj in the conditioning set. By deﬁnition, these conditional distributions correspond to the children of node j, and they therefore also depend on the co-parents of the child nodes, i.e., the other parents of the child nodes besides node xj itself. We see that the set of all nodes on which q⋆(xj) depends corresponds to the Markov blanket of node xj, as illustrated in Figure 8.26. Thus the update of the factors in the variational posterior distribution represents a local calculation on the graph. This makes possible the construction of general purpose software for variational inference in which the form of the model does not need to be speciﬁed in advance (Bishop et al., 2003).",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2549,"If we now specialize to the case of a model in which all of the conditional dis- tributions have a conjugate-exponential structure, then the variational update proce- dure can be cast in terms of a local message passing algorithm (Winn and Bishop, 2005). In particular, the distribution associated with a particular node can be updated once that node has received messages from all of its parents and all of its children.",Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2550,This in turn requires that the children have already received messages from their co- parents. The evaluation of the lower bound can also be simpliﬁed because many of the required quantities are already evaluated as part of the message passing scheme.,Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,492,2551,This distributed message passing formulation has good scaling properties and is well suited to large networks.,Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,493,2552,"Figure 10.10 In the left-hand ﬁg- ure the red curve shows the function exp(−x), and the blue line shows the tangent at x = ξ deﬁned by (10.125) with ξ = 1. This line has slope λ = f ′(ξ) = −exp(−ξ). Note that any other tangent line, for ex- ample the ones shown in green, will have a smaller value of y at x = ξ. The right-hand ﬁgure shows the corresponding plot of the function λξ −g(λ), where g(λ) is given by (10.131), versus λ for ξ = 1, in which the maximum corresponds to λ = −exp(−ξ) = −1/e.",Hidden Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,493,2553,"The variational framework discussed in Sections 10.1 and 10.2 can be considered a ‘global’ method in the sense that it directly seeks an approximation to the full poste- rior distribution over all random variables. An alternative ‘local’ approach involves ﬁnding bounds on functions over individual variables or groups of variables within a model. For instance, we might seek a bound on a conditional distribution p(y|x), which is itself just one factor in a much larger probabilistic model speciﬁed by a directed graph. The purpose of introducing the bound of course is to simplify the resulting distribution. This local approximation can be applied to multiple variables in turn until a tractable approximation is obtained, and in Section 10.6.1 we shall give a practical example of this approach in the context of logistic regression. Here we focus on developing the bounds themselves.",Hidden Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,493,2554,We have already seen in our discussion of the Kullback-Leibler divergence that the convexity of the logarithm function played a key role in developing the lower bound in the global variational approach. We have deﬁned a (strictly) convex func- tion as one for which every chord lies above the function. Convexity also plays a central role in the local variational framework. Note that our discussion will ap- ply equally to concave functions with ‘min’ and ‘max’ interchanged and with lower bounds replaced by upper bounds.,Hidden Markov Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,494,2555,"Figure 10.11 In the left-hand plot the red curve shows a convex function f(x), and the blue line represents the linear function λx, which is a lower bound on f(x) because f(x) > λx for all x. For the given value of slope λ the contact point of the tangent line having the same slope is found by minimizing with respect to x the discrepancy (shown by the green dashed lines) given by f(x) −λx. This deﬁnes the dual function g(λ), which corresponds to the (negative of the) intercept of the tangent line having slope λ.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,494,2556,"Let us begin by considering a simple example, namely the function f(x) = exp(−x), which is a convex function of x, and which is shown in the left-hand plot of Figure 10.10. Our goal is to approximate f(x) by a simpler function, in particular a linear function of x. From Figure 10.10, we see that this linear function will be a lower bound on f(x) if it corresponds to a tangent. We can obtain the tangent line y(x) at a speciﬁc value of x, say x = ξ, by making a ﬁrst order Taylor expansion y(x) = f(ξ) + f ′(ξ)(x −ξ) (10.125) so that y(x) ⩽f(x) with equality when x = ξ. For our example function f(x) = x ξ 0 1.5 3 0 0.5 1 λ λξ −g(λ) −1 −0.5 0 0 0.2 0.4 \end{verbatim} egin{verbatim} x y f(x) λx x y f(x) λx −g(λ) −g(λ) exp(−x), we therefore obtain the tangent line in the form y(x) = exp(−ξ) −exp(−ξ)(x −ξ) (10.126) which is a linear function parameterized by ξ. For consistency with subsequent discussion, let us deﬁne λ = −exp(−ξ) so that y(x, λ) = λx −λ + λ ln(−λ).",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,494,2557,"Different values of λ correspond to different tangent lines, and because all such lines are lower bounds on the function, we have f(x) ⩾y(x, λ). Thus we can write the function in the form f(x) = max λ {λx −λ + λ ln(−λ)} .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,494,2558,"We have succeeded in approximating the convex function f(x) by a simpler, lin- ear function y(x, λ). The price we have paid is that we have introduced a variational parameter λ, and to obtain the tightest bound we must optimize with respect to λ.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,494,2559,"We can formulate this approach more generally using the framework of convex duality (Rockafellar, 1972; Jordan et al., 1999). Consider the illustration of a convex function f(x) shown in the left-hand plot in Figure 10.11. In this example, the function λx is a lower bound on f(x) but it is not the best lower bound that can be achieved by a linear function having slope λ, because the tightest bound is given by the tangent line. Let us write the equation of the tangent line, having slope λ as λx −g(λ) where the (negative) intercept g(λ) clearly depends on the slope λ of the tangent. To determine the intercept, we note that the line must be moved vertically by an amount equal to the smallest vertical distance between the line and the function, as shown in Figure 10.11. Thus g(λ) = −min x {f(x) −λx} = max x {λx −f(x)} .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2560,"Now, instead of ﬁxing λ and varying x, we can consider a particular x and then adjust λ until the tangent plane is tangent at that particular x. Because the y value of the tangent line at a particular x is maximized when that value coincides with its contact point, we have f(x) = max λ {λx −g(λ)} .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2561,"We see that the functions f(x) and g(λ) play a dual role, and are related through (10.129) and (10.130).",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2562,"Let us apply these duality relations to our simple example f(x) = exp(−x). From (10.129) we see that the maximizing value of x is given by ξ = −ln(−λ), and back-substituting we obtain the conjugate function g(λ) in the form g(λ) = λ −λ ln(−λ) (10.131) as obtained previously. The function λξ −g(λ) is shown, for ξ = 1 in the right-hand plot in Figure 10.10. As a check, we can substitute (10.131) into (10.130), which gives the maximizing value of λ = −exp(−x), and back-substituting then recovers the original function f(x) = exp(−x).",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2563,"For concave functions, we can follow a similar argument to obtain upper bounds, in which max’ is replaced with ‘min’, so that f(x) = min λ {λx −g(λ)} (10.132) g(λ) = min x {λx −f(x)} .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2564,"If the function of interest is not convex (or concave), then we cannot directly apply the method above to obtain a bound. However, we can ﬁrst seek invertible transformations either of the function or of its argument which change it into a con- vex form. We then calculate the conjugate function and then transform back to the original variables.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,495,2565,"An important example, which arises frequently in pattern recognition, is the logistic sigmoid function deﬁned by σ(x) = 1 1 + e−x .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2566,"Figure 10.12 The left-hand plot shows the logistic sigmoid function σ(x) deﬁned by (10.134) in red, together with two examples of the exponential upper bound (10.137) shown in blue. The right-hand plot shows the logistic sigmoid again in red together with the Gaussian lower bound (10.144) shown in blue.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2567,"As it stands this function is neither convex nor concave. However, if we take the logarithm we obtain a function which is concave, as is easily veriﬁed by ﬁnding the second derivative. From (10.133) the corresponding conjugate function then takes the form g(λ) = min x {λx −f(x)} = −λ ln λ −(1 −λ) ln(1 −λ) (10.135) which we recognize as the binary entropy function for a variable whose probability of having the value 1 is λ. Using (10.132), we then obtain an upper bound on the log Appendix B sigmoid ln σ(x) ⩽λx −g(λ) (10.136) \end{verbatim} egin{verbatim} λ = 0.2 λ = 0.7 −6 0 6 0 0.5 1 ξ = 2.5 −ξ ξ −6 0 6 0 0.5 1 Here the parameter ξ = 2.5, and the bound is exact at x = ξ and x = −ξ, denoted by the dashed green lines.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2568,"and taking the exponential, we obtain an upper bound on the logistic sigmoid itself of the form σ(x) ⩽exp(λx −g(λ)) (10.137) which is plotted for two values of λ on the left-hand plot in Figure 10.12.",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2569,"We can also obtain a lower bound on the sigmoid having the functional form of a Gaussian. To do this, we follow Jaakkola and Jordan (2000) and make transforma- tions both of the input variable and of the function itself. First we take the log of the logistic function and then decompose it so that ln σ(x) = −ln(1 + e−x) = −ln  e−x/2(ex/2 + e−x/2)  = x/2 −ln(ex/2 + e−x/2).",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2570,"We now note that the function f(x) = −ln(ex/2 + e−x/2) is a convex function of the variable x2, as can again be veriﬁed by ﬁnding the second derivative. This leads to a lower bound on f(x), which is a linear function of x2 whose conjugate function is given by g(λ) = max x2  λx2 −f √ x2  .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2571,The stationarity condition leads to 0 = λ −dx dx2 d dxf(x) = λ + 1 4x tanh x 2  .,Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,496,2572,"If we denote this value of x, corresponding to the contact point of the tangent line for this particular value of λ, by ξ, then we have λ(ξ) = −1 4ξ tanh ξ 2  = −1 2ξ σ(ξ) −1 2 .",Example: Polynomial curve fitting
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2573,"Instead of thinking of λ as the variational parameter, we can let ξ play this role as this leads to simpler expressions for the conjugate function, which is then given by g(λ) = λ(ξ)ξ2 −f(ξ) = λ(ξ)ξ2 + ln(eξ/2 + e−ξ/2).",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2574,Hence the bound on f(x) can be written as f(x) ⩾λx2 −g(λ) = λx2 −λξ2 −ln(eξ/2 + e−ξ/2).,The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2575,"The bound on the sigmoid then becomes σ(x) ⩾σ(ξ) exp  (x −ξ)/2 −λ(ξ)(x2 −ξ2)  (10.144) where λ(ξ) is deﬁned by (10.141). This bound is illustrated in the right-hand plot of Figure 10.12. We see that the bound has the form of the exponential of a quadratic function of x, which will prove useful when we seek Gaussian representations of posterior distributions deﬁned through logistic sigmoid functions.",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2576,"The logistic sigmoid arises frequently in probabilistic models over binary vari- ables because it is the function that transforms a log odds ratio into a posterior prob- ability. The corresponding transformation for a multiclass distribution is given by the softmax function. Unfortunately, the lower bound derived here for the logistic sigmoid does not directly extend to the softmax. Gibbs (1997) proposes a method for constructing a Gaussian distribution that is conjectured to be a bound (although no rigorous proof is given), which may be used to apply local variational methods to multiclass problems.",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2577,"We shall see an example of the use of local variational bounds in Sections 10.6.1. For the moment, however, it is instructive to consider in general terms how these bounds can be used. Suppose we wish to evaluate an integral of the form I =  σ(a)p(a) da (10.145) where σ(a) is the logistic sigmoid, and p(a) is a Gaussian probability density. Such integrals arise in Bayesian models when, for instance, we wish to evaluate the pre- dictive distribution, in which case p(a) represents a posterior parameter distribution.",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2578,"Because the integral is intractable, we employ the variational bound (10.144), which we write in the form σ(a) ⩾f(a, ξ) where ξ is a variational parameter. The inte- gral now becomes the product of two exponential-quadratic functions and so can be integrated analytically to give a bound on I I ⩾  f(a, ξ)p(a) da = F(ξ).",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,497,2579,"We now have the freedom to choose the variational parameter ξ, which we do by ﬁnding the value ξ⋆that maximizes the function F(ξ). The resulting value F(ξ⋆) represents the tightest bound within this family of bounds and can be used as an approximation to I. This optimized bound, however, will in general not be exact.",The Kalman Filter
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,498,2580,"Although the bound σ(a) ⩾f(a, ξ) on the logistic sigmoid can be optimized exactly, the required choice for ξ depends on the value of a, so that the bound is exact for one value of a only. Because the quantity F(ξ) is obtained by integrating over all values of a, the value of ξ⋆represents a compromise, weighted by the distribution p(a).",Linear dynamical systems
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,498,2581,"We now illustrate the use of local variational methods by returning to the Bayesian logistic regression model studied in Section 4.5. There we focussed on the use of the Laplace approximation, while here we consider a variational treatment based on the approach of Jaakkola and Jordan (2000). Like the Laplace method, this also leads to a Gaussian approximation to the posterior distribution. However, the greater ﬂexibility of the variational approximation leads to improved accuracy compared to the Laplace method. Furthermore (unlike the Laplace method), the variational approach is optimizing a well deﬁned objective function given by a rigourous bound on the model evidence. Logistic regression has also been treated by Dybowski and Roberts (2005) from a Bayesian perspective using Monte Carlo sampling techniques.",Linear dynamical systems
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,498,2582,"Here we shall make use of a variational approximation based on the local bounds introduced in Section 10.5. This allows the likelihood function for logistic regres- sion, which is governed by the logistic sigmoid, to be approximated by the expo- nential of a quadratic form. It is therefore again convenient to choose a conjugate Gaussian prior of the form (4.140). For the moment, we shall treat the hyperparam- eters m0 and S0 as ﬁxed constants. In Section 10.6.3, we shall demonstrate how the variational formalism can be extended to the case where there are unknown hyper- parameters whose values are to be inferred from the data.",Linear dynamical systems
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,498,2583,"In the variational framework, we seek to maximize a lower bound on the marginal likelihood. For the Bayesian logistic regression model, the marginal likelihood takes the form p(t) =  p(t|w)p(w) dw =   N  n=1 p(tn|w) p(w) dw.",Linear dynamical systems
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2584,"We ﬁrst note that the conditional distribution for t can be written as p(t|w) = σ(a)t {1 −σ(a)}1−t =  1 1 + e−a t  1 − 1 1 + e−a 1−t = eat e−a 1 + e−a = eatσ(−a) (10.148) where a = wTφ. In order to obtain a lower bound on p(t), we make use of the variational lower bound on the logistic sigmoid function given by (10.144), which \end{verbatim} egin{verbatim} we reproduce here for convenience σ(z) ⩾σ(ξ) exp  (z −ξ)/2 −λ(ξ)(z2 −ξ2) (10.149) where λ(ξ) = 1 2ξ σ(ξ) −1 2 .",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2585,p(t|w) = eatσ(−a) ⩾eatσ(ξ) exp  −(a + ξ)/2 −λ(ξ)(a2 −ξ2) .,The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2586,"Note that because this bound is applied to each of the terms in the likelihood function separately, there is a variational parameter ξn corresponding to each training set observation (φn, tn). Using a = wTφ, and multiplying by the prior distribution, we obtain the following bound on the joint distribution of t and w p(t, w) = p(t|w)p(w) ⩾h(w, ξ)p(w) (10.152) where ξ denotes the set {ξn} of variational parameters, and h(w, ξ) = N  n=1 σ(ξn) exp  wTφntn −(wTφn + ξn)/2 −λ(ξn)([wTφn]2 −ξ2 n)  .",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2587,"Evaluation of the exact posterior distribution would require normalization of the left- hand side of this inequality. Because this is intractable, we work instead with the right-hand side. Note that the function on the right-hand side cannot be interpreted as a probability density because it is not normalized. Once it is normalized to give a variational posterior distribution q(w), however, it no longer represents a bound.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2588,"Because the logarithm function is monotonically increasing, the inequality A ⩾ B implies ln A ⩾ln B. This gives a lower bound on the log of the joint distribution of t and w of the form ln {p(t|w)p(w)} ⩾ln p(w) + N  n=1  ln σ(ξn) + wTφntn −(wTφn + ξn)/2 −λ(ξn)([wTφn]2 −ξ2 n)  .",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,499,2589,"Substituting for the prior p(w), the right-hand side of this inequality becomes, as a function of w −1 2(w −m0)TS−1 0 (w −m0) + N  n=1  wTφn(tn −1/2) −λ(ξn)wT(φnφT n)w + const.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2590,"This is a quadratic function of w, and so we can obtain the corresponding variational approximation to the posterior distribution by identifying the linear and quadratic terms in w, giving a Gaussian variational posterior of the form q(w) = N(w|mN, SN) (10.156) where mN = SN  S−1 0 m0 + N  n=1 (tn −1/2)φn  (10.157) S−1 N = S−1 0 + 2 N  n=1 λ(ξn)φnφT n.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2591,"As with the Laplace framework, we have again obtained a Gaussian approximation to the posterior distribution. However, the additional ﬂexibility provided by the vari- ational parameters {ξn} leads to improved accuracy in the approximation (Jaakkola and Jordan, 2000).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2592,"Here we have considered a batch learning context in which all of the training data is available at once. However, Bayesian methods are intrinsically well suited to sequential learning in which the data points are processed one at a time and then discarded. The formulation of this variational approach for the sequential case is straightforward.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2593,Note that the bound given by (10.149) applies only to the two-class problem and so this approach does not directly generalize to classiﬁcation problems with K > 2 classes. An alternative bound for the multiclass case has been explored by Gibbs (1997).,The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2594,"We now have a normalized Gaussian approximation to the posterior distribution, which we shall use shortly to evaluate the predictive distribution for new data points.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2595,"First, however, we need to determine the variational parameters {ξn} by maximizing the lower bound on the marginal likelihood.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2596,"To do this, we substitute the inequality (10.152) back into the marginal likeli- hood to give ln p(t) = ln  p(t|w)p(w) dw ⩾ln  h(w, ξ)p(w) dw = L(ξ).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,500,2597,"As with the optimization of the hyperparameter α in the linear regression model of Section 3.5, there are two approaches to determining the ξn. In the ﬁrst approach, we recognize that the function L(ξ) is deﬁned by an integration over w and so we can view w as a latent variable and invoke the EM algorithm. In the second approach, we integrate over w analytically and then perform a direct maximization over ξ. Let us begin by considering the EM approach.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,501,2598,"The EM algorithm starts by choosing some initial values for the parameters {ξn}, which we denote collectively by ξold. In the E step of the EM algorithm, \end{verbatim} egin{verbatim} we then use these parameter values to ﬁnd the posterior distribution over w, which is given by (10.156). In the M step, we then maximize the expected complete-data log likelihood which is given by Q(ξ, ξold) = E [ln h(w, ξ)p(w)] (10.160) where the expectation is taken with respect to the posterior distribution q(w) evalu- ated using ξold. Noting that p(w) does not depend on ξ, and substituting for h(w, ξ) we obtain Q(ξ, ξold) = N  n=1  ln σ(ξn) −ξn/2 −λ(ξn)(φT nE[wwT]φn −ξ2 n) + const (10.161) where ‘const’ denotes terms that are independent of ξ. We now set the derivative with respect to ξn equal to zero. A few lines of algebra, making use of the deﬁnitions of σ(ξ) and λ(ξ), then gives 0 = λ′(ξn)(φT nE[wwT]φn −ξ2 n).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,501,2599,"We now note that λ′(ξ) is a monotonic function of ξ for ξ ⩾0, and that we can restrict attention to nonnegative values of ξ without loss of generality due to the symmetry of the bound around ξ = 0. Thus λ′(ξ) ̸= 0, and hence we obtain the following re-estimation equations (ξnew n )2 = φT nE[wwT]φn = φT n SN + mNmT N φn (10.163) where we have used (10.156).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,501,2600,"Let us summarize the EM algorithm for ﬁnding the variational posterior distri- bution. We ﬁrst initialize the variational parameters ξold. In the E step, we evaluate the posterior distribution over w given by (10.156), in which the mean and covari- ance are deﬁned by (10.157) and (10.158). In the M step, we then use this variational posterior to compute a new value for ξ given by (10.163). The E and M steps are repeated until a suitable convergence criterion is satisﬁed, which in practice typically requires only a few iterations.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,501,2601,"An alternative approach to obtaining re-estimation equations for ξ is to note that in the integral over w in the deﬁnition (10.159) of the lower bound L(ξ), the integrand has a Gaussian-like form and so the integral can be evaluated analytically.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,501,2602,"Having evaluated the integral, we can then differentiate with respect to ξn. It turns out that this gives rise to exactly the same re-estimation equations as does the EM approach given by (10.163).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,502,2603,"Figure 10.13 Illustration of the Bayesian approach to logistic regression for a simple linearly separable data set. The plot on the left shows the predictive distribution obtained using variational inference. We see that the decision boundary lies roughly mid way between the clusters of data points, and that the contours of the predictive distribution splay out away from the data reﬂecting the greater uncertainty in the classiﬁcation of such regions. The plot on the right shows the decision boundaries corresponding to ﬁve samples of the parameter vector w drawn from the posterior distribution p(w|t).",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,502,2604,"As we have emphasized already, in the application of variational methods it is useful to be able to evaluate the lower bound L(ξ) given by (10.159). The integration over w can be performed analytically by noting that p(w) is Gaussian and h(w, ξ) is the exponential of a quadratic function of w. Thus, by completing the square and making use of the standard result for the normalization coefﬁcient of a Gaussian distribution, we can obtain a closed form solution which takes the form \end{verbatim} egin{verbatim} 0.01 0.25 0.75 0.99 −4 −2 0 2 4 −6 −4 −2 0 2 4 6 −4 −2 0 2 4 −6 −4 −2 0 2 4 6 L(ξ) = 1 2 ln |SN| |S0| −1 2mT NS−1 N mN + 1 2mT 0 S−1 0 m0 + N  n=1 ln σ(ξn) −1 2ξn −λ(ξn)ξ2 n .",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,502,2605,"This variational framework can also be applied to situations in which the data is arriving sequentially (Jaakkola and Jordan, 2000). In this case we maintain a Gaussian posterior distribution over w, which is initialized using the prior p(w). As each data point arrives, the posterior is updated by making use of the bound (10.151) and then normalized to give an updated posterior distribution.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,502,2606,"The predictive distribution is obtained by marginalizing over the posterior dis- tribution, and takes the same form as for the Laplace approximation discussed in Section 4.5.2. Figure 10.13 shows the variational predictive distributions for a syn- thetic data set. This example provides interesting insights into the concept of ‘large margin’, which was discussed in Section 7.1 and which has qualitatively similar be- haviour to the Bayesian solution.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,502,2607,"So far, we have treated the hyperparameter α in the prior distribution as a known constant. We now extend the Bayesian logistic regression model to allow the value of this parameter to be inferred from the data set. This can be achieved by combining the global and local variational approximations into a single framework, so as to maintain a lower bound on the marginal likelihood at each stage. Such a combined approach was adopted by Bishop and Svens´en (2003) in the context of a Bayesian treatment of the hierarchical mixture of experts model.",The EM algorithm for LDS
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2608,"Speciﬁcally, we consider once again a simple isotropic Gaussian prior distribu- tion of the form p(w|α) = N(w|0, α−1I).",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2609,"Our analysis is readily extended to more general Gaussian priors, for instance if we wish to associate a different hyperparameter with different subsets of the parame- ters wj. As usual, we consider a conjugate hyperprior over α given by a gamma distribution p(α) = Gam(α|a0, b0) (10.166) governed by the constants a0 and b0.",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2610,"The marginal likelihood for this model now takes the form p(t) =  p(w, α, t) dw dα (10.167) where the joint distribution is given by p(w, α, t) = p(t|w)p(w|α)p(α).",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2611,"We are now faced with an analytically intractable integration over w and α, which we shall tackle by using both the local and global variational approaches in the same model To begin with, we introduce a variational distribution q(w, α), and then apply the decomposition (10.2), which in this instance takes the form ln p(t) = L(q) + KL(q∥p) (10.169) where the lower bound L(q) and the Kullback-Leibler divergence KL(q∥p) are de- ﬁned by L(q) =  q(w, α) ln p(w, α, t) q(w, α) dw dα (10.170) KL(q∥p) = −  q(w, α) ln p(w, α|t)) q(w, α) dw dα.",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2612,"At this point, the lower bound L(q) is still intractable due to the form of the likelihood factor p(t|w). We therefore apply the local variational bound to each of the logistic sigmoid factors as before. This allows us to use the inequality (10.152) and place a lower bound on L(q), which will therefore also be a lower bound on the log marginal likelihood ln p(t) ⩾ L(q) ⩾L(q, ξ) =  q(w, α) ln h(w, ξ)p(w|α)p(α) q(w, α) dw dα.",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,503,2613,"Next we assume that the variational distribution factorizes between parameters and hyperparameters so that q(w, α) = q(w)q(α).",Auto-regressive models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2614,"With this factorization we can appeal to the general result (10.9) to ﬁnd expressions for the optimal factors. Consider ﬁrst the distribution q(w). Discarding terms that are independent of w, we have ln q(w) = Eα [ln {h(w, ξ)p(w|α)p(α)}] + const = ln h(w, ξ) + Eα [ln p(w|α)] + const.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2615,"We now substitute for ln h(w, ξ) using (10.153), and for ln p(w|α) using (10.165), giving ln q(w) = −E[α] 2 wTw + N  n=1  (tn −1/2)wTφn −λ(ξn)wTφnφT nw + const.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2616,"We see that this is a quadratic function of w and so the solution for q(w) will be Gaussian. Completing the square in the usual way, we obtain q(w) = N(w|µN, ΣN) (10.174) where we have deﬁned Σ−1 N µN = N  n=1 (tn −1/2)φn (10.175) Σ−1 N = E[α]I + 2 N  n=1 λ(ξn)φnφT n.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2617,"Similarly, the optimal solution for the factor q(α) is obtained from ln q(α) = Ew [ln p(w|α)] + ln p(α) + const.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2618,"Substituting for ln p(w|α) using (10.165), and for ln p(α) using (10.166), we obtain ln q(α) = M 2 ln α −α 2 E  wTw + (a0 −1) ln α −b0α + const.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,504,2619,"We recognize this as the log of a gamma distribution, and so we obtain q(α) = Gam(α|aN, bN) = 1 Γ(a0)ab0 0 αa0−1e−b0α (10.177) where aN = a0 + M 2 (10.178) bN = b0 + 1 2Ew  wTw .",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2620,"We also need to optimize the variational parameters ξn, and this is also done by maximizing the lower bound L(q, ξ). Omitting terms that are independent of ξ, and integrating over α, we have L(q, ξ) =  q(w) ln h(w, ξ) dw + const.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2621,"Note that this has precisely the same form as (10.159), and so we can again appeal to our earlier result (10.163), which can be obtained by direct optimization of the marginal likelihood function, leading to re-estimation equations of the form (ξnew n )2 = φT n ΣN + µNµT N φn.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2622,"We have obtained re-estimation equations for the three quantities q(w), q(α), and ξ, and so after making suitable initializations, we can cycle through these quan- tities, updating each in turn. The required moments are given by Appendix B E [α] = aN bN (10.182) E  wTw = ΣN + µT NµN.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2623,"We conclude this chapter by discussing an alternative form of deterministic approx- imate inference, known as expectation propagation or EP (Minka, 2001a; Minka, 2001b). As with the variational Bayes methods discussed so far, this too is based on the minimization of a Kullback-Leibler divergence but now of the reverse form, which gives the approximation rather different properties.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2624,"Consider for a moment the problem of minimizing KL(p∥q) with respect to q(z) when p(z) is a ﬁxed distribution and q(z) is a member of the exponential family and so, from (2.194), can be written in the form q(z) = h(z)g(η) exp  ηTu(z) .",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2625,"As a function of η, the Kullback-Leibler divergence then becomes KL(p∥q) = −ln g(η) −ηTEp(z)[u(z)] + const (10.185) where the constant terms are independent of the natural parameters η. We can mini- mize KL(p∥q) within this family of distributions by setting the gradient with respect to η to zero, giving −∇ln g(η) = Ep(z)[u(z)].",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,505,2626,"However, we have already seen in (2.226) that the negative gradient of ln g(η) is given by the expectation of u(z) under the distribution q(z). Equating these two results, we obtain Eq(z)[u(z)] = Ep(z)[u(z)].",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,506,2627,"We see that the optimum solution simply corresponds to matching the expected suf- ﬁcient statistics. So, for instance, if q(z) is a Gaussian N(z|µ, Σ) then we minimize the Kullback-Leibler divergence by setting the mean µ of q(z) equal to the mean of the distribution p(z) and the covariance Σ equal to the covariance of p(z). This is sometimes called moment matching. An example of this was seen in Figure 10.3(a).",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,506,2628,"Now let us exploit this result to obtain a practical algorithm for approximate inference. For many probabilistic models, the joint distribution of data D and hidden variables (including parameters) θ comprises a product of factors in the form p(D, θ) =  i fi(θ).",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,506,2629,"This would arise, for example, in a model for independent, identically distributed data in which there is one factor fn(θ) = p(xn|θ) for each data point xn, along with a factor f0(θ) = p(θ) corresponding to the prior. More generally, it would also apply to any model deﬁned by a directed probabilistic graph in which each factor is a conditional distribution corresponding to one of the nodes, or an undirected graph in which each factor is a clique potential. We are interested in evaluating the posterior distribution p(θ|D) for the purpose of making predictions, as well as the model evidence p(D) for the purpose of model comparison. From (10.188) the posterior is given by p(θ|D) = 1 p(D)  i fi(θ) (10.189) and the model evidence is given by p(D) =   i fi(θ) dθ.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,506,2630,"Here we are considering continuous variables, but the following discussion applies equally to discrete variables with integrals replaced by summations. We shall sup- pose that the marginalization over θ, along with the marginalizations with respect to the posterior distribution required to make predictions, are intractable so that some form of approximation is required.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,507,2631,"Expectation propagation is based on an approximation to the posterior distribu- tion which is also given by a product of factors q(θ) = 1 Z  i fi(θ) (10.191) in which each factor fi(θ) in the approximation corresponds to one of the factors fi(θ) in the true posterior (10.189), and the factor 1/Z is the normalizing constant needed to ensure that the left-hand side of (10.191) integrates to unity. In order to obtain a practical algorithm, we need to constrain the factors fi(θ) in some way, and in particular we shall assume that they come from the exponential family. The product of the factors will therefore also be from the exponential family and so can \end{verbatim} egin{verbatim} be described by a ﬁnite set of sufﬁcient statistics. For example, if each of the fi(θ) is a Gaussian, then the overall approximation q(θ) will also be Gaussian.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,507,2632,"Note that this is the reverse form of KL divergence compared with that used in varia- tional inference. In general, this minimization will be intractable because the KL di- vergence involves averaging with respect to the true distribution. As a rough approx- imation, we could instead minimize the KL divergences between the corresponding pairs fi(θ) and fi(θ) of factors. This represents a much simpler problem to solve, and has the advantage that the algorithm is noniterative. However, because each fac- tor is individually approximated, the product of the factors could well give a poor approximation.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,507,2633,"Expectation propagation makes a much better approximation by optimizing each factor in turn in the context of all of the remaining factors. It starts by initializing the factors fi(θ), and then cycles through the factors reﬁning them one at a time.",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,507,2634,"This is similar in spirit to the update of factors in the variational Bayes framework considered earlier. Suppose we wish to reﬁne factor fj(θ). We ﬁrst remove this factor from the product to give  i̸=j fi(θ). Conceptually, we will now determine a revised form of the factor fj(θ) by ensuring that the product qnew(θ) ∝fj(θ)  i̸=j fi(θ) (10.193) is as close as possible to fj(θ)  i̸=j fi(θ) (10.194) in which we keep ﬁxed all of the factors fi(θ) for i ̸= j. This ensures that the approximation is most accurate in the regions of high posterior probability as deﬁned by the remaining factors. We shall see an example of this effect when we apply EP to the ‘clutter problem’. To achieve this, we ﬁrst remove the factor fj(θ) from the current approximation to the posterior by deﬁning the unnormalized distribution q\j(θ) = q(θ) fj(θ) .",The EM algorithm for AR models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,508,2635,"Figure 10.14 Illustration of the expectation propagation approximation using a Gaussian distribution for the example considered earlier in Figures 4.14 and 10.1. The left-hand plot shows the original distribution (yellow) along with the Laplace (red), global variational (green), and EP (blue) approximations, and the right-hand plot shows the corresponding negative logarithms of the distributions. Note that the EP distribution is broader than that variational inference, as a consequence of the different form of KL divergence.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,508,2636,"Note that we could instead ﬁnd q\j(θ) from the product of factors i ̸= j, although in practice division is usually easier. This is now combined with the factor fj(θ) to give a distribution 1 Zj fj(θ)q\j(θ) (10.196) \end{verbatim} egin{verbatim} −2 −1 0 1 2 3 4 0 0.2 0.4 0.6 0.8 1 −2 −1 0 1 2 3 4 0 10 20 30 40 where Zj is the normalization constant given by Zj =  fj(θ)q\j(θ) dθ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,508,2637,"This is easily solved because the approximating distribution qnew(θ) is from the ex- ponential family, and so we can appeal to the result (10.187), which tells us that the parameters of qnew(θ) are obtained by matching its expected sufﬁcient statistics to the corresponding moments of (10.196). We shall assume that this is a tractable oper- ation. For example, if we choose q(θ) to be a Gaussian distribution N(θ|µ, Σ), then µ is set equal to the mean of the (unnormalized) distribution fj(θ)q\j(θ), and Σ is set to its covariance. More generally, it is straightforward to obtain the required ex- pectations for any member of the exponential family, provided it can be normalized, because the expected statistics can be related to the derivatives of the normalization coefﬁcient, as given by (2.226). The EP approximation is illustrated in Figure 10.14.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2638,"From (10.193), we see that the revised factor fj(θ) can be found by taking qnew(θ) and dividing out the remaining factors so that fj(θ) = K qnew(θ) q\j(θ) (10.199) where we have used (10.195). The coefﬁcient K is determined by multiplying both \end{verbatim} egin{verbatim} sides of (10.199) by q\i(θ) and integrating to give K =  fj(θ)q\j(θ) dθ (10.200) where we have used the fact that qnew(θ) is normalized. The value of K can therefore be found by matching zeroth-order moments  fj(θ)q\j(θ) dθ =  fj(θ)q\j(θ) dθ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2639,"Combining this with (10.197), we then see that K = Zj and so can be found by evaluating the integral in (10.197).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2640,"In practice, several passes are made through the set of factors, revising each factor in turn. The posterior distribution p(θ|D) is then approximated using (10.191), and the model evidence p(D) can be approximated by using (10.190) with the factors fi(θ) replaced by their approximations fi(θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2641,"We are given a joint distribution over observed data D and stochastic variables θ in the form of a product of factors p(D, θ) =  i fi(θ) (10.202) and we wish to approximate the posterior distribution p(θ|D) by a distribution of the form q(θ) = 1 Z  i fi(θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2642,We also wish to approximate the model evidence p(D). 1. Initialize all of the approximating factors fi(θ).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2643,2. Initialize the posterior approximation by setting q(θ) ∝  i fi(θ).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,509,2644,(a) Choose a factor fj(θ) to reﬁne. (b) Remove fj(θ) from the posterior by division q\j(θ) = q(θ) fj(θ) .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2645,"(c) Evaluate the new posterior by setting the sufﬁcient statistics (moments) of qnew(θ) equal to those of q\j(θ)fj(θ), including evaluation of the normalization constant Zj =  q\j(θ)fj(θ) dθ.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2646,(d) Evaluate and store the new factor fj(θ) = Zj qnew(θ) q\j(θ) .,Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2647,4. Evaluate the approximation to the model evidence p(D) ≃   i fi(θ) dθ.,Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2648,"A special case of EP, known as assumed density ﬁltering (ADF) or moment matching (Maybeck, 1982; Lauritzen, 1992; Boyen and Koller, 1998; Opper and Winther, 1999), is obtained by initializing all of the approximating factors except the ﬁrst to unity and then making one pass through the factors updating each of them once. Assumed density ﬁltering can be appropriate for on-line learning in which data points are arriving in a sequence and we need to learn from each data point and then discard it before considering the next point. However, in a batch setting we have the opportunity to re-use the data points many times in order to achieve improved ac- curacy, and it is this idea that is exploited in expectation propagation. Furthermore, if we apply ADF to batch data, the results will have an undesirable dependence on the (arbitrary) order in which the data points are considered, which again EP can overcome.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2649,"One disadvantage of expectation propagation is that there is no guarantee that the iterations will converge. However, for approximations q(θ) in the exponential family, if the iterations do converge, the resulting solution will be a stationary point of a particular energy function (Minka, 2001a), although each iteration of EP does not necessarily decrease the value of this energy function. This is in contrast to variational Bayes, which iteratively maximizes a lower bound on the log marginal likelihood, in which each iteration is guaranteed not to decrease the bound. It is possible to optimize the EP cost function directly, in which case it is guaranteed to converge, although the resulting algorithms can be slower and more complex to implement.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,510,2650,"Another difference between variational Bayes and EP arises from the form of KL divergence that is minimized by the two algorithms, because the former mini- mizes KL(q∥p) whereas the latter minimizes KL(p∥q). As we saw in Figure 10.3, for distributions p(θ) which are multimodal, minimizing KL(p∥q) can lead to poor approximations. In particular, if EP is applied to mixtures the results are not sen- sible because the approximation tries to capture all of the modes of the posterior distribution. Conversely, in logistic-type models, EP often out-performs both local variational methods and the Laplace approximation (Kuss and Rasmussen, 2006).",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,511,2651,"Figure 10.15 Illustration of the clutter problem for a data space dimensionality of D = 1. Training data points, de- noted by the crosses, are drawn from a mixture of two Gaussians with components shown in red and green. The goal is to infer the mean of the green Gaussian from the observed data.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,511,2652,"Following Minka (2001b), we illustrate the EP algorithm using a simple exam- ple in which the goal is to infer the mean θ of a multivariate Gaussian distribution over a variable x given a set of observations drawn from that distribution. To make the problem more interesting, the observations are embedded in background clutter, which itself is also Gaussian distributed, as illustrated in Figure 10.15. The distribu- tion of observed values x is therefore a mixture of Gaussians, which we take to be of the form p(x|θ) = (1 −w)N(x|θ, I) + wN(x|0, aI) (10.209) where w is the proportion of background clutter and is assumed to be known. The prior over θ is taken to be Gaussian p(θ) = N(θ|0, bI) (10.210) and Minka (2001a) chooses the parameter values a = 10, b = 100 and w = 0.5.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,511,2653,"The joint distribution of N observations D = {x1, . . . , xN} and θ is given by p(D, θ) = p(θ) N  n=1 p(xn|θ) (10.211) and so the posterior distribution comprises a mixture of 2N Gaussians. Thus the computational cost of solving this problem exactly would grow exponentially with the size of the data set, and so an exact solution is intractable for moderately large N.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,511,2654,"To apply EP to the clutter problem, we ﬁrst identify the factors f0(θ) = p(θ) and fn(θ) = p(xn|θ). Next we select an approximating distribution from the expo- nential family, and for this example it is convenient to choose a spherical Gaussian q(θ) = N(θ|m, vI).",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,512,2655,"The factor approximations will therefore take the form of exponential-quadratic functions of the form fn(θ) = snN(θ|mn, vnI) (10.213) where n = 1, . . . , N, and we set f0(θ) equal to the prior p(θ). Note that the use of N(θ|·, ·) does not imply that the right-hand side is a well-deﬁned Gaussian density (in fact, as we shall see, the variance parameter vn can be negative) but is simply a convenient shorthand notation. The approximations fn(θ), for n = 1, . . . , N, can be initialized to unity, corresponding to sn = (2πvn)D/2, vn →∞and mn = 0, where D is the dimensionality of x and hence of θ. The initial q(θ), deﬁned by (10.191), is therefore equal to the prior.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,512,2656,"We then iteratively reﬁne the factors by taking one factor fn(θ) at a time and applying (10.205), (10.206), and (10.207). Note that we do not need to revise the term f0(θ) because an EP update will leave this term unchanged. Here we state the results and leave the reader to ﬁll in the details.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,513,2657,"This reﬁnement process is repeated until a suitable termination criterion is satisﬁed, for instance that the maximum change in parameter values resulting from a complete \end{verbatim} egin{verbatim} θ −5 0 5 10 θ −5 0 5 10 pass through all factors is less than some threshold. Finally, we use (10.208) to evaluate the approximation to the model evidence, given by p(D) ≃(2πvnew)D/2 exp(B/2) N  n=1  sn(2πvn)−D/2 (10.223) where B = (mnew)Tmnew v − N  n=1 mT nmn vn .",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,513,2658,Examples factor approximations for the clutter problem with a one-dimensional pa- rameter space θ are shown in Figure 10.16. Note that the factor approximations can have inﬁnite or even negative values for the ‘variance’ parameter vn. This simply corresponds to approximations that curve upwards instead of downwards and are not necessarily problematic provided the overall approximate posterior q(θ) has posi- tive variance. Figure 10.17 compares the performance of EP with variational Bayes (mean ﬁeld theory) and the Laplace approximation on the clutter problem.,Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,513,2659,"So far in our general discussion of EP, we have allowed the factors fi(θ) in the distribution p(θ) to be functions of all of the components of θ, and similarly for the approximating factors f(θ) in the approximating distribution q(θ). We now consider situations in which the factors depend only on subsets of the variables. Such restric- tions can be conveniently expressed using the framework of probabilistic graphical models, as discussed in Chapter 8. Here we use a factor graph representation because this encompasses both directed and undirected graphs.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2660,"Figure 10.17 Comparison of expectation propagation, variational inference, and the Laplace approximation on the clutter problem. The left-hand plot shows the error in the predicted posterior mean versus the number of ﬂoating point operations, and the right-hand plot shows the corresponding results for the model evidence.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2661,"We shall focus on the case in which the approximating distribution is fully fac- torized, and we shall show that in this case expectation propagation reduces to loopy belief propagation (Minka, 2001a). To start with, we show this in the context of a simple example, and then we shall explore the general case.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2662,"First of all, recall from (10.17) that if we minimize the Kullback-Leibler diver- gence KL(p∥q) with respect to a factorized distribution q, then the optimal solution for each factor is simply the corresponding marginal of p.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2663,"Now consider the factor graph shown on the left in Figure 10.18, which was introduced earlier in the context of the sum-product algorithm. The joint distribution is given by p(x) = fa(x1, x2)fb(x2, x3)fc(x2, x4).",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2664,"We seek an approximation q(x) that has the same factorization, so that q(x) ∝fa(x1, x2)fb(x2, x3)fc(x2, x4).",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,514,2665,"Note that normalization constants have been omitted, and these can be re-instated at the end by local normalization, as is generally done in belief propagation. Now sup- pose we restrict attention to approximations in which the factors themselves factorize with respect to the individual variables so that q(x) ∝fa1(x1)fa2(x2)fb2(x2)fb3(x3)fc2(x2)fc4(x4) (10.227) which corresponds to the factor graph shown on the right in Figure 10.18. Because the individual factors are factorized, the overall distribution q(x) is itself fully fac- torized.",Combination Models
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,515,2666,Figure 10.18 On the left is a simple factor graph from Figure 8.51 and reproduced here for convenience. On the right is the corresponding factorized approximation.,Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,515,2667,"Now we apply the EP algorithm using the fully factorized approximation. Sup- pose that we have initialized all of the factors and that we choose to reﬁne factor \end{verbatim} egin{verbatim} x1 x2 x3 x4 fa fb fc x1 x2 x3 x4 ˜fa1 ˜fa2 ˜fb2 ˜fb3 ˜fc2 ˜fc4 fb(x2, x3) = fb2(x2)fb3(x3). We ﬁrst remove this factor from the approximating distribution to give q(x) = fa1(x1)fa2(x2)fc2(x2)fc4(x4) (10.228) and we then multiply this by the exact factor fb(x2, x3) to give p(x) = q(x)fb(x2, x3) = fa1(x1)fa2(x2)fc2(x2)fc4(x4)fb(x2, x3).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,515,2668,"We now ﬁnd qnew(x) by minimizing the Kullback-Leibler divergence KL(p∥qnew). The result, as noted above, is that qnew(z) comprises the product of factors, one for each variable xi, in which each factor is given by the corresponding marginal of p(x). These four marginals are given by p(x1) ∝ fa1(x1) (10.230) p(x2) ∝ fa2(x2)fc2(x2)  x3 fb(x2, x3) (10.231) p(x3) ∝  x2  fb(x2, x3)fa2(x2)fc2(x2)  (10.232) p(x4) ∝ fc4(x4) (10.233) and qnew(x) is obtained by multiplying these marginals together. We see that the only factors in q(x) that change when we update fb(x2, x3) are those that involve the variables in fb namely x2 and x3. To obtain the reﬁned factor fb(x2, x3) = fb2(x2)fb3(x3) we simply divide qnew(x) by q(x), which gives fb2(x2) ∝  x3 fb(x2, x3) (10.234) fb3(x3) ∝  x2  fb(x2, x3)fa2(x2)fc2(x2)  .",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,516,2669,"These are precisely the messages obtained using belief propagation in which mes- sages from variable nodes to factor nodes have been folded into the messages from factor nodes to variable nodes. In particular, fb2(x2) corresponds to the message µfb→x2(x2) sent by factor node fb to variable node x2 and is given by (8.81). Simi- larly, if we substitute (8.78) into (8.79), we obtain (10.235) in which fa2(x2) corre- sponds to µfa→x2(x2) and fc2(x2) corresponds to µfc→x2(x2), giving the message fb3(x3) which corresponds to µfb→x3(x3).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,516,2670,"This result differs slightly from standard belief propagation in that messages are passed in both directions at the same time. We can easily modify the EP procedure to give the standard form of the sum-product algorithm by updating just one of the factors at a time, for instance if we reﬁne only fb3(x3), then fb2(x2) is unchanged by deﬁnition, while the reﬁned version of fb3(x3) is again given by (10.235). If we are reﬁning only one term at a time, then we can choose the order in which the reﬁnements are done as we wish. In particular, for a tree-structured graph we can follow a two-pass update scheme, corresponding to the standard belief propagation schedule, which will result in exact inference of the variable and factor marginals.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,516,2671,"The initialization of the approximation factors in this case is unimportant. Now let us consider a general factor graph corresponding to the distribution p(θ) =  i fi(θi) (10.236) where θi represents the subset of variables associated with factor fi. We approximate this using a fully factorized distribution of the form q(θ) ∝  i  k fik(θk) (10.237) where θk corresponds to an individual variable node. Suppose that we wish to reﬁne the particular term fjl(θl) keeping all other terms ﬁxed. We ﬁrst remove the term fj(θj) from q(θ) to give q\j(θ) ∝  i̸=j  k fik(θk) (10.238) and then multiply by the exact factor fj(θj). To determine the reﬁned term fjl(θl), we need only consider the functional dependence on θl, and so we simply ﬁnd the corresponding marginal of q\j(θ)fj(θj).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,516,2672,"Up to a multiplicative constant, this involves taking the marginal of fj(θj) multiplied by any terms from q\j(θ) that are functions of any of the variables in θj. Terms that correspond to other factors fi(θi) for i ̸= j will cancel between numerator and denominator when we subsequently divide by q\j(θ). We therefore obtain fjl(θl) ∝  θm̸=l∈θj fj(θj)  k  m̸=l fkm(θm).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2673,"We recognize this as the sum-product rule in the form in which messages from vari- able nodes to factor nodes have been eliminated, as illustrated by the example shown in Figure 8.50. The quantity fjm(θm) corresponds to the message µfj→θm(θm), which factor node j sends to variable node m, and the product over k in (10.240) is over all factors that depend on the variables θm that have variables (other than variable θl) in common with factor fj(θj). In other words, to compute the outgoing message from a factor node, we take the product of all the incoming messages from other factor nodes, multiply by the local factor, and then marginalize.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2674,"Thus, the sum-product algorithm arises as a special case of expectation propa- gation if we use an approximating distribution that is fully factorized. This suggests that more ﬂexible approximating distributions, corresponding to partially discon- nected graphs, could be used to achieve higher accuracy. Another generalization is to group factors fi(θi) together into sets and to reﬁne all the factors in a set together at each iteration. Both of these approaches can lead to improvements in accuracy (Minka, 2001b). In general, the problem of choosing the best combination of group- ing and disconnection is an open research issue.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2675,"We have seen that variational message passing and expectation propagation op- timize two different forms of the Kullback-Leibler divergence. Minka (2005) has shown that a broad range of message passing algorithms can be derived from a com- mon framework involving minimization of members of the alpha family of diver- gences, given by (10.19). These include variational message passing, loopy belief propagation, and expectation propagation, as well as a range of other algorithms, which we do not have space to discuss here, such as tree-reweighted message pass- ing (Wainwright et al., 2005), fractional belief propagation (Wiegerinck and Heskes, 2003), and power EP (Minka, 2004).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2676,Verify that the log marginal distribution of the observed data ln p(X) can be decomposed into two terms in the form (10.2) where L(q) is given by (10.3) and KL(q∥p) is given by (10.4).,Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2677,"(⋆) Use the properties E[z1] = m1 and E[z2] = m2 to solve the simultaneous equa- tions (10.13) and (10.15), and hence show that, provided the original distribution p(z) is nonsingular, the unique solution for the means of the factors in the approxi- mation distribution is given by E[z1] = µ1 and E[z2] = µ2.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,517,2678,"Consider a factorized variational distribution q(Z) of the form (10.5). By using the technique of Lagrange multipliers, verify that minimization of the Kullback-Leibler divergence KL(p∥q) with respect to one of the factors qi(Zi), keeping all other factors ﬁxed, leads to the solution (10.17).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2679,"(⋆⋆) Suppose that p(x) is some ﬁxed distribution and that we wish to approximate it using a Gaussian distribution q(x) = N(x|µ, Σ). By writing down the form of the KL divergence KL(p∥q) for a Gaussian q(x) and then differentiating, show that \end{verbatim} egin{verbatim} minimization of KL(p∥q) with respect to µ and Σ leads to the result that µ is given by the expectation of x under p(x) and that Σ is given by the covariance.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2680,"Consider a model in which the set of all hidden stochastic variables, de- noted collectively by Z, comprises some latent variables z together with some model parameters θ. Suppose we use a variational distribution that factorizes between la- tent variables and parameters so that q(z, θ) = qz(z)qθ(θ), in which the distribution qθ(θ) is approximated by a point estimate of the form qθ(θ) = δ(θ −θ0) where θ0 is a vector of free parameters. Show that variational optimization of this factorized distribution is equivalent to an EM algorithm, in which the E step optimizes qz(z), and the M step maximizes the expected complete-data log posterior distribution of θ with respect to θ0.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2681,(⋆⋆) The alpha family of divergences is deﬁned by (10.19). Show that the Kullback- Leibler divergence KL(p∥q) corresponds to α →1. This can be done by writing pϵ = exp(ϵ ln p) = 1 + ϵ ln p + O(ϵ2) and then taking ϵ →0. Similarly show that KL(q∥p) corresponds to α →−1.,Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2682,"(⋆⋆) Consider the problem of inferring the mean and precision of a univariate Gaus- sian using a factorized variational approximation, as considered in Section 10.1.3.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2683,"Show that the factor qµ(µ) is a Gaussian of the form N(µ|µN, λ−1 N ) with mean and precision given by (10.26) and (10.27), respectively. Similarly show that the factor qτ(τ) is a gamma distribution of the form Gam(τ|aN, bN) with parameters given by (10.29) and (10.30).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2684,"Consider the variational posterior distribution for the precision of a univariate Gaussian whose parameters are given by (10.29) and (10.30). By using the standard results for the mean and variance of the gamma distribution given by (B.27) and (B.28), show that if we let N →∞, this variational posterior distribution has a mean given by the inverse of the maximum likelihood estimator for the variance of the data, and a variance that goes to zero.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2685,"(⋆⋆) By making use of the standard result E[τ] = aN/bN for the mean of a gamma distribution, together with (10.26), (10.27), (10.29), and (10.30), derive the result (10.33) for the reciprocal of the expected precision in the factorized variational treat- ment of a univariate Gaussian.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2686,Derive the decomposition given by (10.34) that is used to ﬁnd approxi- mate posterior distributions over models using variational inference.,Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2687,"By using a Lagrange multiplier to enforce the normalization constraint on the distribution q(m), show that the maximum of the lower bound (10.35) is given by (10.36).",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,518,2688,"Starting from the joint distribution (10.41), and applying the general result (10.9), show that the optimal variational distribution q⋆(Z) over the latent variables for the Bayesian mixture of Gaussians is given by (10.48) by verifying the steps given in the text.",Mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2689,"Starting from (10.54), derive the result (10.59) for the optimum vari- ational posterior distribution over µk and Λk in the Bayesian mixture of Gaussians, and hence verify the expressions for the parameters of this distribution given by (10.60)–(10.63).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2690,"(⋆⋆) Using the distribution (10.59), verify the result (10.64). 10.15 (⋆) Using the result (B.17), show that the expected value of the mixing coefﬁcients in the variational mixture of Gaussians is given by (10.69).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2691,Verify the results (10.71) and (10.72) for the ﬁrst two terms in the lower bound for the variational Gaussian mixture model given by (10.70).,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2692,(⋆⋆⋆) Verify the results (10.73)–(10.77) for the remaining terms in the lower bound for the variational Gaussian mixture model given by (10.70).,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2693,"In this exercise, we shall derive the variational re-estimation equations for the Gaussian mixture model by direct differentiation of the lower bound. To do this we assume that the variational distribution has the factorization deﬁned by (10.42) and (10.55) with factors given by (10.48), (10.57), and (10.59). Substitute these into (10.70) and hence obtain the lower bound as a function of the parameters of the varia- tional distribution. Then, by maximizing the bound with respect to these parameters, derive the re-estimation equations for the factors in the variational distribution, and show that these are the same as those obtained in Section 10.2.1.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2694,(⋆⋆) Derive the result (10.81) for the predictive distribution in the variational treat- ment of the Bayesian mixture of Gaussians model.,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2695,This exercise explores the variational Bayes solution for the mixture of Gaussians model when the size N of the data set is large and shows that it reduces (as we would expect) to the maximum likelihood solution based on EM derived in Chap- ter 9. Note that results from Appendix B may be used to help answer this exercise.,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2696,"First show that the posterior distribution q⋆(Λk) of the precisions becomes sharply peaked around the maximum likelihood solution. Do the same for the posterior dis- tribution of the means q⋆(µk|Λk). Next consider the posterior distribution q⋆(π) for the mixing coefﬁcients and show that this too becomes sharply peaked around the maximum likelihood solution. Similarly, show that the responsibilities become equal to the corresponding maximum likelihood values for large N, by making use of the following asymptotic result for the digamma function for large x ψ(x) = ln x + O (1/x) .",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2697,"Finally, by making use of (10.80), show that for large N, the predictive distribution becomes a mixture of Gaussians.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,519,2698,(⋆) Show that the number of equivalent parameter settings due to interchange sym- metries in a mixture model with K components is K!.,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2699,"(⋆⋆) We have seen that each mode of the posterior distribution in a Gaussian mix- ture model is a member of a family of K! equivalent modes. Suppose that the result of running the variational inference algorithm is an approximate posterior distribu- tion q that is localized in the neighbourhood of one of the modes. We can then approximate the full posterior distribution as a mixture of K! such q distributions, once centred on each mode and having equal mixing coefﬁcients. Show that if we assume negligible overlap between the components of the q mixture, the resulting lower bound differs from that for a single component q distribution through the ad- dition of an extra term ln K!.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2700,"Consider a variational Gaussian mixture model in which there is no prior distribution over mixing coefﬁcients {πk}. Instead, the mixing coefﬁcients are treated as parameters, whose values are to be found by maximizing the variational lower bound on the log marginal likelihood. Show that maximizing this lower bound with respect to the mixing coefﬁcients, using a Lagrange multiplier to enforce the constraint that the mixing coefﬁcients sum to one, leads to the re-estimation result (10.83). Note that there is no need to consider all of the terms in the lower bound but only the dependence of the bound on the {πk}.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2701,We have seen in Section 10.2 that the singularities arising in the max- imum likelihood treatment of Gaussian mixture models do not arise in a Bayesian treatment. Discuss whether such singularities would arise if the Bayesian model were solved using maximum posterior (MAP) estimation.,Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2702,"The variational treatment of the Bayesian mixture of Gaussians, discussed in Section 10.2, made use of a factorized approximation (10.5) to the posterior distribu- tion. As we saw in Figure 10.2, the factorized assumption causes the variance of the posterior distribution to be under-estimated for certain directions in parameter space.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2703,"Discuss qualitatively the effect this will have on the variational approximation to the model evidence, and how this effect will vary with the number of components in the mixture. Hence explain whether the variational Gaussian mixture will tend to under-estimate or over-estimate the optimal number of components.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2704,"Extend the variational treatment of Bayesian linear regression to include a gamma hyperprior Gam(β|c0, d0) over β and solve variationally, by assuming a factorized variational distribution of the form q(w)q(α)q(β). Derive the variational update equations for the three factors in the variational distribution and also obtain an expression for the lower bound and for the predictive distribution.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2705,"(⋆⋆) By making use of the formulae given in Appendix B show that the variational lower bound for the linear basis function regression model, deﬁned by (10.107), can be written in the form (10.107) with the various terms deﬁned by (10.108)–(10.112).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,520,2706,"Rewrite the model for the Bayesian mixture of Gaussians, introduced in Section 10.2, as a conjugate model from the exponential family, as discussed in Section 10.4. Hence use the general results (10.115) and (10.119) to derive the speciﬁc results (10.48), (10.57), and (10.59).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2707,"Show that the function f(x) = ln(x) is concave for 0 < x < ∞ by computing its second derivative. Determine the form of the dual function g(λ) deﬁned by (10.133), and verify that minimization of λx −g(λ) with respect to λ according to (10.132) indeed recovers the function ln(x).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2708,"(⋆) By evaluating the second derivative, show that the log logistic function f(x) = −ln(1 + e−x) is concave. Derive the variational upper bound (10.137) directly by making a second order Taylor expansion of the log logistic function around a point x = ξ.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2709,"By ﬁnding the second derivative with respect to x, show that the function f(x) = −ln(ex/2 + e−x/2) is a concave function of x. Now consider the second derivatives with respect to the variable x2 and hence show that it is a convex function of x2. Plot graphs of f(x) against x and against x2. Derive the lower bound (10.144) on the logistic sigmoid function directly by making a ﬁrst order Taylor series expan- sion of the function f(x) in the variable x2 centred on the value ξ2.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2710,"Consider the variational treatment of logistic regression with sequen- tial learning in which data points are arriving one at a time and each must be pro- cessed and discarded before the next data point arrives. Show that a Gaussian ap- proximation to the posterior distribution can be maintained through the use of the lower bound (10.151), in which the distribution is initialized using the prior, and as each data point is absorbed its corresponding variational parameter ξn is optimized.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2711,"By differentiating the quantity Q(ξ, ξold) deﬁned by (10.161) with respect to the variational parameter ξn show that the update equation for ξn for the Bayesian logistic regression model is given by (10.163).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2712,"In this exercise we derive re-estimation equations for the variational parame- ters ξ in the Bayesian logistic regression model of Section 4.5 by direct maximization of the lower bound given by (10.164). To do this set the derivative of L(ξ) with re- spect to ξn equal to zero, making use of the result (3.117) for the derivative of the log of a determinant, together with the expressions (10.157) and (10.158) which deﬁne the mean and covariance of the variational posterior distribution q(w).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,521,2713,"(⋆⋆) Derive the result (10.164) for the lower bound L(ξ) in the variational logistic regression model. This is most easily done by substituting the expressions for the Gaussian prior q(w) = N(w|m0, S0), together with the lower bound h(w, ξ) on the likelihood function, into the integral (10.159) which deﬁnes L(ξ). Next gather together the terms which depend on w in the exponential and complete the square to give a Gaussian integral, which can then be evaluated by invoking the standard result for the normalization coefﬁcient of a multivariate Gaussian. Finally take the logarithm to obtain (10.164).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,522,2714,"(⋆⋆) Consider the ADF approximation scheme discussed in Section 10.7, and show that inclusion of the factor fj(θ) leads to an update of the model evidence of the form pj(D) ≃pj−1(D)Zj (10.242) \end{verbatim} egin{verbatim} where Zj is the normalization constant deﬁned by (10.197). By applying this result recursively, and initializing with p0(D) = 1, derive the result p(D) ≃  j Zj.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,522,2715,"Consider the expectation propagation algorithm from Section 10.7, and suppose that one of the factors f0(θ) in the deﬁnition (10.188) has the same expo- nential family functional form as the approximating distribution q(θ). Show that if the factor f0(θ) is initialized to be f0(θ), then an EP update to reﬁne f0(θ) leaves f0(θ) unchanged. This situation typically arises when one of the factors is the prior p(θ), and so we see that the prior factor can be incorporated once exactly and does not need to be reﬁned.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,522,2716,"In this exercise and the next, we shall verify the results (10.214)–(10.224) for the expectation propagation algorithm applied to the clutter problem. Begin by using the division formula (10.205) to derive the expressions (10.214) and (10.215) by completing the square inside the exponential to identify the mean and variance.",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Approximate Inference,10,522,2717,"Also, show that the normalization constant Zn, deﬁned by (10.206), is given for the clutter problem by (10.216). This can be done by making use of the general result (2.115).",Hierarchical mixtures of experts
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,523,2718,"For most probabilistic models of practical interest, exact inference is intractable, and so we have to resort to some form of approximation. In Chapter 10, we discussed inference algorithms based on deterministic approximations, which include methods such as variational Bayes and expectation propagation. Here we consider approxi- mate inference methods based on numerical sampling, also known as Monte Carlo techniques.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2719,Figure 11.1 Schematic illustration of a function f(z) whose expectation is to be evaluated with respect to a distribution p(z).,The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2720,"Although for some applications the posterior distribution over unobserved vari- ables will be of direct interest in itself, for most situations the posterior distribution is required primarily for the purpose of evaluating expectations, for example in order to make predictions. The fundamental problem that we therefore wish to address in this chapter involves ﬁnding the expectation of some function f(z) with respect to a probability distribution p(z). Here, the components of z might comprise discrete or continuous variables or some combination of the two. Thus in the case of continuous \end{verbatim} egin{verbatim} 11. SAMPLING METHODS p(z) f(z) z variables, we wish to evaluate the expectation E[f] =  f(z)p(z) dz (11.1) where the integral is replaced by summation in the case of discrete variables. This is illustrated schematically for a single continuous variable in Figure 11.1. We shall suppose that such expectations are too complex to be evaluated exactly using analyt- ical techniques.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2721,"The general idea behind sampling methods is to obtain a set of samples z(l) (where l = 1, . . . , L) drawn independently from the distribution p(z). This allows the expectation (11.1) to be approximated by a ﬁnite sum f = 1 L L  l=1 f(z(l)).",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2722,"As long as the samples z(l) are drawn from the distribution p(z), then E[f] = E[f] and so the estimator f has the correct mean. The variance of the estimator is given by var[f] = 1 LE  (f −E[f])2 (11.3) is the variance of the function f(z) under the distribution p(z). It is worth emphasiz- ing that the accuracy of the estimator therefore does not depend on the dimension- ality of z, and that, in principle, high accuracy may be achievable with a relatively small number of samples z(l). In practice, ten or twenty independent samples may sufﬁce to estimate an expectation to sufﬁcient accuracy.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2723,"The problem, however, is that the samples {z(l)} might not be independent, and so the effective sample size might be much smaller than the apparent sample size.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,524,2724,"Also, referring back to Figure 11.1, we note that if f(z) is small in regions where p(z) is large, and vice versa, then the expectation may be dominated by regions of small probability, implying that relatively large sample sizes will be required to achieve sufﬁcient accuracy.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,525,2725,"For many models, the joint distribution p(z) is conveniently speciﬁed in terms of a graphical model. In the case of a directed graph with no observed variables, it is \end{verbatim} egin{verbatim} 11. SAMPLING METHODS straightforward to sample from the joint distribution (assuming that it is possible to sample from the conditional distributions at each node) using the following ances- tral sampling approach, discussed brieﬂy in Section 8.1.2. The joint distribution is speciﬁed by p(z) = M  i=1 p(zi|pai) (11.4) where zi are the set of variables associated with node i, and pai denotes the set of variables associated with the parents of node i. To obtain a sample from the joint distribution, we make one pass through the set of variables in the order z1, . . . , zM sampling from the conditional distributions p(zi|pai). This is always possible be- cause at each step all of the parent values will have been instantiated. After one pass through the graph, we will have obtained a sample from the joint distribution.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,525,2726,"Now consider the case of a directed graph in which some of the nodes are in- stantiated with observed values. We can in principle extend the above procedure, at least in the case of nodes representing discrete variables, to give the following logic sampling approach (Henrion, 1988), which can be seen as a special case of impor- tance sampling discussed in Section 11.1.4. At each step, when a sampled value is obtained for a variable zi whose value is observed, the sampled value is compared to the observed value, and if they agree then the sample value is retained and the al- gorithm proceeds to the next variable in turn. However, if the sampled value and the observed value disagree, then the whole sample so far is discarded and the algorithm starts again with the ﬁrst node in the graph. This algorithm samples correctly from the posterior distribution because it corresponds simply to drawing samples from the joint distribution of hidden variables and data variables and then discarding those samples that disagree with the observed data (with the slight saving of not continu- ing with the sampling from the joint distribution as soon as one contradictory value is observed). However, the overall probability of accepting a sample from the posterior decreases rapidly as the number of observed variables increases and as the number of states that those variables can take increases, and so this approach is rarely used in practice.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,525,2727,"In the case of probability distributions deﬁned by an undirected graph, there is no one-pass sampling strategy that will sample even from the prior distribution with no observed variables. Instead, computationally more expensive techniques must be employed, such as Gibbs sampling, which is discussed in Section 11.3.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,525,2728,"As well as sampling from conditional distributions, we may also require samples from a marginal distribution. If we already have a strategy for sampling from a joint distribution p(u, v), then it is straightforward to obtain samples from the marginal distribution p(u) simply by ignoring the values for v in each sample.",The gated experts model
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2729,"There are numerous texts dealing with Monte Carlo methods. Those of partic- ular interest from the statistical inference perspective include Chen et al. (2001), Gamerman (1997), Gilks et al. (1996), Liu (2001), Neal (1996), and Robert and Casella (1999). Also there are review articles by Besag et al. (1995), Brooks (1998), Diaconis and Saloff-Coste (1998), Jerrum and Sinclair (1996), Neal (1993), Tierney (1994), and Andrieu et al. (2003) that provide additional information on sampling \end{verbatim} egin{verbatim} 11. SAMPLING METHODS methods for statistical inference.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2730,"Diagnostic tests for convergence of Markov chain Monte Carlo algorithms are summarized in Robert and Casella (1999), and some practical guidance on the use of sampling methods in the context of machine learning is given in Bishop and Nabney (2008).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2731,"In this section, we consider some simple strategies for generating random samples from a given distribution. Because the samples will be generated by a computer algorithm they will in fact be pseudo-random numbers, that is, they will be deter- ministically calculated, but must nevertheless pass appropriate tests for randomness.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2732,"Generating such numbers raises several subtleties (Press et al., 1992) that lie outside the scope of this book. Here we shall assume that an algorithm has been provided that generates pseudo-random numbers distributed uniformly over (0, 1), and indeed most software environments have such a facility built in.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2733,"We ﬁrst consider how to generate random numbers from simple nonuniform dis- tributions, assuming that we already have available a source of uniformly distributed random numbers. Suppose that z is uniformly distributed over the interval (0, 1), and that we transform the values of z using some function f(·) so that y = f(z).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2734,"The distribution of y will be governed by p(y) = p(z)  dz dy  (11.5) where, in this case, p(z) = 1. Our goal is to choose the function f(z) such that the resulting values of y have some speciﬁc desired distribution p(y). Integrating (11.5) we obtain z = h(y) ≡  y −∞ p(y) dy (11.6) which is the indeﬁnite integral of p(y). Thus, y = h−1(z), and so we have to transform the uniformly distributed random numbers using a function which is the inverse of the indeﬁnite integral of the desired distribution. This is illustrated in Figure 11.2.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,526,2735,"Consider for example the exponential distribution p(y) = λ exp(−λy) (11.7) where 0 ⩽y < ∞. In this case the lower limit of the integral in (11.6) is 0, and so h(y) = 1 −exp(−λy). Thus, if we transform our uniformly distributed variable z using y = −λ−1 ln(1 −z), then y will have an exponential distribution.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2736,Figure 11.2 Geometrical interpretation of the trans- formation method for generating nonuni- formly distributed random numbers. h(y) is the indeﬁnite integral of the desired dis- tribution p(y).,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2737,Figure 11.3 The Box-Muller method for generating Gaussian dis- tributed random numbers starts by generating samples from a uniform distribution inside the unit circle.,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2738,"random variable z is transformed using y = h−1(z), then y will be distributed ac- cording to p(y).",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2739,Another example of a distribution to which the transformation method can be applied is given by the Cauchy distribution p(y) = 1 π 1 1 + y2 .,Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2740,"In this case, the inverse of the indeﬁnite integral can be expressed in terms of the ‘tan’ function.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2741,"The generalization to multiple variables is straightforward and involves the Ja- cobian of the change of variables, so that p(y1, . . . , yM) = p(z1, . . . , zM)  ∂(z1, . . . , zM) ∂(y1, . . . , yM)  .",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,527,2742,"As a ﬁnal example of the transformation method we consider the Box-Muller method for generating samples from a Gaussian distribution. First, suppose we gen- erate pairs of uniformly distributed random numbers z1, z2 ∈(−1, 1), which we can do by transforming a variable distributed uniformly over (0, 1) using z →2z −1.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2743,"Next we discard each pair unless it satisﬁes z2 1 + z2 2 ⩽1. This leads to a uniform distribution of points inside the unit circle with p(z1, z2) = 1/π, as illustrated in Figure 11.3. Then, for each pair z1, z2 we evaluate the quantities −1 −1 1 1 z1 z2 \end{verbatim} egin{verbatim} 11. SAMPLING METHODS y1 = z1 −2 ln z1 r2 1/2 (11.10) y2 = z2 −2 ln z2 r2 1/2 (11.11) where r2 = z2 1 + z2 2. Then the joint distribution of y1 and y2 is given by p(y1, y2) = p(z1, z2)  ∂(z1, z2) ∂(y1, y2)  = 1 √ 2π exp(−y2 1/2) 1 √ 2π exp(−y2 2/2) (11.12) and so y1 and y2 are independent and each has a Gaussian distribution with zero mean and unit variance.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2744,"If y has a Gaussian distribution with zero mean and unit variance, then σy + µ will have a Gaussian distribution with mean µ and variance σ2. To generate vector- valued variables having a multivariate Gaussian distribution with mean µ and co- variance Σ, we can make use of the Cholesky decomposition, which takes the form Σ = LLT (Press et al., 1992). Then, if z is a vector valued random variable whose components are independent and Gaussian distributed with zero mean and unit vari- ance, then y = µ + Lz will have mean µ and covariance Σ.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2745,"Obviously, the transformation technique depends for its success on the ability to calculate and then invert the indeﬁnite integral of the required distribution. Such operations will only be feasible for a limited number of simple distributions, and so we must turn to alternative approaches in search of a more general strategy. Here we consider two techniques called rejection sampling and importance sampling. Al- though mainly limited to univariate distributions and thus not directly applicable to complex problems in many dimensions, they do form important components in more general strategies.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2746,"The rejection sampling framework allows us to sample from relatively complex distributions, subject to certain constraints. We begin by considering univariate dis- tributions and discuss the extension to multiple dimensions subsequently.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2747,"Suppose we wish to sample from a distribution p(z) that is not one of the simple, standard distributions considered so far, and that sampling directly from p(z) is dif- ﬁcult. Furthermore suppose, as is often the case, that we are easily able to evaluate p(z) for any given value of z, up to some normalizing constant Z, so that p(z) = 1 Zp p(z) (11.13) where p(z) can readily be evaluated, but Zp is unknown.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,528,2748,"In order to apply rejection sampling, we need some simpler distribution q(z), sometimes called a proposal distribution, from which we can readily draw samples.",Exercises
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2749,"Figure 11.4 In the rejection sampling method, samples are drawn from a sim- ple distribution q(z) and rejected if they fall in the grey area be- tween the unnormalized distribu- tion ep(z) and the scaled distribu- tion kq(z). The resulting samples are distributed according to p(z), which is the normalized version of ep(z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2750,"We next introduce a constant k whose value is chosen such that kq(z) ⩾p(z) for all values of z. The function kq(z) is called the comparison function and is illus- trated for a univariate distribution in Figure 11.4. Each step of the rejection sampler involves generating two random numbers. First, we generate a number z0 from the distribution q(z). Next, we generate a number u0 from the uniform distribution over [0, kq(z0)]. This pair of random numbers has uniform distribution under the curve of the function kq(z). Finally, if u0 > p(z0) then the sample is rejected, otherwise u0 is retained. Thus the pair is rejected if it lies in the grey shaded region in Fig- ure 11.4. The remaining pairs then have uniform distribution under the curve of p(z), and hence the corresponding z values are distributed according to p(z), as desired.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2751,"The original values of z are generated from the distribution q(z), and these sam- ples are then accepted with probability p(z)/kq(z), and so the probability that a sample will be accepted is given by p(accept) =  {p(z)/kq(z)} q(z) dz = 1 k  p(z) dz.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2752,Thus the fraction of points that are rejected by this method depends on the ratio of the area under the unnormalized distribution p(z) to the area under the curve kq(z).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2753,We therefore see that the constant k should be as small as possible subject to the limitation that kq(z) must be nowhere less than p(z).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,529,2754,"As an illustration of the use of rejection sampling, consider the task of sampling from the gamma distribution Gam(z|a, b) = baza−1 exp(−bz) Γ(a) (11.15) which, for a > 1, has a bell-shaped form, as shown in Figure 11.5. A suitable proposal distribution is therefore the Cauchy (11.8) because this too is bell-shaped and because we can use the transformation method, discussed earlier, to sample from it. We need to generalize the Cauchy slightly to ensure that it nowhere has a smaller value than the gamma distribution. This can be achieved by transforming a uniform random variable y using z = b tan y + c, which gives random numbers distributed according to.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,530,2755,"Figure 11.5 Plot showing the gamma distribu- tion given by (11.15) as the green curve, with a scaled Cauchy pro- posal distribution shown by the red curve. Samples from the gamma distribution can be obtained by sampling from the Cauchy and then applying the rejection sam- pling criterion.",Appendices
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,530,2756,"Figure 11.6 In the case of distributions that are log concave, an envelope function for use in rejection sampling can be constructed using the tangent lines computed at a set of grid points. If a sample point is rejected, it is added to the set of grid points and used to reﬁne the envelope distribution.",Appendices
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,530,2757,"1 + (z −c)2/b2 . (11.16) The minimum reject rate is obtained by setting c = a −1, b2 = 2a −1 and choos- ing the constant k to be as small as possible while still satisfying the requirement kq(z) ⩾p(z). The resulting comparison function is also illustrated in Figure 11.5.",Appendices
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,530,2758,"In many instances where we might wish to apply rejection sampling, it proves difﬁcult to determine a suitable analytic form for the envelope distribution q(z). An alternative approach is to construct the envelope function on the ﬂy based on mea- sured values of the distribution p(z) (Gilks and Wild, 1992). Construction of an envelope function is particularly straightforward for cases in which p(z) is log con- cave, in other words when ln p(z) has derivatives that are nonincreasing functions of z. The construction of a suitable envelope function is illustrated graphically in Figure 11.6.",Appendices
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,530,2759,"The function ln p(z) and its gradient are evaluated at some initial set of grid points, and the intersections of the resulting tangent lines are used to construct the envelope function. Next a sample value is drawn from the envelope distribution.",Appendices
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,531,2760,"Figure 11.7 Illustrative example of rejection sampling involving sampling from a Gaussian distribution p(z) shown by the green curve, by using rejection sampling from a proposal distri- bution q(z) that is also Gaussian and whose scaled version kq(z) is shown by the red curve.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,531,2761,"This is straightforward because the log of the envelope distribution is a succession z1 z2 z3 z ln p(z) \end{verbatim} egin{verbatim} z p(z) −5 0 5 0 0.25 0.5 of linear functions, and hence the envelope distribution itself comprises a piecewise exponential distribution of the form q(z) = kiλi exp {−λi(z −zi−1)} zi−1 < z ⩽zi.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,531,2762,"Once a sample has been drawn, the usual rejection criterion can be applied. If the sample is accepted, then it will be a draw from the desired distribution. If, however, the sample is rejected, then it is incorporated into the set of grid points, a new tangent line is computed, and the envelope function is thereby reﬁned. As the number of grid points increases, so the envelope function becomes a better approximation of the desired distribution p(z) and the probability of rejection decreases.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,531,2763,"A variant of the algorithm exists that avoids the evaluation of derivatives (Gilks, 1992). The adaptive rejection sampling framework can also be extended to distri- butions that are not log concave, simply by following each rejection sampling step with a Metropolis-Hastings step (to be discussed in Section 11.2.2), giving rise to adaptive rejection Metropolis sampling (Gilks et al., 1995).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,531,2764,"Clearly for rejection sampling to be of practical value, we require that the com- parison function be close to the required distribution so that the rate of rejection is kept to a minimum. Now let us examine what happens when we try to use rejection sampling in spaces of high dimensionality. Consider, for the sake of illustration, a somewhat artiﬁcial problem in which we wish to sample from a zero-mean mul- tivariate Gaussian distribution with covariance σ2 pI, where I is the unit matrix, by rejection sampling from a proposal distribution that is itself a zero-mean Gaussian distribution having covariance σ2 qI. Obviously, we must have σ2 q ⩾σ2 p in order that there exists a k such that kq(z) ⩾p(z). In D-dimensions the optimum value of k is given by k = (σq/σp)D, as illustrated for D = 1 in Figure 11.7. The acceptance rate will be the ratio of volumes under p(z) and kq(z), which, because both distribu- tions are normalized, is just 1/k. Thus the acceptance rate diminishes exponentially with dimensionality. Even if σq exceeds σp by just one percent, for D = 1, 000 the acceptance ratio will be approximately 1/20, 000. In this illustrative example the comparison function is close to the required distribution. For more practical exam- ples, where the desired distribution may be multimodal and sharply peaked, it will be extremely difﬁcult to ﬁnd a good proposal distribution and comparison function.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,532,2765,"Figure 11.8 Importance sampling addresses the prob- lem of evaluating the expectation of a func- tion f(z) with respect to a distribution p(z) from which it is difﬁcult to draw samples di- rectly. Instead, samples {z(l)} are drawn from a simpler distribution q(z), and the corresponding terms in the summation are weighted by the ratios p(z(l))/q(z(l)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,532,2766,"Furthermore, the exponential decrease of acceptance rate with dimensionality is a generic feature of rejection sampling. Although rejection can be a useful technique in one or two dimensions it is unsuited to problems of high dimensionality. It can, however, play a role as a subroutine in more sophisticated algorithms for sampling in high dimensional spaces.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,532,2767,One of the principal reasons for wishing to sample from complicated probability distributions is to be able to evaluate expectations of the form (11.1). The technique of importance sampling provides a framework for approximating expectations di- rectly but does not itself provide a mechanism for drawing samples from distribution p(z).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,532,2768,"The ﬁnite sum approximation to the expectation, given by (11.2), depends on being able to draw samples from the distribution p(z). Suppose, however, that it is impractical to sample directly from p(z) but that we can evaluate p(z) easily for any given value of z. One simplistic strategy for evaluating expectations would be to discretize z-space into a uniform grid and to evaluate the integrand as a sum of the form E[f] ≃ L  l=1 p(z(l))f(z(l)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,532,2769,"An obvious problem with this approach is that the number of terms in the summation grows exponentially with the dimensionality of z. Furthermore, as we have already noted, the kinds of probability distributions of interest will often have much of their mass conﬁned to relatively small regions of z space and so uniform sampling will be very inefﬁcient because in high-dimensional problems, only a very small proportion of the samples will make a signiﬁcant contribution to the sum. We would really like to choose the sample points to fall in regions where p(z) is large, or ideally where the product p(z)f(z) is large.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,533,2770,"As in the case of rejection sampling, importance sampling is based on the use of a proposal distribution q(z) from which it is easy to draw samples, as illustrated in Figure 11.8. We can then express the expectation in the form of a ﬁnite sum over \end{verbatim} egin{verbatim} samples {z(l)} drawn from q(z) E[f] =  f(z)p(z) dz =  f(z)p(z) q(z)q(z) dz ≃ 1 L L  l=1 p(z(l)) q(z(l))f(z(l)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,533,2771,"The quantities rl = p(z(l))/q(z(l)) are known as importance weights, and they cor- rect the bias introduced by sampling from the wrong distribution. Note that, unlike rejection sampling, all of the samples generated are retained.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,533,2772,"It will often be the case that the distribution p(z) can only be evaluated up to a normalization constant, so that p(z) = p(z)/Zp where p(z) can be evaluated easily, whereas Zp is unknown. Similarly, we may wish to use an importance sampling distribution q(z) = q(z)/Zq, which has the same property. We then have E[f] =  f(z)p(z) dz = Zq Zp  f(z)p(z) q(z)q(z) dz ≃ Zq Zp 1 L L  l=1 rlf(z(l)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,533,2773,where rl = p(z(l))/q(z(l)). We can use the same sample set to evaluate the ratio Zp/Zq with the result Zp Zq = 1 Zq  p(z) dz =  p(z) q(z)q(z) dz ≃ 1 L L  l=1 rl (11.21) and hence E[f] ≃ L  l=1 wlf(z(l)) (11.22) where we have deﬁned wl = rl  m rm = p(z(l))/q(z(l))  m p(z(m))/q(z(m)).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,534,2774,"As with rejection sampling, the success of the importance sampling approach depends crucially on how well the sampling distribution q(z) matches the desired \end{verbatim} egin{verbatim} 11. SAMPLING METHODS distribution p(z). If, as is often the case, p(z)f(z) is strongly varying and has a sig- niﬁcant proportion of its mass concentrated over relatively small regions of z space, then the set of importance weights {rl} may be dominated by a few weights hav- ing large values, with the remaining weights being relatively insigniﬁcant. Thus the effective sample size can be much smaller than the apparent sample size L. The prob- lem is even more severe if none of the samples falls in the regions where p(z)f(z) is large. In that case, the apparent variances of rl and rlf(z(l)) may be small even though the estimate of the expectation may be severely wrong. Hence a major draw- back of the importance sampling method is the potential to produce results that are arbitrarily in error and with no diagnostic indication. This also highlights a key re- quirement for the sampling distribution q(z), namely that it should not be small or zero in regions where p(z) may be signiﬁcant.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,534,2775,"For distributions deﬁned in terms of a graphical model, we can apply the impor- tance sampling technique in various ways. For discrete variables, a simple approach is called uniform sampling. The joint distribution for a directed graph is deﬁned by (11.4). Each sample from the joint distribution is obtained by ﬁrst setting those variables zi that are in the evidence set equal to their observed values. Each of the remaining variables is then sampled independently from a uniform distribution over the space of possible instantiations. To determine the corresponding weight associ- ated with a sample z(l), we note that the sampling distribution q(z) is uniform over the possible choices for z, and that p(z|x) = p(z), where x denotes the subset of variables that are observed, and the equality follows from the fact that every sample z that is generated is necessarily consistent with the evidence. Thus the weights rl are simply proportional to p(z). Note that the variables can be sampled in any order.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,534,2776,"This approach can yield poor results if the posterior distribution is far from uniform, as is often the case in practice.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,534,2777,"An improvement on this approach is called likelihood weighted sampling (Fung and Chang, 1990; Shachter and Peot, 1990) and is based on ancestral sampling of the variables. For each variable in turn, if that variable is in the evidence set, then it is just set to its instantiated value. If it is not in the evidence set, then it is sampled from the conditional distribution p(zi|pai) in which the conditioning variables are set to their currently sampled values. The weighting associated with the resulting sample z is then given by r(z) =  zi̸∈e p(zi|pai) p(zi|pai)  zi∈e p(zi|pai) 1 =  zi∈e p(zi|pai).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,534,2778,"This method can be further extended using self-importance sampling (Shachter and Peot, 1990) in which the importance sampling distribution is continually updated to reﬂect the current estimated posterior distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,535,2779,"The rejection sampling method discussed in Section 11.1.2 depends in part for its success on the determination of a suitable value for the constant k. For many pairs of distributions p(z) and q(z), it will be impractical to determine a suitable \end{verbatim} egin{verbatim} value for k in that any value that is sufﬁciently large to guarantee a bound on the desired distribution will lead to impractically small acceptance rates.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,535,2780,"As in the case of rejection sampling, the sampling-importance-resampling (SIR) approach also makes use of a sampling distribution q(z) but avoids having to de- termine the constant k. There are two stages to the scheme. In the ﬁrst stage, L samples z(1), . . . , z(L) are drawn from q(z). Then in the second stage, weights w1, . . . , wL are constructed using (11.23). Finally, a second set of L samples is drawn from the discrete distribution (z(1), . . . , z(L)) with probabilities given by the weights (w1, . . . , wL).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,535,2781,"The resulting L samples are only approximately distributed according to p(z), but the distribution becomes correct in the limit L →∞. To see this, consider the univariate case, and note that the cumulative distribution of the resampled values is given by p(z ⩽a) =  l:z(l)⩽a wl =  l I(z(l) ⩽a)p(z(l))/q(z(l))  l p(z(l))/q(z(l)) (11.25) where I(.) is the indicator function (which equals 1 if its argument is true and 0 otherwise). Taking the limit L →∞, and assuming suitable regularity of the dis- tributions, we can replace the sums by integrals weighted according to the original sampling distribution q(z) p(z ⩽a) =  I(z ⩽a) {p(z)/q(z)} q(z) dz  {p(z)/q(z)} q(z) dz =  I(z ⩽a)p(z) dz  p(z) dz =  I(z ⩽a)p(z) dz (11.26) which is the cumulative distribution function of p(z). Again, we see that the normal- ization of p(z) is not required.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,535,2782,"For a ﬁnite value of L, and a given initial sample set, the resampled values will only approximately be drawn from the desired distribution. As with rejection sam- pling, the approximation improves as the sampling distribution q(z) gets closer to the desired distribution p(z). When q(z) = p(z), the initial samples (z(1), . . . , z(L)) have the desired distribution, and the weights wn = 1/L so that the resampled values also have the desired distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2783,"If moments with respect to the distribution p(z) are required, then they can be \end{verbatim} egin{verbatim} 11. SAMPLING METHODS evaluated directly using the original samples together with the weights, because E[f(z)] =  f(z)p(z) dz =  f(z)[p(z)/q(z)]q(z) dz  [p(z)/q(z)]q(z) dz ≃ L  l=1 wlf(zl).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2784,"In addition to providing a mechanism for direct implementation of the Bayesian framework, Monte Carlo methods can also play a role in the frequentist paradigm, for example to ﬁnd maximum likelihood solutions. In particular, sampling methods can be used to approximate the E step of the EM algorithm for models in which the E step cannot be performed analytically. Consider a model with hidden variables Z, visible (observed) variables X, and parameters θ. The function that is optimized with respect to θ in the M step is the expected complete-data log likelihood, given by Q(θ, θold) =  p(Z|X, θold) ln p(Z, X|θ) dZ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2785,"We can use sampling methods to approximate this integral by a ﬁnite sum over sam- ples {Z(l)}, which are drawn from the current estimate for the posterior distribution p(Z|X, θold), so that Q(θ, θold) ≃1 L L  l=1 ln p(Z(l), X|θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2786,The Q function is then optimized in the usual way in the M step. This procedure is called the Monte Carlo EM algorithm.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2787,"It is straightforward to extend this to the problem of ﬁnding the mode of the posterior distribution over θ (the MAP estimate) when a prior distribution p(θ) has been deﬁned, simply by adding ln p(θ) to the function Q(θ, θold) before performing the M step.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2788,"A particular instance of the Monte Carlo EM algorithm, called stochastic EM, arises if we consider a ﬁnite mixture model, and draw just one sample at each E step.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2789,"Here the latent variable Z characterizes which of the K components of the mixture is responsible for generating each data point. In the E step, a sample of Z is taken from the posterior distribution p(Z|X, θold) where X is the data set. This effectively makes a hard assignment of each data point to one of the components in the mixture.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,536,2790,"In the M step, this sampled approximation to the posterior distribution is used to update the model parameters in the usual way.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,537,2791,"Now suppose we move from a maximum likelihood approach to a full Bayesian treatment in which we wish to sample from the posterior distribution over the param- eter vector θ. In principle, we would like to draw samples from the joint posterior p(θ, Z|X), but we shall suppose that this is computationally difﬁcult. Suppose fur- ther that it is relatively straightforward to sample from the complete-data parameter posterior p(θ|Z, X). This inspires the data augmentation algorithm, which alter- nates between two steps known as the I-step (imputation step, analogous to an E step) and the P-step (posterior step, analogous to an M step).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,537,2792,"I-step. We wish to sample from p(Z|X) but we cannot do this directly. We therefore note the relation p(Z|X) =  p(Z|θ, X)p(θ|X) dθ (11.30) and hence for l = 1, . . . , L we ﬁrst draw a sample θ(l) from the current esti- mate for p(θ|X), and then use this to draw a sample Z(l) from p(Z|θ(l), X).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,537,2793,"we use the samples {Z(l)} obtained from the I-step to compute a revised estimate of the posterior distribution over θ given by p(θ|X) ≃1 L L  l=1 p(θ|Z(l), X).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,537,2794,"By assumption, it will be feasible to sample from this approximation in the I-step.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,537,2795,"Note that we are making a (somewhat artiﬁcial) distinction between parameters θ and hidden variables Z. From now on, we blur this distinction and focus simply on the problem of drawing samples from a given posterior distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,538,2796,"In the previous section, we discussed the rejection sampling and importance sam- pling strategies for evaluating expectations of functions, and we saw that they suffer from severe limitations particularly in spaces of high dimensionality. We therefore turn in this section to a very general and powerful framework called Markov chain Monte Carlo (MCMC), which allows sampling from a large class of distributions, \end{verbatim} egin{verbatim} 11. SAMPLING METHODS and which scales well with the dimensionality of the sample space. Markov chain Monte Carlo methods have their origins in physics (Metropolis and Ulam, 1949), and it was only towards the end of the 1980s that they started to have a signiﬁcant impact in the ﬁeld of statistics.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,538,2797,"As with rejection and importance sampling, we again sample from a proposal distribution. This time, however, we maintain a record of the current state z(τ), and the proposal distribution q(z|z(τ)) depends on this current state, and so the sequence of samples z(1), z(2), . . . forms a Markov chain. Again, if we write p(z) = p(z)/Zp, we will assume that p(z) can readily be evaluated for any given value of z, although the value of Zp may be unknown. The proposal distribution itself is chosen to be sufﬁciently simple that it is straightforward to draw samples from it directly. At each cycle of the algorithm, we generate a candidate sample z⋆from the proposal distribution and then accept the sample according to an appropriate criterion.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,538,2798,"In the basic Metropolis algorithm (Metropolis et al., 1953), we assume that the proposal distribution is symmetric, that is q(zA|zB) = q(zB|zA) for all values of zA and zB. The candidate sample is then accepted with probability A(z⋆, z(τ)) = min  1, p(z⋆) p(z(τ))  .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,538,2799,"This can be achieved by choosing a random number u with uniform distribution over the unit interval (0, 1) and then accepting the sample if A(z⋆, z(τ)) > u. Note that if the step from z(τ) to z⋆causes an increase in the value of p(z), then the candidate point is certain to be kept.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,538,2800,"If the candidate sample is accepted, then z(τ+1) = z⋆, otherwise the candidate point z⋆is discarded, z(τ+1) is set to z(τ) and another candidate sample is drawn from the distribution q(z|z(τ+1)). This is in contrast to rejection sampling, where re- jected samples are simply discarded. In the Metropolis algorithm when a candidate point is rejected, the previous sample is included instead in the ﬁnal list of samples, leading to multiple copies of samples. Of course, in a practical implementation, only a single copy of each retained sample would be kept, along with an integer weighting factor recording how many times that state appears. As we shall see, as long as q(zA|zB) is positive for any values of zA and zB (this is a sufﬁcient but not necessary condition), the distribution of z(τ) tends to p(z) as τ →∞. It should be emphasized, however, that the sequence z(1), z(2), . . . is not a set of independent samples from p(z) because successive samples are highly correlated. If we wish to obtain independent samples, then we can discard most of the sequence and just re- tain every M th sample. For M sufﬁciently large, the retained samples will for all practical purposes be independent. Figure 11.9 shows a simple illustrative exam- ple of sampling from a two-dimensional Gaussian distribution using the Metropolis algorithm in which the proposal distribution is an isotropic Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,539,2801,Figure 11.9 A simple illustration using Metropo- lis algorithm to sample from a Gaussian distribution whose one standard-deviation contour is shown by the ellipse. The proposal distribu- tion is an isotropic Gaussian distri- bution whose standard deviation is 0.2.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,539,2802,"Further insight into the nature of Markov chain Monte Carlo algorithms can be gleaned by looking at the properties of a speciﬁc example, namely a simple random \end{verbatim} egin{verbatim} Steps that are accepted are shown as green lines, and rejected steps are shown in red. A total of 150 candidate samples are gener- ated, of which 43 are rejected.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,539,2803,"walk. Consider a state space z consisting of the integers, with probabilities p(z(τ+1) = z(τ)) = 0.5 (11.34) p(z(τ+1) = z(τ) + 1) = 0.25 (11.35) p(z(τ+1) = z(τ) −1) = 0.25 (11.36) where z(τ) denotes the state at step τ. If the initial state is z(1) = 0, then by sym- metry the expected state at time τ will also be zero E[z(τ)] = 0, and similarly it is easily seen that E[(z(τ))2] = τ/2. Thus after τ steps, the random walk has only trav- elled a distance that on average is proportional to the square root of τ. This square root dependence is typical of random walk behaviour and shows that random walks are very inefﬁcient in exploring the state space. As we shall see, a central goal in designing Markov chain Monte Carlo methods is to avoid random walk behaviour.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,539,2804,"Before discussing Markov chain Monte Carlo methods in more detail, it is use- ful to study some general properties of Markov chains in more detail. In particular, we ask under what circumstances will a Markov chain converge to the desired dis- tribution. A ﬁrst-order Markov chain is deﬁned to be a series of random variables z(1), . . . , z(M) such that the following conditional independence property holds for m ∈{1, . . . , M −1} p(z(m+1)|z(1), . . . , z(m)) = p(z(m+1)|z(m)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2805,"This of course can be represented as a directed graph in the form of a chain, an ex- ample of which is shown in Figure 8.38. We can then specify the Markov chain by giving the probability distribution for the initial variable p(z(0)) together with the \end{verbatim} egin{verbatim} 11. SAMPLING METHODS conditional probabilities for subsequent variables in the form of transition probabil- ities Tm(z(m), z(m+1)) ≡p(z(m+1)|z(m)). A Markov chain is called homogeneous if the transition probabilities are the same for all m.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2806,The marginal probability for a particular variable can be expressed in terms of the marginal probability for the previous variable in the chain in the form p(z(m+1)) =  z(m) p(z(m+1)|z(m))p(z(m)).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2807,"A distribution is said to be invariant, or stationary, with respect to a Markov chain if each step in the chain leaves that distribution invariant. Thus, for a homogeneous Markov chain with transition probabilities T(z′, z), the distribution p⋆(z) is invariant if p⋆(z) =  z′ T(z′, z)p⋆(z′).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2808,"Note that a given Markov chain may have more than one invariant distribution. For instance, if the transition probabilities are given by the identity transformation, then any distribution will be invariant.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2809,"A sufﬁcient (but not necessary) condition for ensuring that the required distribu- tion p(z) is invariant is to choose the transition probabilities to satisfy the property of detailed balance, deﬁned by p⋆(z)T(z, z′) = p⋆(z′)T(z′, z) (11.40) for the particular distribution p⋆(z). It is easily seen that a transition probability that satisﬁes detailed balance with respect to a particular distribution will leave that distribution invariant, because  z′ p⋆(z′)T(z′, z) =  z′ p⋆(z)T(z, z′) = p⋆(z)  z′ p(z′|z) = p⋆(z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2810,A Markov chain that respects detailed balance is said to be reversible. Our goal is to use Markov chains to sample from a given distribution. We can achieve this if we set up a Markov chain such that the desired distribution is invariant.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,540,2811,"However, we must also require that for m →∞, the distribution p(z(m)) converges to the required invariant distribution p⋆(z), irrespective of the choice of initial dis- tribution p(z(0)). This property is called ergodicity, and the invariant distribution is then called the equilibrium distribution. Clearly, an ergodic Markov chain can have only one equilibrium distribution. It can be shown that a homogeneous Markov chain will be ergodic, subject only to weak restrictions on the invariant distribution and the transition probabilities (Neal, 1993).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2812,"In practice we often construct the transition probabilities from a set of ‘base’ transitions B1, . . . , BK. This can be achieved through a mixture distribution of the form T(z′, z) = K  k=1 αkBk(z′, z) (11.42) \end{verbatim} egin{verbatim} for some set of mixing coefﬁcients α1, . . . , αK satisfying αk ⩾0 and  k αk = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2813,"Alternatively, the base transitions may be combined through successive application, so that T(z′, z) =  z1 . . .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2814,"B1(z′, z1) . . . BK−1(zK−2, zK−1)BK(zK−1, z). (11.43) If a distribution is invariant with respect to each of the base transitions, then obvi- ously it will also be invariant with respect to either of the T(z′, z) given by (11.42) or (11.43). For the case of the mixture (11.42), if each of the base transitions sat- isﬁes detailed balance, then the mixture transition T will also satisfy detailed bal- ance. This does not hold for the transition probability constructed using (11.43), al- though by symmetrizing the order of application of the base transitions, in the form B1, B2, . . . , BK, BK, . . . , B2, B1, detailed balance can be restored. A common ex- ample of the use of composite transition probabilities is where each base transition changes only a subset of the variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2815,"Earlier we introduced the basic Metropolis algorithm, without actually demon- strating that it samples from the required distribution. Before giving a proof, we ﬁrst discuss a generalization, known as the Metropolis-Hastings algorithm (Hast- ings, 1970), to the case where the proposal distribution is no longer a symmetric function of its arguments. In particular at step τ of the algorithm, in which the cur- rent state is z(τ), we draw a sample z⋆from the distribution qk(z|z(τ)) and then accept it with probability Ak(z⋆, zτ) where Ak(z⋆, z(τ)) = min  1, p(z⋆)qk(z(τ)|z⋆) p(z(τ))qk(z⋆|z(τ))  .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2816,"Here k labels the members of the set of possible transitions being considered. Again, the evaluation of the acceptance criterion does not require knowledge of the normal- izing constant Zp in the probability distribution p(z) = p(z)/Zp. For a symmetric proposal distribution the Metropolis-Hastings criterion (11.44) reduces to the stan- dard Metropolis criterion given by (11.33).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,541,2817,"We can show that p(z) is an invariant distribution of the Markov chain deﬁned by the Metropolis-Hastings algorithm by showing that detailed balance, deﬁned by (11.40), is satisﬁed. Using (11.44) we have p(z)qk(z|z′)Ak(z′, z) = min (p(z)qk(z|z′), p(z′)qk(z′|z)) = min (p(z′)qk(z′|z), p(z)qk(z|z′)) = p(z′)qk(z′|z)Ak(z, z′) (11.45) as required.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,542,2818,"Figure 11.10 Schematic illustration of the use of an isotropic Gaussian proposal distribution (blue circle) to sample from a correlated multivariate Gaussian distribution (red ellipse) having very different stan- dard deviations in different directions, using the Metropolis-Hastings algorithm. In order to keep the rejection rate low, the scale ρ of the proposal distribution should be on the order of the smallest standard deviation σmin, which leads to random walk behaviour in which the number of steps sep- arating states that are approximately independent is of order (σmax/σmin)2 where σmax is the largest standard deviation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,542,2819,"The speciﬁc choice of proposal distribution can have a marked effect on the performance of the algorithm. For continuous state spaces, a common choice is a Gaussian centred on the current state, leading to an important trade-off in determin- ing the variance parameter of this distribution. If the variance is small, then the \end{verbatim} egin{verbatim} 11. SAMPLING METHODS σmax σmin ρ proportion of accepted transitions will be high, but progress through the state space takes the form of a slow random walk leading to long correlation times. However, if the variance parameter is large, then the rejection rate will be high because, in the kind of complex problems we are considering, many of the proposed steps will be to states for which the probability p(z) is low. Consider a multivariate distribution p(z) having strong correlations between the components of z, as illustrated in Fig- ure 11.10. The scale ρ of the proposal distribution should be as large as possible without incurring high rejection rates. This suggests that ρ should be of the same order as the smallest length scale σmin. The system then explores the distribution along the more extended direction by means of a random walk, and so the number of steps to arrive at a state that is more or less independent of the original state is of order (σmax/σmin)2. In fact in two dimensions, the increase in rejection rate as ρ increases is offset by the larger steps sizes of those transitions that are accepted, and more generally for a multivariate Gaussian the number of steps required to obtain independent samples scales like (σmax/σ2)2 where σ2 is the second-smallest stan- dard deviation (Neal, 1993). These details aside, it remains the case that if the length scales over which the distributions vary are very different in different directions, then the Metropolis Hastings algorithm can have very slow convergence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,542,2820,"Gibbs sampling (Geman and Geman, 1984) is a simple and widely applicable Markov chain Monte Carlo algorithm and can be seen as a special case of the Metropolis- Hastings algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2821,"Consider the distribution p(z) = p(z1, . . . , zM) from which we wish to sample, and suppose that we have chosen some initial state for the Markov chain. Each step of the Gibbs sampling procedure involves replacing the value of one of the variables by a value drawn from the distribution of that variable conditioned on the values of the remaining variables. Thus we replace zi by a value drawn from the distribution p(zi|z\i), where zi denotes the ith component of z, and z\i denotes z1, . . . , zM but with zi omitted. This procedure is repeated either by cycling through the variables \end{verbatim} egin{verbatim} in some particular order or by choosing the variable to be updated at each step at random from some distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2822,"For example, suppose we have a distribution p(z1, z2, z3) over three variables, and at step τ of the algorithm we have selected values z(τ) 1 , z(τ) 2 and z(τ) 3 . We ﬁrst replace z(τ) 1 by a new value z(τ+1) 1 obtained by sampling from the conditional distri- bution p(z1|z(τ) 2 , z(τ) 3 ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2823,"obtained by sampling from the conditional distribution p(z2|z(τ+1) 1 , z(τ) 3 ) (11.47) so that the new value for z1 is used straight away in subsequent sampling steps. Then we update z3 with a sample z(τ+1) 3 drawn from p(z3|z(τ+1) 1 , z(τ+1) 2 ) (11.48) and so on, cycling through the three variables in turn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2824,"1. Initialize {zi : i = 1, . . . , M} 2. For τ = 1, . . . , T: – Sample z(τ+1) 1 ∼p(z1|z(τ) 2 , z(τ) 3 , . . . , z(τ) M ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2825,"3 , . . . , z(τ) M ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2826,", . . . , z(τ+1) j−1 , z(τ) j+1, . . . , z(τ) M ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2827,", . . . , z(τ+1) M−1 ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2828,"Gibbs spent almost his entire life liv- ing in a house built by his father in New Haven, Connecticut. In 1863, Gibbs was granted the ﬁrst PhD in engineering in the United States, and in 1871 he was appointed to the ﬁrst chair of mathematical physics in the United States at Yale, a post for which he received no salary because at the time he had no publications. He de- veloped the ﬁeld of vector analysis and made contri- butions to crystallography and planetary orbits.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,543,2829,"most famous work, entitled On the Equilibrium of Het- erogeneous Substances, laid the foundations for the science of physical chemistry.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2830,"To show that this procedure samples from the required distribution, we ﬁrst of all note that the distribution p(z) is an invariant of each of the Gibbs sampling steps individually and hence of the whole Markov chain. This follows from the fact that when we sample from p(zi|{z\i), the marginal distribution p(z\i) is clearly invariant because the value of z\i is unchanged. Also, each step by deﬁnition samples from the correct conditional distribution p(zi|z\i). Because these conditional and marginal distributions together specify the joint distribution, we see that the joint distribution is itself invariant.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2831,"The second requirement to be satisﬁed in order that the Gibbs sampling proce- dure samples from the correct distribution is that it be ergodic. A sufﬁcient condition for ergodicity is that none of the conditional distributions be anywhere zero. If this is the case, then any point in z space can be reached from any other point in a ﬁnite number of steps involving one update of each of the component variables. If this requirement is not satisﬁed, so that some of the conditional distributions have zeros, then ergodicity, if it applies, must be proven explicitly.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2832,"The distribution of initial states must also be speciﬁed in order to complete the algorithm, although samples drawn after many iterations will effectively become independent of this distribution. Of course, successive samples from the Markov chain will be highly correlated, and so to obtain samples that are nearly independent it will be necessary to subsample the sequence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2833,"We can obtain the Gibbs sampling procedure as a particular instance of the Metropolis-Hastings algorithm as follows. Consider a Metropolis-Hastings sampling step involving the variable zk in which the remaining variables z\k remain ﬁxed, and for which the transition probability from z to z⋆is given by qk(z⋆|z) = p(z⋆ k|z\k).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2834,"\k = z\k because these components are unchanged by the sampling step. Also, p(z) = p(zk|z\k)p(z\k). Thus the factor that determines the acceptance probability in the Metropolis-Hastings (11.44) is given by A(z⋆, z) = p(z⋆)qk(z|z⋆) p(z)qk(z⋆|z) = p(z⋆ k|z⋆ \k)p(z⋆ \k)p(zk|z⋆ \k) p(zk|z\k)p(z\k)p(z⋆ k|z\k) = 1 (11.49) where we have used z⋆ \k = z\k. Thus the Metropolis-Hastings steps are always accepted.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,544,2835,"As with the Metropolis algorithm, we can gain some insight into the behaviour of Gibbs sampling by investigating its application to a Gaussian distribution. Consider a correlated Gaussian in two variables, as illustrated in Figure 11.11, having con- ditional distributions of width l and marginal distributions of width L. The typical step size is governed by the conditional distributions and will be of order l. Because the state evolves according to a random walk, the number of steps needed to obtain independent samples from the distribution will be of order (L/l)2. Of course if the Gaussian distribution were uncorrelated, then the Gibbs sampling procedure would be optimally efﬁcient. For this simple problem, we could rotate the coordinate sys- tem in order to decorrelate the variables. However, in practical applications it will generally be infeasible to ﬁnd such transformations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,545,2836,Figure 11.11 Illustration of Gibbs sampling by alter- nate updates of two variables whose distribution is a correlated Gaussian.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,545,2837,"One approach to reducing random walk behaviour in Gibbs sampling is called over-relaxation (Adler, 1981). In its original form, this applies to problems for which \end{verbatim} egin{verbatim} The step size is governed by the stan- dard deviation of the conditional distri- bution (green curve), and is O(l), lead- ing to slow progress in the direction of elongation of the joint distribution (red ellipse). The number of steps needed to obtain an independent sample from the distribution is O((L/l)2).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,545,2838,"the conditional distributions are Gaussian, which represents a more general class of distributions than the multivariate Gaussian because, for example, the non-Gaussian distribution p(z, y) ∝exp(−z2y2) has Gaussian conditional distributions. At each step of the Gibbs sampling algorithm, the conditional distribution for a particular component zi has some mean µi and some variance σ2 i . In the over-relaxation frame- work, the value of zi is replaced with z′ i = µi + α(zi −µi) + σi(1 −α2 i)1/2ν (11.50) where ν is a Gaussian random variable with zero mean and unit variance, and α is a parameter such that −1 < α < 1. For α = 0, the method is equivalent to standard Gibbs sampling, and for α < 0 the step is biased to the opposite side of the mean. This step leaves the desired distribution invariant because if zi has mean µi and variance σ2 i , then so too does z′ i. The effect of over-relaxation is to encourage directed motion through state space when the variables are highly correlated. The framework of ordered over-relaxation (Neal, 1999) generalizes this approach to non- Gaussian distributions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,545,2839,"The practical applicability of Gibbs sampling depends on the ease with which samples can be drawn from the conditional distributions p(zk|z\k). In the case of probability distributions speciﬁed using graphical models, the conditional distribu- tions for individual nodes depend only on the variables in the corresponding Markov blankets, as illustrated in Figure 11.12. For directed graphs, a wide choice of condi- tional distributions for the individual nodes conditioned on their parents will lead to conditional distributions for Gibbs sampling that are log concave. The adaptive re- jection sampling methods discussed in Section 11.1.3 therefore provide a framework for Monte Carlo sampling from directed graphs with broad applicability.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,546,2840,"Figure 11.12 The Gibbs sampling method requires samples to be drawn from the conditional distribution of a variable condi- tioned on the remaining variables. For graphical models, this conditional distribution is a function only of the states of the nodes in the Markov blanket. For an undirected graph this com- prises the set of neighbours, as shown on the left, while for a directed graph the Markov blanket comprises the parents, the children, and the co-parents, as shown on the right.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,546,2841,"If the graph is constructed using distributions from the exponential family, and if the parent-child relationships preserve conjugacy, then the full conditional distri- butions arising in Gibbs sampling will have the same functional form as the orig- \end{verbatim} egin{verbatim} 11. SAMPLING METHODS inal conditional distributions (conditioned on the parents) deﬁning each node, and so standard sampling techniques can be employed. In general, the full conditional distributions will be of a complex form that does not permit the use of standard sam- pling algorithms. However, if these conditionals are log concave, then sampling can be done efﬁciently using adaptive rejection sampling (assuming the corresponding variable is a scalar).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,546,2842,"If, at each stage of the Gibbs sampling algorithm, instead of drawing a sample from the corresponding conditional distribution, we make a point estimate of the variable given by the maximum of the conditional distribution, then we obtain the iterated conditional modes (ICM) algorithm discussed in Section 8.3.3. Thus ICM can be seen as a greedy approximation to Gibbs sampling.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,546,2843,"Because the basic Gibbs sampling technique considers one variable at a time, there are strong dependencies between successive samples. At the opposite extreme, if we could draw samples directly from the joint distribution (an operation that we are supposing is intractable), then successive samples would be independent. We can hope to improve on the simple Gibbs sampler by adopting an intermediate strategy in which we sample successively from groups of variables rather than individual vari- ables. This is achieved in the blocking Gibbs sampling algorithm by choosing blocks of variables, not necessarily disjoint, and then sampling jointly from the variables in each block in turn, conditioned on the remaining variables (Jensen et al., 1995).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,546,2844,"We have seen that one of the difﬁculties with the Metropolis algorithm is the sensi- tivity to step size. If this is too small, the result is slow decorrelation due to random walk behaviour, whereas if it is too large the result is inefﬁciency due to a high rejec- tion rate. The technique of slice sampling (Neal, 2003) provides an adaptive step size that is automatically adjusted to match the characteristics of the distribution. Again it requires that we are able to evaluate the unnormalized distribution p(z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,547,2845,"Figure 11.13 Illustration of slice sampling. (a) For a given value z(τ), a value of u is chosen uniformly in the region 0 ⩽u ⩽ep(z(τ)), which then deﬁnes a ‘slice’ through the distribution, shown by the solid horizontal lines. (b) Because it is infeasible to sample directly from a slice, a new sample of z is drawn from a region zmin ⩽z ⩽zmax, which contains the previous value z(τ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,547,2846,"Consider ﬁrst the univariate case. Slice sampling involves augmenting z with an additional variable u and then drawing samples from the joint (z, u) space. We shall see another example of this approach when we discuss hybrid Monte Carlo in Section 11.5. The goal is to sample uniformly from the area under the distribution \end{verbatim} egin{verbatim} ˜p(z) z(τ) z u (a) ˜p(z) z(τ) z u zmin zmax (b) given by p(z, u) = 1/Zp if 0 ⩽u ⩽p(z) 0 otherwise (11.51) where Zp =  p(z) dz. The marginal distribution over z is given by  p(z, u) du =  ep(z) 0 1 Zp du = p(z) Zp = p(z) (11.52) and so we can sample from p(z) by sampling from p(z, u) and then ignoring the u values. This can be achieved by alternately sampling z and u. Given the value of z we evaluate p(z) and then sample u uniformly in the range 0 ⩽u ⩽p(z), which is straightforward. Then we ﬁx u and sample z uniformly from the ‘slice’ through the distribution deﬁned by {z : p(z) > u}. This is illustrated in Figure 11.13(a).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,547,2847,"In practice, it can be difﬁcult to sample directly from a slice through the distribu- tion and so instead we deﬁne a sampling scheme that leaves the uniform distribution under p(z, u) invariant, which can be achieved by ensuring that detailed balance is satisﬁed. Suppose the current value of z is denoted z(τ) and that we have obtained a corresponding sample u. The next value of z is obtained by considering a region zmin ⩽z ⩽zmax that contains z(τ). It is in the choice of this region that the adap- tation to the characteristic length scales of the distribution takes place. We want the region to encompass as much of the slice as possible so as to allow large moves in z space while having as little as possible of this region lying outside the slice, because this makes the sampling less efﬁcient.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,548,2848,"One approach to the choice of region involves starting with a region containing z(τ) having some width w and then testing each of the end points to see if they lie within the slice. If either end point does not, then the region is extended in that direction by increments of value w until the end point lies outside the region. A candidate value z′ is then chosen uniformly from this region, and if it lies within the slice, then it forms z(τ+1). If it lies outside the slice, then the region is shrunk such that z′ forms an end point and such that the region still contains z(τ). Then another \end{verbatim} egin{verbatim} 11. SAMPLING METHODS candidate point is drawn uniformly from this reduced region and so on, until a value of z is found that lies within the slice.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,548,2849,"Slice sampling can be applied to multivariate distributions by repeatedly sam- pling each variable in turn, in the manner of Gibbs sampling. This requires that we are able to compute, for each component zi, a function that is proportional to p(zi|z\i).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,548,2850,"As we have already noted, one of the major limitations of the Metropolis algorithm is that it can exhibit random walk behaviour whereby the distance traversed through the state space grows only as the square root of the number of steps. The problem cannot be resolved simply by taking bigger steps as this leads to a high rejection rate.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,548,2851,"In this section, we introduce a more sophisticated class of transitions based on an analogy with physical systems and that has the property of being able to make large changes to the system state while keeping the rejection probability small. It is ap- plicable to distributions over continuous variables for which we can readily evaluate the gradient of the log probability with respect to the state variables. We will discuss the dynamical systems framework in Section 11.5.1, and then in Section 11.5.2 we explain how this may be combined with the Metropolis algorithm to yield the pow- erful hybrid Monte Carlo algorithm. A background in physics is not required as this section is self-contained and the key results are all derived from ﬁrst principles.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,548,2852,"The dynamical approach to stochastic sampling has its origins in algorithms for simulating the behaviour of physical systems evolving under Hamiltonian dynam- ics. In a Markov chain Monte Carlo simulation, the goal is to sample from a given probability distribution p(z). The framework of Hamiltonian dynamics is exploited by casting the probabilistic simulation in the form of a Hamiltonian system. In order to remain in keeping with the literature in this area, we make use of the relevant dynamical systems terminology where appropriate, which will be deﬁned as we go along.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2853,"The dynamics that we consider corresponds to the evolution of the state variable z = {zi} under continuous time, which we denote by τ. Classical dynamics is de- scribed by Newton’s second law of motion in which the acceleration of an object is proportional to the applied force, corresponding to a second-order differential equa- tion over time. We can decompose a second-order equation into two coupled ﬁrst- order equations by introducing intermediate momentum variables r, corresponding to the rate of change of the state variables z, having components ri = dzi dτ (11.53) where the zi can be regarded as position variables in this dynamics perspective. Thus \end{verbatim} egin{verbatim} for each position variable there is a corresponding momentum variable, and the joint space of position and momentum variables is called phase space.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2854,"Without loss of generality, we can write the probability distribution p(z) in the form p(z) = 1 Zp exp (−E(z)) (11.54) where E(z) is interpreted as the potential energy of the system when in state z. The system acceleration is the rate of change of momentum and is given by the applied force, which itself is the negative gradient of the potential energy dri dτ = −∂E(z) ∂zi .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2855,"It is convenient to reformulate this dynamical system using the Hamiltonian framework. To do this, we ﬁrst deﬁne the kinetic energy by K(r) = 1 2∥r∥2 = 1 2  i r2 i .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2856,"The total energy of the system is then the sum of its potential and kinetic energies H(z, r) = E(z) + K(r) (11.57) where H is the Hamiltonian function. Using (11.53), (11.55), (11.56), and (11.57), we can now express the dynamics of the system in terms of the Hamiltonian equa- tions given by dzi dτ = ∂H ∂ri (11.58) dri dτ = −∂H ∂zi .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2857,"William Rowan Hamilton was an Irish mathematician and physicist, and child prodigy, who was ap- pointed Professor of Astronomy at Trinity College, Dublin, in 1827, be- fore he had even graduated. One of Hamilton’s most important contributions was a new formulation of dynamics, which played a signiﬁcant role in the later development of quantum mechanics.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2858,"His other great achievement was the development of quaternions, which generalize the concept of complex numbers by introducing three distinct square roots of minus one, which satisfy i2 = j2 = k2 = ijk = −1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,549,2859,"It is said that these equations occurred to him while walking along the Royal Canal in Dublin with his wife, on 16 October 1843, and he promptly carved the equations into the side of Broome bridge. Although there is no longer any evidence of the carving, there is now a stone plaque on the bridge commemorating the discovery and displaying the quaternion equations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2860,"During the evolution of this dynamical system, the value of the Hamiltonian H is constant, as is easily seen by differentiation dH dτ =  i ∂H ∂zi dzi dτ + ∂H ∂ri dri dτ =  i ∂H ∂zi ∂H ∂ri −∂H ∂ri ∂H ∂zi = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2861,"A second important property of Hamiltonian dynamical systems, known as Li- ouville’s Theorem, is that they preserve volume in phase space. In other words, if we consider a region within the space of variables (z, r), then as this region evolves under the equations of Hamiltonian dynamics, its shape may change but its volume will not. This can be seen by noting that the ﬂow ﬁeld (rate of change of location in phase space) is given by V =  dz dτ , dr dτ  (11.61) and that the divergence of this ﬁeld vanishes div V =  i ∂ ∂zi dzi dτ + ∂ ∂ri dri dτ =  i −∂ ∂zi ∂H ∂ri + ∂ ∂ri ∂H ∂zi = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2862,"Now consider the joint distribution over phase space whose total energy is the Hamiltonian, i.e., the distribution given by p(z, r) = 1 ZH exp(−H(z, r)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2863,"Using the two results of conservation of volume and conservation of H, it follows that the Hamiltonian dynamics will leave p(z, r) invariant. This can be seen by considering a small region of phase space over which H is approximately constant.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2864,"If we follow the evolution of the Hamiltonian equations for a ﬁnite time, then the volume of this region will remain unchanged as will the value of H in this region, and hence the probability density, which is a function only of H, will also be unchanged.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,550,2865,"Although H is invariant, the values of z and r will vary, and so by integrating the Hamiltonian dynamics over a ﬁnite time duration it becomes possible to make large changes to z in a systematic way that avoids random walk behaviour.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,551,2866,"Evolution under the Hamiltonian dynamics will not, however, sample ergodi- cally from p(z, r) because the value of H is constant. In order to arrive at an ergodic sampling scheme, we can introduce additional moves in phase space that change the value of H while also leaving the distribution p(z, r) invariant. The simplest way to achieve this is to replace the value of r with one drawn from its distribution conditioned on z. This can be regarded as a Gibbs sampling step, and hence from \end{verbatim} egin{verbatim} Section 11.3 we see that this also leaves the desired distribution invariant. Noting that z and r are independent in the distribution p(z, r), we see that the conditional distribution p(r|z) is a Gaussian from which it is straightforward to sample.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,551,2867,"In a practical application of this approach, we have to address the problem of performing a numerical integration of the Hamiltonian equations. This will neces- sarily introduce numerical errors and so we should devise a scheme that minimizes the impact of such errors. In fact, it turns out that integration schemes can be devised for which Liouville’s theorem still holds exactly. This property will be important in the hybrid Monte Carlo algorithm, which is discussed in Section 11.5.2. One scheme for achieving this is called the leapfrog discretization and involves alternately updat- ing discrete-time approximations z and r to the position and momentum variables using ri(τ + ϵ/2) = ri(τ) −ϵ 2 ∂E ∂zi (z(τ)) (11.64) zi(τ + ϵ) = zi(τ) + ϵri(τ + ϵ/2) (11.65) ri(τ + ϵ) = ri(τ + ϵ/2) −ϵ 2 ∂E ∂zi (z(τ + ϵ)).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,551,2868,"We see that this takes the form of a half-step update of the momentum variables with step size ϵ/2, followed by a full-step update of the position variables with step size ϵ, followed by a second half-step update of the momentum variables. If several leapfrog steps are applied in succession, it can be seen that half-step updates to the momentum variables can be combined into full-step updates with step size ϵ. The successive updates to position and momentum variables then leapfrog over each other. In order to advance the dynamics by a time interval τ, we need to take τ/ϵ steps. The error involved in the discretized approximation to the continuous time dynamics will go to zero, assuming a smooth function E(z), in the limit ϵ →0. However, for a nonzero ϵ as used in practice, some residual error will remain. We shall see in Section 11.5.2 how the effects of such errors can be eliminated in the hybrid Monte Carlo algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,551,2869,"In summary then, the Hamiltonian dynamical approach involves alternating be- tween a series of leapfrog updates and a resampling of the momentum variables from their marginal distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,551,2870,"Note that the Hamiltonian dynamics method, unlike the basic Metropolis algo- rithm, is able to make use of information about the gradient of the log probability distribution as well as about the distribution itself. An analogous situation is familiar from the domain of function optimization. In most cases where gradient informa- tion is available, it is highly advantageous to make use of it. Informally, this follows from the fact that in a space of dimension D, the additional computational cost of evaluating a gradient compared with evaluating the function itself will typically be a ﬁxed factor independent of D, whereas the D-dimensional gradient vector conveys D pieces of information compared with the one piece of information given by the function itself.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,552,2871,"As we discussed in the previous section, for a nonzero step size ϵ, the discretiza- tion of the leapfrog algorithm will introduce errors into the integration of the Hamil- tonian dynamical equations. Hybrid Monte Carlo (Duane et al., 1987; Neal, 1996) combines Hamiltonian dynamics with the Metropolis algorithm and thereby removes any bias associated with the discretization.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,552,2872,"Speciﬁcally, the algorithm uses a Markov chain consisting of alternate stochastic updates of the momentum variable r and Hamiltonian dynamical updates using the leapfrog algorithm. After each application of the leapfrog algorithm, the resulting candidate state is accepted or rejected according to the Metropolis criterion based on the value of the Hamiltonian H. Thus if (z, r) is the initial state and (z⋆, r⋆) is the state after the leapfrog integration, then this candidate state is accepted with probability min (1, exp{H(z, r) −H(z⋆, r⋆)}) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,552,2873,"If the leapfrog integration were to simulate the Hamiltonian dynamics perfectly, then every such candidate step would automatically be accepted because the value of H would be unchanged. Due to numerical errors, the value of H may sometimes decrease, and we would like the Metropolis criterion to remove any bias due to this effect and ensure that the resulting samples are indeed drawn from the required dis- tribution. In order for this to be the case, we need to ensure that the update equations corresponding to the leapfrog integration satisfy detailed balance (11.40). This is easily achieved by modifying the leapfrog scheme as follows.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,552,2874,"Before the start of each leapfrog integration sequence, we choose at random, with equal probability, whether to integrate forwards in time (using step size ϵ) or backwards in time (using step size −ϵ). We ﬁrst note that the leapfrog integration scheme (11.64), (11.65), and (11.66) is time-reversible, so that integration for L steps using step size −ϵ will exactly undo the effect of integration for L steps using step size ϵ. Next we show that the leapfrog integration preserves phase-space volume exactly. This follows from the fact that each step in the leapfrog scheme updates either a zi variable or an ri variable by an amount that is a function only of the other variable. As shown in Figure 11.14, this has the effect of shearing a region of phase space while not altering its volume.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,552,2875,"Finally, we use these results to show that detailed balance holds. Consider a small region R of phase space that, under a sequence of L leapfrog iterations of step size ϵ, maps to a region R′. Using conservation of volume under the leapfrog iteration, we see that if R has volume δV then so too will R′. If we choose an initial point from the distribution (11.63) and then update it using L leapfrog interactions, the probability of the transition going from R to R′ is given by 1 ZH exp(−H(R))δV 1 2 min {1, exp(−H(R) + H(R′))} .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2876,"Figure 11.14 Each step of the leapfrog algorithm (11.64)–(11.66) modiﬁes either a position variable zi or a momentum variable ri. Because the change to one variable is a function only of the other, any region in phase space will be sheared without change of volume.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2877,"where the factor of 1/2 arises from the probability of choosing to integrate with a positive step size rather than a negative one. Similarly, the probability of starting in \end{verbatim} egin{verbatim} ri zi r′ i z′ i region R′ and integrating backwards in time to end up in region R is given by 1 ZH exp(−H(R′))δV 1 2 min {1, exp(−H(R′) + H(R))} .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2878,"It is easily seen that the two probabilities (11.68) and (11.69) are equal, and hence detailed balance holds. Note that this proof ignores any overlap between the regions R and R′ but is easily generalized to allow for such overlap.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2879,"It is not difﬁcult to construct examples for which the leapfrog algorithm returns to its starting position after a ﬁnite number of iterations. In such cases, the random replacement of the momentum values before each leapfrog integration will not be sufﬁcient to ensure ergodicity because the position variables will never be updated.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2880,"Such phenomena are easily avoided by choosing the magnitude of the step size at random from some small interval, before each leapfrog integration.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2881,"We can gain some insight into the behaviour of the hybrid Monte Carlo algo- rithm by considering its application to a multivariate Gaussian. For convenience, consider a Gaussian distribution p(z) with independent components, for which the Hamiltonian is given by H(z, r) = 1 2  i 1 σ2 i z2 i + 1 2  i r2 i .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,553,2882,Our conclusions will be equally valid for a Gaussian distribution having correlated components because the hybrid Monte Carlo algorithm exhibits rotational isotropy.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,554,2883,"During the leapfrog integration, each pair of phase-space variables zi, ri evolves in- dependently. However, the acceptance or rejection of the candidate point is based on the value of H, which depends on the values of all of the variables. Thus, a signiﬁcant integration error in any one of the variables could lead to a high prob- ability of rejection. In order that the discrete leapfrog integration be a reasonably \end{verbatim} egin{verbatim} 11. SAMPLING METHODS good approximation to the true continuous-time dynamics, it is necessary for the leapfrog integration scale ϵ to be smaller than the shortest length-scale over which the potential is varying signiﬁcantly. This is governed by the smallest value of σi, which we denote by σmin. Recall that the goal of the leapfrog integration in hybrid Monte Carlo is to move a substantial distance through phase space to a new state that is relatively independent of the initial state and still achieve a high probability of acceptance. In order to achieve this, the leapfrog integration must be continued for a number of iterations of order σmax/σmin.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,554,2884,"By contrast, consider the behaviour of a simple Metropolis algorithm with an isotropic Gaussian proposal distribution of variance s2, considered earlier. In order to avoid high rejection rates, the value of s must be of order σmin. The exploration of state space then proceeds by a random walk and takes of order (σmax/σmin)2 steps to arrive at a roughly independent state.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,554,2885,"As we have seen, most of the sampling algorithms considered in this chapter re- quire only the functional form of the probability distribution up to a multiplicative constant. Thus if we write pE(z) = 1 ZE exp(−E(z)) (11.71) then the value of the normalization constant ZE, also known as the partition func- tion, is not needed in order to draw samples from p(z). However, knowledge of the value of ZE can be useful for Bayesian model comparison since it represents the model evidence (i.e., the probability of the observed data given the model), and so it is of interest to consider how its value might be obtained. We assume that direct evaluation by summing, or integrating, the function exp(−E(z)) over the state space of z is intractable.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,554,2886,"For model comparison, it is actually the ratio of the partition functions for two models that is required. Multiplication of this ratio by the ratio of prior probabilities gives the ratio of posterior probabilities, which can then be used for model selection or model averaging.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2887,"One way to estimate a ratio of partition functions is to use importance sampling from a distribution with energy function G(z) ZE ZG =  z exp(−E(z))  z exp(−G(z)) =  z exp(−E(z) + G(z)) exp(−G(z))  z exp(−G(z)) = EG(z)[exp(−E + G)] ≃  l exp(−E(z(l)) + G(z(l))) (11.72) \end{verbatim} egin{verbatim} where {z(l)} are samples drawn from the distribution deﬁned by pG(z). If the dis- tribution pG is one for which the partition function can be evaluated analytically, for example a Gaussian, then the absolute value of ZE can be obtained.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2888,"This approach will only yield accurate results if the importance sampling distri- bution pG is closely matched to the distribution pE, so that the ratio pE/pG does not have wide variations. In practice, suitable analytically speciﬁed importance sampling distributions cannot readily be found for the kinds of complex models considered in this book.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2889,"An alternative approach is therefore to use the samples obtained from a Markov chain to deﬁne the importance-sampling distribution. If the transition probability for the Markov chain is given by T(z, z′), and the sample set is given by z(1), . . . , z(L), then the sampling distribution can be written as 1 ZG exp (−G(z)) = L  l=1 T(z(l), z) (11.73) which can be used directly in (11.72).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2890,"Methods for estimating the ratio of two partition functions require for their suc- cess that the two corresponding distributions be reasonably closely matched. This is especially problematic if we wish to ﬁnd the absolute value of the partition function for a complex distribution because it is only for relatively simple distributions that the partition function can be evaluated directly, and so attempting to estimate the ratio of partition functions directly is unlikely to be successful. This problem can be tackled using a technique known as chaining (Neal, 1993; Barber and Bishop, 1997), which involves introducing a succession of intermediate distributions p2, . . . , pM−1 that interpolate between a simple distribution p1(z) for which we can evaluate the normalization coefﬁcient Z1 and the desired complex distribution pM(z). We then have ZM Z1 = Z2 Z1 Z3 Z2 · · · ZM ZM−1 (11.74) in which the intermediate ratios can be determined using Monte Carlo methods as discussed above. One way to construct such a sequence of intermediate systems is to use an energy function containing a continuous parameter 0 ⩽α ⩽1 that interpolates between the two distributions Eα(z) = (1 −α)E1(z) + αEM(z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2891,"If the intermediate ratios in (11.74) are to be found using Monte Carlo, it may be more efﬁcient to use a single Markov chain run than to restart the Markov chain for each ratio. In this case, the Markov chain is run initially for the system p1 and then after some suitable number of steps moves on to the next distribution in the sequence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,555,2892,"Note, however, that the system must remain close to the equilibrium distribution at each stage.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2893,Show that the ﬁnite sample estimator f deﬁned by (11.2) has mean equal to E[f] and variance given by (11.3).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2894,"Suppose that z is a random variable with uniform distribution over (0, 1) and that we transform z using y = h−1(z) where h(y) is given by (11.6). Show that y has the distribution p(y).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2895,"(⋆) Given a random variable z that is uniformly distributed over (0, 1), ﬁnd a trans- formation y = f(z) such that y has a Cauchy distribution given by (11.8).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2896,"Suppose that z1 and z2 are uniformly distributed over the unit circle, as shown in Figure 11.3, and that we make the change of variables given by (11.10) and (11.11). Show that (y1, y2) will be distributed according to (11.12).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2897,"Let z be a D-dimensional random variable having a Gaussian distribu- tion with zero mean and unit covariance matrix, and suppose that the positive deﬁnite symmetric matrix Σ has the Cholesky decomposition Σ = LLT where L is a lower- triangular matrix (i.e., one with zeros above the leading diagonal). Show that the variable y = µ + Lz has a Gaussian distribution with mean µ and covariance Σ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2898,This provides a technique for generating samples from a general multivariate Gaus- sian using samples from a univariate Gaussian having zero mean and unit variance.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2899,"In this exercise, we show more carefully that rejection sampling does indeed draw samples from the desired distribution p(z). Suppose the proposal dis- tribution is q(z) and show that the probability of a sample value z being accepted is given by p(z)/kq(z) where p is any unnormalized distribution that is proportional to p(z), and the constant k is set to the smallest value that ensures kq(z) ⩾p(z) for all values of z. Note that the probability of drawing a value z is given by the probability of drawing that value from q(z) times the probability of accepting that value given that it has been drawn. Make use of this, along with the sum and product rules of probability, to write down the normalized form for the distribution over z, and show that it equals p(z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2900,"(⋆) Suppose that z has a uniform distribution over the interval [0, 1]. Show that the variable y = b tan z + c has a Cauchy distribution given by (11.16).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2901,Determine expressions for the coefﬁcients ki in the envelope distribution (11.17) for adaptive rejection sampling using the requirements of continuity and nor- malization.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2902,"By making use of the technique discussed in Section 11.1.1 for sampling from a single exponential distribution, devise an algorithm for sampling from the piecewise exponential distribution deﬁned by (11.17).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,556,2903,"(⋆) Show that the simple random walk over the integers deﬁned by (11.34), (11.35), and (11.36) has the property that E[(z(τ))2] = E[(z(τ−1))2] + 1/2 and hence by induction that E[(z(τ))2] = τ/2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2904,Figure 11.15 A probability distribution over two variables z1 and z2 that is uniform over the shaded regions and that is zero everywhere else.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2905,Figure 11.16 A graph involving an observed Gaussian variable x with prior distributions over its mean µ and precision τ.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2906,"Show that the Gibbs sampling algorithm, discussed in Section 11.3, satisﬁes detailed balance as deﬁned by (11.40).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2907,"(⋆) Consider the distribution shown in Figure 11.15. Discuss whether the standard Gibbs sampling procedure for this distribution is ergodic, and therefore whether it would sample correctly from this distribution 11.13 (⋆⋆) Consider the simple 3-node graph shown in Figure 11.16 in which the observed node x is given by a Gaussian distribution N(x|µ, τ −1) with mean µ and precision τ. Suppose that the marginal distributions over the mean and precision are given by N(µ|µ0, s0) and Gam(τ|a, b), where Gam(·|·, ·) denotes a gamma distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2908,"Write down expressions for the conditional distributions p(µ|x, τ) and p(τ|x, µ) that would be required in order to apply Gibbs sampling to the posterior distribution p(µ, τ|x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2909,"Verify that the over-relaxation update (11.50), in which zi has mean µi and variance σi, and where ν has zero mean and unit variance, gives a value z′ i with mean µi and variance σ2 i .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2910,"Using (11.56) and (11.57), show that the Hamiltonian equation (11.58) is equivalent to (11.53). Similarly, using (11.57) show that (11.59) is equivalent to (11.55).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,557,2911,"By making use of (11.56), (11.57), and (11.63), show that the conditional dis- tribution p(r|z) is a Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sampling Methods,11,558,2912,"Verify that the two probabilities (11.68) and (11.69) are equal, and hence that detailed balance holds for the hybrid Monte Carlo algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2913,Figure 12.1 A synthetic data sel obtained by taking one of the off-line digit images and creating multi- ple copies in each of which the digit has undergone a random displacement and rotation within some larger image field.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2914,"In Chapter 9, we discussed probabilistic models having discrete latent variables, such as the mixture of Gaussians. We now explore models in which some, or all, of the latent variables are continuous. An important motivation for such models is that many data sets have the property that the data points all lie close to a manifold of much lower dimensionality than that of the original data space. To see why this might arise, consider an artificial data set constructed by taking one of the off-line digits, represented by a 64 x 64 pixel grey-level image, and embedding it in a larger image of size 100 x 100 by padding with pixels having the value zero (corresponding to white pixels) in which the location and orientation of the digit is varied at random, as illustrated in Figure 12.1. Each of the resulting images is represented by a point in the 100 x 100 = 10, OOO-dimensional data space. However, across a data set of such images, there are only three degrees offreedom of variability, corresponding to the vertical and horizontal translations and the rotations. The data points will therefore live on a subspace of the data space whose intrinsic dimensionality is three. Note \end{verbatim} egin{verbatim} 12. CONTINUOUS LATENT VARIABLES The resulting images each have 100 )( 100 = 10.000 pixels.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2915,"that the manifold will be nonlinear because. for instance. if we translate the digit past a particular pixel, that pixel value will go from zero (white) 10 one (black) and back to zero again. which is clearly a nonlinear function of the digit position. In this example. !.he lranslation and rotation parameters are latent variables because we observe only the image vectors and are not told which values of the translation or rotation variables were used to create them.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2916,number of such degrees of freedom will be small compared to the dimensionality of Ihe data set.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2917,"Another example is provided by the oil flow data set. in which (for a given ge- ometrical configuration of the gas, WOller, and oil phases) there are only two degrees of freedom of variability corresponding to the fraction of oil in the pipe and the frac- tion of water (the fraction of gas Ihen being determined). Ahhough the data space comprises 12 measuremenlS, a data set of points will lie close to a Iwo-dimensional manifold embedded within this space. In this case, the manifold comprises scveral distinct segments corresponding to different flow regimes. each such segment being a (noisy) continuous two-dimensional manifold. If our goal is data compression. or density modelling, then there can be benefits in exploiling this manifold struclUre.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,560,2918,"Thc simplest continuous latent variable model assumes Gaussian distributions for both thc latent and observed variables and makes use of a linear,Gaussian de- SeCTion 8.1..J pendence of the observed variables on Ihe slate of the latent variables. This leads to a probabilislic fonnulation of the well-known technique of principal component analysis (PeA), as well as 10 a related model called factor analysis.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,561,2919,"and data v;,ualizatiOll (Jolliffe, 2(02). It;s also kno...."" as tile Karoan.n·I..,;"""" tran,· f~.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,562,2920,"To begin with, consider the projection onto a one-dimensional space (M = 1). We can define the direction of this space using a D-dimensional vector Ul, which for convenience (and without loss of generality) we shall choose to be a unit vector so that ufUl = 1 (note that we are only interested in the direction defined by Ul, not in the magnitude of Ul itself). Each data point X n is then projected onto a scalar value ufX n . The mean of the projected data is ufx where x is the sample set mean given by (12.1) and the variance of the projected data is given by where S is the data covariance matrix defined by 1 N S = - ""(xn - x)(xn - x)T NLJ .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,562,2921,"We now maximize the projected variance UfSUl with respect to Ul. Clearly, this has to be a constrained maximization to prevent Ilulll ..... 00. The appropriate constraint comes from the normalization condition ufUl = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,562,2922,"we introduce a Lagrange multiplier that we shall denote by AI, and then make an unconstrained maximization of (12.4) By setting the derivative with respect to Ul equal to zero, we see that this quantity will have a stationary point when (12.5) which says that Ul must be an eigenvector of S. If we left-multiply by uf and make use of ufUl = 1, we see that the variance is given by (12.6) and so the variance will be a maximum when we set Ul equal to the eigenvector having the largest eigenvalue AI. This eigenvector is known as the first principal component.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,563,2923,"To summarize, principal component analysis involves evaluating the mean x and the covariance matrix S of the data set and then finding the M eigenvectors of S corresponding to the M largest eigenvalues. Algorithms for finding eigenvectors and eigenvalues, as well as additional theorems related to eigenvector decomposition, can be found in Golub and Van Loan (1996). Note that the computational cost of computing the full eigenvector decomposition for a matrix of size D x Dis O(D3).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,563,2924,"If we plan to project our data onto the first M principal components, then we only need to find the first M eigenvalues and eigenvectors. This can be done with more efficient techniques, such as the power method (Golub and Van Loan, 1996), that scale like O(MD 2 ), or alternatively we can make use of the EM algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,564,2925,"Consider first of all the minimization with respect to the quantities {Zni}. Sub- stituting for Xn , setting the derivative with respect to Znj to zero, and making use of the orthonormality conditions, we obtain (12.12) where j = 1, ... ,M. Similarly, setting the derivative of J with respect to bi to zero, and again making use of the orthonormality relations, gives b -T j = X Uj (12.13) where j = M +1, ... ,D. If we substitute for Zni and bi , and make use of the general expansion (12.9), we obtain D X n - X n = L {(X n - x)Tud Ui i=M+l (12.14) from which we see that the displacement vector from X n to xn lies in the space orthogonal to the principal subspace, because it is a linear combination of {ud for i = M + 1, ... , D, as illustrated in Figure 12.2. This is to be expected because the projected points xn must lie within the principal subspace, but we can move them freely within that subspace, and so the minimum error is given by the orthogonal projection.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,564,2926,We therefore obtain an expression for the distortion measure J as a function purely of the {ud in the form 1 ~ ~ (T _T)2 D T J = N L L X n Ui - X Ui = L U i SUi.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,564,2927,"There remains the task of minimizing J with respect to the {Ui}, which must be a constrained minimization otherwise we will obtain the vacuous result Ui = O.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,565,2928,"For the case when the eigenvalues are equal, any choice of principal direction will give rise to the same value of J.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,565,2929,"The general solution to the minimization of J for arbitrary D and arbitrary M < D is obtained by choosing the {Ui} to be eigenvectors of the covariance matrix given by SUi = AiUi (12.17) where i = 1, ... ,D, and as usual the eigenvectors {Ui} are chosen to be orthonor- mal. The corresponding value of the distortion measure is then given by D J= L Ai i=M+l which is simply the sum of the eigenvalues of those eigenvectors that are orthogonal to the principal subspace. We therefore obtain the minimum value of J by selecting these eigenvectors to be those having the D - M smallest eigenvalues, and hence the eigenvectors defining the principal subspace are those corresponding to the M largest eigenvalues.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,565,2930,"Although we have considered M < D, the PCA analysis still holds if M = D, in which case there is no dimensionality reduction but simply a rotation of the coordinate axes to align with principal components.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,565,2931,"Finally, it is worth noting that there exists a closely related linear dimensionality reduction technique called canonical correlation analysis, or CCA (Hotelling, 1936; Bach and Jordan, 2002). Whereas PCA works with a single random variable, CCA considers two (or more) variables and tries to find a corresponding pair of linear subspaces that have high cross-correlation, so that each component within one of the subspaces is correlated with a single component from the other subspace. Its solution can be expressed in terms of a generalized eigenvector problem.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,568,2932,"Figure 12.6 Illustration of the effects of linear pre-processing applied to the Old Faithful data set. The plot on the left shows the original data. The centre plot shows the result of standardizing the individual variables to zero mean and unit variance. Also shown are the principal axes of this normalized data set, plotted over the range ±A~/2. The plot on the right shows the result of whitening of the data to give it zero mean and unit covariance.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,568,2933,This operation is known as whitening or sphereing the data and is illustrated for the Old Faithful data set in Figure 12.6.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,568,2934,"It is interesting to compare PCA with the Fisher linear discriminant which was discussed in Section 4.1.4. Both methods can be viewed as techniques for linear dimensionality reduction. However, PCA is unsupervised and depends only on the values X n whereas Fisher linear discriminant also uses class-label information. This difference is highlighted by the example in Figure 12.7.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,570,2935,"The formulation of PCA discussed in the previous section was based on a linear projection of the data onto a subspace of lower dimensionality than the original data space. We now show that PCA can also be expressed as the maximum likelihood solution of a probabilistic latent variable model. This reformulation of PCA, known as probabilistic peA, brings several advantages compared with conventional PCA: • Probabilistic PCA represents a constrained form of the Gaussian distribution in which the number of free parameters can be restricted while still allowing the model to capture the dominant correlations in a data set.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2936,• We can derive an EM algorithm for PCA that is computationally efficient in situations where only a few leading eigenvectors are required and that avoids having to evaluate the data covariance matrix as an intermediate step.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2937,• The combination of a probabilistic model and EM allows us to deal with miss- ing values in the data set.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2938,• Mixtures of probabilistic PCA models can be formulated in a principled way and trained using the EM algorithm.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2939,• Probabilistic PCA forms the basis for a Bayesian treatment of PCA in which the dimensionality of the principal subspace can be found automatically from the data.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2940,"• The existence of a likelihood function allows direct comparison with other probabilistic density models. By contrast, conventional PCA will assign a low reconstruction cost to data points that are close to the principal subspace even if they lie arbitrarily far from the training data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2941,• Probabilistic PCA can be used to model class-conditional densities and hence be applied to classification problems.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2942,• The probabilistic PCA model can be run generatively to provide samples from the distribution.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2943,"This formulation of PCA as a probabilistic model was proposed independently by Tipping and Bishop (1997, 1999b) and by Roweis (1998). As we shall see later, it is closely related to factor analysis (Basilevsky, 1994).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,571,2944,"Probabilistic PCA is a simple example of the linear-Gaussian framework, in which all of the marginal and conditional distributions are Gaussian. We can formu- late probabilistic PCA by first introducing an explicit latent variable z corresponding to the principal-component subspace. Next we define a Gaussian prior distribution p(z) over the latent variable, together with a Gaussian conditional distribution p(xlz) for the observed variable x conditioned on the value of the latent variable. Specifi- cally, the prior distribution over z is given by a zero-mean unit-covariance Gaussian p(z) = N(zIO, I).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,573,2945,This result can also be derived more directly by noting that the predictive distribution will be Gaussian and then evaluating its mean and covariance using (12.33). This gives IE[x] cov[x] IE[Wz + JL + E] = JL IE [(Wz + E)(WZ + E)T] IE [WZZTWT] + IE[EET] = WWT + 0-21 (12.37) (12.38) where we have used the fact that z and E are independent random variables and hence are uncorrelated.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,573,2946,"The predictive distribution p(x) is governed by the parameters JL, W, and 0-2 • However, there is redundancy in this parameterization corresponding to rotations of the latent space coordinates. To see this, consider a matrix W = WR where R is an orthogonal matrix. Using the orthogonality property RRT = I, we see that the quantity WWT that appears in the covariance matrix C takes the form (12.39) (12.41) and hence is independent of R. Thus there is a whole family of matrices W all of which give rise to the same predictive distribution. This invariance can be understood in terms of rotations within the latent space. We shall return to a discussion of the number of independent parameters in this model later.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,573,2947,"When we evaluate the predictive distribution, we require C- 1, which involves the inversion of a D x D matrix. The computation required to do this can be reduced by making use of the matrix inversion identity (C.7) to give C- 1 = 0-- 11 - 0--2WM- 1W T (12.40) where the M x M matrix M is defined by M = WTW + 0-21.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,573,2948,"Because we invert M rather than inverting C directly, the cost of evaluating C- 1 is reduced from O(D3 ) to O(M3 ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,573,2949,"As well as the predictive distribution p(x), we will also require the posterior distributionp(zlx), which can again be written down directly using the result (2.116) for linear-Gaussian models to give (12.42) Note that the posterior mean depends on x, whereas the posterior covariance is in- dependent of x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,574,2950,Figure 12.10 The probabilistic peA model for a data set of N obser- vations of x can be expressed as a directed graph in which each observation X n is associated with a value Zn of the latent variable.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,574,2951,"Furthermore, Tipping and Bishop (1999b) showed that the maximum of the like- lihood function is obtained when the M eigenvectors are chosen to be those whose eigenvalues are the M largest (all other solutions being saddle points). A similar re- sult was conjectured independently by Roweis (1998), although no proof was given.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,575,2952,"Because R is orthogonal, it can be interpreted as a rotation matrix in the M x M latent space. If we substitute the solution for W into the expression for C, and make use of the orthogonality property RRT = I, we see that C is independent of R.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,576,2953,"The rotational invariance in latent space represents a form of statistical noniden- tifiability, analogous to that encountered for mixture models in the case of discrete latent variables. Here there is a continuum of parameters all of which lead to the same predictive density, in contrast to the discrete nonidentifiability associated with component re-labelling in the mixture setting.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,576,2954,"If we consider the case of M = D, so that there is no reduction of dimension- ality, then U M = U and L M = L. Making use of the orthogonality properties UUT = I and RRT = I, we see that the covariance C of the marginal distribution for x becomes (12.47) and so we obtain the standard maximum likelihood solution for an unconstrained Gaussian distribution in which the covariance matrix is given by the sample covari- ance.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,576,2955,"Note that this takes the same form as the equations for regularized linear regression and is a consequence of maximizing the likelihood function for a linear Gaussian model. Similarly, the posterior covariance is given from (12.42) by 0-2M- 1 and is independent of x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,576,2956,"If we take the limit 0-2 ----t 0, then the posterior mean reduces to (12.50) which represents an orthogonal projection of the data point onto the latent space, and so we recover the standard PCA model. The posterior covariance in this limit is zero, however, and the density becomes singular. For 0-2 > 0, the latent projection is shifted towards the origin, relative to the orthogonal projection.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,577,2957,"Finally, we note that an important role for the probabilistic PCA model is in defining a multivariate Gaussian distribution in which the number of degrees of free- dom, in other words the number of independent parameters, can be controlled whilst still allowing the model to capture the dominant correlations in the data. Recall that a general Gaussian distribution has D(D + 1)/2 independent parameters in its covariance matrix (plus another D parameters in its mean). Thus the number of parameters scales quadratically with D and can become excessive in spaces of high \end{verbatim} egin{verbatim} 12.2. Probabilistic peA dimensionality. If we restrict the covariance matrix to be diagonal, then it has only D independent parameters, and so the number of parameters now grows linearly with dimensionality. However, it now treats the variables as if they were independent and hence can no longer express any correlations between them. Probabilistic PeA pro- vides an elegant compromise in which the M most significant correlations can be captured while still ensuring that the total number of parameters grows only linearly with D. We can see this by evaluating the number of degrees of freedom in the PPCA model as follows. The covariance matrix C depends on the parameters W, which has size D x M, and a 2 , giving a total parameter count of DM+ 1. However, we have seen that there is some redundancy in this parameterization associated with rotations of the coordinate system in the latent space. The orthogonal matrix R that expresses these rotations has size M x M. In the first column of this matrix there are M - 1 independent parameters, because the column vector must be normalized to unit length. In the second column there are M - 2 independent parameters, because the column must be normalized and also must be orthogonal to the previous column, and so on. Summing this arithmetic series, we see that R has a total of M(M -1)/2 independent parameters. Thus the number of degrees of freedom in the covariance matrix C is given by DM + 1 - M(M - 1)/2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,577,2958,"The number of independent parameters in this model therefore only grows linearly with D, for fixed M. If we take M = D - 1, then we recover the standard result for a full covariance Gaussian. In this case, the variance along D - 1 linearly in- dependent directions is controlled by the columns of W, and the variance along the remaining direction is given by a 2 . If M = 0, the model is equivalent to the isotropic covariance case.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,577,2959,"As we have seen, the probabilistic PCA model can be expressed in terms of a marginalization over a continuous latent space z in which for each data point X n , there is a corresponding latent variable Zn. We can therefore make use of the EM algorithm to find maximum likelihood estimates of the model parameters. This may seem rather pointless because we have already obtained an exact closed-form so- lution for the maximum likelihood parameter values. However, in spaces of high dimensionality, there may be computational advantages in using an iterative EM procedure rather than working directly with the sample covariance matrix. This EM procedure can also be extended to the factor analysis model, for which there is no closed-form solution. Finally, it allows missing data to be handled in a principled way.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,578,2960,The EM algorithm for probabilistic PCA proceeds by initializing the parameters and then alternately computing the sufficient statistics of the latent space posterior distribution using (12.54) and (12.55) in the E step and revising the parameter values using (12.56) and (12.57) in the M step.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2961,"One of the benefits of the EM algorithm for PCA is computational efficiency for large-scale applications (Roweis, 1998). Unlike conventional PCA based on an \end{verbatim} egin{verbatim} (12.58) 12.2. Probabilistic peA eigenvector decomposition of the sample covariance matrix, the EM approach is iterative and so might appear to be less attractive. However, each cycle of the EM algorithm can be computationally much more efficient than conventional PCA in spaces of high dimensionality. To see this, we note that the eigendecomposition of the covariance matrix requires O(D3 ) computation. Often we are interested only in the first M eigenvectors and their corresponding eigenvalues, in which case we can use algorithms that are 0 (MD 2 ). However, the evaluation of the covariance matrix itself takes 0 (ND 2 ) computations, where N is the number of data points.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2962,"Algorithms such as the snapshot method (Sirovich, 1987), which assume that the eigenvectors are linear combinations of the data vectors, avoid direct evaluation of the covariance matrix but are O(N3 ) and hence unsuited to large data sets. The EM algorithm described here also does not construct the covariance matrix explicitly.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2963,"Instead, the most computationally demanding steps are those involving sums over the data set that are 0 (NDM). For large D, and M « D, this can be a significant saving compared to 0 (ND 2 ) and can offset the iterative nature of the EM algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2964,"Note that this EM algorithm can be implemented in an on-line form in which each D-dimensional data point is read in and processed and then discarded before the next data point is considered. To see this, note that the quantities evaluated in the E step (an M-dimensional vector and an M x M matrix) can be computed for each data point separately, and in the M step we need to accumulate sums over data points, which we can do incrementally. This approach can be advantageous if both Nand D are large.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2965,"Because we now have a fully probabilistic model for PCA, we can deal with missing data, provided that it is missing at random, by marginalizing over the dis- tribution of the unobserved variables. Again these missing values can be treated using the EM algorithm. We give an example of the use of this approach for data visualization in Figure 12.11.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,579,2966,"Another elegant feature ofthe EM approach is that we can take the limit a 2 ----t 0, corresponding to standard PCA, and still obtain a valid EM-like algorithm (Roweis, 1998). From (12.55), we see that the only quantity we need to compute in the Estep is JE[zn]. Furthermore, the M step is simplifie~ because M = WTW. To emphasize the simplicity of the algorithm, let us define X to be a matrix of size N x D whose nth row is given by the vector X n - x and similarly define 0 to be a matrix of size D x M whose nth row is given by the vector JE[zn]. The Estep (12.54) of the EM algorithm for PCA then becomes o = (W~dWold)-lW~dX and the M step (12.56) takes the form W new = XTOT(OOT)-l.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,582,2967,Figure 12.13 Probabilistic graphical model for Bayesian peA in which the distribution over the parameter matrix W is governed by a vector a of hyperparameters.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,582,2968,"In this way, the Bayesian approach is automatically making the trade-off between improving the fit to the data, by using a larger number of vectors Wi with their cor- responding eigenvalues Ai each tuned to the data, and reducing the complexity of the model by suppressing some of the Wi vectors. The origins of this sparsity were discussed earlier in the context of relevance vector machines.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,583,2969,"= D - 1 then, if all ai values are finite, the model represents a full-covariance Gaussian, while if all the ai go to infinity the model is equivalent to an isotropic Gaussian, and so the model can encompass all pennissible values for the effective dimensionality of the principal subspace. It is also possible to consider smaller values of M, which will save on computational cost but which will limit the maximum dimensionality of the subspace. A comparison of the results of this algorithm with standard probabilistic PCA is shown in Figure 12.14.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,583,2970,"Bayesian PCA provides an opportunity to illustrate the Gibbs sampling algo- rithm discussed in Section 11.3. Figure 12.15 shows an example of the samples from the hyperparameters In ai for a data set in D = 4 dimensions in which the di- mensionality of the latent space is M = 3 but in which the data set is generated from a probabilistic PCA model having one direction of high variance, with the remaining directions comprising low variance noise. This result shows clearly the presence of three distinct modes in the posterior distribution. At each step of the iteration, one of the hyperparameters has a small value and the remaining two have large values, so that two of the three latent variables are suppressed. During the course of the Gibbs sampling, the solution makes sharp transitions between the three modes.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,583,2971,"The model described here involves a prior only over the matrix W. A fully Bayesian treatment of PCA, including priors over 1-"", a 2 , and n, and solved us- ing variational methods, is described in Bishop (1999b). For a discussion of vari- ous Bayesian approaches to detennining the appropriate dimensionality for a PCA model, see Minka (2001c).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,586,2972,"Another difference between probabilistic PCA and factor analysis concerns their different behaviour under transformations of the data set. For PCA and probabilis- tic PCA, if we rotate the coordinate system in data space, then we obtain exactly the same fit to the data but with the W matrix transformed by the corresponding rotation matrix. However, for factor analysis, the analogous property is that if we make a component-wise re-scaling of the data vectors, then this is absorbed into a corresponding re-scaling of the elements of \)i.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,586,2973,"Consider a data set {xn } of observations, where n = 1, ... , N, in a space of dimensionality D. In order to keep the notation uncluttered, we shall assume that we have already subtracted the sample mean from each of the vectors X n , so that Ln Xn = O. The first step is to express conventional PCA in such a form that the data vectors {xn } appear only in the form of the scalar products x~X m . Recall that the principal components are defined by the eigenvectors Ui of the covariance matrix SUi = AiUi (12.71) where i = 1, ... ,D. Here the D x D sample covariance matrix S is defined by (12.72) and the eigenvectors are normalized such that uT Ui = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,588,2974,We can find solutions for ai by solving the following eigenvalue problem (12.80) in which we have removed a factor of K from both sides of (12.79).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,588,2975,the solutions of (12.79) and (12.80) differ only by eigenvectors of K having zero eigenvalues that do not affect the principal components projection.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,588,2976,"In the original D-dimensional x space there are D orthogonal eigenvectors and hence we can find at most D linear principal components. The dimensionality M of the feature space, however, can be much larger than D (even infinite), and thus we can find a number of nonlinear principal components that can exceed D. Note, however, that the number of nonzero eigenvalues cannot exceed the number N of data points, because (even if M > N) the covariance matrix in feature space has rank at most equal to N. This is reflected in the fact that kernel PCA involves the eigenvector expansion of the N x N matrix K.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,590,2977,"Figure 12.11 E""llmple 01 kernel PCA, with a Gaussian kernel awIiOO 10a synthetic <lata sat in two <:Iirnensions, showing !he firsl flight eigenfunclions along w~h l!>eir e9tnvailNls.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,590,2978,"The oootours am lines along which !he projoc1ion onlo t"""" COffaspMding principal componen1ls co<>stam, Nola haw Ihe firsl two~ ....,..rat.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,591,2979,"In this chapter, we have focussed on the simplest class of models having continuous latent variables, namely those based on linear-Gaussian distributions. As well as having great practical importance, these models are relatively easy to analyse and to fit to data and can also be used as components in more complex models. Here we consider briefly some generalizations of this framework to models that are either nonlinear or non-Gaussian, or both.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,591,2980,"In fact, the issues of nonlinearity and non-Gaussianity are related because a general probability density can be obtained from a simple fixed reference density, such as a Gaussian, by making a nonlinear change of variables. This idea forms the basis of several practical latent variable models as we shall see shortly.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,591,2981,"We begin by considering models in which the observed variables are related linearly to the latent variables, but for which the latent distribution is non-Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,591,2982,"An important class of such models, known as independent component analysis, or leA, arises when we consider a distribution over the latent variables that factorizes, so that M p(z) = IIp(Zj).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,591,2983,"To understand the role of such models, consider a situation in which two people are talking at the same time, and we record their voices using two microphones.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2984,"This type of problem is sometimes addressed using the following approach (MacKay, 2003) in which we ignore the temporal nature of the signals and treat the successive samples as i.i.d. We consider a generative model in which there are two latent variables corresponding to the unobserved speech signal amplitudes, and there are two observed variables given by the signal values at the microphones. The latent variables have a joint distribution that factorizes as above, and the observed variables are given by a linear combination of the latent variables. There is no need to include a noise distribution because the number of latent variables equals the number of ob- served variables, and therefore the marginal distribution of the observed variables will not in general be singular, so the observed variables are simply deterministic linear combinations of the latent variables. Given a data set of observations, the \end{verbatim} egin{verbatim} 12. CONTINUOUS LATENT VARIABLES likelihood function for this model is a function of the coefficients in the linear com- bination. The log likelihood can be maximized using gradient-based optimization giving rise to a particular version of independent component analysis.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2985,"The success of this approach requires that the latent variables have non-Gaussian distributions. To see this, recall that in probabilistic PCA (and in factor analysis) the latent-space distribution is given by a zero-mean isotropic Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2986,"therefore cannot distinguish between two different choices for the latent variables where these differ simply by a rotation in latent space. This can be verified directly by noting that the marginal density (12.35), and hence the likelihood function, is unchanged if we make the transformation W -) WR where R is an orthogonal matrix satisfying RRT = I, because the matrix C given by (12.36) is itself invariant.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2987,"Extending the model to allow more general Gaussian latent distributions does not change this conclusion because, as we have seen, such a model is equivalent to the zero-mean isotropic Gaussian latent variable model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2988,"Another way to see why a Gaussian latent variable distribution in a linear model is insufficient to find independent components is to note that the principal compo- nents represent a rotation of the coordinate system in data space such as to diagonal- ize the covariance matrix, so that the data distribution in the new coordinates is then uncorrelated. Although zero correlation is a necessary condition for independence it is not, however, sufficient. In practice, a common choice for the latent-variable distribution is given by 1 p(z) = --,.-----,- J 7fcosh(zj) 1 (12.90) which has heavy tails compared to a Gaussian, reflecting the observation that many real-world distributions also exhibit this property.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2989,"The original ICA model (Bell and Sejnowski, 1995) was based on the optimiza- tion of an objective function defined by information maximization. One advantage of a probabilistic latent variable formulation is that it helps to motivate and formu- late generalizations of basic ICA. For instance, independent factor analysis (Attias, 1999a) considers a model in which the number of latent and observed variables can differ, the observed variables are noisy, and the individual latent variables have flex- ible distributions modelled by mixtures of Gaussians. The log likelihood for this model is maximized using EM, and the reconstruction of the latent variables is ap- proximated using a variational approach.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,592,2990,"Many other types of model have been considered, and there is now a huge literature on ICA and its applications (Jutten and Herault, 1991; Comon et at., 1991; Amari et at., 1996; Pearlmutter and Parra, 1997; Hyvarinen and Oja, 1997; Hinton et at., 2001; Miskin and MacKay, 2001; Hojen-Sorensen et at., 2002; Choudrey and Roberts, 2003; Chan et at., 2003; Stone, 2004).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2991,Figure 12.18 An autoassociative mUltilayer perceptron having two layers of weights. Such a network is trained to map input vectors onto themselves by minimiza- tion ot a sum-ot-squares error.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2992,"In Chapter 5 we considered neural networks in the context of supervised learn- ing, where the role of the network is to predict the output variables given values \end{verbatim} egin{verbatim} Even with non- linear units in the hidden layer, such a network is equivalent to linear principal component anal- ysis.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2993,Links representing bias parameters have been omitted for clarity.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2994,"However, neural networks have also been applied to un- supervised learning where they have been used for dimensionality reduction. This is achieved by using a network having the same number of outputs as inputs, and optimizing the weights so as to minimize some measure of the reconstruction error between inputs and outputs with respect to a set of training data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2995,"Consider first a multilayer perceptron of the form shown in Figure 12.18, hav- ing D inputs, D output units and M hidden units, with M < D. The targets used to train the network are simply the input vectors themselves, so that the network is attempting to map each input vector onto itself. Such a network is said to form an autoassociative mapping. Since the number of hidden units is smaller than the number of inputs, a perfect reconstruction of all input vectors is not in general pos- sible. We therefore determine the network parameters w by minimizing an error function which captures the degree of mismatch between the input vectors and their reconstructions. In particular, we shall choose a sum-of-squares error of the form 1 N E(w) = ""2 L Ily(xn , w) - xn 11 2 • n=l If the hidden units have linear activations functions, then it can be shown that the error function has a unique global minimum, and that at this minimum the network performs a projection onto the M -dimensional subspace which is spanned by the first M principal components of the data (Bourlard and Kamp, 1988; Baldi and Hornik, 1989). Thus, the vectors of weights which lead into the hidden units in Figure 12.18 form a basis set which spans the principal subspace. Note, however, that these vec- tors need not be orthogonal or normalized. This result is unsurprising, since both principal component analysis and the neural network are using linear dimensionality reduction and are minimizing the same sum-of-squares error function.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,593,2996,"It might be thought that the limitations of a linear dimensionality reduction could be overcome by using nonlinear (sigmoidal) activation functions for the hidden units in the network in Figure 12.18. However, even with nonlinear hidden units, the min- imum error solution is again given by the projection onto the principal component subspace (Bourlard and Kamp, 1988). There is therefore no advantage in using two- layer neural networks to perform dimensionality reduction. Standard techniques for principal component analysis (based on singular value decomposition) are guaran- teed to give the correct solution in finite time, and they also generate an ordered set of eigenvalues with corresponding orthonormal eigenvectors.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,594,2997,Figure 12.19 Addition of extra hidden lay- ers of noolinear units gives an auloassocialive network which can perform a noolinear dimen- siooality reduction.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,594,2998,"Figure 12.20 Geometrical interpretation of the mappings performed by the network in Figure 12.1 g for the case of 0 = 3 inputs and AI = 2 units in the middle hidden layer. The function F, maps from an M-dimensional space S into a D-dimensiooal space and therefore defines the way in which the space S is embedded within the original x-space. Since the mapping F, can be r""I()(llinear, the embedding 01 S can be nonplanar, as indicated in the figure. The mapping F. then defines a projectiorl of points in the original D-dimensional space into the M -dimensional subspace S.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,594,2999,"The situation is different, however. if additional hidden layers are pcrmillcd in the network. Consider the four-layer autoassociativc network shown in Figure 12.19.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,594,3000,"Again the output units are linear, and the M units in the second hidden layer can also be linear. however, the first and third hidden layers have sigmoidal nonlinear activa- tion functions. The network is again trained by minimization of the error function (12.91). We can view this network as two successive functional mappings F] and F 2 , as indicated in Figure 12.19. The first mapping F] projects the original D- dimensional data onto an AI-dimensional subspace S defined by the activations of the units in the second hidden layer. Because of the presence of the first hidden layer of nonlinear units. this mapping is very general. and in particular is not restricted to being linear. Similarly. the second half of the network defines an arbitrary functional mapping from the M -dimensional space back into the original D-dimensional input space. This has a simple geometrical interpretation. as indicated for the case D = 3 and M = 2 in Figure 12.20.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3001,"Such a network effectively perfonns a nonlinear principal component analysis. X3 "" F, • x, "" \end{verbatim} egin{verbatim} It has the advantage of not being limited to linear transformations, although it con- tains standard principal component analysis as a special case. However, training the network now involves a nonlinear optimization problem, since the error function (12.91) is no longer a quadratic function of the network parameters. Computation- ally intensive nonlinear optimization techniques must be used, and there is the risk of finding a suboptimal local minimum of the error function. Also, the dimensionality of the subspace must be specified before training the network.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3002,"As we have already noted, many natural sources of data correspond to low- dimensional, possibly noisy, nonlinear manifolds embedded within the higher di- mensional observed data space. Capturing this property explicitly can lead to im- proved density modelling compared with more general methods. Here we consider briefly a range of techniques that attempt to do this.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3003,"One way to model the nonlinear structure is through a combination of linear models, so that we make a piece-wise linear approximation to the manifold. This can be obtained, for instance, by using a clustering technique such as K -means based on Euclidean distance to partition the data set into local groups with standard PCA ap- plied to each group. A better approach is to use the reconstruction error for cluster assignment (Kambhatla and Leen, 1997; Hinton et al., 1997) as then a common cost function is being optimized in each stage. However, these approaches still suffer from limitations due to the absence of an overall density model. By using prob- abilistic PCA it is straightforward to define a fully probabilistic model simply by considering a mixture distribution in which the components are probabilistic PCA models (Tipping and Bishop, 1999a). Such a model has both discrete latent vari- ables, corresponding to the discrete mixture, as well as continuous latent variables, and the likelihood function can be maximized using the EM algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3004,"Bayesian treatment, based on variational inference (Bishop and Winn, 2000), allows the number of components in the mixture, as well as the effective dimensionalities of the individual models, to be inferred from the data. There are many variants of this model in which parameters such as the W matrix or the noise variances are tied across components in the mixture, or in which the isotropic noise distributions are replaced by diagonal ones, giving rise to a mixture of factor analysers (Ghahramani and Hinton, 1996a; Ghahramani and Beal, 2000). The mixture of probabilistic PCA models can also be extended hierarchically to produce an interactive data visualiza- tion algorithm (Bishop and Tipping, 1998).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3005,An alternative to considering a mixture of linear models is to consider a single nonlinear model. Recall that conventional PCA finds a linear subspace that passes close to the data in a least-squares sense.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,595,3006,"This concept can be extended to one- dimensional nonlinear surfaces in the form of principal curves (Hastie and Stuetzle, 1989). We can describe a curve in a D-dimensional data space using a vector-valued function f ().), which is a vector each of whose elements is a function of the scalar )..",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,596,3007,"There are many possible ways to parameterize the curve, of which a natural choice is the arc length along the curve. For any given point xin data space, we can find the point on the curve that is closest in Euclidean distance. We denote this point by \end{verbatim} egin{verbatim} 12. CONTINUOUS LATENT VARIABLES >.. = gf(X) because it depends on the particular curve f(>""). For a continuous data density p(x), a principal curve is defined as one for which every point on the curve is the mean of all those points in data space that project to it, so that JE [Xlgf(X) = >..] = f(>"").",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,596,3008,"For a given continuous density, there can be many principal curves. In practice, we are interested in finite data sets, and we also wish to restrict attention to smooth curves. Hastie and Stuetzle (1989) propose a two-stage iterative procedure for find- ing such principal curves, somewhat reminiscent of the EM algorithm for PCA. The curve is initialized using the first principal component, and then the algorithm alter- nates between a data projection step and curve re-estimation step. In the projection step, each data point is assigned to a value of >.. corresponding to the closest point on the curve. Then in the re-estimation step, each point on the curve is given by a weighted average of those points that project to nearby points on the curve, with points closest on the curve given the greatest weight. In the case where the subspace is constrained to be linear, the procedure converges to the first principal component and is equivalent to the power method for finding the largest eigenvector of the co- variance matrix. Principal curves can be generalized to multidimensional manifolds called principal surfaces although these have found limited use due to the difficulty of data smoothing in higher dimensions even for two-dimensional manifolds.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,596,3009,"PCA is often used to project a data set onto a lower-dimensional space, for ex- ample two dimensional, for the purposes of visualization. Another linear technique with a similar aim is multidimensional scaling, or MDS (Cox and Cox, 2000). It finds a low-dimensional projection of the data such as to preserve, as closely as possible, the pairwise distances between data points, and involves finding the eigenvectors of the distance matrix. In the case where the distances are Euclidean, it gives equivalent results to PCA. The MDS concept can be extended to a wide variety of data types specified in terms of a similarity matrix, giving nonmetric MDS.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,596,3010,"Two other nonprobabilistic methods for dimensionality reduction and data vi- sualization are worthy of mention. Locally linear embedding, or LLE (Roweis and Saul, 2000) first computes the set of coefficients that best reconstructs each data point from its neighbours. These coefficients are arranged to be invariant to rota- tions, translations, and scalings of that data point and its neighbours, and hence they characterize the local geometrical properties of the neighbourhood. LLE then maps the high-dimensional data points down to a lower dimensional space while preserv- ing these neighbourhood coefficients. If the local neighbourhood for a particular data point can be considered linear, then the transformation can be achieved using a combination of translation, rotation, and scaling, such as to preserve the angles formed between the data points and their neighbours. Because the weights are in- variant to these transformations, we expect the same weight values to reconstruct the data points in the low-dimensional space as in the high-dimensional data space. In spite of the nonlinearity, the optimization for LLE does not exhibit local minima.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,597,3011,"In isometric feature mapping, or isomap (Tenenbaum et ai., 2000), the goal is to project the data to a lower-dimensional space using MDS, but where the dissim- ilarities are defined in terms of the geodesic distances measured along the mani- \end{verbatim} egin{verbatim} Chapter 5 Chapter JJ fold. For instance, if two points lie on a circle, then the geodesic is the arc-length distance measured around the circumference of the circle not the straight line dis- tance measured along the chord connecting them. The algorithm first defines the neighbourhood for each data point, either by finding the K nearest neighbours or by finding all points within a sphere of radius E. A graph is then constructed by link- ing all neighbouring points and labelling them with their Euclidean distance. The geodesic distance between any pair of points is then approximated by the sum of the arc lengths along the shortest path connecting them (which itself is found using standard algorithms). Finally, metric MDS is applied to the geodesic distance matrix to find the low-dimensional projection.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,597,3012,"Our focus in this chapter has been on models for which the observed vari- ables are continuous. We can also consider models having continuous latent vari- ables together with discrete observed variables, giving rise to latent trait models (Bartholomew, 1987). In this case, the marginalization over the continuous latent variables, even for a linear relationship between latent and observed variables, can- not be performed analytically, and so more sophisticated techniques are required.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,597,3013,"Tipping (1999) uses variational inference in a model with a two-dimensional latent space, allowing a binary data set to be visualized analogously to the use of PCA to visualize continuous data. Note that this model is the dual of the Bayesian logistic regression problem discussed in Section 4.5. In the case of logistic regression we have N observations of the feature vector <l>n which are parameterized by a single parameter vector w, whereas in the latent space visualization model there is a single latent space variable x (analogous to <1» and N copies of the latent variable W n . A generalization of probabilistic latent variable models to general exponential family distributions is described in Collins et al. (2002).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,597,3014,"We have already noted that an arbitrary distribution can be formed by taking a Gaussian random variable and transforming it through a suitable nonlinearity. This is exploited in a general latent variable model called a density network (MacKay, 1995; MacKay and Gibbs, 1999) in which the nonlinear function is governed by a multilayered neural network. If the network has enough hidden units, it can approx- imate a given nonlinear function to any desired accuracy. The downside of having such a flexible model is that the marginalization over the latent variables, required in order to obtain the likelihood function, is no longer analytically tractable. Instead, the likelihood is approximated using Monte Carlo techniques by drawing samples from the Gaussian prior. The marginalization over the latent variables then becomes a simple sum with one term for each sample. However, because a large number of sample points may be required in order to give an accurate representation of the marginal, this procedure can be computationally costly.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,597,3015,"If we consider more restricted forms for the nonlinear function, and make an ap- propriate choice of the latent variable distribution, then we can construct a latent vari- able model that is both nonlinear and efficient to train. The generative topographic mapping, or GTM (Bishop et aI., 1996; Bishop et aI., 1997a; Bishop et aI., 1998b) uses a latent distribution that is defined by a finite regular grid of delta functions over the (typically two-dimensional) latent space. Marginalization over the latent space then simply involves summing over the contributions from each of the grid locations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,599,3016,"Because the manifold in GTM is defined as a continuous surface, not just at the prototype vectors as in the SOM, it is possible to compute the magnification factors corresponding to the local expansions and compressions of the manifold needed to fit the data set (Bishop et al., 1997b) as well as the directional curvatures of the manifold (Tino et al., 2001). These can be visualized along with the projected data and provide additional insight into the model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,599,3017,"In this exercise, we use proof by induction to show that the linear projection onto an M -dimensional subspace that maximizes the variance of the pro- jected data is defined by the M eigenvectors of the data covariance matrix S, given by (12.3), corresponding to the M largest eigenvalues. In Section 12.1, this result was proven for the case of M = 1. Now suppose the result holds for some general value of M and show that it consequently holds for dimensionality M + 1. To do this, first set the derivative of the variance of the projected data with respect to a vector UM+1 defining the new direction in data space equal to zero. This should be done subject to the constraints that UM+l be orthogonal to the existing vectors U1,"""" UM, and also that it be normalized to unit length. Use Lagrange multipli- Appendix E ers to enforce these constraints. Then make use of the orthonormality properties of the vectors U1,"""" UM to show that the new vector UM+1 is an eigenvector of S.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,599,3018,"Finally, show that the variance is maximized if the eigenvector is chosen to be the one corresponding to eigenvector AM+1 where the eigenvalues have been ordered in decreasing value.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,599,3019,"Show that the minimum value of the PCA distortion measure J given by (12.15) with respect to the Ui, subject to the orthonormality constraints (12.7), is obtained when the Ui are eigenvectors of the data covariance matrix S. To do this, introduce a matrix H of Lagrange multipliers, one for each constraint, so that the modified distortion measure, in matrix notation reads ] = Tr { UTSU}+ Tr { H(I - UTU)} (12.93) where Uis a m~trix of dimensio~D x (D - M) whose columns are gi:::..en b~ Ui.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3020,"Now minimize J with respect to U and show that the s~ution satisfies SU = UH. Clearly, one possible solution is that the columns of U are eigenvectors of S, in which case H is a diagonal matrix containing the corresponding eigenvalues. To obtain the general solution, show that H can be assumed to be a symmetr~ ma~ix, and by using its eigenvect£r expansion show that the general solution to SU =~UH gives the same value for J as the specific solution in which the columns of U are \end{verbatim} egin{verbatim} 12. CONTINUOUS LATENT VARIABLES the eigenvectors of S. Because these solutions are all equivalent, it is convenient to choose the eigenvector solution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3021,"Verify that the eigenvectors defined by (12.30) are normalized to unit length, assuming that the eigenvectors Vi have unit length.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3022,"Suppose we replace the zero-mean, unit-covariance latent space distri- bution (12.31) in the probabilistic PCA model by a general Gaussian distribution of the formN(zlm, ~). By redefining the parameters of the model, show that this leads to an identical model for the marginal distribution p(x) over the observed variables for any valid choice of m and ~.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3023,"Let x be a D-dimensional random variable having a Gaussian distribution given by N(xIJL, ~), and consider the M-dimensional random variable given by y = Ax + b where A is an M x D matrix. Show that y also has a Gaussian distribution, and find expressions for its mean and covariance. Discuss the form of this Gaussian distribution for M < D, for M = D, and for M > D.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3024,Draw a directed probabilistic graph for the probabilistic PCA model described in Section 12.2 in which the components of the observed variable x are shown explicitly as separate nodes. Hence verify that the probabilistic PCA model has the same independence structure as the naive Bayes model discussed in Sec- tion 8.2.2.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3025,"By making use of the results (2.270) and (2.271) for the mean and covariance of a general distribution, derive the result (12.35) for the marginal distribution p(x) in the probabilistic PCA model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3026,"(* *)Imm By making use of the result (2.116), show that the posterior distribution p(zlx) for the probabilistic PCA model is given by (12.42).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3027,Verify that maximizing the log likelihood (12.43) for the probabilistic PCA model with respect to the parameter JL gives the result JLML = x where x is the mean of the data vectors.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3028,"By evaluating the second derivatives of the log likelihood function (12.43) for the probabilistic PCA model with respect to the parameter JL, show that the stationary point JLML = x represents the unique maximum.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3029,"(* *)Imm Show that in the limit (Y2 -. 0, the posterior mean for the probabilistic PCA model becomes an orthogonal projection onto the principal subspace, as in conventional PCA.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,600,3030,For (Y2 > 0 show that the posterior mean in the probabilistic PCA model is shifted towards the origin relative to the orthogonal projection.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3031,"Show that the optimal reconstruction of a data point under probabilistic PCA, according to the least squares projection cost of conventional PCA, is given by (12.94) \end{verbatim} egin{verbatim} 12.14 (*) The number of independent parameters in the covariance matrix for the proba- bilistic PCA model with an M -dimensional latent space and a D-dimensional data space is given by (12.51). Verify that in the case of M = D - 1, the number of independent parameters is the same as in a general covariance Gaussian, whereas for M =°it is the same as for a Gaussian with an isotropic covariance.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3032,(**) IIiI!I Derive the M-step equations (12.56) and (12.57) for the probabilistic PCA model by maximization of the expected complete-data log likelihood function given by (12.53).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3033,"(* * *) In Figure 12.11, we showed an application of probabilistic PCA to a data set in which some of the data values were missing at random. Derive the EM algorithm for maximizing the likelihood function for the probabilistic PCA model in this situ- ation. Note that the {zn}, as well as the missing data values that are components of the vectors {xn }, are now latent variables. Show that in the special case in which all of the data values are observed, this reduces to the EM algorithm for probabilistic PCA derived in Section 12.2.2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3034,"Let W be a D x M matrix whose columns define a linear subspace of dimensionality M embedded within a data space of dimensionality D, and let J1 be a D-dimensional vector. Given a data set {xn } where n = 1, ... , N, we can approximate the data points using a linear mapping from a set of M -dimensional vectors {zn}, so that Xn is approximated by W Zn + J1. The associated sum-of- squares reconstruction cost is given by N J = L Ilxn - J1- Wzn 11 2 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3035,"First show that minimizing J with respect to J1leads to an analogous expression with X n and Zn replaced by zero-mean variables X n - x and Zn - Z, respectively, where x and Z denote sample means. Then show that minimizing J with respect to Zn, where W is kept fixed, gives rise to the PCA Estep (12.58), and that minimizing J with respect to W, where {zn} is kept fixed, gives rise to the PCA M step (12.59).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3036,Derive an expression for the number of independent parameters in the factor analysis model described in Section 12.2.4.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3037,Show that the factor analysis model described in Section 12.2.4 is invariant under rotations of the latent space coordinates.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3038,"By considering second derivatives, show that the only stationary point of the log likelihood function for the factor analysis model discussed in Section 12.2.4 with respect to the parameter J1 is given by the sample mean defined by (12.1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,601,3039,"Furthermore, show that this stationary point is a maximum. 12.21 (**) Derive the formulae (12.66) and (12.67) for the E step of the EM algorithm for factor analysis. Note that from the result of Exercise 12.20, the parameter J1 can be replaced by the sample mean x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3040,"(* *) Write down an expression for the expected complete-data log likelihood func- tion for the factor analysis model, and hence derive the corresponding M step equa- tions (12.69) and (12.70).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3041,"Draw a directed probabilistic graphical model representing a discrete mixture of probabilistic PCA models in which each PCA model has its own values of W, JL, and 0-2• Now draw a modified graph in which these parameter values are shared between the components of the mixture.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3042,"Finally, show that the form of the model is preserved in two cases: (i) A is a diagonal matrix and <P is a diagonal matrix. This corresponds to the case of factor analysis.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3043,"The transformed <P remains diagonal, and hence factor analysis is covariant under component-wise re-scaling of the data variables; (ii) A is orthogonal and <P is pro- portional to the unit matrix so that <P = 0-21. This corresponds to probabilistic PCA.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3044,"The transformed <P matrix remains proportional to the unit matrix, and hence proba- bilistic PCA is covariant under a rotation of the axes of data space, as is the case for conventional PCA.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,602,3045,"Show that any vector ai that satisfies (12.80) will also satisfy (12.79). Also, show that for any solution of (12.80) having eigenvalue A, we can add any multiple of an eigenvector of K having zero eigenvalue, and obtain a solution to (12.79) that also has eigenvalue A. Finally, show that such modifications do not affect the principal-component projection given by (12.82).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,603,3046,This shows that independence is a sufficient condition for two variables to be un- correlated.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Continuous Latent Variables,12,603,3047,"Now consider two variables Yl and Y2 in which -1 :0;; Yl :0;; 1 and Y2 = yg. Write down the conditional distribution p(Y2IYl) and observe that this is dependent on Yb showing that the two variables are not independent. Now show that the covariance matrix between these two variables is again diagonal. To do this, use the relation P(Yl, Y2) = P(YI )p(Y2IYl) to show that the off-diagonal terms are zero. This counter-example shows that zero correlation is not a sufficient condition for independence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,605,3048,"So far in this book, we have focussed primarily on sets of data points that were as- sumed to be independent and identically distributed (i.i.d.). This assumption allowed us to express the likelihood function as the product over all data points of the prob- ability distribution evaluated at each data point. For many applications, however, the i.i.d. assumption will be a poor one. Here we consider a particularly important class of such data sets, namely those that describe sequential data. These often arise through measurement of time series, for example the rainfall measurements on suc- cessive days at a particular location, or the daily values of a currency exchange rate, or the acoustic features at successive time frames used for speech recognition. An example involving speech data is shown in Figure 13.1. Sequential data can also arise in contexts other than time series, for example the sequence of nucleotide base pairs along a strand of DNA or the sequence of characters in an English sentence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,606,3049,Figure 13.1 Example of a spectro- gram of the spoken words “Bayes’ theo- rem” showing a plot of the intensity of the spectral coefﬁcients versus time index.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,606,3050,"For convenience, we shall sometimes refer to ‘past’ and ‘future’ observations in a sequence. However, the models explored in this chapter are equally applicable to all \end{verbatim} egin{verbatim} forms of sequential data, not just temporal sequences.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,606,3051,"It is useful to distinguish between stationary and nonstationary sequential dis- tributions. In the stationary case, the data evolves in time, but the distribution from which it is generated remains the same. For the more complex nonstationary situa- tion, the generative distribution itself is evolving with time. Here we shall focus on the stationary case.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3052,"Figure 13.2 The simplest approach to modelling a sequence of ob- servations is to treat them as independent, correspond- ing to a graph without links.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3053,"For many applications, such as ﬁnancial forecasting, we wish to be able to pre- dict the next value in a time series given observations of the previous values. In- tuitively, we expect that recent observations are likely to be more informative than more historical observations in predicting future values. The example in Figure 13.1 shows that successive observations of the speech spectrum are indeed highly cor- related. Furthermore, it would be impractical to consider a general dependence of future observations on all previous observations because the complexity of such a model would grow without limit as the number of observations increases. This leads us to consider Markov models in which we assume that future predictions are inde- \end{verbatim} egin{verbatim} x1 x2 x3 x4 pendent of all but the most recent observations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3054,"Although such models are tractable, they are also severely limited. We can ob- tain a more general framework, while still retaining tractability, by the introduction of latent variables, leading to state space models. As in Chapters 9 and 12, we shall see that complex models can thereby be constructed from simpler components (in particular, from distributions belonging to the exponential family) and can be read- ily characterized using the framework of probabilistic graphical models. Here we focus on the two most important examples of state space models, namely the hid- den Markov model, in which the latent variables are discrete, and linear dynamical systems, in which the latent variables are Gaussian. Both models are described by di- rected graphs having a tree structure (no loops) for which inference can be performed efﬁciently using the sum-product algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3055,"The easiest way to treat sequential data would be simply to ignore the sequential aspects and treat the observations as i.i.d., corresponding to the graph in Figure 13.2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3056,"Such an approach, however, would fail to exploit the sequential patterns in the data, such as correlations between observations that are close in the sequence. Suppose, for instance, that we observe a binary variable denoting whether on a particular day it rained or not. Given a time series of recent observations of this variable, we wish to predict whether it will rain on the next day. If we treat the data as i.i.d., then the only information we can glean from the data is the relative frequency of rainy days.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3057,"However, we know in practice that the weather often exhibits trends that may last for several days. Observing whether or not it rains today is therefore of signiﬁcant help in predicting if it will rain tomorrow.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3058,"To express such effects in a probabilistic model, we need to relax the i.i.d. as- sumption, and one of the simplest ways to do this is to consider a Markov model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,607,3059,"First of all we note that, without loss of generality, we can use the product rule to express the joint distribution for a sequence of observations in the form p(x1, . . . , xN) = N  n=1 p(xn|x1, . . . , xn−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3060,Figure 13.3 A ﬁrst-order Markov chain of ob- servations {xn} in which the dis- tribution p(xn|xn−1) of a particu- lar observation xn is conditioned on the value of the previous ob- servation xn−1.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3061,"Figure 13.4 A second-order Markov chain, in which the conditional distribution of a particular observation xn depends on the values of the two previous observations xn−1 and xn−2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3062,"If we now assume that each of the conditional distributions on the right-hand side is independent of all previous observations except the most recent, we obtain the ﬁrst-order Markov chain, which is depicted as a graphical model in Figure 13.3. The \end{verbatim} egin{verbatim} x1 x2 x3 x4 joint distribution for a sequence of N observations under this model is given by p(x1, . . . , xN) = p(x1) N  n=2 p(xn|xn−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3063,"From the d-separation property, we see that the conditional distribution for observa- tion xn, given all of the observations up to time n, is given by p(xn|x1, . . . , xn−1) = p(xn|xn−1) (13.3) which is easily veriﬁed by direct evaluation starting from (13.2) and using the prod- uct rule of probability. Thus if we use such a model to predict the next observation in a sequence, the distribution of predictions will depend only on the value of the im- mediately preceding observation and will be independent of all earlier observations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3064,"In most applications of such models, the conditional distributions p(xn|xn−1) that deﬁne the model will be constrained to be equal, corresponding to the assump- tion of a stationary time series. The model is then known as a homogeneous Markov chain. For instance, if the conditional distributions depend on adjustable parameters (whose values might be inferred from a set of training data), then all of the condi- tional distributions in the chain will share the same values of those parameters.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3065,"Although this is more general than the independence model, it is still very re- strictive. For many sequential observations, we anticipate that the trends in the data over several successive observations will provide important information in predict- ing the next value. One way to allow earlier observations to have an inﬂuence is to move to higher-order Markov chains. If we allow the predictions to depend also on the previous-but-one value, we obtain a second-order Markov chain, represented by the graph in Figure 13.4. The joint distribution is now given by p(x1, . . . , xN) = p(x1)p(x2|x1) N  n=3 p(xn|xn−1, xn−2).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,608,3066,"Again, using d-separation or by direct evaluation, we see that the conditional distri- bution of xn given xn−1 and xn−2 is independent of all observations x1, . . . xn−3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,609,3067,"Figure 13.5 We can represent sequen- tial data using a Markov chain of latent variables, with each observation condi- tioned on the state of the corresponding latent variable. This important graphical structure forms the foundation both for the hidden Markov model and for linear dy- namical systems.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,609,3068,"Each observation is now inﬂuenced by two previous observations. We can similarly consider extensions to an M th order Markov chain in which the conditional distri- bution for a particular variable depends on the previous M variables. However, we have paid a price for this increased ﬂexibility because the number of parameters in the model is now much larger. Suppose the observations are discrete variables hav- ing K states. Then the conditional distribution p(xn|xn−1) in a ﬁrst-order Markov chain will be speciﬁed by a set of K −1 parameters for each of the K states of xn−1 giving a total of K(K −1) parameters. Now suppose we extend the model to an M th order Markov chain, so that the joint distribution is built up from conditionals p(xn|xn−M, . . . , xn−1). If the variables are discrete, and if the conditional distri- butions are represented by general conditional probability tables, then the number of parameters in such a model will have KM−1(K −1) parameters. Because this grows exponentially with M, it will often render this approach impractical for larger values of M.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,609,3069,"For continuous variables, we can use linear-Gaussian conditional distributions in which each node has a Gaussian distribution whose mean is a linear function of its parents. This is known as an autoregressive or AR model (Box et al., 1994; Thiesson et al., 2004). An alternative approach is to use a parametric model for p(xn|xn−M, . . . , xn−1) such as a neural network.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,609,3070,"called a tapped delay line because it corresponds to storing (delaying) the previous M values of the observed variable in order to predict the next value. The number of parameters can then be much smaller than in a completely general model (for ex- ample it may grow linearly with M), although this is achieved at the expense of a restricted family of conditional distributions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,609,3071,"Suppose we wish to build a model for sequences that is not limited by the Markov assumption to any order and yet that can be speciﬁed using a limited number of free parameters. We can achieve this by introducing additional latent variables to permit a rich class of models to be constructed out of simple components, as we did with mixture distributions in Chapter 9 and with continuous latent variable models in Chapter 12. For each observation xn, we introduce a corresponding latent variable zn (which may be of different type or dimensionality to the observed variable). We now assume that it is the latent variables that form a Markov chain, giving rise to the graphical structure known as a state space model, which is shown in Figure 13.5. It satisﬁes the key conditional independence property that zn−1 and zn+1 are indepen- dent given zn, so that zn+1 ⊥⊥zn−1 | zn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,610,3072,"The joint distribution for this model is given by p(x1, . . . , xN, z1, . . . , zN) = p(z1) N  n=2 p(zn|zn−1) N  n=1 p(xn|zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,610,3073,"Using the d-separation criterion, we see that there is always a path connecting any two observed variables xn and xm via the latent variables, and that this path is never blocked. Thus the predictive distribution p(xn+1|x1, . . . , xn) for observation xn+1 given all previous observations does not exhibit any conditional independence prop- erties, and so our predictions for xn+1 depends on all previous observations. The observed variables, however, do not satisfy the Markov property at any order. We shall discuss how to evaluate the predictive distribution in later sections of this chap- ter.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,610,3074,"There are two important models for sequential data that are described by this graph. If the latent variables are discrete, then we obtain the hidden Markov model, or HMM (Elliott et al., 1995). Note that the observed variables in an HMM may be discrete or continuous, and a variety of different conditional distributions can be used to model them. If both the latent and the observed variables are Gaussian (with a linear-Gaussian dependence of the conditional distributions on their parents), then we obtain the linear dynamical system.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,610,3075,"The hidden Markov model can be viewed as a speciﬁc instance of the state space model of Figure 13.5 in which the latent variables are discrete. However, if we examine a single time slice of the model, we see that it corresponds to a mixture distribution, with component densities given by p(x|z). It can therefore also be interpreted as an extension of a mixture model in which the choice of mixture com- ponent for each observation is not selected independently but depends on the choice of component for the previous observation. The HMM is widely used in speech recognition (Jelinek, 1997; Rabiner and Juang, 1993), natural language modelling (Manning and Sch¨utze, 1999), on-line handwriting recognition (Nag et al., 1986), and for the analysis of biological sequences such as proteins and DNA (Krogh et al., 1994; Durbin et al., 1998; Baldi and Brunak, 2001).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3076,Figure 13.6 Transition diagram showing a model whose la- tent variables have three possible states corre- sponding to the three boxes. The black lines denote the elements of the transition matrix Ajk.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3077,"As in the case of a standard mixture model, the latent variables are the discrete multinomial variables zn describing which component of the mixture is responsible for generating the corresponding observation xn. Again, it is convenient to use a 1-of-K coding scheme, as used for mixture models in Chapter 9. We now allow the probability distribution of zn to depend on the state of the previous latent variable zn−1 through a conditional distribution p(zn|zn−1). Because the latent variables are K-dimensional binary variables, this conditional distribution corresponds to a table of numbers that we denote by A, the elements of which are known as transition probabilities. They are given by Ajk ≡p(znk = 1|zn−1,j = 1), and because they are probabilities, they satisfy 0 ⩽Ajk ⩽1 with  k Ajk = 1, so that the matrix A \end{verbatim} egin{verbatim} A12 A23 A31 A21 A32 A13 A11 A22 A33 k = 1 k = 2 k = 3 has K(K−1) independent parameters. We can then write the conditional distribution explicitly in the form p(zn|zn−1,A) = K  k=1 K  j=1 Azn−1,jznk jk .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3078,"The initial latent node z1 is special in that it does not have a parent node, and so it has a marginal distribution p(z1) represented by a vector of probabilities π with elements πk ≡p(z1k = 1), so that p(z1|π) = K  k=1 πz1k k (13.8) where  k πk = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3079,"The transition matrix is sometimes illustrated diagrammatically by drawing the states as nodes in a state transition diagram as shown in Figure 13.6 for the case of K = 3. Note that this does not represent a probabilistic graphical model, because the nodes are not separate variables but rather states of a single variable, and so we have shown the states as boxes rather than circles.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3080,"It is sometimes useful to take a state transition diagram, of the kind shown in Figure 13.6, and unfold it over time. This gives an alternative representation of the transitions between latent states, known as a lattice or trellis diagram, and which is shown for the case of the hidden Markov model in Figure 13.7.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,611,3081,"The speciﬁcation of the probabilistic model is completed by deﬁning the con- ditional distributions of the observed variables p(xn|zn, φ), where φ is a set of pa- rameters governing the distribution. These are known as emission probabilities, and might for example be given by Gaussians of the form (9.11) if the elements of x are continuous variables, or by conditional probability tables if x is discrete. Because xn is observed, the distribution p(xn|zn, φ) consists, for a given value of φ, of a vector of K numbers corresponding to the K possible states of the binary vector zn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3082,"Figure 13.7 If we unfold the state transition dia- gram of Figure 13.6 over time, we obtain a lattice, or trellis, representation of the latent states. Each column of this diagram corresponds to one of the latent variables zn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3083,"We can represent the emission probabilities in the form p(xn|zn, φ) = K  k=1 p(xn|φk)znk.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3084,"We shall focuss attention on homogeneous models for which all of the condi- tional distributions governing the latent variables share the same parameters A, and similarly all of the emission distributions share the same parameters φ (the extension to more general cases is straightforward). Note that a mixture model for an i.i.d. data set corresponds to the special case in which the parameters Ajk are the same for all values of j, so that the conditional distribution p(zn|zn−1) is independent of zn−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3085,This corresponds to deleting the horizontal links in the graphical model shown in Figure 13.5.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3086,"The joint probability distribution over both latent and observed variables is then given by p(X, Z|θ) = p(z1|π) N  n=2 p(zn|zn−1, A) N  m=1 p(xm|zm, φ) (13.10) where X = {x1, . . . , xN}, Z = {z1, . . . , zN}, and θ = {π, A, φ} denotes the set of parameters governing the model. Most of our discussion of the hidden Markov model will be independent of the particular choice of the emission probabilities.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,612,3087,"Indeed, the model is tractable for a wide range of emission distributions including discrete tables, Gaussians, and mixtures of Gaussians. It is also possible to exploit discriminative models such as neural networks. These can be used to model the emission density p(x|z) directly, or to provide a representation for p(z|x) that can be converted into the required emission density p(x|z) using Bayes’ theorem (Bishop et al., 2004).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,613,3088,"Figure 13.8 Illustration of sampling from a hidden Markov model having a 3-state latent variable z and a Gaussian emission model p(x|z) where x is 2-dimensional. (a) Contours of constant probability density for the emission distributions corresponding to each of the three states of the latent variable. (b) A sample of 50 points drawn from the hidden Markov model, colour coded according to the component that generated them and with lines connecting the successive observations. Here the transition matrix was ﬁxed so that in any state there is a 5% probability of making a transition to each of the other states, and consequently a 90% probability of remaining in the same state.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,613,3089,"We can gain a better understanding of the hidden Markov model by considering it from a generative point of view. Recall that to generate samples from a mixture of \end{verbatim} egin{verbatim} k = 1 k = 2 k = 3 0 0.5 1 0 0.5 1 0 0.5 1 0 0.5 1 Gaussians, we ﬁrst chose one of the components at random with probability given by the mixing coefﬁcients πk and then generate a sample vector x from the correspond- ing Gaussian component. This process is repeated N times to generate a data set of N independent samples. In the case of the hidden Markov model, this procedure is modiﬁed as follows. We ﬁrst choose the initial latent variable z1 with probabilities governed by the parameters πk and then sample the corresponding observation x1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,613,3090,"Now we choose the state of the variable z2 according to the transition probabilities p(z2|z1) using the already instantiated value of z1. Thus suppose that the sample for z1 corresponds to state j. Then we choose the state k of z2 with probabilities Ajk for k = 1, . . . , K. Once we know z2 we can draw a sample for x2 and also sample the next latent variable z3 and so on. This is an example of ancestral sampling for a directed graphical model. If, for instance, we have a model in which the diago- nal transition elements Akk are much larger than the off-diagonal elements, then a typical data sequence will have long runs of points generated from a single compo- nent, with infrequent transitions from one component to another. The generation of samples from a hidden Markov model is illustrated in Figure 13.8.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,614,3091,"Figure 13.9 Example of the state transition diagram for a 3-state left-to-right hidden Markov model. Note that once a state has been vacated, it cannot later be re-entered.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,614,3092,Figure 13.10 Lattice diagram for a 3-state left- to-right HMM in which the state index k is allowed to increase by at most 1 at each transition.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,614,3093,"There are many variants of the standard HMM model, obtained for instance by imposing constraints on the form of the transition matrix A (Rabiner, 1989). Here we mention one of particular practical importance called the left-to-right HMM, which is obtained by setting the elements Ajk of A to zero if k < j, as illustrated in the \end{verbatim} egin{verbatim} k = 1 k = 2 k = 3 A11 A22 A33 A12 A23 A13 state transition diagram for a 3-state HMM in Figure 13.9. Typically for such models the initial state probabilities for p(z1) are modiﬁed so that p(z11) = 1 and p(z1j) = 0 for j ̸= 1, in other words every sequence is constrained to start in state j = 1. The transition matrix may be further constrained to ensure that large changes in the state index do not occur, so that Ajk = 0 if k > j + ∆. This type of model is illustrated using a lattice diagram in Figure 13.10.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,614,3094,"Many applications of hidden Markov models, for example speech recognition, or on-line character recognition, make use of left-to-right architectures. As an illus- tration of the left-to-right hidden Markov model, we consider an example involving handwritten digits. This uses on-line data, meaning that each digit is represented by the trajectory of the pen as a function of time in the form of a sequence of pen coordinates, in contrast to the off-line digits data, discussed in Appendix A, which comprises static two-dimensional pixellated images of the ink. Examples of the on- line digits are shown in Figure 13.11. Here we train a hidden Markov model on a subset of data comprising 45 examples of the digit ‘2’. There are K = 16 states, each of which can generate a line segment of ﬁxed length having one of 16 possible angles, and so the emission distribution is simply a 16 × 16 table of probabilities associated with the allowed angle values for each state index value. Transition prob- abilities are all set to zero except for those that keep the state index k the same or that increment it by 1, and the model parameters are optimized using 25 iterations of EM. We can gain some insight into the resulting model by running it generatively, as shown in Figure 13.11.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,615,3095,Figure 13.11 Top row: examples of on-line handwritten digits. Bottom row: synthetic digits sam- pled generatively from a left-to-right hid- den Markov model that has been trained on a data set of 45 handwritten digits.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,615,3096,"One of the most powerful properties of hidden Markov models is their ability to exhibit some degree of invariance to local warping (compression and stretching) of the time axis. To understand this, consider the way in which the digit ‘2’ is written in the on-line handwritten digits example. A typical digit comprises two distinct sections joined at a cusp. The ﬁrst part of the digit, which starts at the top left, has a sweeping arc down to the cusp or loop at the bottom left, followed by a second more- or-less straight sweep ending at the bottom right. Natural variations in writing style will cause the relative sizes of the two sections to vary, and hence the location of the cusp or loop within the temporal sequence will vary. From a generative perspective such variations can be accommodated by the hidden Markov model through changes in the number of transitions to the same state versus the number of transitions to the successive state. Note, however, that if a digit ‘2’ is written in the reverse order, that is, starting at the bottom right and ending at the top left, then even though the pen tip coordinates may be identical to an example from the training set, the probability of the observations under the model will be extremely small. In the speech recognition context, warping of the time axis is associated with natural variations in the speed of speech, and again the hidden Markov model can accommodate such a distortion and not penalize it too heavily.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,615,3097,"If we have observed a data set X = {x1, . . . , xN}, we can determine the param- eters of an HMM using maximum likelihood. The likelihood function is obtained from the joint distribution (13.10) by marginalizing over the latent variables p(X|θ) =  Z p(X, Z|θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3098,"Because the joint distribution p(X, Z|θ) does not factorize over n (in contrast to the mixture distribution considered in Chapter 9), we cannot simply treat each of the summations over zn independently. Nor can we perform the summations explicitly because there are N variables to be summed over, each of which has K states, re- sulting in a total of KN terms. Thus the number of terms in the summation grows \end{verbatim} egin{verbatim} exponentially with the length of the chain. In fact, the summation in (13.11) cor- responds to summing over exponentially many paths through the lattice diagram in Figure 13.7.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3099,"We have already encountered a similar difﬁculty when we considered the infer- ence problem for the simple chain of variables in Figure 8.32. There we were able to make use of the conditional independence properties of the graph to re-order the summations in order to obtain an algorithm whose cost scales linearly, instead of exponentially, with the length of the chain. We shall apply a similar technique to the hidden Markov model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3100,"A further difﬁculty with the expression (13.11) for the likelihood function is that, because it corresponds to a generalization of a mixture distribution, it represents a summation over the emission models for different settings of the latent variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3101,"Direct maximization of the likelihood function will therefore lead to complex ex- pressions with no closed-form solutions, as was the case for simple mixture models (recall that a mixture model for i.i.d. data is a special case of the HMM).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3102,"We therefore turn to the expectation maximization algorithm to ﬁnd an efﬁcient framework for maximizing the likelihood function in hidden Markov models. The EM algorithm starts with some initial selection for the model parameters, which we denote by θold. In the E step, we take these parameter values and ﬁnd the posterior distribution of the latent variables p(Z|X, θold). We then use this posterior distri- bution to evaluate the expectation of the logarithm of the complete-data likelihood function, as a function of the parameters θ, to give the function Q(θ, θold) deﬁned by Q(θ, θold) =  Z p(Z|X, θold) ln p(X, Z|θ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3103,"At this point, it is convenient to introduce some notation. We shall use γ(zn) to denote the marginal posterior distribution of a latent variable zn, and ξ(zn−1, zn) to denote the joint posterior distribution of two successive latent variables, so that γ(zn) = p(zn|X, θold) (13.13) ξ(zn−1, zn) = p(zn−1, zn|X, θold).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,616,3104,"For each value of n, we can store γ(zn) using a set of K nonnegative numbers that sum to unity, and similarly we can store ξ(zn−1, zn) using a K × K matrix of nonnegative numbers that again sum to unity. We shall also use γ(znk) to denote the conditional probability of znk = 1, with a similar use of notation for ξ(zn−1,j, znk) and for other probabilistic variables introduced later. Because the expectation of a binary random variable is just the probability that it takes the value 1, we have γ(znk) = E[znk] =  z γ(z)znk (13.15) ξ(zn−1,j, znk) = E[zn−1,jznk] =  z γ(z)zn−1,jznk.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,617,3105,"If we substitute the joint distribution p(X, Z|θ) given by (13.10) into (13.12), \end{verbatim} egin{verbatim} and make use of the deﬁnitions of γ and ξ , we obtain Q(θ, θold) = K  k=1 γ(z1k) ln πk + N  n=2 K  j=1 K  k=1 ξ(zn−1,j, znk) ln Ajk + N  n=1 K  k=1 γ(znk) ln p(xn|φk).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,617,3106,"The goal of the E step will be to evaluate the quantities γ(zn) and ξ(zn−1, zn) efﬁ- ciently, and we shall discuss this in detail shortly.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,617,3107,"In the M step, we maximize Q(θ, θold) with respect to the parameters θ = {π, A, φ} in which we treat γ(zn) and ξ(zn−1, zn) as constant. Maximization with respect to π and A is easily achieved using appropriate Lagrange multipliers with the results πk = γ(z1k) K  j=1 γ(z1j) (13.18) Ajk = N  n=2 ξ(zn−1,j, znk) K  l=1 N  n=2 ξ(zn−1,j, znl) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,617,3108,"The EM algorithm must be initialized by choosing starting values for π and A, which should of course respect the summation constraints associated with their probabilis- tic interpretation. Note that any elements of π or A that are set to zero initially will remain zero in subsequent EM updates. A typical initialization procedure would involve selecting random starting values for these parameters subject to the summa- tion and non-negativity constraints. Note that no particular modiﬁcation to the EM results are required for the case of left-to-right models beyond choosing initial values for the elements Ajk in which the appropriate elements are set to zero, because these will remain zero throughout.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,618,3109,"To maximize Q(θ, θold) with respect to φk, we notice that only the ﬁnal term in (13.17) depends on φk, and furthermore this term has exactly the same form as the data-dependent term in the corresponding function for a standard mixture dis- tribution for i.i.d. data, as can be seen by comparison with (9.40) for the case of a Gaussian mixture. Here the quantities γ(znk) are playing the role of the responsibil- ities. If the parameters φk are independent for the different components, then this term decouples into a sum of terms one for each value of k, each of which can be maximized independently. We are then simply maximizing the weighted log likeli- hood function for the emission density p(x|φk) with weights γ(znk). Here we shall suppose that this maximization can be done efﬁciently. For instance, in the case of \end{verbatim} egin{verbatim} Gaussian emission densities we have p(x|φk) = N(x|µk, Σk), and maximization of the function Q(θ, θold) then gives µk = N  n=1 γ(znk)xn N  n=1 γ(znk) (13.20) Σk = N  n=1 γ(znk)(xn −µk)(xn −µk)T N  n=1 γ(znk) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,618,3110,"For the case of discrete multinomial observed variables, the conditional distribution of the observations takes the form p(x|z) = D  i=1 K  k=1 µxizk ik (13.22) and the corresponding M-step equations are given by µik = N  n=1 γ(znk)xni N  n=1 γ(znk) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,618,3111,"An analogous result holds for Bernoulli observed variables. The EM algorithm requires initial values for the parameters of the emission dis- tribution. One way to set these is ﬁrst to treat the data initially as i.i.d. and ﬁt the emission density by maximum likelihood, and then use the resulting values to ini- tialize the parameters for EM.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3112,"Next we seek an efﬁcient procedure for evaluating the quantities γ(znk) and ξ(zn−1,j, znk), corresponding to the E step of the EM algorithm. The graph for the hidden Markov model, shown in Figure 13.5, is a tree, and so we know that the posterior distribution of the latent variables can be obtained efﬁciently using a two- stage message passing algorithm. In the particular context of the hidden Markov model, this is known as the forward-backward algorithm (Rabiner, 1989), or the Baum-Welch algorithm (Baum, 1972). There are in fact several variants of the basic algorithm, all of which lead to the exact marginals, according to the precise form of \end{verbatim} egin{verbatim} the messages that are propagated along the chain (Jordan, 2007). We shall focus on the most widely used of these, known as the alpha-beta algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3113,"As well as being of great practical importance in its own right, the forward- backward algorithm provides us with a nice illustration of many of the concepts introduced in earlier chapters. We shall therefore begin in this section with a ‘con- ventional’ derivation of the forward-backward equations, making use of the sum and product rules of probability, and exploiting conditional independence properties which we shall obtain from the corresponding graphical model using d-separation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3114,"Then in Section 13.2.3, we shall see how the forward-backward algorithm can be obtained very simply as a speciﬁc example of the sum-product algorithm introduced in Section 8.4.4.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3115,"It is worth emphasizing that evaluation of the posterior distributions of the latent variables is independent of the form of the emission density p(x|z) or indeed of whether the observed variables are continuous or discrete. All we require is the values of the quantities p(xn|zn) for each value of zn for every n. Also, in this section and the next we shall omit the explicit dependence on the model parameters θold because these ﬁxed throughout.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3116,"We therefore begin by writing down the following conditional independence properties (Jordan, 2007) p(X|zn) = p(x1, . . . , xn|zn) p(xn+1, . . . , xN|zn) (13.24) p(x1, . . . , xn−1|xn, zn) = p(x1, . . . , xn−1|zn) (13.25) p(x1, . . . , xn−1|zn−1, zn) = p(x1, . . . , xn−1|zn−1) (13.26) p(xn+1, . . . , xN|zn, zn+1) = p(xn+1, . . . , xN|zn+1) (13.27) p(xn+2, . . . , xN|zn+1, xn+1) = p(xn+2, . . . , xN|zn+1) (13.28) p(X|zn−1, zn) = p(x1, . . . , xn−1|zn−1) p(xn|zn)p(xn+1, . . . , xN|zn) (13.29) p(xN+1|X, zN+1) = p(xN+1|zN+1) (13.30) p(zN+1|zN, X) = p(zN+1|zN) (13.31) where X = {x1, . . . , xN}. These relations are most easily proved using d-separation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3117,"For instance in the ﬁrst of these results, we note that every path from any one of the nodes x1, . . . , xn−1 to the node xn passes through the node zn, which is observed.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,619,3118,"Because all such paths are head-to-tail, it follows that the conditional independence property must hold. The reader should take a few moments to verify each of these properties in turn, as an exercise in the application of d-separation. These relations can also be proved directly, though with signiﬁcantly greater effort, from the joint distribution for the hidden Markov model using the sum and product rules of proba- bility.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,620,3119,"Let us begin by evaluating γ(znk). Recall that for a discrete multinomial ran- dom variable the expected value of one of its components is just the probability of that component having the value 1. Thus we are interested in ﬁnding the posterior distribution p(zn|x1, . . . , xN) of zn given the observed data set x1, . . . , xN. This \end{verbatim} egin{verbatim} represents a vector of length K whose entries correspond to the expected values of znk. Using Bayes’ theorem, we have γ(zn) = p(zn|X) = p(X|zn)p(zn) p(X) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,620,3120,"Note that the denominator p(X) is implicitly conditioned on the parameters θold of the HMM and hence represents the likelihood function. Using the conditional independence property (13.24), together with the product rule of probability, we obtain γ(zn) = p(x1, . . . , xn, zn)p(xn+1, . . . , xN|zn) p(X) = α(zn)β(zn) p(X) (13.33) where we have deﬁned α(zn) ≡ p(x1, . . . , xn, zn) (13.34) β(zn) ≡ p(xn+1, . . . , xN|zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,620,3121,"The quantity α(zn) represents the joint probability of observing all of the given data up to time n and the value of zn, whereas β(zn) represents the conditional probability of all future data from time n + 1 up to N given the value of zn. Again, α(zn) and β(zn) each represent set of K numbers, one for each of the possible settings of the 1-of-K coded binary vector zn. We shall use the notation α(znk) to denote the value of α(zn) when znk = 1, with an analogous interpretation of β(znk).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,620,3122,"We now derive recursion relations that allow α(zn) and β(zn) to be evaluated efﬁciently. Again, we shall make use of conditional independence properties, in particular (13.25) and (13.26), together with the sum and product rules, allowing us to express α(zn) in terms of α(zn−1) as follows α(zn) = p(x1, . . . , xn, zn) = p(x1, . . . , xn|zn)p(zn) = p(xn|zn)p(x1, . . . , xn−1|zn)p(zn) = p(xn|zn)p(x1, . . . , xn−1, zn) = p(xn|zn)  zn−1 p(x1, . . . , xn−1, zn−1, zn) = p(xn|zn)  zn−1 p(x1, . . . , xn−1, zn|zn−1)p(zn−1) = p(xn|zn)  zn−1 p(x1, . . . , xn−1|zn−1)p(zn|zn−1)p(zn−1) = p(xn|zn)  zn−1 p(x1, . . . , xn−1, zn−1)p(zn|zn−1) Making use of the deﬁnition (13.34) for α(zn), we then obtain α(zn) = p(xn|zn)  zn−1 α(zn−1)p(zn|zn−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,621,3123,"Figure 13.12 Illustration of the forward recursion (13.36) for evaluation of the α variables. In this fragment of the lattice, we see that the quantity α(zn1) is obtained by taking the elements α(zn−1,j) of α(zn−1) at step n−1 and summing them up with weights given by Aj1, corresponding to the val- ues of p(zn|zn−1), and then multiplying by the data contribution p(xn|zn1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,621,3124,"It is worth taking a moment to study this recursion relation in some detail. Note that there are K terms in the summation, and the right-hand side has to be evaluated for each of the K values of zn so each step of the α recursion has computational cost that scaled like O(K2). The forward recursion equation for α(zn) is illustrated using a lattice diagram in Figure 13.12.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,621,3125,"In order to start this recursion, we need an initial condition that is given by α(z1) = p(x1, z1) = p(z1)p(x1|z1) = K  k=1 {πkp(x1|φk)}z1k (13.37) which tells us that α(z1k), for k = 1, . . . , K, takes the value πkp(x1|φk). Starting at the ﬁrst node of the chain, we can then work along the chain and evaluate α(zn) for every latent node. Because each step of the recursion involves multiplying by a K × K matrix, the overall cost of evaluating these quantities for the whole chain is of O(K2N).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,621,3126,"We can similarly ﬁnd a recursion relation for the quantities β(zn) by making use of the conditional independence properties (13.27) and (13.28) giving β(zn) = p(xn+1, . . . , xN|zn) =  zn+1 p(xn+1, . . . , xN, zn+1|zn) =  zn+1 p(xn+1, . . . , xN|zn, zn+1)p(zn+1|zn) =  zn+1 p(xn+1, . . . , xN|zn+1)p(zn+1|zn) =  zn+1 p(xn+2, . . . , xN|zn+1)p(xn+1|zn+1)p(zn+1|zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3127,"Figure 13.13 Illustration of the backward recursion (13.38) for evaluation of the β variables. In this fragment of the lattice, we see that the quantity β(zn1) is obtained by taking the components β(zn+1,k) of β(zn+1) at step n + 1 and summing them up with weights given by the products of A1k, correspond- ing to the values of p(zn+1|zn) and the cor- responding values of the emission density p(xn|zn+1,k).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3128,"Making use of the deﬁnition (13.35) for β(zn), we then obtain β(zn) =  zn+1 β(zn+1)p(xn+1|zn+1)p(zn+1|zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3129,"Note that in this case we have a backward message passing algorithm that evaluates β(zn) in terms of β(zn+1). At each step, we absorb the effect of observation xn+1 through the emission probability p(xn+1|zn+1), multiply by the transition matrix p(zn+1|zn), and then marginalize out zn+1. This is illustrated in Figure 13.13.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3130,"Again we need a starting condition for the recursion, namely a value for β(zN). This can be obtained by setting n = N in (13.33) and replacing α(zN) with its deﬁnition (13.34) to give p(zN|X) = p(X, zN)β(zN) p(X) (13.39) which we see will be correct provided we take β(zN) = 1 for all settings of zN.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3131,"In the M step equations, the quantity p(X) will cancel out, as can be seen, for instance, in the M-step equation for µk given by (13.20), which takes the form µk = n  n=1 γ(znk)xn n  n=1 γ(znk) = n  n=1 α(znk)β(znk)xn n  n=1 α(znk)β(znk) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,622,3132,"However, the quantity p(X) represents the likelihood function whose value we typ- ically wish to monitor during the EM optimization, and so it is useful to be able to evaluate it. If we sum both sides of (13.33) over zn, and use the fact that the left-hand side is a normalized distribution, we obtain p(X) =  zn α(zn)β(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,623,3133,"Thus we can evaluate the likelihood function by computing this sum, for any conve- nient choice of n. For instance, if we only want to evaluate the likelihood function, then we can do this by running the α recursion from the start to the end of the chain, and then use this result for n = N, making use of the fact that β(zN) is a vector of 1s. In this case no β recursion is required, and we simply have p(X) =  zN α(zN).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,623,3134,"Let us take a moment to interpret this result for p(X). Recall that to compute the likelihood we should take the joint distribution p(X, Z) and sum over all possible values of Z. Each such value represents a particular choice of hidden state for every time step, in other words every term in the summation is a path through the lattice diagram, and recall that there are exponentially many such paths. By expressing the likelihood function in the form (13.42), we have reduced the computational cost from being exponential in the length of the chain to being linear by swapping the order of the summation and multiplications, so that at each time step n we sum the contributions from all paths passing through each of the states znk to give the intermediate quantities α(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,623,3135,"Next we consider the evaluation of the quantities ξ(zn−1, zn), which correspond to the values of the conditional probabilities p(zn−1, zn|X) for each of the K × K settings for (zn−1, zn). Using the deﬁnition of ξ(zn−1, zn), and applying Bayes’ theorem, we have ξ(zn−1, zn) = p(zn−1, zn|X) = p(X|zn−1, zn)p(zn−1, zn) p(X) = p(x1, . . . , xn−1|zn−1)p(xn|zn)p(xn+1, . . . , xN|zn)p(zn|zn−1)p(zn−1) p(X) = α(zn−1)p(xn|zn)p(zn|zn−1)β(zn) p(X) (13.43) where we have made use of the conditional independence property (13.29) together with the deﬁnitions of α(zn) and β(zn) given by (13.34) and (13.35). Thus we can calculate the ξ(zn−1, zn) directly by using the results of the α and β recursions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,623,3136,"Let us summarize the steps required to train a hidden Markov model using the EM algorithm. We ﬁrst make an initial selection of the parameters θold where θ ≡(π, A, φ). The A and π parameters are often initialized either uniformly or randomly from a uniform distribution (respecting their non-negativity and summa- tion constraints). Initialization of the parameters φ will depend on the form of the distribution. For instance in the case of Gaussians, the parameters µk might be ini- tialized by applying the K-means algorithm to the data, and Σk might be initialized to the covariance matrix of the corresponding K means cluster. Then we run both the forward α recursion and the backward β recursion and use the results to evaluate γ(zn) and ξ(zn−1, zn). At this stage, we can also evaluate the likelihood function.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,624,3137,"This completes the E step, and we use the results to ﬁnd a revised set of parameters θnew using the M-step equations from Section 13.2.1. We then continue to alternate between E and M steps until some convergence criterion is satisﬁed, for instance when the change in the likelihood function is below some threshold.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,624,3138,"Note that in these recursion relations the observations enter through conditional distributions of the form p(xn|zn). The recursions are therefore independent of the type or dimensionality of the observed variables or the form of this conditional distribution, so long as its value can be computed for each of the K possible states of zn. Since the observed variables {xn} are ﬁxed, the quantities p(xn|zn) can be pre-computed as functions of zn at the start of the EM algorithm, and remain ﬁxed throughout.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,624,3139,"We have seen in earlier chapters that the maximum likelihood approach is most effective when the number of data points is large in relation to the number of parame- ters. Here we note that a hidden Markov model can be trained effectively, using max- imum likelihood, provided the training sequence is sufﬁciently long. Alternatively, we can make use of multiple shorter sequences, which requires a straightforward modiﬁcation of the hidden Markov model EM algorithm. In the case of left-to-right models, this is particularly important because, in a given observation sequence, a given state transition corresponding to a nondiagonal element of A will seen at most once.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,624,3140,"Another quantity of interest is the predictive distribution, in which the observed data is X = {x1, . . . , xN} and we wish to predict xN+1, which would be important for real-time applications such as ﬁnancial forecasting. Again we make use of the sum and product rules together with the conditional independence properties (13.29) and (13.31) giving p(xN+1|X) =  zN+1 p(xN+1, zN+1|X) =  zN+1 p(xN+1|zN+1)p(zN+1|X) =  zN+1 p(xN+1|zN+1)  zN p(zN+1, zN|X) =  zN+1 p(xN+1|zN+1)  zN p(zN+1|zN)p(zN|X) =  zN+1 p(xN+1|zN+1)  zN p(zN+1|zN)p(zN, X) p(X) = 1 p(X)  zN+1 p(xN+1|zN+1)  zN p(zN+1|zN)α(zN) (13.44) which can be evaluated by ﬁrst running a forward α recursion and then computing the ﬁnal summations over zN and zN+1. The result of the ﬁrst summation over zN can be stored and used once the value of xN+1 is observed in order to run the α recursion forward to the next step in order to predict the subsequent value xN+2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,625,3141,Figure 13.14 A fragment of the fac- tor graph representation for the hidden Markov model.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,625,3142,"Note that in (13.44), the inﬂuence of all data from x1 to xN is summarized in the K values of α(zN). Thus the predictive distribution can be carried forward indeﬁnitely using a ﬁxed amount of storage, as may be required for real-time applications.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,625,3143,"Here we have discussed the estimation of the parameters of an HMM using max- imum likelihood. This framework is easily extended to regularized maximum likeli- hood by introducing priors over the model parameters π, A and φ whose values are then estimated by maximizing their posterior probability. This can again be done us- ing the EM algorithm in which the E step is the same as discussed above, and the M step involves adding the log of the prior distribution p(θ) to the function Q(θ, θold) before maximization and represents a straightforward application of the techniques developed at various points in this book. Furthermore, we can use variational meth- ods to give a fully Bayesian treatment of the HMM in which we marginalize over the parameter distributions (MacKay, 1997). As with maximum likelihood, this leads to a two-pass forward-backward recursion to compute posterior probabilities.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,625,3144,"The directed graph that represents the hidden Markov model, shown in Fig- ure 13.5, is a tree and so we can solve the problem of ﬁnding local marginals for the hidden variables using the sum-product algorithm. Not surprisingly, this turns out to be equivalent to the forward-backward algorithm considered in the previous section, and so the sum-product algorithm therefore provides us with a simple way to derive the alpha-beta recursion formulae.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,625,3145,"We begin by transforming the directed graph of Figure 13.5 into a factor graph, of which a representative fragment is shown in Figure 13.14. This form of the fac- tor graph shows all variables, both latent and observed, explicitly. However, for the purpose of solving the inference problem, we shall always be conditioning on the variables x1, . . . , xN, and so we can simplify the factor graph by absorbing the emission probabilities into the transition probability factors. This leads to the sim- pliﬁed factor graph representation in Figure 13.15, in which the factors are given by h(z1) = p(z1)p(x1|z1) (13.45) fn(zn−1, zn) = p(zn|zn−1)p(xn|zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,626,3146,Figure 13.15 A simpliﬁed form of fac- tor graph to describe the hidden Markov model.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,626,3147,"To derive the alpha-beta algorithm, we denote the ﬁnal hidden variable zN as the root node, and ﬁrst pass messages from the leaf node h to the root. From the general results (8.66) and (8.69) for message propagation, we see that the messages which are propagated in the hidden Markov model take the form µzn−1→fn(zn−1) = µfn−1→zn−1(zn−1) (13.47) µfn→zn(zn) =  zn−1 fn(zn−1, zn)µzn−1→fn(zn−1) (13.48) These equations represent the propagation of messages forward along the chain and are equivalent to the alpha recursions derived in the previous section, as we shall now show. Note that because the variable nodes zn have only two neighbours, they perform no computation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,626,3148,"We can eliminate µzn−1→fn(zn−1) from (13.48) using (13.47) to give a recur- sion for the f →z messages of the form µfn→zn(zn) =  zn−1 fn(zn−1, zn)µfn−1→zn−1(zn−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,626,3149,"If we now recall the deﬁnition (13.46), and if we deﬁne α(zn) = µfn→zn(zn) (13.50) then we obtain the alpha recursion given by (13.36). We also need to verify that the quantities α(zn) are themselves equivalent to those deﬁned previously. This is easily done by using the initial condition (8.71) and noting that α(z1) is given by h(z1) = p(z1)p(x1|z1) which is identical to (13.37). Because the initial α is the same, and because they are iteratively computed using the same equation, all subsequent α quantities must be the same.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3150,"Next we consider the messages that are propagated from the root node back to the leaf node. These take the form µfn+1→fn(zn) =  zn+1 fn+1(zn, zn+1)µfn+2→fn+1(zn+1) (13.51) where, as before, we have eliminated the messages of the type z →f since the variable nodes perform no computation. Using the deﬁnition (13.46) to substitute for fn+1(zn, zn+1), and deﬁning β(zn) = µfn+1→zn(zn) (13.52) \end{verbatim} egin{verbatim} we obtain the beta recursion given by (13.38). Again, we can verify that the beta variables themselves are equivalent by noting that (8.70) implies that the initial mes- sage send by the root variable node is µzN→fN (zN) = 1, which is identical to the initialization of β(zN) given in Section 13.2.2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3151,"The sum-product algorithm also speciﬁes how to evaluate the marginals once all the messages have been evaluated. In particular, the result (8.63) shows that the local marginal at the node zn is given by the product of the incoming messages. Because we have conditioned on the variables X = {x1, . . . , xN}, we are computing the joint distribution p(zn, X) = µfn→zn(zn)µfn+1→zn(zn) = α(zn)β(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3152,"Dividing both sides by p(X), we then obtain γ(zn) = p(zn, X) p(X) = α(zn)β(zn) p(X) (13.54) in agreement with (13.33). The result (13.43) can similarly be derived from (8.72).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3153,"There is an important issue that must be addressed before we can make use of the forward backward algorithm in practice. From the recursion relation (13.36), we note that at each step the new value α(zn) is obtained from the previous value α(zn−1) by multiplying by quantities p(zn|zn−1) and p(xn|zn). Because these probabilities are often signiﬁcantly less than unity, as we work our way forward along the chain, the values of α(zn) can go to zero exponentially quickly. For moderate lengths of chain (say 100 or so), the calculation of the α(zn) will soon exceed the dynamic range of the computer, even if double precision ﬂoating point is used.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3154,"In the case of i.i.d. data, we implicitly circumvented this problem with the eval- uation of likelihood functions by taking logarithms. Unfortunately, this will not help here because we are forming sums of products of small numbers (we are in fact im- plicitly summing over all possible paths through the lattice diagram of Figure 13.7).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3155,"We therefore work with re-scaled versions of α(zn) and β(zn) whose values remain of order unity. As we shall see, the corresponding scaling factors cancel out when we use these re-scaled quantities in the EM algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,627,3156,"In (13.34), we deﬁned α(zn) = p(x1, . . . , xn, zn) representing the joint distri- bution of all the observations up to xn and the latent variable zn. Now we deﬁne a normalized version of α given by α(zn) = p(zn|x1, . . . , xn) = α(zn) p(x1, . . . , xn) (13.55) which we expect to be well behaved numerically because it is a probability distribu- tion over K variables for any value of n. In order to relate the scaled and original al- pha variables, we introduce scaling factors deﬁned by conditional distributions over the observed variables cn = p(xn|x1, . . . , xn−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3157,"From the product rule, we then have p(x1, . . . , xn) = n  m=1 cm (13.57) and so α(zn) = p(zn|x1, . . . , xn)p(x1, . . . , xn) =  n  m=1 cm  α(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3158,We can then turn the recursion equation (13.36) for α into one for α given by cnα(zn) = p(xn|zn)  zn−1 α(zn−1)p(zn|zn−1).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3159,"Note that at each stage of the forward message passing phase, used to evaluate α(zn), we have to evaluate and store cn, which is easily done because it is the coefﬁcient that normalizes the right-hand side of (13.59) to give α(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3160,"We can similarly deﬁne re-scaled variables β(zn) using β(zn) =  N  m=n+1 cm  β(zn) (13.60) which will again remain within machine precision because, from (13.35), the quan- tities β(zn) are simply the ratio of two conditional probabilities β(zn) = p(xn+1, . . . , xN|zn) p(xn+1, . . . , xN|x1, . . . , xn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3161,The recursion result (13.38) for β then gives the following recursion for the re-scaled variables cn+1β(zn) =  zn+1 β(zn+1)p(xn+1|zn+1)p(zn+1|zn).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3162,"In applying this recursion relation, we make use of the scaling factors cn that were previously computed in the α phase.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3163,"From (13.57), we see that the likelihood function can be found using p(X) = N  n=1 cn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,628,3164,"Similarly, using (13.33) and (13.43), together with (13.63), we see that the required marginals are given by γ(zn) = α(zn)β(zn) (13.64) ξ(zn−1, zn) = cnα(zn−1)p(xn|zn)p(zn|z−1)β(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3165,"Finally, we note that there is an alternative formulation of the forward-backward algorithm (Jordan, 2007) in which the backward pass is deﬁned by a recursion based the quantities γ(zn) = α(zn)β(zn) instead of using β(zn). This α–γ recursion requires that the forward pass be completed ﬁrst so that all the quantities α(zn) are available for the backward pass, whereas the forward and backward passes of the α–β algorithm can be done independently. Although these two algorithms have comparable computational cost, the α–β version is the most commonly encountered one in the case of hidden Markov models, whereas for linear dynamical systems a recursion analogous to the α–γ form is more usual.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3166,"In many applications of hidden Markov models, the latent variables have some meaningful interpretation, and so it is often of interest to ﬁnd the most probable sequence of hidden states for a given observation sequence. For instance in speech recognition, we might wish to ﬁnd the most probable phoneme sequence for a given series of acoustic observations. Because the graph for the hidden Markov model is a directed tree, this problem can be solved exactly using the max-sum algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3167,"We recall from our discussion in Section 8.4.5 that the problem of ﬁnding the most probable sequence of latent states is not the same as that of ﬁnding the set of states that are individually the most probable. The latter problem can be solved by ﬁrst running the forward-backward (sum-product) algorithm to ﬁnd the latent variable marginals γ(zn) and then maximizing each of these individually (Duda et al., 2001).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3168,"However, the set of such states will not, in general, correspond to the most probable sequence of states. In fact, this set of states might even represent a sequence having zero probability, if it so happens that two successive states, which in isolation are individually the most probable, are such that the transition matrix element connecting them is zero.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3169,"In practice, we are usually interested in ﬁnding the most probable sequence of states, and this can be solved efﬁciently using the max-sum algorithm, which in the context of hidden Markov models is known as the Viterbi algorithm (Viterbi, 1967).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3170,Note that the max-sum algorithm works with log probabilities and so there is no need to use re-scaled variables as was done with the forward-backward algorithm.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,629,3171,"Figure 13.16 shows a fragment of the hidden Markov model expanded as lattice diagram. As we have already noted, the number of possible paths through the lattice grows exponentially with the length of the chain. The Viterbi algorithm searches this space of paths efﬁciently to ﬁnd the most probable path with a computational cost that grows only linearly with the length of the chain.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3172,"Figure 13.16 A fragment of the HMM lattice showing two possible paths. The Viterbi algorithm efﬁciently determines the most probable path from amongst the exponentially many possibilities. For any given path, the corresponding probability is given by the product of the elements of the tran- sition matrix Ajk, corresponding to the probabil- ities p(zn+1|zn) for each segment of the path, along with the emission densities p(xn|k) asso- ciated with each node on the path.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3173,"As with the sum-product algorithm, we ﬁrst represent the hidden Markov model as a factor graph, as shown in Figure 13.15. Again, we treat the variable node zN as the root, and pass messages to the root starting with the leaf nodes. Using the results (8.93) and (8.94), we see that the messages passed in the max-sum algorithm are given by µzn→fn+1(zn) = µfn→zn(zn) (13.66) µfn+1→zn+1(zn+1) = max zn  ln fn+1(zn, zn+1) + µzn→fn+1(zn) . (13.67) \end{verbatim} egin{verbatim} k = 1 k = 2 k = 3 n −2 n −1 n n + 1 If we eliminate µzn→fn+1(zn) between these two equations, and make use of (13.46), we obtain a recursion for the f →z messages of the form ω(zn+1) = ln p(xn+1|zn+1) + max zn {ln p(x+1|zn) + ω(zn)} (13.68) where we have introduced the notation ω(zn) ≡µfn→zn(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3174,"From (8.95) and (8.96), these messages are initialized using ω(z1) = ln p(z1) + ln p(x1|z1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3175,"where we have used (13.45). Note that to keep the notation uncluttered, we omit the dependence on the model parameters θ that are held ﬁxed when ﬁnding the most probable sequence.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3176,"The Viterbi algorithm can also be derived directly from the deﬁnition (13.6) of the joint distribution by taking the logarithm and then exchanging maximizations and summations. It is easily seen that the quantities ω(zn) have the probabilistic interpretation ω(zn) = max z1,...,zn−1 p(x1, . . . , xn, z1, . . . , zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3177,"Once we have completed the ﬁnal maximization over zN, we will obtain the value of the joint distribution p(X, Z) corresponding to the most probable path. We also wish to ﬁnd the sequence of latent variable values that corresponds to this path.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,630,3178,"To do this, we simply make use of the back-tracking procedure discussed in Sec- tion 8.4.5. Speciﬁcally, we note that the maximization over zn must be performed for each of the K possible values of zn+1. Suppose we keep a record of the values of zn that correspond to the maxima for each value of the K values of zn+1. Let us denote this function by ψ(kn) where k ∈{1, . . . , K}. Once we have passed mes- sages to the end of the chain and found the most probable state of zN, we can then use this function to backtrack along the chain by applying it recursively kmax n = ψ(kmax n+1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,631,3179,"Intuitively, we can understand the Viterbi algorithm as follows. Naively, we could consider explicitly all of the exponentially many paths through the lattice, evaluate the probability for each, and then select the path having the highest proba- bility. However, we notice that we can make a dramatic saving in computational cost as follows. Suppose that for each path we evaluate its probability by summing up products of transition and emission probabilities as we work our way forward along each path through the lattice. Consider a particular time step n and a particular state k at that time step. There will be many possible paths converging on the correspond- ing node in the lattice diagram. However, we need only retain that particular path that so far has the highest probability. Because there are K states at time step n, we need to keep track of K such paths. At time step n + 1, there will be K2 possible paths to consider, comprising K possible paths leading out of each of the K current states, but again we need only retain K of these corresponding to the best path for each state at time n+1. When we reach the ﬁnal time step N we will discover which state corresponds to the overall most probable path. Because there is a unique path coming into that state we can trace the path back to step N −1 to see what state it occupied at that time, and so on back through the lattice to the state n = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,631,3180,"The basic hidden Markov model, along with the standard training algorithm based on maximum likelihood, has been extended in numerous ways to meet the requirements of particular applications. Here we discuss a few of the more important examples.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,631,3181,"We see from the digits example in Figure 13.11 that hidden Markov models can be quite poor generative models for the data, because many of the synthetic digits look quite unrepresentative of the training data. If the goal is sequence classiﬁca- tion, there can be signiﬁcant beneﬁt in determining the parameters of hidden Markov models using discriminative rather than maximum likelihood techniques. Suppose we have a training set of R observation sequences Xr, where r = 1, . . . , R, each of which is labelled according to its class m, where m = 1, . . . , M. For each class, we have a separate hidden Markov model with its own parameters θm, and we treat the problem of determining the parameter values as a standard classiﬁcation problem in which we optimize the cross-entropy R  r=1 ln p(mr|Xr).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,632,3182,"Figure 13.17 Section of an autoregressive hidden Markov model, in which the distribution of the observation xn depends on a subset of the previous observations as well as on the hidden state zn. In this example, the distribution of xn depends on the two previous observations xn−1 and xn−2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,632,3183,"Using Bayes’ theorem this can be expressed in terms of the sequence probabilities associated with the hidden Markov models R  r=1 ln  p(Xr|θr)p(mr) M l=1 p(Xr|θl)p(lr)  (13.73) where p(m) is the prior probability of class m. Optimization of this cost function is more complex than for maximum likelihood (Kapadia, 1998), and in particular \end{verbatim} egin{verbatim} zn−1 zn zn+1 xn−1 xn xn+1 requires that every training sequence be evaluated under each of the models in or- der to compute the denominator in (13.73). Hidden Markov models, coupled with discriminative training methods, are widely used in speech recognition (Kapadia, 1998).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,632,3184,"A signiﬁcant weakness of the hidden Markov model is the way in which it rep- resents the distribution of times for which the system remains in a given state. To see the problem, note that the probability that a sequence sampled from a given hidden Markov model will spend precisely T steps in state k and then make a transition to a different state is given by p(T) = (Akk)T (1 −Akk) ∝exp (−T ln Akk) (13.74) and so is an exponentially decaying function of T. For many applications, this will be a very unrealistic model of state duration. The problem can be resolved by mod- elling state duration directly in which the diagonal coefﬁcients Akk are all set to zero, and each state k is explicitly associated with a probability distribution p(T|k) of pos- sible duration times. From a generative point of view, when a state k is entered, a value T representing the number of time steps that the system will remain in state k is then drawn from p(T|k). The model then emits T values of the observed variable xt, which are generally assumed to be independent so that the corresponding emis- sion density is simply T t=1 p(xt|k). This approach requires some straightforward modiﬁcations to the EM optimization procedure (Rabiner, 1989).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,633,3185,Figure 13.18 Example of an input-output hidden Markov model.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,633,3186,"Another limitation of the standard HMM is that it is poor at capturing long- range correlations between the observed variables (i.e., between variables that are separated by many time steps) because these must be mediated via the ﬁrst-order Markov chain of hidden states. Longer-range effects could in principle be included by adding extra links to the graphical model of Figure 13.5. One way to address this is to generalize the HMM to give the autoregressive hidden Markov model (Ephraim et al., 1989), an example of which is shown in Figure 13.17. For discrete observa- tions, this corresponds to expanded tables of conditional probabilities for the emis- sion distributions. In the case of a Gaussian emission density, we can use the linear- Gaussian framework in which the conditional distribution for xn given the values of the previous observations, and the value of zn, is a Gaussian whose mean is a linear combination of the values of the conditioning variables. Clearly the number of additional links in the graph must be limited to avoid an excessive the number of free parameters. In the example shown in Figure 13.17, each observation depends on \end{verbatim} egin{verbatim} In this case, both the emission probabilities and the transition probabilities depend on the values of a sequence of observations u1, . . . , uN.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,633,3187,"the two preceding observed variables as well as on the hidden state. Although this graph looks messy, we can again appeal to d-separation to see that in fact it still has a simple probabilistic structure. In particular, if we imagine conditioning on zn we see that, as with the standard HMM, the values of zn−1 and zn+1 are independent, corresponding to the conditional independence property (13.5). This is easily veri- ﬁed by noting that every path from node zn−1 to node zn+1 passes through at least one observed node that is head-to-tail with respect to that path. As a consequence, we can again use a forward-backward recursion in the E step of the EM algorithm to determine the posterior distributions of the latent variables in a computational time that is linear in the length of the chain. Similarly, the M step involves only a minor modiﬁcation of the standard M-step equations. In the case of Gaussian emission densities this involves estimating the parameters using the standard linear regression equations, discussed in Chapter 3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,633,3188,"We have seen that the autoregressive HMM appears as a natural extension of the standard HMM when viewed as a graphical model. In fact the probabilistic graphical modelling viewpoint motivates a plethora of different graphical structures based on the HMM. Another example is the input-output hidden Markov model (Bengio and Frasconi, 1995), in which we have a sequence of observed variables u1, . . . , uN, in addition to the output variables x1, . . . , xN, whose values inﬂuence either the dis- tribution of latent variables or output variables, or both. An example is shown in Figure 13.18. This extends the HMM framework to the domain of supervised learn- ing for sequential data. It is again easy to show, through the use of the d-separation criterion, that the Markov property (13.5) for the chain of latent variables still holds.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,633,3189,"To verify this, simply note that there is only one path from node zn−1 to node zn+1 and this is head-to-tail with respect to the observed node zn. This conditional inde- pendence property again allows the formulation of a computationally efﬁcient learn- ing algorithm. In particular, we can determine the parameters θ of the model by maximizing the likelihood function L(θ) = p(X|U, θ) where U is a matrix whose rows are given by uT n. As a consequence of the conditional independence property (13.5) this likelihood function can be maximized efﬁciently using an EM algorithm in which the E step involves forward and backward recursions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,634,3190,"Figure 13.19 A factorial hidden Markov model com- prising two Markov chains of latent vari- ables. For continuous observed variables x, one possible choice of emission model is a linear-Gaussian density in which the mean of the Gaussian is a linear combi- nation of the states of the corresponding latent variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,634,3191,"Figure 13.20 Example of a path, highlighted in green, which is head-to-head at the observed nodes xn−1 and xn+1, and head-to-tail at the unobserved nodes z(2) n−1, z(2) n and z(2) n+1. Thus the path is not blocked and so the conditional independence property (13.5) does not hold for the individual la- tent chains of the factorial HMM model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,634,3192,"Another variant of the HMM worthy of mention is the factorial hidden Markov model (Ghahramani and Jordan, 1997), in which there are multiple independent \end{verbatim} egin{verbatim} z(1) n−1 z(1) n z(1) n+1 z(2) n−1 z(2) n z(2) n+1 xn−1 xn xn+1 Markov chains of latent variables, and the distribution of the observed variable at a given time step is conditional on the states of all of the corresponding latent vari- ables at that same time step. Figure 13.19 shows the corresponding graphical model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,634,3193,"The motivation for considering factorial HMM can be seen by noting that in order to represent, say, 10 bits of information at a given time step, a standard HMM would need K = 210 = 1024 latent states, whereas a factorial HMM could make use of 10 binary latent chains. The primary disadvantage of factorial HMMs, however, lies in the additional complexity of training them. The M step for the factorial HMM model is straightforward. However, observation of the x variables introduces dependencies between the latent chains, leading to difﬁculties with the E step. This can be seen by noting that in Figure 13.19, the variables z(1) n and z(2) n are connected by a path which is head-to-head at node xn and hence they are not d-separated. The exact E step for this model does not correspond to running forward and backward recursions along the M Markov chains independently. This is conﬁrmed by noting that the key conditional independence property (13.5) is not satisﬁed for the individual Markov chains in the factorial HMM model, as is shown using d-separation in Figure 13.20.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,634,3194,"Now suppose that there are M chains of hidden nodes and for simplicity suppose that all latent variables have the same number K of states. Then one approach would be to note that there are KM combinations of latent variables at a given time step As a consequence, there is no efﬁcient exact E step for this model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,635,3195,"and so we can transform the model into an equivalent standard HMM having a single chain of latent variables each of which has KM latent states. We can then run the standard forward-backward recursions in the E step. This has computational com- plexity O(NK2M) that is exponential in the number M of latent chains and so will be intractable for anything other than small values of M. One solution would be to use sampling methods (discussed in Chapter 11). As an elegant deterministic al- ternative, Ghahramani and Jordan (1997) exploited variational inference techniques to obtain a tractable algorithm for approximate inference. This can be done using a simple variational posterior distribution that is fully factorized with respect to the latent variables, or alternatively by using a more powerful approach in which the variational distribution is described by independent Markov chains corresponding to the chains of latent variables in the original model. In the latter case, the variational inference algorithms involves running independent forward and backward recursions along each chain, which is computationally efﬁcient and yet is also able to capture correlations between variables within the same chain.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,635,3196,"Clearly, there are many possible probabilistic structures that can be constructed according to the needs of particular applications. Graphical models provide a general technique for motivating, describing, and analysing such structures, and variational methods provide a powerful framework for performing inference in those models for which exact solution is intractable.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,635,3197,"In order to motivate the concept of linear dynamical systems, let us consider the following simple problem, which often arises in practical settings. Suppose we wish to measure the value of an unknown quantity z using a noisy sensor that returns a observation x representing the value of z plus zero-mean Gaussian noise. Given a single measurement, our best guess for z is to assume that z = x. However, we can improve our estimate for z by taking lots of measurements and averaging them, because the random noise terms will tend to cancel each other. Now let’s make the situation more complicated by assuming that we wish to measure a quantity z that is changing over time. We can take regular measurements of x so that at some point in time we have obtained x1, . . . , xN and we wish to ﬁnd the corresponding values z1, . . . , xN. If we simply average the measurements, the error due to random noise will be reduced, but unfortunately we will just obtain a single averaged estimate, in which we have averaged over the changing value of z, thereby introducing a new source of error.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3198,"Intuitively, we could imagine doing a bit better as follows. To estimate the value of zN, we take only the most recent few measurements, say xN−L, . . . , xN and just average these. If z is changing slowly, and the random noise level in the sensor is high, it would make sense to choose a relatively long window of observations to average. Conversely, if the signal is changing quickly, and the noise levels are small, we might be better just to use xN directly as our estimate of zN. Perhaps we could do even better if we take a weighted average, in which more recent measurements \end{verbatim} egin{verbatim} make a greater contribution than less recent ones.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3199,"Although this sort of intuitive argument seems plausible, it does not tell us how to form a weighted average, and any sort of hand-crafted weighing is hardly likely to be optimal. Fortunately, we can address problems such as this much more sys- tematically by deﬁning a probabilistic model that captures the time evolution and measurement processes and then applying the inference and learning methods devel- oped in earlier chapters. Here we shall focus on a widely used model known as a linear dynamical system.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3200,"As we have seen, the HMM corresponds to the state space model shown in Figure 13.5 in which the latent variables are discrete but with arbitrary emission probability distributions. This graph of course describes a much broader class of probability distributions, all of which factorize according to (13.6). We now consider extensions to other distributions for the latent variables. In particular, we consider continuous latent variables in which the summations of the sum-product algorithm become integrals. The general form of the inference algorithms will, however, be the same as for the hidden Markov model. It is interesting to note that, historically, hidden Markov models and linear dynamical systems were developed independently.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3201,"Once they are both expressed as graphical models, however, the deep relationship between them immediately becomes apparent.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3202,"One key requirement is that we retain an efﬁcient algorithm for inference which is linear in the length of the chain. This requires that, for instance, when we take a quantity α(zn−1), representing the posterior probability of zn given observations x1, . . . , xn, and multiply by the transition probability p(zn|zn−1) and the emission probability p(xn|zn) and then marginalize over zn−1, we obtain a distribution over zn that is of the same functional form as that over α(zn−1). That is to say, the distribution must not become more complex at each stage, but must only change in its parameter values. Not surprisingly, the only distributions that have this property of being closed under multiplication are those belonging to the exponential family.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3203,"Here we consider the most important example from a practical perspective, which is the Gaussian. In particular, we consider a linear-Gaussian state space model so that the latent variables {zn}, as well as the observed variables {xn}, are multi- variate Gaussian distributions whose means are linear functions of the states of their parents in the graph. We have seen that a directed graph of linear-Gaussian units is equivalent to a joint Gaussian distribution over all of the variables. Furthermore, marginals such as α(zn) are also Gaussian, so that the functional form of the mes- sages is preserved and we will obtain an efﬁcient inference algorithm. By contrast, suppose that the emission densities p(xn|zn) comprise a mixture of K Gaussians each of which has a mean that is linear in zn. Then even if α(z1) is Gaussian, the quantity α(z2) will be a mixture of K Gaussians, α(z3) will be a mixture of K2 Gaussians, and so on, and exact inference will not be of practical value.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,636,3204,We have seen that the hidden Markov model can be viewed as an extension of the mixture models of Chapter 9 to allow for sequential correlations in the data.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3205,"In a similar way, we can view the linear dynamical system as a generalization of the continuous latent variable models of Chapter 12 such as probabilistic PCA and factor analysis. Each pair of nodes {zn, xn} represents a linear-Gaussian latent variable \end{verbatim} egin{verbatim} model for that particular observation. However, the latent variables {zn} are no longer treated as independent but now form a Markov chain.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3206,"Because the model is represented by a tree-structured directed graph, inference problems can be solved efﬁciently using the sum-product algorithm. The forward re- cursions, analogous to the α messages of the hidden Markov model, are known as the Kalman ﬁlter equations (Kalman, 1960; Zarchan and Musoff, 2005), and the back- ward recursions, analogous to the β messages, are known as the Kalman smoother equations, or the Rauch-Tung-Striebel (RTS) equations (Rauch et al., 1965). The Kalman ﬁlter is widely used in many real-time tracking applications.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3207,"Because the linear dynamical system is a linear-Gaussian model, the joint distri- bution over all variables, as well as all marginals and conditionals, will be Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3208,It follows that the sequence of individually most probable latent variable values is the same as the most probable latent sequence. There is thus no need to consider the analogue of the Viterbi algorithm for the linear dynamical system.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3209,"Because the model has linear-Gaussian conditional distributions, we can write the transition and emission distributions in the general form p(zn|zn−1) = N(zn|Azn−1, Γ) (13.75) p(xn|zn) = N(xn|Czn, Σ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3210,"The initial latent variable also has a Gaussian distribution which we write as p(z1) = N(z1|µ0, V0).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3211,"Note that in order to simplify the notation, we have omitted additive constant terms from the means of the Gaussians. In fact, it is straightforward to include them if desired. Traditionally, these distributions are more commonly expressed in an equiv- alent form in terms of noisy linear equations given by zn = Azn−1 + wn (13.78) xn = Czn + vn (13.79) z1 = µ0 + u (13.80) where the noise terms have the distributions w ∼ N(w|0, Γ) (13.81) v ∼ N(v|0, Σ) (13.82) u ∼ N(u|0, V0).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,637,3212,"The parameters of the model, denoted by θ = {A, Γ, C, Σ, µ0, V0}, can be determined using maximum likelihood through the EM algorithm. In the E step, we need to solve the inference problem of determining the local posterior marginals for the latent variables, which can be solved efﬁciently using the sum-product algorithm, as we discuss in the next section.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3213,"We now turn to the problem of ﬁnding the marginal distributions for the latent variables conditional on the observation sequence. For given parameter settings, we also wish to make predictions of the next latent state zn and of the next observation xn conditioned on the observed data x1, . . . , xn−1 for use in real-time applications.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3214,"These inference problems can be solved efﬁciently using the sum-product algorithm, which in the context of the linear dynamical system gives rise to the Kalman ﬁlter and Kalman smoother equations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3215,"It is worth emphasizing that because the linear dynamical system is a linear- Gaussian model, the joint distribution over all latent and observed variables is simply a Gaussian, and so in principle we could solve inference problems by using the standard results derived in previous chapters for the marginals and conditionals of a multivariate Gaussian. The role of the sum-product algorithm is to provide a more efﬁcient way to perform such computations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3216,"Linear dynamical systems have the identical factorization, given by (13.6), to hidden Markov models, and are again described by the factor graphs in Figures 13.14 and 13.15. Inference algorithms therefore take precisely the same form except that summations over latent variables are replaced by integrations. We begin by consid- ering the forward equations in which we treat zN as the root node, and propagate messages from the leaf node h(z1) to the root. From (13.77), the initial message will be Gaussian, and because each of the factors is Gaussian, all subsequent messages will also be Gaussian. By convention, we shall propagate messages that are nor- malized marginal distributions corresponding to p(zn|x1, . . . , xn), which we denote by α(zn) = N(zn|µn, Vn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3217,"This is precisely analogous to the propagation of scaled variables α(zn) given by (13.59) in the discrete case of the hidden Markov model, and so the recursion equa- tion now takes the form cnα(zn) = p(xn|zn)  α(zn−1)p(zn|zn−1) dzn−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,638,3218,"Substituting for the conditionals p(zn|zn−1) and p(xn|zn), using (13.75) and (13.76), respectively, and making use of (13.84), we see that (13.85) becomes cnN(zn|µn, Vn) = N(xn|Czn, Σ)  N(zn|Azn−1, Γ)N(zn−1|µn−1, Vn−1) dzn−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3219,"Here we are supposing that µn−1 and Vn−1 are known, and by evaluating the inte- gral in (13.86), we wish to determine values for µn and Vn. The integral is easily evaluated by making use of the result (2.115), from which it follows that  N(zn|Azn−1, Γ)N(zn−1|µn−1, Vn−1) dzn−1 = N(zn|Aµn−1, Pn−1) (13.87) \end{verbatim} egin{verbatim} where we have deﬁned Pn−1 = AVn−1AT + Γ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3220,"We can now combine this result with the ﬁrst factor on the right-hand side of (13.86) by making use of (2.115) and (2.116) to give µn = Aµn−1 + Kn(xn −CAµn−1) (13.89) Vn = (I −KnC)Pn−1 (13.90) cn = N(xn|CAµn−1, CPn−1CT + Σ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3221,Here we have made use of the matrix inverse identities (C.5) and (C.7) and also deﬁned the Kalman gain matrix Kn = Pn−1CT CPn−1CT + Σ −1 .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3222,"Thus, given the values of µn−1 and Vn−1, together with the new observation xn, we can evaluate the Gaussian marginal for zn having mean µn and covariance Vn, as well as the normalization coefﬁcient cn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3223,The initial conditions for these recursion equations are obtained from c1α(z1) = p(z1)p(x1|z1).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3224,"Because p(z1) is given by (13.77), and p(x1|z1) is given by (13.76), we can again make use of (2.115) to calculate c1 and (2.116) to calculate µ1 and V1 giving µ1 = µ0 + K1(x1 −Cµ0) (13.94) V1 = (I −K1C)V0 (13.95) c1 = N(x1|Cµ0, CV0CT + Σ) (13.96) where K1 = V0CT CV0CT + Σ−1 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3225,"Similarly, the likelihood function for the linear dynamical system is given by (13.63) in which the factors cn are found using the Kalman ﬁltering equations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,639,3226,"We can interpret the steps involved in going from the posterior marginal over zn−1 to the posterior marginal over zn as follows. In (13.89), we can view the quantity Aµn−1 as the prediction of the mean over zn obtained by simply taking the mean over zn−1 and projecting it forward one step using the transition probability matrix A. This predicted mean would give a predicted observation for xn given by CAzn−1 obtained by applying the emission probability matrix C to the predicted hidden state mean. We can view the update equation (13.89) for the mean of the hidden variable distribution as taking the predicted mean Aµn−1 and then adding a correction that is proportional to the error xn −CAzn−1 between the predicted observation and the actual observation. The coefﬁcient of this correction is given by the Kalman gain matrix. Thus we can view the Kalman ﬁlter as a process of making successive predictions and then correcting these predictions in the light of the new observations. This is illustrated graphically in Figure 13.21.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3227,"Figure 13.21 The linear dynamical system can be viewed as a sequence of steps in which increasing un- certainty in the state variable due to diffusion is compensated by the arrival of new data. In the left-hand plot, the blue curve shows the distribution p(zn−1|x1, . . . , xn−1), which incorporates all the data up to step n −1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3228,"The diffusion arising from the nonzero variance of the transition probability p(zn|zn−1) gives the distribution p(zn|x1, . . . , xn−1), shown in red in the centre plot. Note that this is broader and shifted relative to the blue curve (which is shown dashed in the centre plot for comparison). The next data observation xn contributes through the emission density p(xn|zn), which is shown as a function of zn in green on the right-hand plot. Note that this is not a density with respect to zn and so is not normalized to one. Inclusion of this new data point leads to a revised distribution p(zn|x1, . . . , xn) for the state density shown in blue. We see that observation of the data has shifted and narrowed the distribution compared to p(zn|x1, . . . , xn−1) (which is shown in dashed in the right-hand plot for comparison).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3229,"If we consider a situation in which the measurement noise is small compared to the rate at which the latent variable is evolving, then we ﬁnd that the posterior distribution for zn depends only on the current measurement xn, in accordance with the intuition from our simple example at the start of the section. Similarly, if the latent variable is evolving slowly relative to the observation noise level, we ﬁnd that the posterior mean for zn is obtained by averaging all of the measurements obtained up to that time.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3230,"One of the most important applications of the Kalman ﬁlter is to tracking, and this is illustrated using a simple example of an object moving in two dimensions in Figure 13.22.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3231,"So far, we have solved the inference problem of ﬁnding the posterior marginal for a node zn given observations from x1 up to xn. Next we turn to the problem of ﬁnding the marginal for a node zn given all observations x1 to xN. For temporal data, this corresponds to the inclusion of future as well as past observations. Al- though this cannot be used for real-time prediction, it plays a key role in learning the parameters of the model. By analogy with the hidden Markov model, this problem can be solved by propagating messages from node xN back to node x1 and com- bining this information with that obtained during the forward message passing stage used to compute the α(zn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,640,3232,"In the LDS literature, it is usual to formulate this backward recursion in terms of γ(zn) = α(zn)β(zn) rather than in terms of β(zn). Because γ(zn) must also be Gaussian, we write it in the form γ(zn) = α(zn)β(zn) = N(zn|µn, Vn).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3233,"Figure 13.22 An illustration of a linear dy- namical system being used to track a moving object. The blue points indicate the true positions of the object in a two-dimensional space at successive time steps, the green points denote noisy measurements of the positions, and the red crosses indicate the means of the inferred posterior distributions of the positions ob- tained by running the Kalman ﬁl- tering equations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3234,"To derive the required recursion, we start from the backward recursion (13.62) for \end{verbatim} egin{verbatim} The covari- ances of the inferred positions are indicated by the red ellipses, which correspond to contours having one standard deviation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3235,"β(zn), which, for continuous latent variables, can be written in the form cn+1β(zn) =  β(zn+1)p(xn+1|zn+1)p(zn+1|zn) dzn+1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3236,"We now multiply both sides of (13.99) by α(zn) and substitute for p(xn+1|zn+1) and p(zn+1|zn) using (13.75) and (13.76). Then we make use of (13.89), (13.90) and (13.91), together with (13.98), and after some manipulation we obtain µn = µn + Jn µn+1 −AµN (13.100) Vn = Vn + Jn  Vn+1 −Pn  JT n (13.101) where we have deﬁned Jn = VnAT (Pn)−1 (13.102) and we have made use of AVn = PnJT n. Note that these recursions require that the forward pass be completed ﬁrst so that the quantities µn and Vn will be available for the backward pass.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3237,"For the EM algorithm, we also require the pairwise posterior marginals, which can be obtained from (13.65) in the form ξ(zn−1, zn) = (cn)−1 α(zn−1)p(xn|zn)p(zn|z−1)β(zn) = N(zn−1|µn−1, Vn−1)N(zn|Azn−1, Γ)N(xn|Czn, Σ)N(zn|µn, Vn) cnα(zn) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,641,3238,"Substituting for α(zn) using (13.84) and rearranging, we see that ξ(zn−1, zn) is a Gaussian with mean given with components γ(zn−1) and γ(zn), and a covariance between zn and zn−1 given by cov[zn, zn−1] = Jn−1 Vn.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,642,3239,"So far, we have considered the inference problem for linear dynamical systems, assuming that the model parameters θ = {A, Γ, C, Σ, µ0, V0} are known. Next, we consider the determination of these parameters using maximum likelihood (Ghahra- mani and Hinton, 1996b). Because the model has latent variables, this can be ad- dressed using the EM algorithm, which was discussed in general terms in Chapter 9.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,642,3240,"We can derive the EM algorithm for the linear dynamical system as follows. Let us denote the estimated parameter values at some particular cycle of the algorithm by θold. For these parameter values, we can run the inference algorithm to determine the posterior distribution of the latent variables p(Z|X, θold), or more precisely those local posterior marginals that are required in the M step. In particular, we shall require the following expectations E [zn] = µn (13.105) E  znzT n−1 = Jn−1 Vn + µnµT n−1 (13.106) E  znzT n = Vn + µnµT n (13.107) where we have used (13.104).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,642,3241,"Now we consider the complete-data log likelihood function, which is obtained by taking the logarithm of (13.6) and is therefore given by ln p(X, Z|θ) = ln p(z1|µ0, V0) + N  n=2 ln p(zn|zn−1, A, Γ) + N  n=1 ln p(xn|zn, C, Σ) (13.108) in which we have made the dependence on the parameters explicit. We now take the expectation of the complete-data log likelihood with respect to the posterior distri- bution p(Z|X, θold) which deﬁnes the function Q(θ, θold) = EZ|θold [ln p(X, Z|θ)] .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,643,3242,"In the M step, this function is maximized with respect to the components of θ. Consider ﬁrst the parameters µ0 and V0. If we substitute for p(z1|µ0, V0) in (13.108) using (13.77), and then take the expectation with respect to Z, we obtain Q(θ, θold) = −1 2 ln |V0| −EZ|θold 1 2(z1 −µ0)TV−1 0 (z1 −µ0) + const where all terms not dependent on µ0 or V0 have been absorbed into the additive constant. Maximization with respect to µ0 and V0 is easily performed by making use of the maximum likelihood solution for a Gaussian distribution discussed in Section 2.3.4, giving \end{verbatim} egin{verbatim} µnew 0 = E[z1] (13.110) Vnew 0 = E[z1zT 1 ] −E[z1]E[zT 1 ].",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,643,3243,"Similarly, to optimize A and Γ, we substitute for p(zn|zn−1, A, Γ) in (13.108) using (13.75) giving Q(θ, θold) = −N −1 2 ln |Γ| −EZ|θold 1 2 N  n=2 (zn −Azn−1)TΓ−1(zn −Azn−1) + const (13.112) in which the constant comprises terms that are independent of A and Γ. Maximizing with respect to these parameters then gives Anew =  N  n=2 E  znzT n−1   N  n=2 E  zn−1zT n−1 −1 (13.113) Γnew = 1 N −1 N  n=2  E  znzT n −AnewE  zn−1zT n −E  znzT n−1 Anew + AnewE  zn−1zT n−1 (Anew)T .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,643,3244,"Note that Anew must be evaluated ﬁrst, and the result can then be used to determine Γnew.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,643,3245,"Finally, in order to determine the new values of C and Σ, we substitute for p(xn|zn, C, Σ) in (13.108) using (13.76) giving Q(θ, θold) = −N 2 ln |Σ| −EZ|θold 1 2 N  n=1 (xn −Czn)TΣ−1(xn −Czn) + const.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,643,3246,Maximizing with respect to C and Σ then gives Cnew =  N  n=1 xnE  zT n   N  n=1 E  znzT n −1 (13.115) Σnew = 1 N N  n=1  xnxT n −CnewE [zn] xT n −xnE  zT n Cnew + CnewE  znzT n Cnew .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3247,"We have approached parameter learning in the linear dynamical system using maximum likelihood. Inclusion of priors to give a MAP estimate is straightforward, and a fully Bayesian treatment can be found by applying the analytical approxima- tion techniques discussed in Chapter 10, though a detailed treatment is precluded here due to lack of space.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3248,"As with the hidden Markov model, there is considerable interest in extending the basic linear dynamical system in order to increase its capabilities. Although the assumption of a linear-Gaussian model leads to efﬁcient algorithms for inference and learning, it also implies that the marginal distribution of the observed variables is simply a Gaussian, which represents a signiﬁcant limitation. One simple extension of the linear dynamical system is to use a Gaussian mixture as the initial distribution for z1. If this mixture has K components, then the forward recursion equations (13.85) will lead to a mixture of K Gaussians over each hidden variable zn, and so the model is again tractable.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3249,"For many applications, the Gaussian emission density is a poor approximation. If instead we try to use a mixture of K Gaussians as the emission density, then the posterior α(z1) will also be a mixture of K Gaussians. However, from (13.85) the posterior α(z2) will comprise a mixture of K2 Gaussians, and so on, with α(zn) being given by a mixture of Kn Gaussians. Thus the number of components grows exponentially with the length of the chain, and so this model is impractical.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3250,"More generally, introducing transition or emission models that depart from the linear-Gaussian (or other exponential family) model leads to an intractable infer- ence problem. We can make deterministic approximations such as assumed den- sity ﬁltering or expectation propagation, or we can make use of sampling methods, Chapter 10 as discussed in Section 13.3.4. One widely used approach is to make a Gaussian approximation by linearizing around the mean of the predicted distribution, which gives rise to the extended Kalman ﬁlter (Zarchan and Musoff, 2005).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3251,"As with hidden Markov models, we can develop interesting extensions of the ba- sic linear dynamical system by expanding its graphical representation. For example, the switching state space model (Ghahramani and Hinton, 1998) can be viewed as a combination of the hidden Markov model with a set of linear dynamical systems.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3252,"The model has multiple Markov chains of continuous linear-Gaussian latent vari- ables, each of which is analogous to the latent chain of the linear dynamical system discussed earlier, together with a Markov chain of discrete variables of the form used in a hidden Markov model. The output at each time step is determined by stochas- tically choosing one of the continuous latent chains, using the state of the discrete latent variable as a switch, and then emitting an observation from the corresponding conditional output distribution. Exact inference in this model is intractable, but vari- ational methods lead to an efﬁcient inference scheme involving forward-backward recursions along each of the continuous and discrete Markov chains independently.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,644,3253,"Note that, if we consider multiple chains of discrete latent variables, and use one as the switch to select from the remainder, we obtain an analogous model having only discrete latent variables known as the switching hidden Markov model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,645,3254,"For dynamical systems which do not have a linear-Gaussian, for example, if they use a non-Gaussian emission density, we can turn to sampling methods in order Chapter 11 to ﬁnd a tractable inference algorithm. In particular, we can apply the sampling- importance-resampling formalism of Section 11.1.5 to obtain a sequential Monte Carlo algorithm known as the particle ﬁlter.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,645,3255,"Consider the class of distributions represented by the graphical model in Fig- ure 13.5, and suppose we are given the observed values Xn = (x1, . . . , xn) and we wish to draw L samples from the posterior distribution p(zn|Xn). Using Bayes’ theorem, we have E[f(zn)] =  f(zn)p(zn|Xn) dzn =  f(zn)p(zn|xn, Xn−1) dzn =  f(zn)p(xn|zn)p(zn|Xn−1) dzn  p(xn|zn)p(zn|Xn−1) dzn ≃ L  l=1 w(l) n f(z(l) n ) (13.117) where {z(l) n } is a set of samples drawn from p(zn|Xn−1) and we have made use of the conditional independence property p(xn|zn, Xn−1) = p(xn|zn), which follows from the graph in Figure 13.5. The sampling weights {w(l) n } are deﬁned by w(l) n = p(xn|z(l) n ) L m=1 p(xn|z(m) n ) (13.118) where the same samples are used in the numerator as in the denominator. Thus the posterior distribution p(zn|xn) is represented by the set of samples {z(l) n } together with the corresponding weights {w(l) n }. Note that these weights satisfy 0 ⩽w(l) n 1 and  l w(l) n = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,646,3256,"Because we wish to ﬁnd a sequential sampling scheme, we shall suppose that a set of samples and weights have been obtained at time step n, and that we have subsequently observed the value of xn+1, and we wish to ﬁnd the weights and sam- ples at time step n + 1. We ﬁrst sample from the distribution p(zn+1|Xn). This is \end{verbatim} egin{verbatim} straightforward since, again using Bayes’ theorem p(zn+1|Xn) =  p(zn+1|zn, Xn)p(zn|Xn) dzn =  p(zn+1|zn)p(zn|Xn) dzn =  p(zn+1|zn)p(zn|xn, Xn−1) dzn =  p(zn+1|zn)p(xn|zn)p(zn|Xn−1) dzn  p(xn|zn)p(zn|Xn−1) dzn =  l w(l) n p(zn+1|z(l) n ) (13.119) where we have made use of the conditional independence properties p(zn+1|zn, Xn) = p(zn+1|zn) (13.120) p(xn|zn, Xn−1) = p(xn|zn) (13.121) which follow from the application of the d-separation criterion to the graph in Fig- ure 13.5. The distribution given by (13.119) is a mixture distribution, and samples can be drawn by choosing a component l with probability given by the mixing coef- ﬁcients w(l) and then drawing a sample from the corresponding component.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,646,3257,"In summary, we can view each step of the particle ﬁlter algorithm as comprising two stages. At time step n, we have a sample representation of the posterior dis- tribution p(zn|Xn) expressed as samples {z(l) n } with corresponding weights {w(l) n }.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,646,3258,"This can be viewed as a mixture representation of the form (13.119). To obtain the corresponding representation for the next time step, we ﬁrst draw L samples from the mixture distribution (13.119), and then for each sample we use the new obser- vation xn+1 to evaluate the corresponding weights w(l) n+1 ∝p(xn+1|z(l) n+1). This is illustrated, for the case of a single variable z, in Figure 13.23.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,646,3259,"The particle ﬁltering, or sequential Monte Carlo, approach has appeared in the literature under various names including the bootstrap ﬁlter (Gordon et al., 1993), survival of the ﬁttest (Kanazawa et al., 1995), and the condensation algorithm (Isard and Blake, 1998).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,647,3260,"Figure 13.23 Schematic illustration of the operation of the particle ﬁlter for a one-dimensional latent space. At time step n, the posterior p(zn|xn) is represented as a mixture distribution, shown schematically as circles whose sizes are proportional to the weights w(l) n . A set of L samples is then drawn from this distribution and the new weights w(l) n+1 evaluated using p(xn+1|z(l) n+1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,647,3261,"Use the technique of d-separation, discussed in Section 8.2, to verify that the Markov model shown in Figure 13.3 having N nodes in total satisﬁes the conditional independence properties (13.3) for n = 2, . . . , N. Similarly, show that a model described by the graph in Figure 13.4 in which there are N nodes in total \end{verbatim} egin{verbatim} p(zn|Xn) p(zn+1|Xn) p(xn+1|zn+1) p(zn+1|Xn+1) z satisﬁes the conditional independence properties p(xn|x1, . . . , xn−1) = p(xn|xn−1, xn−2) (13.122) for n = 3, . . . , N.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,647,3262,"(⋆⋆) Consider the joint probability distribution (13.2) corresponding to the directed graph of Figure 13.3. Using the sum and product rules of probability, verify that this joint distribution satisﬁes the conditional independence property (13.3) for n = 2, . . . , N. Similarly, show that the second-order Markov model described by the joint distribution (13.4) satisﬁes the conditional independence property p(xn|x1, . . . , xn−1) = p(xn|xn−1, xn−2) (13.123) for n = 3, . . . , N.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,647,3263,"(⋆) By using d-separation, show that the distribution p(x1, . . . , xN) of the observed data for the state space model represented by the directed graph in Figure 13.5 does not satisfy any conditional independence properties and hence does not exhibit the Markov property at any ﬁnite order.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,647,3264,"Consider a hidden Markov model in which the emission densities are represented by a parametric model p(x|z, w), such as a linear regression model or a neural network, in which w is a vector of adaptive parameters. Describe how the parameters w can be learned from data using maximum likelihood.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3265,"(⋆⋆) Verify the M-step equations (13.18) and (13.19) for the initial state probabili- ties and transition probability parameters of the hidden Markov model by maximiza- tion of the expected complete-data log likelihood function (13.17), using appropriate Lagrange multipliers to enforce the summation constraints on the components of π and A.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3266,"Show that if any elements of the parameters π or A for a hidden Markov model are initially set to zero, then those elements will remain zero in all subsequent updates of the EM algorithm.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3267,"(⋆) Consider a hidden Markov model with Gaussian emission densities. Show that maximization of the function Q(θ, θold) with respect to the mean and covariance parameters of the Gaussians gives rise to the M-step equations (13.20) and (13.21).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3268,"For a hidden Markov model having discrete observations governed by a multinomial distribution, show that the conditional distribution of the observations given the hidden variables is given by (13.22) and the corresponding M step equa- tions are given by (13.23). Write down the analogous equations for the conditional distribution and the M step equations for the case of a hidden Markov with multiple binary output variables each of which is governed by a Bernoulli conditional dis- tribution. Hint: refer to Sections 2.1 and 2.2 for a discussion of the corresponding maximum likelihood solutions for i.i.d. data if required.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3269,Use the d-separation criterion to verify that the conditional indepen- dence properties (13.24)–(13.31) are satisﬁed by the joint distribution for the hidden Markov model deﬁned by (13.6).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3270,"(⋆⋆⋆) By applying the sum and product rules of probability, verify that the condi- tional independence properties (13.24)–(13.31) are satisﬁed by the joint distribution for the hidden Markov model deﬁned by (13.6).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,648,3271,"(⋆⋆) Starting from the expression (8.72) for the marginal distribution over the vari- ables of a factor in a factor graph, together with the results for the messages in the sum-product algorithm obtained in Section 13.2.3, derive the result (13.43) for the joint posterior distribution over two successive latent variables in a hidden Markov model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3272,"Suppose we wish to train a hidden Markov model by maximum likelihood using data that comprises R independent sequences of observations, which we de- note by X(r) where r = 1, . . . , R. Show that in the E step of the EM algorithm, we simply evaluate posterior probabilities for the latent variables by running the α and β recursions independently for each of the sequences. Also show that in the M step, the initial probability and transition probability parameters are re-estimated \end{verbatim} egin{verbatim} using modiﬁed forms of (13.18 ) and (13.19) given by πk = R  r=1 γ(z(r) 1k ) R  r=1 K  j=1 γ(z(r) 1j ) (13.124) Ajk = R  r=1 N  n=2 ξ(z(r) n−1,j, z(r) n,k) R  r=1 K  l=1 N  n=2 ξ(z(r) n−1,j, z(r) n,l) (13.125) where, for notational convenience, we have assumed that the sequences are of the same length (the generalization to sequences of different lengths is straightforward).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3273,"Similarly, show that the M-step equation for re-estimation of the means of Gaussian emission models is given by µk = R  r=1 N  n=1 γ(z(r) nk )x(r) n R  r=1 N  n=1 γ(z(r) nk ) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3274,Note that the M-step equations for other emission model parameters and distributions take an analogous form.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3275,"Use the deﬁnition (8.64) of the messages passed from a factor node to a variable node in a factor graph, together with the expression (13.6) for the joint distribution in a hidden Markov model, to show that the deﬁnition (13.50) of the alpha message is the same as the deﬁnition (13.34).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3276,"Use the deﬁnition (8.67) of the messages passed from a factor node to a variable node in a factor graph, together with the expression (13.6) for the joint distribution in a hidden Markov model, to show that the deﬁnition (13.52) of the beta message is the same as the deﬁnition (13.35).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,649,3277,(⋆⋆) Use the expressions (13.33) and (13.43) for the marginals in a hidden Markov model to derive the corresponding results (13.64) and (13.65) expressed in terms of re-scaled variables.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3278,"In this exercise, we derive the forward message passing equation for the Viterbi algorithm directly from the expression (13.6) for the joint distribution. This involves maximizing over all of the hidden variables z1, . . . , zN. By taking the log- arithm and then exchanging maximizations and summations, derive the recursion \end{verbatim} egin{verbatim} (13.68) where the quantities ω(zn) are deﬁned by (13.70). Show that the initial condition for this recursion is given by (13.69).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3279,"Show that the directed graph for the input-output hidden Markov model, given in Figure 13.18, can be expressed as a tree-structured factor graph of the form shown in Figure 13.15 and write down expressions for the initial factor h(z1) and for the general factor fn(zn−1, zn) where 2 ⩽n ⩽N.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3280,"Using the result of Exercise 13.17, derive the recursion equations, includ- ing the initial conditions, for the forward-backward algorithm for the input-output hidden Markov model shown in Figure 13.18.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3281,"The Kalman ﬁlter and smoother equations allow the posterior distribu- tions over individual latent variables, conditioned on all of the observed variables, to be found efﬁciently for linear dynamical systems. Show that the sequence of latent variable values obtained by maximizing each of these posterior distributions individually is the same as the most probable sequence of latent values. To do this, simply note that the joint distribution of all latent and observed variables in a linear dynamical system is Gaussian, and hence all conditionals and marginals will also be Gaussian, and then make use of the result (2.98).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3282,"Use the result (2.115) to prove (13.87). 13.21 (⋆⋆) Use the results (2.115) and (2.116), together with the matrix identities (C.5) and (C.7), to derive the results (13.89), (13.90), and (13.91), where the Kalman gain matrix Kn is deﬁned by (13.92).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3283,"Using (13.93), together with the deﬁnitions (13.76) and (13.77) and the result (2.115), derive (13.96).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3284,"(⋆⋆) Using (13.93), together with the deﬁnitions (13.76) and (13.77) and the result (2.116), derive (13.94), (13.95) and (13.97).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3285,"Consider a generalization of (13.75) and (13.76) in which we include constant terms a and c in the Gaussian means, so that p(zn|zn−1) = N(zn|Azn−1 + a, Γ) (13.127) p(xn|zn) = N(xn|Czn + c, Σ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,650,3286,"Show that this extension can be re-case in the framework discussed in this chapter by deﬁning a state vector z with an additional component ﬁxed at unity, and then aug- menting the matrices A and C using extra columns corresponding to the parameters a and c.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3287,"In this exercise, we show that when the Kalman ﬁlter equations are applied to independent observations, they reduce to the results given in Section 2.3 for the maximum likelihood solution for a single Gaussian distribution. Consider the prob- lem of ﬁnding the mean µ of a single Gaussian random variable x, in which we are given a set of independent observations {x1, . . . , xN}. To model this we can use \end{verbatim} egin{verbatim} a linear dynamical system governed by (13.75) and (13.76), with latent variables {z1, . . . , zN} in which C becomes the identity matrix and where the transition prob- ability A = 0 because the observations are independent. Let the parameters m0 and V0 of the initial state be denoted by µ0 and σ2 0, respectively, and suppose that Σ becomes σ2. Write down the corresponding Kalman ﬁlter equations starting from the general results (13.89) and (13.90), together with (13.94) and (13.95). Show that these are equivalent to the results (2.141) and (2.142) obtained directly by consider- ing independent data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3288,"(⋆⋆⋆) Consider a special case of the linear dynamical system of Section 13.3 that is equivalent to probabilistic PCA, so that the transition matrix A = 0, the covariance Γ = I, and the noise covariance Σ = σ2I. By making use of the matrix inversion identity (C.7) show that, if the emission density matrix C is denoted W, then the posterior distribution over the hidden states deﬁned by (13.89) and (13.90) reduces to the result (12.42) for probabilistic PCA.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3289,"Consider a linear dynamical system of the form discussed in Sec- tion 13.3 in which the amplitude of the observation noise goes to zero, so that Σ = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3290,"Show that the posterior distribution for zn has mean xn and zero variance. This accords with our intuition that if there is no noise, we should just use the current observation xn to estimate the state variable zn and ignore all previous observations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3291,"Consider a special case of the linear dynamical system of Section 13.3 in which the state variable zn is constrained to be equal to the previous state variable, which corresponds to A = I and Γ = 0. For simplicity, assume also that V0 →∞ so that the initial conditions for z are unimportant, and the predictions are determined purely by the data. Use proof by induction to show that the posterior mean for state zn is determined by the average of x1, . . . , xn. This corresponds to the intuitive result that if the state variable is constant, our best estimate is obtained by averaging the observations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3292,"Starting from the backwards recursion equation (13.99), derive the RTS smoothing equations (13.100) and (13.101) for the Gaussian linear dynamical sys- tem.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3293,"Starting from the result (13.65) for the pairwise posterior marginal in a state space model, derive the speciﬁc form (13.103) for the case of the Gaussian linear dynamical system.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3294,"(⋆⋆) Starting from the result (13.103) and by substituting for α(zn) using (13.84), verify the result (13.104) for the covariance between zn and zn−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3295,Verify the results (13.110) and (13.111) for the M-step equations for µ0 and V0 in the linear dynamical system.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,651,3296,(⋆⋆) Verify the results (13.113) and (13.114) for the M-step equations for A and Γ in the linear dynamical system.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Sequential Data,13,652,3297,(⋆⋆) Verify the results (13.115) and (13.116) for the M-step equations for C and Σ in the linear dynamical system.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,653,3298,"In earlier chapters, we have explored a range of different models for solving classiﬁ- cation and regression problems. It is often found that improved performance can be obtained by combining multiple models together in some way, instead of just using a single model in isolation. For instance, we might train L different models and then make predictions using the average of the predictions made by each model. Such combinations of models are sometimes called committees. In Section 14.2, we dis- cuss ways to apply the committee concept in practice, and we also give some insight into why it can sometimes be an effective procedure.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,653,3299,"One important variant of the committee method, known as boosting, involves training multiple models in sequence in which the error function used to train a par- ticular model depends on the performance of the previous models. This can produce substantial improvements in performance compared to the use of a single model and is discussed in Section 14.3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,654,3300,"Instead of averaging the predictions of a set of models, an alternative form of \end{verbatim} egin{verbatim} model combination is to select one of the models to make the prediction, in which the choice of model is a function of the input variables. Thus different models be- come responsible for making predictions in different regions of input space. One widely used framework of this kind is known as a decision tree in which the selec- tion process can be described as a sequence of binary selections corresponding to the traversal of a tree structure and is discussed in Section 14.4. In this case, the individual models are generally chosen to be very simple, and the overall ﬂexibility of the model arises from the input-dependent selection process. Decision trees can be applied to both classiﬁcation and regression problems.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,654,3301,"One limitation of decision trees is that the division of input space is based on hard splits in which only one model is responsible for making predictions for any given value of the input variables. The decision process can be softened by moving to a probabilistic framework for combining models, as discussed in Section 14.5. For example, if we have a set of K models for a conditional distribution p(t|x, k) where x is the input variable, t is the target variable, and k = 1, . . . , K indexes the model, then we can form a probabilistic mixture of the form p(t|x) = K  k=1 πk(x)p(t|x, k) (14.1) in which πk(x) = p(k|x) represent the input-dependent mixing coefﬁcients. Such models can be viewed as mixture distributions in which the component densities, as well as the mixing coefﬁcients, are conditioned on the input variables and are known as mixtures of experts. They are closely related to the mixture density network model discussed in Section 5.6.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,654,3302,"It is important to distinguish between model combination methods and Bayesian model averaging, as the two are often confused. To understand the difference, con- sider the example of density estimation using a mixture of Gaussians in which several Gaussian components are combined probabilistically. The model contains a binary latent variable z that indicates which component of the mixture is responsible for generating the corresponding data point. Thus the model is speciﬁed in terms of a joint distribution p(x, z) (14.2) and the corresponding density over the observed variable x is obtained by marginal- izing over the latent variable p(x) =  z p(x, z).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,655,3303,"In the case of our Gaussian mixture example, this leads to a distribution of the form p(x) = K  k=1 πkN(x|µk, Σk) (14.4) with the usual interpretation of the symbols. This is an example of model combi- nation. For independent, identically distributed data, we can use (14.3) to write the marginal probability of a data set X = {x1, . . . , xN} in the form p(X) = N  n=1 p(xn) = N  n=1  zn p(xn, zn) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,655,3304,"Thus we see that each observed data point xn has a corresponding latent variable zn. Now suppose we have several different models indexed by h = 1, . . . , H with prior probabilities p(h). For instance one model might be a mixture of Gaussians and another model might be a mixture of Cauchy distributions. The marginal distribution over the data set is given by p(X) = H  h=1 p(X|h)p(h).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,655,3305,"This is an example of Bayesian model averaging. The interpretation of this summa- tion over h is that just one model is responsible for generating the whole data set, and the probability distribution over h simply reﬂects our uncertainty as to which model that is. As the size of the data set increases, this uncertainty reduces, and the posterior probabilities p(h|X) become increasingly focussed on just one of the models.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,655,3306,"This highlights the key difference between Bayesian model averaging and model combination, because in Bayesian model averaging the whole data set is generated by a single model. By contrast, when we combine multiple models, as in (14.5), we see that different data points within the data set can potentially be generated from different values of the latent variable z and hence by different components.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,655,3307,"Although we have considered the marginal probability p(X), the same consid- erations apply for the predictive density p(x|X) or for conditional distributions such as p(t|x, X, T).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,656,3308,"The simplest way to construct a committee is to average the predictions of a set of individual models. Such a procedure can be motivated from a frequentist perspective by considering the trade-off between bias and variance, which decomposes the er- ror due to a model into the bias component that arises from differences between the model and the true function to be predicted, and the variance component that repre- sents the sensitivity of the model to the individual data points. Recall from Figure 3.5 \end{verbatim} egin{verbatim} that when we trained multiple polynomials using the sinusoidal data, and then aver- aged the resulting functions, the contribution arising from the variance term tended to cancel, leading to improved predictions. When we averaged a set of low-bias mod- els (corresponding to higher order polynomials), we obtained accurate predictions for the underlying sinusoidal function from which the data were generated.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,656,3309,"In practice, of course, we have only a single data set, and so we have to ﬁnd a way to introduce variability between the different models within the committee.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,656,3310,"One approach is to use bootstrap data sets, discussed in Section 1.2.3. Consider a regression problem in which we are trying to predict the value of a single continuous variable, and suppose we generate M bootstrap data sets and then use each to train a separate copy ym(x) of a predictive model where m = 1, . . . , M. The committee prediction is given by yCOM(x) = 1 M M  m=1 ym(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,656,3311,"This procedure is known as bootstrap aggregation or bagging (Breiman, 1996). Suppose the true regression function that we are trying to predict is given by h(x), so that the output of each of the models can be written as the true value plus an error in the form ym(x) = h(x) + ϵm(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,656,3312,The average sum-of-squares error then takes the form Ex  {ym(x) −h(x)}2 = Ex  ϵm(x)2 (14.9) where Ex[·] denotes a frequentist expectation with respect to the distribution of the input vector x. The average error made by the models acting individually is therefore EAV = 1 M M  m=1 Ex  ϵm(x)2 .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,657,3313,"Similarly, the expected error from the committee (14.7) is given by ECOM = Ex ⎡ ⎣  1 M M  m=1 ym(x) −h(x) 2⎤ ⎦ = Ex ⎡ ⎣  1 M M  m=1 ϵm(x) 2⎤ ⎦ (14.11) If we assume that the errors have zero mean and are uncorrelated, so that Ex [ϵm(x)] = 0 (14.12) Ex [ϵm(x)ϵl(x)] = 0, m ̸= l (14.13) \end{verbatim} egin{verbatim} then we obtain ECOM = 1 M EAV.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,657,3314,"This apparently dramatic result suggests that the average error of a model can be reduced by a factor of M simply by averaging M versions of the model. Unfortu- nately, it depends on the key assumption that the errors due to the individual models are uncorrelated. In practice, the errors are typically highly correlated, and the reduc- tion in overall error is generally small. It can, however, be shown that the expected committee error will not exceed the expected error of the constituent models, so that ECOM ⩽EAV. In order to achieve more signiﬁcant improvements, we turn to a more sophisticated technique for building committees, known as boosting.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,657,3315,"Boosting is a powerful technique for combining multiple ‘base’ classiﬁers to produce a form of committee whose performance can be signiﬁcantly better than that of any of the base classiﬁers. Here we describe the most widely used form of boosting algorithm called AdaBoost, short for ‘adaptive boosting’, developed by Freund and Schapire (1996). Boosting can give good results even if the base classiﬁers have a performance that is only slightly better than random, and hence sometimes the base classiﬁers are known as weak learners. Originally designed for solving classiﬁcation problems, boosting can also be extended to regression (Friedman, 2001).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,657,3316,"The principal difference between boosting and the committee methods such as bagging discussed above, is that the base classiﬁers are trained in sequence, and each base classiﬁer is trained using a weighted form of the data set in which the weighting coefﬁcient associated with each data point depends on the performance of the previous classiﬁers. In particular, points that are misclassiﬁed by one of the base classiﬁers are given greater weight when used to train the next classiﬁer in the sequence. Once all the classiﬁers have been trained, their predictions are then combined through a weighted majority voting scheme, as illustrated schematically in Figure 14.1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,657,3317,"Consider a two-class classiﬁcation problem, in which the training data comprises input vectors x1, . . . , xN along with corresponding binary target variables t1, . . . , tN where tn ∈{−1, 1}. Each data point is given an associated weighting parameter wn, which is initially set 1/N for all data points. We shall suppose that we have a procedure available for training a base classiﬁer using weighted data to give a function y(x) ∈{−1, 1}. At each stage of the algorithm, AdaBoost trains a new classiﬁer using a data set in which the weighting coefﬁcients are adjusted according to the performance of the previously trained classiﬁer so as to give greater weight to the misclassiﬁed data points. Finally, when the desired number of base classiﬁers have been trained, they are combined to form a committee using coefﬁcients that give different weight to different base classiﬁers. The precise form of the AdaBoost algorithm is given below.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,658,3318,Figure 14.1 Schematic illustration of the boosting framework.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,658,3319,"base classiﬁer ym(x) is trained on a weighted form of the train- ing set (blue arrows) in which the weights w(m) n depend on the performance of the pre- vious base classiﬁer ym−1(x) (green arrows). Once all base classiﬁers have been trained, they are combined to give the ﬁnal classiﬁer YM(x) (red arrows).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,658,3320,"1. Initialize the data weighting coefﬁcients {wn} by setting w(1) n = 1/N for n = 1, . . . , N.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,658,3321,"2. For m = 1, . . . , M: (a) Fit a classiﬁer ym(x) to the training data by minimizing the weighted error function Jm = N  n=1 w(m) n I(ym(xn) ̸= tn) (14.15) where I(ym(xn) ̸= tn) is the indicator function and equals 1 when ym(xn) ̸= tn and 0 otherwise.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,658,3322,and then use these to evaluate αm = ln 1 −ϵm ϵm .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,659,3323,"(c) Update the data weighting coefﬁcients w(m+1) n = w(m) n exp {αmI(ym(xn) ̸= tn)} (14.18) \end{verbatim} egin{verbatim} 3. Make predictions using the ﬁnal model, which is given by YM(x) = sign  M  m=1 αmym(x)  .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,659,3324,"We see that the ﬁrst base classiﬁer y1(x) is trained using weighting coefﬁ- cients w(1) n that are all equal, which therefore corresponds to the usual procedure for training a single classiﬁer. From (14.18), we see that in subsequent iterations the weighting coefﬁcients w(m) n are increased for data points that are misclassiﬁed and decreased for data points that are correctly classiﬁed. Successive classiﬁers are therefore forced to place greater emphasis on points that have been misclassiﬁed by previous classiﬁers, and data points that continue to be misclassiﬁed by successive classiﬁers receive ever greater weight. The quantities ϵm represent weighted mea- sures of the error rates of each of the base classiﬁers on the data set. We therefore see that the weighting coefﬁcients αm deﬁned by (14.17) give greater weight to the more accurate classiﬁers when computing the overall output given by (14.19).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,659,3325,"The AdaBoost algorithm is illustrated in Figure 14.2, using a subset of 30 data points taken from the toy classiﬁcation data set shown in Figure A.7. Here each base learners consists of a threshold on one of the input variables. This simple classiﬁer corresponds to a form of decision tree known as a ‘decision stumps’, i.e., a deci- sion tree with a single node. Thus each base learner classiﬁes an input according to whether one of the input features exceeds some threshold and therefore simply parti- tions the space into two regions separated by a linear decision surface that is parallel to one of the axes.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,659,3326,"Boosting was originally motivated using statistical learning theory, leading to upper bounds on the generalization error. However, these bounds turn out to be too loose to have practical value, and the actual performance of boosting is much better than the bounds alone would suggest. Friedman et al. (2000) gave a different and very simple interpretation of boosting in terms of the sequential minimization of an exponential error function.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,659,3327,"Consider the exponential error function deﬁned by E = N  n=1 exp {−tnfm(xn)} (14.20) where fm(x) is a classiﬁer deﬁned in terms of a linear combination of base classiﬁers yl(x) of the form fm(x) = 1 2 m  l=1 αlyl(x) (14.21) and tn ∈{−1, 1} are the training set target values. Our goal is to minimize E with respect to both the weighting coefﬁcients αl and the parameters of the base classiﬁers yl(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,660,3328,"Figure 14.2 Illustration of boosting in which the base learners consist of simple thresholds applied to one or other of the axes. Each ﬁgure shows the number m of base learners trained so far, along with the decision boundary of the most recent base learner (dashed black line) and the combined decision boundary of the en- semble (solid green line). Each data point is depicted by a circle whose radius indicates the weight assigned to that data point when training the most recently added base learner. Thus, for instance, we see that points that are misclassiﬁed by the m = 1 base learner are given greater weight when training the m = 2 base learner.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3329,"Instead of doing a global error function minimization, however, we shall sup- pose that the base classiﬁers y1(x), . . . , ym−1(x) are ﬁxed, as are their coefﬁcients α1, . . . , αm−1, and so we are minimizing only with respect to αm and ym(x). Sep- arating off the contribution from base classiﬁer ym(x), we can then write the error function in the form E = N  n=1 exp −tnfm−1(xn) −1 2tnαmym(xn) = N  n=1 w(m) n exp −1 2tnαmym(xn) (14.22) where the coefﬁcients w(m) n = exp{−tnfm−1(xn)} can be viewed as constants because we are optimizing only αm and ym(x). If we denote by Tm the set of data points that are correctly classiﬁed by ym(x), and if we denote the remaining misclassiﬁed points by Mm, then we can in turn rewrite the error function in the \end{verbatim} egin{verbatim} form E = e−αm/2  n∈Tm w(m) n + eαm/2  n∈Mm w(m) n = (eαm/2 −e−αm/2) N  n=1 w(m) n I(ym(xn) ̸= tn) + e−αm/2 N  n=1 w(m) n .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3330,"When we minimize this with respect to ym(x), we see that the second term is con- stant, and so this is equivalent to minimizing (14.15) because the overall multiplica- tive factor in front of the summation does not affect the location of the minimum.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3331,"Similarly, minimizing with respect to αm, we obtain (14.17) in which ϵm is deﬁned by (14.16).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3332,"From (14.22) we see that, having found αm and ym(x), the weights on the data points are updated using w(m+1) n = w(m) n exp −1 2tnαmym(xn) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3333,Making use of the fact that tnym(xn) = 1 −2I(ym(xn) ̸= tn) (14.25) we see that the weights w(m) n are updated at the next iteration using w(m+1) n = w(m) n exp(−αm/2) exp {αmI(ym(xn) ̸= tn)} .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3334,"Because the term exp(−αm/2) is independent of n, we see that it weights all data points by the same factor and so can be discarded. Thus we obtain (14.18).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3335,"Finally, once all the base classiﬁers are trained, new data points are classiﬁed by evaluating the sign of the combined function deﬁned according to (14.21). Because the factor of 1/2 does not affect the sign it can be omitted, giving (14.19).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,661,3336,"The exponential error function that is minimized by the AdaBoost algorithm differs from those considered in previous chapters. To gain some insight into the nature of the exponential error function, we ﬁrst consider the expected error given by Ex,t [exp{−ty(x)}] =  t  exp{−ty(x)}p(t|x)p(x) dx.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,662,3337,"Figure 14.3 Plot of the exponential (green) and rescaled cross-entropy (red) error functions along with the hinge er- ror (blue) used in support vector machines, and the misclassiﬁcation error (black).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,662,3338,"If we perform a variational minimization with respect to all possible functions y(x), we obtain y(x) = 1 2 ln p(t = 1|x) p(t = −1|x) (14.28) \end{verbatim} egin{verbatim} Note that for large negative values of z = ty(x), the cross-entropy gives a linearly in- creasing penalty, whereas the expo- nential loss gives an exponentially in- creasing penalty.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,662,3339,"which is half the log-odds. Thus the AdaBoost algorithm is seeking the best approx- imation to the log odds ratio, within the space of functions represented by the linear combination of base classiﬁers, subject to the constrained minimization resulting from the sequential optimization strategy. This result motivates the use of the sign function in (14.19) to arrive at the ﬁnal classiﬁcation decision.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,662,3340,"We have already seen that the minimizer y(x) of the cross-entropy error (4.90) for two-class classiﬁcation is given by the posterior class probability. In the case of a target variable t ∈{−1, 1}, we have seen that the error function is given by ln(1 + exp(−yt)). This is compared with the exponential error function in Fig- ure 14.3, where we have divided the cross-entropy error by a constant factor ln(2) so that it passes through the point (0, 1) for ease of comparison. We see that both can be seen as continuous approximations to the ideal misclassiﬁcation error func- tion. An advantage of the exponential error is that its sequential minimization leads to the simple AdaBoost scheme. One drawback, however, is that it penalizes large negative values of ty(x) much more strongly than cross-entropy. In particular, we see that for large negative values of ty, the cross-entropy grows linearly with |ty|, whereas the exponential error function grows exponentially with |ty|. Thus the ex- ponential error function will be much less robust to outliers or misclassiﬁed data points. Another important difference between cross-entropy and the exponential er- ror function is that the latter cannot be interpreted as the log likelihood function of any well-deﬁned probabilistic model. Furthermore, the exponential error does not generalize to classiﬁcation problems having K > 2 classes, again in contrast to the cross-entropy for a probabilistic model, which is easily generalized to give (4.108).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,663,3341,Figure 14.4 Comparison of the squared error (green) with the absolute error (red) showing how the latter places much less emphasis on large errors and hence is more robust to outliers and mislabelled data points.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,663,3342,Figure 14.5 Illustration of a two-dimensional in- put space that has been partitioned into ﬁve regions using axis-aligned boundaries.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,663,3343,"The interpretation of boosting as the sequential optimization of an additive model under an exponential error (Friedman et al., 2000) opens the door to a wide range of boosting-like algorithms, including multiclass extensions, by altering the choice of error function. It also motivates the extension to regression problems (Friedman, 2001). If we consider a sum-of-squares error function for regression, then sequential minimization of an additive model of the form (14.21) simply involves ﬁtting each new base classiﬁer to the residual errors tn−fm−1(xn) from the previous model. As we have noted, however, the sum-of-squares error is not robust to outliers, and this \end{verbatim} egin{verbatim} 0 z E(z) −1 1 can be addressed by basing the boosting algorithm on the absolute deviation |y −t| instead. These two error functions are compared in Figure 14.4.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,663,3344,"There are various simple, but widely used, models that work by partitioning the input space into cuboid regions, whose edges are aligned with the axes, and then assigning a simple model (for example, a constant) to each region. They can be viewed as a model combination method in which only one model is responsible for making predictions at any given point in input space. The process of selecting a speciﬁc model, given a new input x, can be described by a sequential decision making process corresponding to the traversal of a binary tree (one that splits into two branches at each node). Here we focus on a particular tree-based framework called classiﬁcation and regression trees, or CART (Breiman et al., 1984), although there are many other variants going by such names as ID3 and C4.5 (Quinlan, 1986; Quinlan, 1993).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,664,3345,Figure 14.6 Binary tree corresponding to the par- titioning of input space shown in Fig- ure 14.5.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,664,3346,"Figure 14.5 shows an illustration of a recursive binary partitioning of the input space, along with the corresponding tree structure. In this example, the ﬁrst step A B C D E θ1 θ4 θ2 θ3 x1 x2 \end{verbatim} egin{verbatim} x1 > θ1 x2 > θ3 x1 ⩽θ4 x2 ⩽θ2 A B C D E divides the whole of the input space into two regions according to whether x1 ⩽θ1 or x1 > θ1 where θ1 is a parameter of the model. This creates two subregions, each of which can then be subdivided independently. For instance, the region x1 ⩽θ1 is further subdivided according to whether x2 ⩽θ2 or x2 > θ2, giving rise to the regions denoted A and B. The recursive subdivision can be described by the traversal of the binary tree shown in Figure 14.6. For any new input x, we determine which region it falls into by starting at the top of the tree at the root node and following a path down to a speciﬁc leaf node according to the decision criteria at each node.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,664,3347,"Note that such decision trees are not probabilistic graphical models. Within each region, there is a separate model to predict the target variable. For instance, in regression we might simply predict a constant over each region, or in classiﬁcation we might assign each region to a speciﬁc class. A key property of tree- based models, which makes them popular in ﬁelds such as medical diagnosis, for example, is that they are readily interpretable by humans because they correspond to a sequence of binary decisions applied to the individual input variables. For in- stance, to predict a patient’s disease, we might ﬁrst ask “is their temperature greater than some threshold?”. If the answer is yes, then we might next ask “is their blood pressure less than some threshold?”. Each leaf of the tree is then associated with a speciﬁc diagnosis.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,664,3348,"In order to learn such a model from a training set, we have to determine the structure of the tree, including which input variable is chosen at each node to form the split criterion as well as the value of the threshold parameter θi for the split. We also have to determine the values of the predictive variable within each region.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,664,3349,"Consider ﬁrst a regression problem in which the goal is to predict a single target variable t from a D-dimensional vector x = (x1, . . . , xD)T of input variables. The training data consists of input vectors {x1, . . . , xN} along with the corresponding continuous labels {t1, . . . , tN}. If the partitioning of the input space is given, and we minimize the sum-of-squares error function, then the optimal value of the predictive variable within any given region is just given by the average of the values of tn for those data points that fall in that region.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,665,3350,"Now consider how to determine the structure of the decision tree. Even for a ﬁxed number of nodes in the tree, the problem of determining the optimal structure (including choice of input variable for each split as well as the corresponding thresh- \end{verbatim} egin{verbatim} olds) to minimize the sum-of-squares error is usually computationally infeasible due to the combinatorially large number of possible solutions. Instead, a greedy opti- mization is generally done by starting with a single root node, corresponding to the whole input space, and then growing the tree by adding nodes one at a time. At each step there will be some number of candidate regions in input space that can be split, corresponding to the addition of a pair of leaf nodes to the existing tree. For each of these, there is a choice of which of the D input variables to split, as well as the value of the threshold. The joint optimization of the choice of region to split, and the choice of input variable and threshold, can be done efﬁciently by exhaustive search noting that, for a given choice of split variable and threshold, the optimal choice of predictive variable is given by the local average of the data, as noted earlier. This is repeated for all possible choices of variable to be split, and the one that gives the smallest residual sum-of-squares error is retained.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,665,3351,"Given a greedy strategy for growing the tree, there remains the issue of when to stop adding nodes. A simple approach would be to stop when the reduction in residual error falls below some threshold. However, it is found empirically that often none of the available splits produces a signiﬁcant reduction in error, and yet after several more splits a substantial error reduction is found. For this reason, it is com- mon practice to grow a large tree, using a stopping criterion based on the number of data points associated with the leaf nodes, and then prune back the resulting tree.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,665,3352,"The pruning is based on a criterion that balances residual error against a measure of model complexity. If we denote the starting tree for pruning by T0, then we deﬁne T ⊂T0 to be a subtree of T0 if it can be obtained by pruning nodes from T0 (in other words, by collapsing internal nodes by combining the corresponding regions).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,665,3353,"Suppose the leaf nodes are indexed by τ = 1, . . . , |T|, with leaf node τ representing a region Rτ of input space having Nτ data points, and |T| denoting the total number of leaf nodes. The optimal prediction for region Rτ is then given by yτ = 1 Nτ  xn∈Rτ tn (14.29) and the corresponding contribution to the residual sum-of-squares is then Qτ(T) =  xn∈Rτ {tn −yτ}2 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,665,3354,"The pruning criterion is then given by C(T) = |T |  τ=1 Qτ(T) + λ|T| (14.31) The regularization parameter λ determines the trade-off between the overall residual sum-of-squares error and the complexity of the model as measured by the number |T| of leaf nodes, and its value is chosen by cross-validation.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3355,"For classiﬁcation problems, the process of growing and pruning the tree is sim- ilar, except that the sum-of-squares error is replaced by a more appropriate measure \end{verbatim} egin{verbatim} of performance. If we deﬁne pτk to be the proportion of data points in region Rτ assigned to class k, where k = 1, . . . , K, then two commonly used choices are the cross-entropy Qτ(T) = K  k=1 pτk ln pτk (14.32) and the Gini index Qτ(T) = K  k=1 pτk (1 −pτk) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3356,"These both vanish for pτk = 0 and pτk = 1 and have a maximum at pτk = 0.5. They encourage the formation of regions in which a high proportion of the data points are assigned to one class. The cross entropy and the Gini index are better measures than the misclassiﬁcation rate for growing the tree because they are more sensitive to the node probabilities. Also, unlike misclassiﬁcation rate, they are differentiable and hence better suited to gradient based optimization methods. For subsequent pruning of the tree, the misclassiﬁcation rate is generally used.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3357,"The human interpretability of a tree model such as CART is often seen as its major strength. However, in practice it is found that the particular tree structure that is learned is very sensitive to the details of the data set, so that a small change to the training data can result in a very different set of splits (Hastie et al., 2001).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3358,"There are other problems with tree-based methods of the kind considered in this section. One is that the splits are aligned with the axes of the feature space, which may be very suboptimal. For instance, to separate two classes whose optimal decision boundary runs at 45 degrees to the axes would need a large number of axis-parallel splits of the input space as compared to a single non-axis-aligned split.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3359,"Furthermore, the splits in a decision tree are hard, so that each region of input space is associated with one, and only one, leaf node model. The last issue is particularly problematic in regression where we are typically aiming to model smooth functions, and yet the tree model produces piecewise-constant predictions with discontinuities at the split boundaries.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,666,3360,"We have seen that standard decision trees are restricted by hard, axis-aligned splits of the input space. These constraints can be relaxed, at the expense of interpretability, by allowing soft, probabilistic splits that can be functions of all of the input variables, not just one of them at a time. If we also give the leaf models a probabilistic inter- pretation, we arrive at a fully probabilistic tree-based model called the hierarchical mixture of experts, which we consider in Section 14.5.3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,667,3361,"An alternative way to motivate the hierarchical mixture of experts model is to start with a standard probabilistic mixtures of unconditional density models such as Gaussians and replace the component densities with conditional distributions. Here Chapter 9 we consider mixtures of linear regression models (Section 14.5.1) and mixtures of \end{verbatim} egin{verbatim} logistic regression models (Section 14.5.2). In the simplest case, the mixing coefﬁ- cients are independent of the input variables. If we make a further generalization to allow the mixing coefﬁcients also to depend on the inputs then we obtain a mixture of experts model. Finally, if we allow each component in the mixture model to be itself a mixture of experts model, then we obtain a hierarchical mixture of experts.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,667,3362,"One of the many advantages of giving a probabilistic interpretation to the lin- ear regression model is that it can then be used as a component in more complex probabilistic models. This can be done, for instance, by viewing the conditional distribution representing the linear regression model as a node in a directed prob- abilistic graph. Here we consider a simple example corresponding to a mixture of linear regression models, which represents a straightforward extension of the Gaus- sian mixture model discussed in Section 9.2 to the case of conditional Gaussian distributions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,667,3363,"We therefore consider K linear regression models, each governed by its own weight parameter wk. In many applications, it will be appropriate to use a common noise variance, governed by a precision parameter β, for all K components, and this is the case we consider here. We will once again restrict attention to a single target variable t, though the extension to multiple outputs is straightforward. If we denote the mixing coefﬁcients by πk, then the mixture distribution can be written p(t|θ) = K  k=1 πkN(t|wT k φ, β−1) (14.34) where θ denotes the set of all adaptive parameters in the model, namely W = {wk}, π = {πk}, and β. The log likelihood function for this model, given a data set of observations {φn, tn}, then takes the form ln p(t|θ) = N  n=1 ln  K  k=1 πkN(tn|wT k φn, β−1)  (14.35) where t = (t1, . . . , tN)T denotes the vector of target variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,667,3364,"In order to maximize this likelihood function, we can once again appeal to the EM algorithm, which will turn out to be a simple extension of the EM algorithm for unconditional Gaussian mixtures of Section 9.2. We can therefore build on our expe- rience with the unconditional mixture and introduce a set Z = {zn} of binary latent variables where znk ∈{0, 1} in which, for each data point n, all of the elements k = 1, . . . , K are zero except for a single value of 1 indicating which component of the mixture was responsible for generating that data point. The joint distribution over latent and observed variables can be represented by the graphical model shown in Figure 14.7.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,667,3365,"The complete-data log likelihood function then takes the form ln p(t, Z|θ) = N  n=1 K  k=1 znk ln  πkN(tn|wT k φn, β−1)  .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,668,3366,"Figure 14.7 Probabilistic directed graph representing a mixture of linear regression models, deﬁned by (14.35).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,668,3367,"The EM algorithm begins by ﬁrst choosing an initial value θold for the model param- eters. In the E step, these parameter values are then used to evaluate the posterior probabilities, or responsibilities, of each component k for every data point n given by γnk = E[znk] = p(k|φn, θold) = πkN(tn|wT k φn, β−1)  j πjN(tn|wT j φn, β−1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,668,3368,"The responsibilities are then used to determine the expectation, with respect to the posterior distribution p(Z|t, θold), of the complete-data log likelihood, which takes the form Q(θ, θold) = EZ [ln p(t, Z|θ)] = N  n=1 K  k=1 γnk  ln πk + ln N(tn|wT k φn, β−1) .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,668,3369,"In the M step, we maximize the function Q(θ, θold) with respect to θ, keeping the γnk ﬁxed. For the optimization with respect to the mixing coefﬁcients πk we need to take account of the constraint  k πk = 1, which can be done with the aid of a Lagrange multiplier, leading to an M-step re-estimation equation for πk in the form πk = 1 N N  n=1 γnk.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,668,3370,Note that this has exactly the same form as the corresponding result for a simple mixture of unconditional Gaussians given by (9.22).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3371,"Next consider the maximization with respect to the parameter vector wk of the kth linear regression model. Substituting for the Gaussian distribution, we see that the function Q(θ, θold), as a function of the parameter vector wk, takes the form Q(θ, θold) = N  n=1 γnk −β 2 tn −wT k φn 2 + const (14.39) where the constant term includes the contributions from other weight vectors wj for j ̸= k. Note that the quantity we are maximizing is similar to the (negative of the) standard sum-of-squares error (3.12) for a single linear regression model, but with the inclusion of the responsibilities γnk. This represents a weighted least squares \end{verbatim} egin{verbatim} problem, in which the term corresponding to the nth data point carries a weighting coefﬁcient given by βγnk, which could be interpreted as an effective precision for each data point. We see that each component linear regression model in the mixture, governed by its own parameter vector wk, is ﬁtted separately to the whole data set in the M step, but with each data point n weighted by the responsibility γnk that model k takes for that data point. Setting the derivative of (14.39) with respect to wk equal to zero gives 0 = N  n=1 γnk tn −wT k φn φn (14.40) which we can write in matrix notation as 0 = ΦTRk(t −Φwk) (14.41) where Rk = diag(γnk) is a diagonal matrix of size N × N. Solving for wk, we obtain wk = ΦTRkΦ−1 ΦTRkt.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3372,"This represents a set of modiﬁed normal equations corresponding to the weighted least squares problem, of the same form as (4.99) found in the context of logistic regression. Note that after each E step, the matrix Rk will change and so we will have to solve the normal equations afresh in the subsequent M step.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3373,"Finally, we maximize Q(θ, θold) with respect to β. Keeping only terms that depend on β, the function Q(θ, θold) can be written Q(θ, θold) = N  n=1 K  k=1 γnk 1 2 ln β −β 2 tn −wT k φn 2 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3374,"Setting the derivative with respect to β equal to zero, and rearranging, we obtain the M-step equation for β in the form 1 β = 1 N N  n=1 K  k=1 γnk tn −wT k φn 2 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3375,"In Figure 14.8, we illustrate this EM algorithm using the simple example of ﬁtting a mixture of two straight lines to a data set having one input variable x and one target variable t. The predictive density (14.34) is plotted in Figure 14.9 using the converged parameter values obtained from the EM algorithm, corresponding to the right-hand plot in Figure 14.8.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,669,3376,"Also shown in this ﬁgure is the result of ﬁtting a single linear regression model, which gives a unimodal predictive density. We see that the mixture model gives a much better representation of the data distribution, and this is reﬂected in the higher likelihood value. However, the mixture model also assigns signiﬁcant probability mass to regions where there is no data because its predictive distribution is bimodal for all values of x. This problem can be resolved by extending the model to allow the mixture coefﬁcients themselves to be functions of x, leading to models such as the mixture density networks discussed in Section 5.6, and hierarchical mixture of experts discussed in Section 14.5.3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,670,3377,"Figure 14.8 Example of a synthetic data set, shown by the green points, having one input variable x and one target variable t, together with a mixture of two linear regression models whose mean functions y(x, wk), where k ∈{1, 2}, are shown by the blue and red lines. The upper three plots show the initial conﬁguration (left), the result of running 30 iterations of EM (centre), and the result after 50 iterations of EM (right). Here β was initialized to the reciprocal of the true variance of the set of target values. The lower three plots show the corresponding responsibilities plotted as a vertical line for each data point in which the length of the blue segment gives the posterior probability of the blue line for that data point (and similarly for the red segment).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,670,3378,"Because the logistic regression model deﬁnes a conditional distribution for the target variable, given the input vector, it is straightforward to use it as the component distribution in a mixture model, thereby giving rise to a richer family of conditional distributions compared to a single logistic regression model. This example involves a straightforward combination of ideas encountered in earlier sections of the book and will help consolidate these for the reader.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,670,3379,"The conditional distribution of the target variable, for a probabilistic mixture of K logistic regression models, is given by p(t|φ, θ) = K  k=1 πkyt k [1 −yk]1−t (14.45) where φ is the feature vector, yk = σ wT k φ is the output of component k, and θ denotes the adjustable parameters namely {πk} and {wk}.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,671,3380,"Figure 14.9 The left plot shows the predictive conditional density corresponding to the converged solution in Figure 14.8. This gives a log likelihood value of −3.0. A vertical slice through one of these plots at a particular value of x represents the corresponding conditional distribution p(t|x), which we see is bimodal. The plot on the right shows the predictive density for a single linear regression model ﬁtted to the same data set using maximum likelihood. This model has a smaller log likelihood of −27.6.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,671,3381,"Now suppose we are given a data set {φn, tn}. The corresponding likelihood \end{verbatim} egin{verbatim} function is then given by p(t|θ) = N  n=1  K  k=1 πkytn nk [1 −ynk]1−tn  (14.46) where ynk = σ(wT k φn) and t = (t1, . . . , tN)T. We can maximize this likelihood function iteratively by making use of the EM algorithm. This involves introducing latent variables znk that correspond to a 1-of-K coded binary indicator variable for each data point n. The complete-data likelihood function is then given by p(t, Z|θ) = N  n=1 K  k=1  πkytn nk [1 −ynk]1−tnznk (14.47) where Z is the matrix of latent variables with elements znk. We initialize the EM algorithm by choosing an initial value θold for the model parameters. In the E step, we then use these parameter values to evaluate the posterior probabilities of the com- ponents k for each data point n, which are given by γnk = E[znk] = p(k|φn, θold) = πkytn nk [1 −ynk]1−tn  j πjytn nj [1 −ynj]1−tn .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,671,3382,"These responsibilities are then used to ﬁnd the expected complete-data log likelihood as a function of θ, given by Q(θ, θold) = EZ [ln p(t, Z|θ)] = N  n=1 K  k=1 γnk {ln πk + tn ln ynk + (1 −tn) ln (1 −ynk)} .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,672,3383,"The M step involves maximization of this function with respect to θ, keeping θold, and hence γnk, ﬁxed. Maximization with respect to πk can be done in the usual way, with a Lagrange multiplier to enforce the summation constraint  k πk = 1, giving the familiar result πk = 1 N N  n=1 γnk.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,672,3384,"To determine the {wk}, we note that the Q(θ, θold) function comprises a sum over terms indexed by k each of which depends only on one of the vectors wk, so that the different vectors are decoupled in the M step of the EM algorithm. In other words, the different components interact only via the responsibilities, which are ﬁxed during the M step. Note that the M step does not have a closed-form solution and must be solved iteratively using, for instance, the iterative reweighted least squares (IRLS) algorithm. The gradient and the Hessian for the vector wk are given by ∇kQ = N  n=1 γnk(tn −ynk)φn (14.51) Hk = −∇k∇kQ = N  n=1 γnkynk(1 −ynk)φnφT n (14.52) where ∇k denotes the gradient with respect to wk. For ﬁxed γnk, these are indepen- dent of {wj} for j ̸= k and so we can solve for each wk separately using the IRLS algorithm. Thus the M-step equations for component k correspond simply to ﬁtting a single logistic regression model to a weighted data set in which data point n carries a weight γnk. Figure 14.10 shows an example of the mixture of logistic regression models applied to a simple classiﬁcation problem. The extension of this model to a mixture of softmax models for more than two classes is straightforward.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,672,3385,"In Section 14.5.1, we considered a mixture of linear regression models, and in Section 14.5.2 we discussed the analogous mixture of linear classiﬁers. Although these simple mixtures extend the ﬂexibility of linear models to include more com- plex (e.g., multimodal) predictive distributions, they are still very limited. We can further increase the capability of such models by allowing the mixing coefﬁcients themselves to be functions of the input variable, so that p(t|x) = K  k=1 πk(x)pk(t|x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,673,3386,"Figure 14.10 Illustration of a mixture of logistic regression models. The left plot shows data points drawn from two classes denoted red and blue, in which the background colour (which varies from pure red to pure blue) denotes the true probability of the class label. The centre plot shows the result of ﬁtting a single logistic regression model using maximum likelihood, in which the background colour denotes the corresponding probability of the class label. Because the colour is a near-uniform purple, we see that the model assigns a probability of around 0.5 to each of the classes over most of input space. The right plot shows the result of ﬁtting a mixture of two logistic regression models, which now gives much higher probability to the correct labels for many of the points in the blue class.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,673,3387,"This is known as a mixture of experts model (Jacobs et al., 1991) in which the mix- ing coefﬁcients πk(x) are known as gating functions and the individual component densities pk(t|x) are called experts. The notion behind the terminology is that differ- ent components can model the distribution in different regions of input space (they \end{verbatim} egin{verbatim} are ‘experts’ at making predictions in their own regions), and the gating functions determine which components are dominant in which region.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,673,3388,"The gating functions πk(x) must satisfy the usual constraints for mixing co- efﬁcients, namely 0 ⩽πk(x) ⩽1 and  k πk(x) = 1. They can therefore be represented, for example, by linear softmax models of the form (4.104) and (4.105).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,673,3389,"If the experts are also linear (regression or classiﬁcation) models, then the whole model can be ﬁtted efﬁciently using the EM algorithm, with iterative reweighted least squares being employed in the M step (Jordan and Jacobs, 1994).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,673,3390,"Such a model still has signiﬁcant limitations due to the use of linear models for the gating and expert functions. A much more ﬂexible model is obtained by using a multilevel gating function to give the hierarchical mixture of experts, or HME model (Jordan and Jacobs, 1994). To understand the structure of this model, imagine a mixture distribution in which each component in the mixture is itself a mixture distribution. For simple unconditional mixtures, this hierarchical mixture is trivially equivalent to a single ﬂat mixture distribution. However, when the mixing coefﬁcients are input dependent, this hierarchical model becomes nontrivial. The HME model can also be viewed as a probabilistic version of decision trees discussed in Section 14.4 and can again be trained efﬁciently by maximum likelihood using an EM algorithm with IRLS in the M step. A Bayesian treatment of the HME has been given by Bishop and Svens´en (2003) based on variational inference.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3391,"We shall not discuss the HME in detail here. However, it is worth pointing out the close connection with the mixture density network discussed in Section 5.6. The principal advantage of the mixtures of experts model is that it can be optimized by EM in which the M step for each mixture component and gating model involves a convex optimization (although the overall optimization is nonconvex). By con- trast, the advantage of the mixture density network approach is that the component \end{verbatim} egin{verbatim} densities and the mixing coefﬁcients share the hidden units of the neural network.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3392,"Furthermore, in the mixture density network, the splits of the input space are further relaxed compared to the hierarchical mixture of experts in that they are not only soft, and not constrained to be axis aligned, but they can also be nonlinear.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3393,"Consider a set models of the form p(t|x, zh, θh, h) in which x is the input vector, t is the target vector, h indexes the different models, zh is a latent vari- able for model h, and θh is the set of parameters for model h. Suppose the models have prior probabilities p(h) and that we are given a training set X = {x1, . . . , xN} and T = {t1, . . . , tN}. Write down the formulae needed to evaluate the predic- tive distribution p(t|x, X, T) in which the latent variables and the model index are marginalized out. Use these formulae to highlight the difference between Bayesian averaging of different models and the use of latent variables within a single model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3394,"The expected sum-of-squares error EAV for a simple committee model can be deﬁned by (14.10), and the expected error of the committee itself is given by (14.11). Assuming that the individual errors satisfy (14.12) and (14.13), derive the result (14.14).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3395,"By making use of Jensen’s inequality (1.115), for the special case of the convex function f(x) = x2, show that the average expected sum-of-squares error EAV of the members of a simple committee model, given by (14.10), and the expected error ECOM of the committee itself, given by (14.11), satisfy ECOM ⩽EAV.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3396,"By making use of Jensen’s in equality (1.115), show that the result (14.54) derived in the previous exercise hods for any error function E(y), not just sum-of- squares, provided it is a convex function of y.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3397,"Consider a committee in which we allow unequal weighting of the constituent models, so that yCOM(x) = M  m=1 αmym(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3398,"In order to ensure that the predictions yCOM(x) remain within sensible limits, sup- pose that we require that they be bounded at each value of x by the minimum and maximum values given by any of the members of the committee, so that ymin(x) ⩽yCOM(x) ⩽ymax(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,674,3399,"Show that a necessary and sufﬁcient condition for this constraint is that the coefﬁ- cients αm satisfy αm ⩾0, M  m=1 αm = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3400,"By differentiating the error function (14.23) with respect to αm, show that the parameters αm in the AdaBoost algorithm are updated using (14.17) in which ϵm is deﬁned by (14.16).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3401,"(⋆) By making a variational minimization of the expected exponential error function given by (14.27) with respect to all possible functions y(x), show that the minimizing function is given by (14.28).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3402,"Show that the exponential error function (14.20), which is minimized by the AdaBoost algorithm, does not correspond to the log likelihood of any well-behaved probabilistic model. This can be done by showing that the corresponding conditional distribution p(t|x) cannot be correctly normalized.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3403,Show that the sequential minimization of the sum-of-squares error func- tion for an additive model of the form (14.21) in the style of boosting simply involves ﬁtting each new base classiﬁer to the residual errors tn−fm−1(xn) from the previous model.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3404,"Verify that if we minimize the sum-of-squares error between a set of training values {tn} and a single predictive value t, then the optimal solution for t is given by the mean of the {tn}.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3405,"Consider a data set comprising 400 data points from class C1 and 400 data points from class C2. Suppose that a tree model A splits these into (300, 100) at the ﬁrst leaf node and (100, 300) at the second leaf node, where (n, m) denotes that n points are assigned to C1 and m points are assigned to C2. Similarly, suppose that a second tree model B splits them into (200, 400) and (200, 0). Evaluate the misclassiﬁcation rates for the two trees and hence show that they are equal. Similarly, evaluate the cross-entropy (14.32) and Gini index (14.33) for the two trees and show that they are both lower for tree B than for tree A.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3406,"(⋆⋆) Extend the results of Section 14.5.1 for a mixture of linear regression models to the case of multiple target values described by a vector t. To do this, make use of the results of Section 3.1.5.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3407,Verify that the complete-data log likelihood function for the mixture of linear regression models is given by (14.36).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3408,(⋆) Use the technique of Lagrange multipliers (Appendix E) to show that the M-step re-estimation equation for the mixing coefﬁcients in the mixture of linear regression models trained by maximum likelihood EM is given by (14.38).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,675,3409,"We have already noted that if we use a squared loss function in a regres- sion problem, the corresponding optimal prediction of the target variable for a new input vector is given by the conditional mean of the predictive distribution. Show that the conditional mean for the mixture of linear regression models discussed in Section 14.5.1 is given by a linear combination of the means of each component dis- tribution. Note that if the conditional distribution of the target data is multimodal, the conditional mean can give poor predictions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,676,3410,(⋆⋆⋆) Extend the logistic regression mixture model of Section 14.5.2 to a mixture of softmax classiﬁers representing C ⩾2 classes. Write down the EM algorithm for determining the parameters of this model through maximum likelihood.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,676,3411,"Consider a mixture model for a conditional distribution p(t|x) of the form p(t|x) = K  k=1 πkψk(t|x) (14.58) in which each mixture component ψk(t|x) is itself a mixture model. Show that this two-level hierarchical mixture is equivalent to a conventional single-level mixture model. Now suppose that the mixing coefﬁcients in both levels of such a hierar- chical model are arbitrary functions of x. Again, show that this hierarchical model is again equivalent to a single-level model with x-dependent mixing coefﬁcients.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,676,3412,"Finally, consider the case in which the mixing coefﬁcients at both levels of the hi- erarchical mixture are constrained to be linear classiﬁcation (logistic or softmax) models. Show that the hierarchical mixture cannot in general be represented by a single-level mixture having linear classiﬁcation models for the mixing coefﬁcients.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Combining Models,14,676,3413,"Hint: to do this it is sufﬁcient to construct a single counter-example, so consider a mixture of two components in which one of those components is itself a mixture of two components, with mixing coefﬁcients given by linear-logistic models. Show that this cannot be represented by a single-level mixture of 3 components having mixing coefﬁcients determined by a linear-softmax model.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,677,3414,"In this appendix, we give a brief introduction to the data sets used to illustrate some of the algorithms described in this book. Detailed information on ﬁle formats for these data sets, as well as the data ﬁles themselves, can be obtained from the book web site: http://research.microsoft.com/∼cmbishop/PRML Handwritten Digits The digits data used in this book is taken from the MNIST data set (LeCun et al., 1998), which itself was constructed by modifying a subset of the much larger data set produced by NIST (the National Institute of Standards and Technology). It com- prises a training set of 60, 000 examples and a test set of 10, 000 examples. Some of the data was collected from Census Bureau employees and the rest was collected from high-school children, and care was taken to ensure that the test examples were written by different individuals to the training examples.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,677,3415,"The original NIST data had binary (black or white) pixels. To create MNIST, these images were size normalized to ﬁt in a 20×20 pixel box while preserving their aspect ratio. As a consequence of the anti-aliasing used to change the resolution of the images, the resulting MNIST digits are grey scale. These images were then centred in a 28 × 28 box. Examples of the MNIST digits are shown in Figure A.1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,677,3416,"Error rates for classifying the digits range from 12% for a simple linear classi- ﬁer, through 0.56% for a carefully designed support vector machine, to 0.4% for a convolutional neural network (LeCun et al., 1998).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,678,3417,Figure A.1 One hundred examples of the MNIST digits chosen at ran- dom from the training set.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,678,3418,"This is a synthetic data set that arose out of a project aimed at measuring nonin- vasively the proportions of oil, water, and gas in North Sea oil transfer pipelines (Bishop and James, 1993). It is based on the principle of dual-energy gamma densit- ometry. The ideas is that if a narrow beam of gamma rays is passed through the pipe, the attenuation in the intensity of the beam provides information about the density of material along its path. Thus, for instance, the beam will be attenuated more strongly by oil than by gas.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,678,3419,"A single attenuation measurement alone is not sufﬁcient because there are two degrees of freedom corresponding to the fraction of oil and the fraction of water (the fraction of gas is redundant because the three fractions must add to one). To address this, two gamma beams of different energies (in other words different frequencies or wavelengths) are passed through the pipe along the same path, and the attenuation of each is measured. Because the absorbtion properties of different materials vary dif- ferently as a function of energy, measurement of the attenuations at the two energies provides two independent pieces of information. Given the known absorbtion prop- erties of oil, water, and gas at the two energies, it is then a simple matter to calculate the average fractions of oil and water (and hence of gas) measured along the path of the gamma beams.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,679,3420,"Figure A.2 The three geometrical conﬁgurations of the oil, water, and gas phases used to generate the oil- ﬂow data set. For each conﬁguration, the pro- portions of the three phases can vary.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,679,3421,"Figure A.3 Cross section of the pipe showing the arrangement of the six beam lines, each of which comprises a single dual- energy gamma densitometer. Note that the vertical beams are asymmetrically arranged relative to the central axis (shown by the dotted line).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,679,3422,"There is a further complication, however, associated with the motion of the ma- terials along the pipe. If the ﬂow velocity is small, then the oil ﬂoats on top of the water with the gas sitting above the oil. This is known as a laminar or stratiﬁed \end{verbatim} egin{verbatim} A. DATA SETS Mix Gas Water Oil Homogeneous Stratiﬁed Annular ﬂow conﬁguration and is illustrated in Figure A.2. As the ﬂow velocity is increased, more complex geometrical conﬁgurations of the oil, water, and gas can arise. For the purposes of this data set, two speciﬁc idealizations are considered. In the annular conﬁguration the oil, water, and gas form concentric cylinders with the water around the outside and the gas in the centre, whereas in the homogeneous conﬁguration the oil, water and gas are assumed to be intimately mixed as might occur at high ﬂow velocities under turbulent conditions. These conﬁgurations are also illustrated in Figure A.2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3423,"We have seen that a single dual-energy beam gives the oil and water fractions measured along the path length, whereas we are interested in the volume fractions of oil and water. This can be addressed by using multiple dual-energy gamma densit- ometers whose beams pass through different regions of the pipe. For this particular data set, there are six such beams, and their spatial arrangement is shown in Fig- ure A.3. A single observation is therefore represented by a 12-dimensional vector comprising the fractions of oil and water measured along the paths of each of the beams. We are, however, interested in obtaining the overall volume fractions of the three phases in the pipe. This is much like the classical problem of tomographic re- construction, used in medical imaging for example, in which a two-dimensional dis- \end{verbatim} egin{verbatim} A. DATA SETS tribution is to be reconstructed from an number of one-dimensional averages. Here there are far fewer line measurements than in a typical tomography application. On the other hand the range of geometrical conﬁgurations is much more limited, and so the conﬁguration, as well as the phase fractions, can be predicted with reasonable accuracy from the densitometer data.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3424,"For safety reasons, the intensity of the gamma beams is kept relatively weak and so to obtain an accurate measurement of the attenuation, the measured beam intensity is integrated over a speciﬁc time interval. For a ﬁnite integration time, there are random ﬂuctuations in the measured intensity due to the fact that the gamma beams comprise discrete packets of energy called photons. In practice, the integration time is chosen as a compromise between reducing the noise level (which requires a long integration time) and detecting temporal variations in the ﬂow (which requires a short integration time). The oil ﬂow data set is generated using realistic known values for the absorption properties of oil, water, and gas at the two gamma energies used, and with a speciﬁc choice of integration time (10 seconds) chosen as characteristic of a typical practical setup.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3425,Each point in the data set is generated independently using the following steps: 1. Choose one of the three phase conﬁgurations at random with equal probability.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3426,"2. Choose three random numbers f1, f2 and f3 from the uniform distribution over (0, 1) and deﬁne foil = f1 f1 + f2 + f3 , fwater = f2 f1 + f2 + f3 .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3427,This treats the three phases on an equal footing and ensures that the volume fractions add to one.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3428,"3. For each of the six beam lines, calculate the effective path lengths through oil and water for the given phase conﬁguration.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3429,4. Perturb the path lengths using the Poisson distribution based on the known beam intensities and integration time to allow for the effect of photon statistics.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3430,"Each point in the data set comprises the 12 path length measurements, together with the fractions of oil and water and a binary label describing the phase conﬁgu- ration. The data set is divided into training, validation, and test sets, each of which comprises 1, 000 independent data points. Details of the data format are available from the book web site.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,680,3431,"In Bishop and James (1993), statistical machine learning techniques were used to predict the volume fractions and also the geometrical conﬁguration of the phases shown in Figure A.2, from the 12-dimensional vector of measurements. The 12- dimensional observation vectors can also be used to test data visualization algo- rithms.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,681,3432,Figure A.4 The Old Faithful geyser in Yellowstone National Park.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,681,3433,"This data set has a rich and interesting structure, as follows. For any given conﬁguration there are two degrees of freedom corresponding to the fractions of \end{verbatim} egin{verbatim} A. DATA SETS oil and water, and so for inﬁnite integration time the data will locally live on a two- dimensional manifold. For a ﬁnite integration time, the individual data points will be perturbed away from the manifold by the photon noise. In the homogeneous phase conﬁguration, the path lengths in oil and water are linearly related to the fractions of oil and water, and so the data points lie close to a linear manifold. For the annular conﬁguration, the relationship between phase fraction and path length is nonlinear and so the manifold will be nonlinear. In the case of the laminar conﬁguration the situation is even more complex because small variations in the phase fractions can cause one of the horizontal phase boundaries to move across one of the horizontal beam lines leading to a discontinuous jump in the 12-dimensional observation space.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,681,3434,"In this way, the two-dimensional nonlinear manifold for the laminar conﬁguration is broken into six distinct segments. Note also that some of the manifolds for different phase conﬁgurations meet at speciﬁc points, for example if the pipe is ﬁlled entirely with oil, it corresponds to speciﬁc instances of the laminar, annular, and homoge- neous conﬁgurations.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,681,3435,"Old Faithful, shown in Figure A.4, is a hydrothermal geyser in Yellowstone National Park in the state of Wyoming, U.S.A., and is a popular tourist attraction. Its name stems from the supposed regularity of its eruptions.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,681,3436,"The data set comprises 272 observations, each of which represents a single erup- tion and contains two variables corresponding to the duration in minutes of the erup- tion, and the time until the next eruption, also in minutes. Figure A.5 shows a plot of the time to the next eruption versus the duration of the eruptions. It can be seen that the time to the next eruption varies considerably, although knowledge of the duration of the current eruption allows it to be predicted more accurately. Note that there exist several other data sets relating to the eruptions of Old Faithful.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,682,3437,Figure A.5 Plot of the time to the next eruption in minutes (vertical axis) versus the duration of the eruption in minutes (horizontal axis) for the Old Faithful data set.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,682,3438,"Throughout the book, we use two simple synthetic data sets to illustrate many of the algorithms. The ﬁrst of these is a regression problem, based on the sinusoidal func- tion, shown in Figure A.6. The input values {xn} are generated uniformly in range (0, 1), and the corresponding target values {tn} are obtained by ﬁrst computing the corresponding values of the function sin(2πx), and then adding random noise with a Gaussian distribution having standard deviation 0.3. Various forms of this data set, having different numbers of data points, are used in the book.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,682,3439,"The second data set is a classiﬁcation problem having two classes, with equal prior probabilities, and is shown in Figure A.7. The blue class is generated from a single Gaussian while the red class comes from a mixture of two Gaussians. Be- cause we know the class priors and the class-conditional densities, it is straightfor- ward to evaluate and plot the true posterior probabilities as well as the minimum misclassiﬁcation-rate decision boundary, as shown in Figure A.7.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,683,3440,"Figure A.6 The left-hand plot shows the synthetic regression data set along with the underlying sinusoidal function from which the data points were generated. The right-hand plot shows the true conditional distribution p(t|x) from which the labels are generated, in which the green curve denotes the mean, and the shaded region spans one standard deviation on each side of the mean.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Data Sets,Appendix A,683,3441,"Figure A.7 The left plot shows the synthetic classiﬁcation data set with data from the two classes shown in red and blue. On the right is a plot of the true posterior probabilities, shown on a colour scale going from pure red denoting probability of the red class is 1 to pure blue denoting probability of the red class is 0. Because these probabilities are known, the optimal decision boundary for minimizing the misclassiﬁcation rate (which corresponds to the contour along which the posterior probabilities for each class equal 0.5) can be evaluated and is shown by the green curve. This decision boundary is also plotted on the left-hand ﬁgure.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,685,3442,"In this appendix, we summarize the main properties of some of the most widely used probability distributions, and for each distribution we list some key statistics such as the expectation E[x], the variance (or covariance), the mode, and the entropy H[x].",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,685,3443,All of these distributions are members of the exponential family and are widely used as building blocks for more sophisticated probabilistic models.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,685,3444,"This is the distribution for a single binary variable x ∈{0, 1} representing, for example, the result of ﬂipping a coin. It is governed by a single continuous parameter µ ∈[0, 1] that represents the probability of x = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,685,3445,−µ ln µ −(1 −µ) ln(1 −µ). (B.5) The Bernoulli is a special case of the binomial distribution for the case of a single observation. Its conjugate prior for µ is the beta distribution.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,686,3446,"This is a distribution over a continuous variable µ ∈[0, 1], which is often used to represent the probability for some binary event. It is governed by two parameters a and b that are constrained by a > 0 and b > 0 to ensure that the distribution can be normalized.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,686,3447,(a + b)2(a + b + 1) (B.8) mode[µ] = a −1 a + b −2.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,686,3448,"The beta is the conjugate prior for the Bernoulli distribution, for which a and b can be interpreted as the effective prior number of observations of x = 1 and x = 0, respectively. Its density is ﬁnite if a ⩾1 and b ⩾1, otherwise there is a singularity at µ = 0 and/or µ = 1. For a = b = 1, it reduces to a uniform distribution. The beta distribution is a special case of the K-state Dirichlet distribution for K = 2.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,686,3449,"The binomial distribution gives the probability of observing m occurrences of x = 1 in a set of N samples from a Bernoulli distribution, where the probability of observ- ing x = 1 is µ ∈[0, 1].",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,686,3450,"where ⌊(N + 1)µ⌋denotes the largest integer that is less than or equal to (N + 1)µ, and the quantity N m  = N! m!(N −m)! (B.14) denotes the number of ways of choosing m objects out of a total of N identical objects. Here m!, pronounced ‘factorial m’, denotes the product m × (m −1) × . . . , ×2 × 1. The particular case of the binomial distribution for N = 1 is known as the Bernoulli distribution, and for large N the binomial distribution is approximately Gaussian. The conjugate prior for µ is the beta distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,687,3451,"The Dirichlet is a multivariate distribution over K random variables 0 ⩽µk ⩽1, where k = 1, . . ., K, subject to the constraints 0 ⩽µk ⩽1, K  k=1 µk = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,687,3452,"Denoting µ = (µ1, . . . , µK)T and α = (α1, . . . , αK)T, we have Dir(µ|α) = C(α) K  k=1 µαk−1 k (B.16) E[µk] = αk α (B.17) var[µk] = αk(α −αk) α2(α + 1) (B.18) cov[µjµk] = − αjαk α2(α + 1) (B.19) mode[µk] = αk −1 α −K (B.20) E[ln µk] = ψ(αk) −ψ(α) (B.21) H[µ] = − K  k=1 (αk −1) {ψ(αk) −ψ(α)} −ln C(α) (B.22) where C(α) = Γ(α) Γ(α1) · · ·Γ(αK) (B.23) and α = K  k=1 αk.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,687,3453,"is known as the digamma function (Abramowitz and Stegun, 1965). The parameters αk are subject to the constraint αk > 0 in order to ensure that the distribution can be normalized.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,687,3454,"The Dirichlet forms the conjugate prior for the multinomial distribution and rep- resents a generalization of the beta distribution. In this case, the parameters αk can be interpreted as effective numbers of observations of the corresponding values of the K-dimensional binary observation vector x. As with the beta distribution, the Dirichlet has ﬁnite density everywhere provided αk ⩾1 for all k.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,688,3455,The Gamma is a probability distribution over a positive random variable τ > 0 governed by parameters a and b that are subject to the constraints a > 0 and b > 0 to ensure that the distribution can be normalized.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,688,3456,"ln Γ(a) −(a −1)ψ(a) −ln b + a (B.31) where ψ(·) is the digamma function deﬁned by (B.25). The gamma distribution is the conjugate prior for the precision (inverse variance) of a univariate Gaussian. For a ⩾1 the density is everywhere ﬁnite, and the special case of a = 1 is known as the exponential distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,688,3457,"The Gaussian is the most widely used distribution for continuous variables. It is also known as the normal distribution. In the case of a single variable x ∈(−∞, ∞) it is governed by two parameters, the mean µ ∈(−∞, ∞) and the variance σ2 > 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,688,3458,2 ln σ2 + 1 2 (1 + ln(2π)) .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,688,3459,"The inverse of the variance τ = 1/σ2 is called the precision, and the square root of the variance σ is called the standard deviation. The conjugate prior for µ is the Gaussian, and the conjugate prior for τ is the gamma distribution. If both µ and τ are unknown, their joint conjugate prior is the Gaussian-gamma distribution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,689,3460,"For a D-dimensional vector x, the Gaussian is governed by a D-dimensional mean vector µ and a D × D covariance matrix Σ that must be symmetric and \end{verbatim} egin{verbatim} B. PROBABILITY DISTRIBUTIONS positive-deﬁnite.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,689,3461,2 ln |Σ| + D 2 (1 + ln(2π)) .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,689,3462,"The inverse of the covariance matrix Λ = Σ−1 is the precision matrix, which is also symmetric and positive deﬁnite. Averages of random variables tend to a Gaussian, by the central limit theorem, and the sum of two Gaussian variables is again Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,689,3463,"The Gaussian is the distribution that maximizes the entropy for a given variance (or covariance). Any linear transformation of a Gaussian random variable is again Gaussian. The marginal distribution of a multivariate Gaussian with respect to a subset of the variables is itself Gaussian, and similarly the conditional distribution is also Gaussian. The conjugate prior for µ is the Gaussian, the conjugate prior for Λ is the Wishart, and the conjugate prior for (µ, Λ) is the Gaussian-Wishart.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,689,3464,"If we have a marginal Gaussian distribution for x and a conditional Gaussian distribution for y given x in the form p(x) = N(x|µ, Λ−1) (B.42) p(y|x) = N(y|Ax + b, L−1) (B.43) then the marginal distribution of y, and the conditional distribution of x given y, are given by p(y) = N(y|Aµ + b, L−1 + AΛ−1AT) (B.44) p(x|y) = N(x|Σ{ATL(y −b) + Λµ}, Σ) (B.45) where Σ = (Λ + ATLA)−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3465,"If we have a joint Gaussian distribution N(x|µ, Σ) with Λ ≡Σ−1 and we deﬁne the following partitions x =  xa xb  , µ =  µa µb  (B.47) Σ =  Σaa Σab Σba Σbb  , Λ =  Λaa Λab Λba Λbb  (B.48) then the conditional distribution p(xa|xb) is given by p(xa|xb) = N(x|µa|b, Λ−1 aa ) (B.49) µa|b = µa −Λ−1 aa Λab(xb −µb) (B.50) \end{verbatim} egin{verbatim} B. PROBABILITY DISTRIBUTIONS and the marginal distribution p(xa) is given by p(xa) = N(xa|µa, Σaa).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3466,"This is the conjugate prior distribution for a univariate Gaussian N(x|µ, λ−1) in which the mean µ and the precision λ are both unknown and is also called the normal-gamma distribution. It comprises the product of a Gaussian distribution for µ, whose precision is proportional to λ, and a gamma distribution over λ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3467,"p(µ, λ|µ0, β, a, b) = N µ|µo, (βλ)−1 Gam(λ|a, b).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3468,"This is the conjugate prior distribution for a multivariate Gaussian N(x|µ, Λ) in which both the mean µ and the precision Λ are unknown, and is also called the normal-Wishart distribution. It comprises the product of a Gaussian distribution for µ, whose precision is proportional to Λ, and a Wishart distribution over Λ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3469,"p(µ, Λ|µ0, β, W, ν) = N µ|µ0, (βΛ)−1 W(Λ|W, ν).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,690,3470,"For the particular case of a scalar x, this is equivalent to the Gaussian-gamma distri- bution.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,691,3471,"If we generalize the Bernoulli distribution to an K-dimensional binary variable x with components xk ∈{0, 1} such that  k xk = 1, then we obtain the following discrete distribution p(x) = K  k=1 µxk k (B.54) E[xk] = µk (B.55) var[xk] = µk(1 −µk) (B.56) cov[xjxk] = Ijkµk (B.57) H[x] = − M  k=1 µk ln µk (B.58) \end{verbatim} egin{verbatim} B. PROBABILITY DISTRIBUTIONS where Ijk is the j, k element of the identity matrix. Because p(xk = 1) = µk, the parameters must satisfy 0 ⩽µk ⩽1 and  k µk = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,691,3472,The multinomial distribution is a multivariate generalization of the binomial and gives the distribution over counts mk for a K-state discrete variable to be in state k given a total number of observations N.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,691,3473,"Mult(m1, m2, . . . , mK|µ, N) =  N m1m2 . . . mM  M  k=1 µmk k (B.59) E[mk] = Nµk (B.60) var[mk] = Nµk(1 −µk) (B.61) cov[mjmk] = −Nµjµk (B.62) where µ = (µ1, . . . , µK)T, and the quantity  N m1m2 . . . mK  = N! m1! . . . mK! (B.63) gives the number of ways of taking N identical objects and assigning mk of them to bin k for k = 1, . . . , K. The value of µk gives the probability of the random variable taking state k, and so these parameters are subject to the constraints 0 ⩽µk ⩽1 and  k µk = 1. The conjugate prior distribution for the parameters {µk} is the Dirichlet.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,691,3474,"The normal distribution is simply another name for the Gaussian. In this book, we use the term Gaussian throughout, although we retain the conventional use of the symbol N to denote this distribution. For consistency, we shall refer to the normal- gamma distribution as the Gaussian-gamma distribution, and similarly the normal- Wishart is called the Gaussian-Wishart.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,691,3475,"This distribution was published by William Gosset in 1908, but his employer, Gui- ness Breweries, required him to publish under a pseudonym, so he chose ‘Student’.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,692,3476,"In the univariate form, Student’s t-distribution is obtained by placing a conjugate gamma prior over the precision of a univariate Gaussian distribution and then inte- grating out the precision variable. It can therefore be viewed as an inﬁnite mixture \end{verbatim} egin{verbatim} B. PROBABILITY DISTRIBUTIONS of Gaussians having the same mean but different variances.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,692,3477,Here ν > 0 is called the number of degrees of freedom of the distribution. The particular case of ν = 1 is called the Cauchy distribution.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,692,3478,"For a D-dimensional variable x, Student’s t-distribution corresponds to marginal- izing the precision matrix of a multivariate Gaussian with respect to a conjugate Wishart prior and takes the form St(x|µ, Λ, ν) = Γ(ν/2 + D/2) Γ(ν/2) |Λ|1/2 (νπ)D/2 1 + ∆2 ν −ν/2−D/2 (B.68) E[x] = µ for ν > 1 (B.69) cov[x] = ν ν −2Λ−1 for ν > 2 (B.70) mode[x] = µ (B.71) where ∆2 is the squared Mahalanobis distance deﬁned by ∆2 = (x −µ)TΛ(x −µ).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,692,3479,"In the limit ν →∞, the t-distribution reduces to a Gaussian with mean µ and pre- cision Λ. Student’s t-distribution provides a generalization of the Gaussian whose maximum likelihood parameter values are robust to outliers.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,692,3480,"This is a simple distribution for a continuous variable x deﬁned over a ﬁnite interval x ∈[a, b] where b > a.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,693,3481,"If x has distribution U(x|0, 1), then a + (b −a)x will have distribution U(x|a, b). \end{verbatim} egin{verbatim} B. PROBABILITY DISTRIBUTIONS Von Mises The von Mises distribution, also known as the circular normal or the circular Gaus- sian, is a univariate Gaussian-like periodic distribution for a variable θ ∈[0, 2π).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,693,3482,"2πI0(m) exp {m cos(θ −θ0)} (B.77) where I0(m) is the zeroth-order Bessel function of the ﬁrst kind. The distribution has period 2π so that p(θ + 2π) = p(θ) for all θ. Care must be taken in interpret- ing this distribution because simple expectations will be dependent on the (arbitrary) choice of origin for the variable θ. The parameter θ0 is analogous to the mean of a univariate Gaussian, and the parameter m > 0, known as the concentration param- eter, is analogous to the precision (inverse variance). For large m, the von Mises distribution is approximately a Gaussian centred on θ0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,693,3483,The Wishart distribution is the conjugate prior for the precision matrix of a multi- variate Gaussian.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Probability Distributions,Appendix B,693,3484,"W(Λ|W, ν) = B(W, ν)|Λ|(ν−D−1)/2 exp  −1 2Tr(W−1Λ)  (B.78) where B(W, ν) ≡ |W|−ν/2  2νD/2 πD(D−1)/4 D  i=1 Γ ν + 1 −i 2 −1 (B.79) E[Λ] = νW (B.80) E [ln |Λ|] = D  i=1 ψ ν + 1 −i 2  + D ln 2 + ln |W| (B.81) H[Λ] = −ln B(W, ν) −(ν −D −1) 2 E [ln |Λ|] + νD 2 (B.82) where W is a D × D symmetric, positive deﬁnite matrix, and ψ(·) is the digamma function deﬁned by (B.25). The parameter ν is called the number of degrees of freedom of the distribution and is restricted to ν > D −1 to ensure that the Gamma function in the normalization factor is well-deﬁned. In one dimension, the Wishart reduces to the gamma distribution Gam(λ|a, b) given by (B.26) with parameters a = ν/2 and b = 1/2W.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,695,3485,"Appendix C. Properties of Matrices In this appendix, we gather together some useful properties and identities involving matrices and determinants. This is not intended to be an introductory tutorial, and it is assumed that the reader is already familiar with basic linear algebra. For some results, we indicate how to prove them, whereas in more complex cases we leave the interested reader to refer to standard textbooks on the subject. In all cases, we assume that inverses exist and that matrix dimensions are such that the formulae are correctly deﬁned. A comprehensive discussion of linear algebra can be found in Golub and Van Loan (1996), and an extensive collection of matrix properties is given by L¨utkepohl (1996). Matrix derivatives are discussed in Magnus and Neudecker (1999).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,695,3486,"A matrix A has elements Aij where i indexes the rows, and j indexes the columns. We use IN to denote the N × N identity matrix (also called the unit matrix), and where there is no ambiguity over dimensionality we simply use I. The transpose matrix AT has elements (AT)ij = Aji. From the deﬁnition of transpose, we have (AB)T = BTAT (C.1) which can be veriﬁed by writing out the indices. The inverse of A, denoted A−1, satisﬁes AA−1 = A−1A = I.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,695,3487,"Because ABB−1A−1 = I, we have (AB)−1 = B−1A−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,696,3488,which is easily proven by taking the transpose of (C.2) and applying (C.1). A useful identity involving matrix inverses is the following (P−1 + BTR−1B)−1BTR−1 = PBT(BPBT + R)−1.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,696,3489,"which is easily veriﬁed by right multiplying both sides by (BPBT + R). Suppose that P has dimensionality N × N while R has dimensionality M × M, so that B is M × N. Then if M ≪N, it will be much cheaper to evaluate the right-hand side of (C.5) than the left-hand side. A special case that sometimes arises is (I + AB)−1A = A(I + BA)−1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,696,3490,"Another useful identity involving inverses is the following: (A + BD−1C)−1 = A−1 −A−1B(D + CA−1B)−1CA−1 (C.7) which is known as the Woodbury identity and which can be veriﬁed by multiplying both sides by (A + BD−1C). This is useful, for instance, when A is large and diagonal, and hence easy to invert, while B has many rows but few columns (and conversely for C) so that the right-hand side is much cheaper to evaluate than the left-hand side.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,696,3491,"A set of vectors {a1, . . . , aN} is said to be linearly independent if the relation  n αnan = 0 holds only if all αn = 0. This implies that none of the vectors can be expressed as a linear combination of the remainder. The rank of a matrix is the maximum number of linearly independent rows (or equivalently the maximum number of linearly independent columns).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,696,3492,"Trace and determinant apply to square matrices. The trace Tr(A) of a matrix A is deﬁned as the sum of the elements on the leading diagonal. By writing out the indices, we see that Tr(AB) = Tr(BA).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3493,"By applying this formula multiple times to the product of three matrices, we see that Tr(ABC) = Tr(CAB) = Tr(BCA) (C.9) which is known as the cyclic property of the trace operator and which clearly extends to the product of any number of matrices. The determinant |A| of an N × N matrix A is deﬁned by |A| =  (±1)A1i1A2i2 · · · ANiN (C.10) in which the sum is taken over all products consisting of precisely one element from each row and one element from each column, with a coefﬁcient +1 or −1 according \end{verbatim} egin{verbatim} C. PROPERTIES OF MATRICES to whether the permutation i1i2 . . . iN is even or odd, respectively. Note that |I| = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3494,"Thus, for a 2 × 2 matrix, the determinant takes the form |A| =  a11 a12 a21 a22  = a11a22 −a12a21.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3495,"The determinant of a product of two matrices is given by |AB| = |A||B| (C.12) as can be shown from (C.10). Also, the determinant of an inverse matrix is given by A−1 = 1 |A| (C.13) which can be shown by taking the determinant of (C.2) and applying (C.12).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3496,"If A and B are matrices of size N × M, then IN + ABT = IM + ATB  .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3497,A useful special case is IN + abT = 1 + aTb (C.15) where a and b are N-dimensional column vectors.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3498,"Sometimes we need to consider derivatives of vectors and matrices with respect to scalars. The derivative of a vector a with respect to a scalar x is itself a vector whose components are given by ∂a ∂x  i = ∂ai ∂x (C.16) with an analogous deﬁnition for the derivative of a matrix. Derivatives with respect to vectors and matrices can also be deﬁned, for instance ∂x ∂a  i = ∂x ∂ai (C.17) and similarly  ∂a ∂b  ij = ∂ai ∂bj .",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,697,3499,The following is easily proven by writing out the components ∂ ∂x xTa = ∂ ∂x aTx = a.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,698,3500,"The derivative of the inverse of a matrix can be expressed as ∂ ∂x A−1 = −A−1 ∂A ∂x A−1 (C.21) as can be shown by differentiating the equation A−1A = I using (C.20) and then right multiplying by A−1. Also ∂ ∂x ln |A| = Tr  A−1 ∂A ∂x  (C.22) which we shall prove later. If we choose x to be one of the elements of A, we have ∂ ∂Aij Tr (AB) = Bji (C.23) as can be seen by writing out the matrices using index notation. We can write this result more compactly in the form ∂ ∂ATr (AB) = BT.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,698,3501,"With this notation, we have the following properties ∂ ∂ATr ATB = B (C.25) ∂ ∂ATr(A) = I (C.26) ∂ ∂ATr(ABAT) = A(B + BT) (C.27) which can again be proven by writing out the matrix indices. We also have ∂ ∂A ln |A| = A−1T (C.28) which follows from (C.22) and (C.26).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3502,"For a square matrix A of size M × M, the eigenvector equation is deﬁned by Aui = λiui (C.29) \end{verbatim} egin{verbatim} C. PROPERTIES OF MATRICES for i = 1, . . . , M, where ui is an eigenvector and λi is the corresponding eigenvalue.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3503,"This can be viewed as a set of M simultaneous homogeneous linear equations, and the condition for a solution is that |A −λiI| = 0 (C.30) which is known as the characteristic equation. Because this is a polynomial of order M in λi, it must have M solutions (though these need not all be distinct). The rank of A is equal to the number of nonzero eigenvalues.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3504,"Of particular interest are symmetric matrices, which arise as covariance ma- trices, kernel matrices, and Hessians. Symmetric matrices have the property that Aij = Aji, or equivalently AT = A. The inverse of a symmetric matrix is also sym- metric, as can be seen by taking the transpose of A−1A = I and using AA−1 = I together with the symmetry of I.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3505,"In general, the eigenvalues of a matrix are complex numbers, but for symmetric matrices the eigenvalues λi are real. This can be seen by ﬁrst left multiplying (C.29) by (u⋆ i )T, where ⋆denotes the complex conjugate, to give (u⋆ i )T Aui = λi (u⋆ i )T ui.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3506,Next we take the complex conjugate of (C.29) and left multiply by uT i to give uT i Au⋆ i = λ⋆ i uT i u⋆ i .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3507,"where we have used A⋆= A because we consider only real matrices A. Taking the transpose of the second of these equations, and using AT = A, we see that the left-hand sides of the two equations are equal, and hence that λ⋆ i = λi and so λi must be real.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3508,"The eigenvectors ui of a real symmetric matrix can be chosen to be orthonormal (i.e., orthogonal and of unit length) so that uT i uj = Iij (C.33) where Iij are the elements of the identity matrix I. To show this, we ﬁrst left multiply (C.29) by uT j to give uT j Aui = λiuT j ui (C.34) and hence, by exchange of indices, we have uT i Auj = λjuT i uj.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,699,3509,"We now take the transpose of the second equation and make use of the symmetry property AT = A, and then subtract the two equations to give (λi −λj) uT i uj = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3510,"Hence, for λi ̸= λj, we have uT i uj = 0, and hence ui and uj are orthogonal. If the two eigenvalues are equal, then any linear combination αui + βuj is also an eigen- vector with the same eigenvalue, so we can select one linear combination arbitrarily, \end{verbatim} egin{verbatim} C. PROPERTIES OF MATRICES and then choose the second to be orthogonal to the ﬁrst (it can be shown that the de- generate eigenvectors are never linearly dependent). Hence the eigenvectors can be chosen to be orthogonal, and by normalizing can be set to unit length. Because there are M eigenvalues, the corresponding M orthogonal eigenvectors form a complete set and so any M-dimensional vector can be expressed as a linear combination of the eigenvectors.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3511,"We can take the eigenvectors ui to be the columns of an M × M matrix U, which from orthonormality satisﬁes UTU = I.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3512,"Such a matrix is said to be orthogonal. Interestingly, the rows of this matrix are also orthogonal, so that UUT = I. To show this, note that (C.37) implies UTUU−1 = U−1 = UT and so UU−1 = UUT = I. Using (C.12), it also follows that |U| = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3513,The eigenvector equation (C.29) can be expressed in terms of U in the form AU = UΛ (C.38) where Λ is an M × M diagonal matrix whose diagonal elements are given by the eigenvalues λi.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3514,If we consider a column vector x that is transformed by an orthogonal matrix U to give a new vector x = Ux (C.39) then the length of the vector is preserved because xTx = xTUTUx = xTx (C.40) and similarly the angle between any two such vectors is preserved because xTy = xTUTUy = xTy.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3515,"Thus, multiplication by U can be interpreted as a rigid rotation of the coordinate system.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,700,3516,"From (C.38), it follows that UTAU = Λ (C.42) and because Λ is a diagonal matrix, we say that the matrix A is diagonalized by the matrix U. If we left multiply by U and right multiply by UT, we obtain A = UΛUT (C.43) Taking the inverse of this equation, and using (C.3) together with U−1 = UT, we have A−1 = UΛ−1UT.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,701,3517,These last two equations can also be written in the form A = M  i=1 λiuiuT i (C.45) A−1 = M  i=1 1 λi uiuT i .,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,701,3518,"If we take the determinant of (C.43), and use (C.12), we obtain |A| = M  i=1 λi.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,701,3519,"Similarly, taking the trace of (C.43), and using the cyclic property (C.8) of the trace operator together with UTU = I, we have Tr(A) = M  i=1 λi.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,701,3520,"We leave it as an exercise for the reader to verify (C.22) by making use of the results (C.33), (C.45), (C.46), and (C.47).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Properties of Matrices,Appendix C,701,3521,"A matrix A is said to be positive deﬁnite, denoted by A ≻0, if wTAw > 0 for all values of the vector w. Equivalently, a positive deﬁnite matrix has λi > 0 for all of its eigenvalues (as can be seen by setting w to each of the eigenvectors in turn, and by noting that an arbitrary vector can be expanded as a linear combination of the eigenvectors). Note that positive deﬁnite is not the same as all the elements being positive. For example, the matrix  1 2 3 4  (C.49) has eigenvalues λ1 ≃5.37 and λ2 ≃−0.37. A matrix is said to be positive semidef- inite if wTAw ⩾0 holds for all values of w, which is denoted A ⪰0, and is equivalent to λi ⩾0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,703,3522,"Appendix D. Calculus of Variations We can think of a function y(x) as being an operator that, for any input value x, returns an output value y. In the same way, we can deﬁne a functional F[y] to be an operator that takes a function y(x) and returns an output value F. An example of a functional is the length of a curve drawn in a two-dimensional plane in which the path of the curve is deﬁned in terms of a function. In the context of machine learning, a widely used functional is the entropy H[x] for a continuous variable x because, for any choice of probability density function p(x), it returns a scalar value representing the entropy of x under that density. Thus the entropy of p(x) could equally well have been written as H[p].",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,703,3523,"A common problem in conventional calculus is to ﬁnd a value of x that max- imizes (or minimizes) a function y(x). Similarly, in the calculus of variations we seek a function y(x) that maximizes (or minimizes) a functional F[y]. That is, of all possible functions y(x), we wish to ﬁnd the particular function for which the func- tional F[y] is a maximum (or minimum). The calculus of variations can be used, for instance, to show that the shortest path between two points is a straight line or that the maximum entropy distribution is a Gaussian.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,703,3524,"If we weren’t familiar with the rules of ordinary calculus, we could evaluate a conventional derivative dy/ dx by making a small change ϵ to the variable x and then expanding in powers of ϵ, so that y(x + ϵ) = y(x) + dy dxϵ + O(ϵ2) (D.1) and ﬁnally taking the limit ϵ →0. Similarly, for a function of several variables y(x1, . . . , xD), the corresponding partial derivatives are deﬁned by y(x1 + ϵ1, . . . , xD + ϵD) = y(x1, . . . , xD) + D  i=1 ∂y ∂xi ϵi + O(ϵ2).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,704,3525,Figure D.1 A functional derivative can be deﬁned by considering how the value of a functional F[y] changes when the function y(x) is changed to y(x) + ϵη(x) where η(x) is an arbitrary function of x.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,704,3526,"The analogous deﬁnition of a functional derivative arises when we consider how much a functional F[y] changes when we make a small change ϵη(x) to the function \end{verbatim} egin{verbatim} D. CALCULUS OF VARIATIONS y(x) y(x) + ϵη(x) x y(x), where η(x) is an arbitrary function of x, as illustrated in Figure D.1. We denote the functional derivative of E[f] with respect to f(x) by δF/δf(x), and deﬁne it by the following relation: F[y(x) + ϵη(x)] = F[y(x)] + ϵ  δF δy(x)η(x) dx + O(ϵ2).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,704,3527,"This can be seen as a natural extension of (D.2) in which F[y] now depends on a continuous set of variables, namely the values of y at all points x. Requiring that the functional be stationary with respect to small variations in the function y(x) gives  δE δy(x)η(x) dx = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,704,3528,"Because this must hold for an arbitrary choice of η(x), it follows that the functional derivative must vanish. To see this, imagine choosing a perturbation η(x) that is zero everywhere except in the neighbourhood of a point x, in which case the functional derivative must be zero at x = x. However, because this must be true for every choice of x, the functional derivative must vanish for all values of x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,704,3529,"Consider a functional that is deﬁned by an integral over a function G(y, y′, x) that depends on both y(x) and its derivative y′(x) as well as having a direct depen- dence on x F[y] =  G (y(x), y′(x), x) dx (D.5) where the value of y(x) is assumed to be ﬁxed at the boundary of the region of integration (which might be at inﬁnity). If we now consider variations in the function y(x), we obtain F[y(x) + ϵη(x)] = F[y(x)] + ϵ  ∂G ∂y η(x) + ∂G ∂y′ η′(x) dx + O(ϵ2).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3530,"We now have to cast this in the form (D.3). To do so, we integrate the second term by parts and make use of the fact that η(x) must vanish at the boundary of the integral (because y(x) is ﬁxed at the boundary). This gives F[y(x) + ϵη(x)] = F[y(x)] + ϵ  ∂G ∂y −d dx ∂G ∂y′  η(x) dx + O(ϵ2) (D.7) \end{verbatim} egin{verbatim} D. CALCULUS OF VARIATIONS from which we can read off the functional derivative by comparison with (D.3).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3531,"Requiring that the functional derivative vanishes then gives ∂G ∂y −d dx ∂G ∂y′  = 0 (D.8) which are known as the Euler-Lagrange equations. For example, if G = y(x)2 + (y′(x)) 2 (D.9) then the Euler-Lagrange equations take the form y(x) −d2y dx2 = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3532,This second order differential equation can be solved for y(x) by making use of the boundary conditions on y(x).,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3533,"Often, we consider functionals deﬁned by integrals whose integrands take the form G(y, x) and that do not depend on the derivatives of y(x). In this case, station- arity simply requires that ∂G/∂y(x) = 0 for all values of x.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3534,"If we are optimizing a functional with respect to a probability distribution, then we need to maintain the normalization constraint on the probabilities. This is often most conveniently done using a Lagrange multiplier, which then allows an uncon- Appendix E strained optimization to be performed.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Calculus of Variations,Appendix D,705,3535,"The extension of the above results to a multidimensional variable x is straight- forward. For a more comprehensive discussion of the calculus of variations, see Sagan (1969).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3536,"Lagrange multipliers, also sometimes called undetermined multipliers, are used to ﬁnd the stationary points of a function of several variables subject to one or more constraints.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3537,"Consider the problem of ﬁnding the maximum of a function f(x1, x2) subject to a constraint relating x1 and x2, which we write in the form g(x1, x2) = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3538,"One approach would be to solve the constraint equation (E.1) and thus express x2 as a function of x1 in the form x2 = h(x1). This can then be substituted into f(x1, x2) to give a function of x1 alone of the form f(x1, h(x1)). The maximum with respect to x1 could then be found by differentiation in the usual way, to give the stationary value x⋆ 1, with the corresponding value of x2 given by x⋆ 2 = h(x⋆ 1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3539,"One problem with this approach is that it may be difﬁcult to ﬁnd an analytic solution of the constraint equation that allows x2 to be expressed as an explicit func- tion of x1. Also, this approach treats x1 and x2 differently and so spoils the natural symmetry between these variables.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3540,"A more elegant, and often simpler, approach is based on the introduction of a parameter λ called a Lagrange multiplier. We shall motivate this technique from a geometrical perspective. Consider a D-dimensional variable x with components x1, . . . , xD. The constraint equation g(x) = 0 then represents a (D−1)-dimensional surface in x-space as indicated in Figure E.1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,707,3541,"We ﬁrst note that at any point on the constraint surface the gradient ∇g(x) of the constraint function will be orthogonal to the surface. To see this, consider a point x that lies on the constraint surface, and consider a nearby point x + ϵ that also lies on the surface. If we make a Taylor expansion around x, we have g(x + ϵ) ≃g(x) + ϵT∇g(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3542,"Figure E.1 A geometrical picture of the technique of La- grange multipliers in which we seek to maximize a function f(x), subject to the constraint g(x) = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3543,"Because both x and x+ϵ lie on the constraint surface, we have g(x) = g(x+ϵ) and hence ϵT∇g(x) ≃0. In the limit ∥ϵ∥→0 we have ϵT∇g(x) = 0, and because ϵ is \end{verbatim} egin{verbatim} E. LAGRANGE MULTIPLIERS If x is D dimensional, the constraint g(x) = 0 cor- responds to a subspace of dimensionality D −1, indicated by the red curve.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3544,"be solved by optimizing the Lagrangian function L(x, λ) = f(x) + λg(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3545,"then parallel to the constraint surface g(x) = 0, we see that the vector ∇g is normal to the surface.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3546,"Next we seek a point x⋆on the constraint surface such that f(x) is maximized. Such a point must have the property that the vector ∇f(x) is also orthogonal to the constraint surface, as illustrated in Figure E.1, because otherwise we could increase the value of f(x) by moving a short distance along the constraint surface. Thus ∇f and ∇g are parallel (or anti-parallel) vectors, and so there must exist a parameter λ such that ∇f + λ∇g = 0 (E.3) where λ ̸= 0 is known as a Lagrange multiplier. Note that λ can have either sign.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3547,"At this point, it is convenient to introduce the Lagrangian function deﬁned by L(x, λ) ≡f(x) + λg(x).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3548,"The constrained stationarity condition (E.3) is obtained by setting ∇xL = 0. Fur- thermore, the condition ∂L/∂λ = 0 leads to the constraint equation g(x) = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3549,"Thus to ﬁnd the maximum of a function f(x) subject to the constraint g(x) = 0, we deﬁne the Lagrangian function given by (E.4) and we then ﬁnd the stationary point of L(x, λ) with respect to both x and λ. For a D-dimensional vector x, this gives D +1 equations that determine both the stationary point x⋆and the value of λ.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3550,"If we are only interested in x⋆, then we can eliminate λ from the stationarity equa- tions without needing to ﬁnd its value (hence the term ‘undetermined multiplier’).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3551,"As a simple example, suppose we wish to ﬁnd the stationary point of the function f(x1, x2) = 1 −x2 1 −x2 2 subject to the constraint g(x1, x2) = x1 + x2 −1 = 0, as illustrated in Figure E.2. The corresponding Lagrangian function is given by L(x, λ) = 1 −x2 1 −x2 2 + λ(x1 + x2 −1).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,708,3552,"The conditions for this Lagrangian to be stationary with respect to x1, x2, and λ give the following coupled equations: −2x1 + λ = 0 (E.6) −2x2 + λ = 0 (E.7) x1 + x2 −1 = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,709,3553,"Figure E.2 A simple example of the use of Lagrange multipli- ers in which the aim is to maximize f(x1, x2) = 1 −x2 1 −x2 2 subject to the constraint g(x1, x2) = 0 where g(x1, x2) = x1 + x2 −1. The circles show contours of the function f(x1, x2), and the diagonal line shows the constraint surface g(x1, x2) = 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,709,3554,Figure E.3 Illustration of the problem of maximizing f(x) subject to the inequality constraint g(x) ⩾0.,Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,709,3555,"Solution of these equations then gives the stationary point as (x⋆ 1, x⋆ 2) = ( 1 2, 1 2), and the corresponding value for the Lagrange multiplier is λ = 1.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,709,3556,"So far, we have considered the problem of maximizing a function subject to an equality constraint of the form g(x) = 0. We now consider the problem of maxi- mizing f(x) subject to an inequality constraint of the form g(x) ⩾0, as illustrated in Figure E.3.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,709,3557,"There are now two kinds of solution possible, according to whether the con- strained stationary point lies in the region where g(x) > 0, in which case the con- straint is inactive, or whether it lies on the boundary g(x) = 0, in which case the constraint is said to be active. In the former case, the function g(x) plays no role and so the stationary condition is simply ∇f(x) = 0. This again corresponds to a stationary point of the Lagrange function (E.4) but this time with λ = 0. The latter case, where the solution lies on the boundary, is analogous to the equality con- straint discussed previously and corresponds to a stationary point of the Lagrange function (E.4) with λ ̸= 0. Now, however, the sign of the Lagrange multiplier is crucial, because the function f(x) will only be at a maximum if its gradient is ori- ented away from the region g(x) > 0, as illustrated in Figure E.3. We therefore have ∇f(x) = −λ∇g(x) for some value of λ > 0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,710,3558,"For either of these two cases, the product λg(x) = 0. Thus the solution to the ∇f(x) ∇g(x) xA xB g(x) = 0 g(x) > 0 \end{verbatim} egin{verbatim} E. LAGRANGE MULTIPLIERS problem of maximizing f(x) subject to g(x) ⩾0 is obtained by optimizing the Lagrange function (E.4) with respect to x and λ subject to the conditions g(x) ⩾ 0 (E.9) λ ⩾ 0 (E.10) λg(x) = 0 (E.11) These are known as the Karush-Kuhn-Tucker (KKT) conditions (Karush, 1939; Kuhn and Tucker, 1951).",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,710,3559,"Note that if we wish to minimize (rather than maximize) the function f(x) sub- ject to an inequality constraint g(x) ⩾0, then we minimize the Lagrangian function L(x, λ) = f(x) −λg(x) with respect to x, again subject to λ ⩾0.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,710,3560,"Finally, it is straightforward to extend the technique of Lagrange multipliers to the case of multiple equality and inequality constraints. Suppose we wish to maxi- mize f(x) subject to gj(x) = 0 for j = 1, . . . , J, and hk(x) ⩾0 for k = 1, . . . , K.",Null
Christopher M. Bishop,Pattern Recognition and Machine Learning,http://research.microsoft.com/∼cmbishop/PRML,Lagrange Multipliers,Appendix E,710,3561,"We then introduce Lagrange multipliers {λj} and {µk}, and then optimize the La- grangian function given by L(x, {λj}, {µk}) = f(x) + J  j=1 λjgj(x) + K  k=1 µkhk(x) (E.12) subject to µk ⩾0 and µkhk(x) = 0 for k = 1, . . . , K. Extensions to constrained functional derivatives are similarly straightforward. For a more detailed discussion Appendix D of the technique of Lagrange multipliers, see Nocedal and Wright (1999).",Null
